#Region
	#AutoIt3Wrapper_Icon=Poker Chips.ico
	#AutoIt3Wrapper_OutFile=OHAIOHydrav2.0.0.2.exe
	#AutoIt3Wrapper_Compression=4
	#AutoIt3Wrapper_AU3Check_Parameters=-d -w 1 -w 2 -w 3 -w- 4 -w 5 -w 6 -w 7
#EndRegion
#Au3Stripper_On
Global Const $bs_groupbox = 7
Global Const $bs_bottom = 2048
Global Const $bs_center = 768
Global Const $bs_defpushbutton = 1
Global Const $bs_left = 256
Global Const $bs_multiline = 8192
Global Const $bs_pushbox = 10
Global Const $bs_pushlike = 4096
Global Const $bs_right = 512
Global Const $bs_rightbutton = 32
Global Const $bs_top = 1024
Global Const $bs_vcenter = 3072
Global Const $bs_flat = 32768
Global Const $bs_icon = 64
Global Const $bs_bitmap = 128
Global Const $bs_notify = 16384
Global Const $bs_splitbutton = 12
Global Const $bs_defsplitbutton = 13
Global Const $bs_commandlink = 14
Global Const $bs_defcommandlink = 15
Global Const $bcsif_glyph = 1
Global Const $bcsif_image = 2
Global Const $bcsif_style = 4
Global Const $bcsif_size = 8
Global Const $bcss_nosplit = 1
Global Const $bcss_stretch = 2
Global Const $bcss_alignleft = 4
Global Const $bcss_image = 8
Global Const $button_imagelist_align_left = 0
Global Const $button_imagelist_align_right = 1
Global Const $button_imagelist_align_top = 2
Global Const $button_imagelist_align_bottom = 3
Global Const $button_imagelist_align_center = 4
Global Const $bs_3state = 5
Global Const $bs_auto3state = 6
Global Const $bs_autocheckbox = 3
Global Const $bs_checkbox = 2
Global Const $bs_radiobutton = 4
Global Const $bs_autoradiobutton = 9
Global Const $bs_ownerdraw = 11
Global Const $gui_ss_default_button = 0
Global Const $gui_ss_default_checkbox = 0
Global Const $gui_ss_default_group = 0
Global Const $gui_ss_default_radio = 0
Global Const $bcm_first = 5632
Global Const $bcm_getidealsize = ($bcm_first + 1)
Global Const $bcm_getimagelist = ($bcm_first + 3)
Global Const $bcm_getnote = ($bcm_first + 10)
Global Const $bcm_getnotelength = ($bcm_first + 11)
Global Const $bcm_getsplitinfo = ($bcm_first + 8)
Global Const $bcm_gettextmargin = ($bcm_first + 5)
Global Const $bcm_setdropdownstate = ($bcm_first + 6)
Global Const $bcm_setimagelist = ($bcm_first + 2)
Global Const $bcm_setnote = ($bcm_first + 9)
Global Const $bcm_setshield = ($bcm_first + 12)
Global Const $bcm_setsplitinfo = ($bcm_first + 7)
Global Const $bcm_settextmargin = ($bcm_first + 4)
Global Const $bm_click = 245
Global Const $bm_getcheck = 240
Global Const $bm_getimage = 246
Global Const $bm_getstate = 242
Global Const $bm_setcheck = 241
Global Const $bm_setdontclick = 248
Global Const $bm_setimage = 247
Global Const $bm_setstate = 243
Global Const $bm_setstyle = 244
Global Const $bcn_first = -1250
Global Const $bcn_dropdown = ($bcn_first + 2)
Global Const $bcn_hotitemchange = ($bcn_first + 1)
Global Const $bn_clicked = 0
Global Const $bn_paint = 1
Global Const $bn_hilite = 2
Global Const $bn_unhilite = 3
Global Const $bn_disable = 4
Global Const $bn_doubleclicked = 5
Global Const $bn_setfocus = 6
Global Const $bn_killfocus = 7
Global Const $bn_pushed = $bn_hilite
Global Const $bn_unpushed = $bn_unhilite
Global Const $bn_dblclk = $bn_doubleclicked
Global Const $bst_checked = 1
Global Const $bst_indeterminate = 2
Global Const $bst_unchecked = 0
Global Const $bst_focus = 8
Global Const $bst_pushed = 4
Global Const $bst_dontclick = 128
Global Const $cb_err = -1
Global Const $cb_errattribute = -3
Global Const $cb_errrequired = -4
Global Const $cb_errspace = -2
Global Const $cb_okay = 0
Global Const $state_system_invisible = 32768
Global Const $state_system_pressed = 8
Global Const $cbs_autohscroll = 64
Global Const $cbs_disablenoscroll = 2048
Global Const $cbs_dropdown = 2
Global Const $cbs_dropdownlist = 3
Global Const $cbs_hasstrings = 512
Global Const $cbs_lowercase = 16384
Global Const $cbs_nointegralheight = 1024
Global Const $cbs_oemconvert = 128
Global Const $cbs_ownerdrawfixed = 16
Global Const $cbs_ownerdrawvariable = 32
Global Const $cbs_simple = 1
Global Const $cbs_sort = 256
Global Const $cbs_uppercase = 8192
Global Const $cbm_first = 5888
Global Const $cb_addstring = 323
Global Const $cb_deletestring = 324
Global Const $cb_dir = 325
Global Const $cb_findstring = 332
Global Const $cb_findstringexact = 344
Global Const $cb_getcomboboxinfo = 356
Global Const $cb_getcount = 326
Global Const $cb_getcuebanner = ($cbm_first + 4)
Global Const $cb_getcursel = 327
Global Const $cb_getdroppedcontrolrect = 338
Global Const $cb_getdroppedstate = 343
Global Const $cb_getdroppedwidth = 351
Global Const $cb_geteditsel = 320
Global Const $cb_getextendedui = 342
Global Const $cb_gethorizontalextent = 349
Global Const $cb_getitemdata = 336
Global Const $cb_getitemheight = 340
Global Const $cb_getlbtext = 328
Global Const $cb_getlbtextlen = 329
Global Const $cb_getlocale = 346
Global Const $cb_getminvisible = 5890
Global Const $cb_gettopindex = 347
Global Const $cb_initstorage = 353
Global Const $cb_limittext = 321
Global Const $cb_resetcontent = 331
Global Const $cb_insertstring = 330
Global Const $cb_selectstring = 333
Global Const $cb_setcuebanner = ($cbm_first + 3)
Global Const $cb_setcursel = 334
Global Const $cb_setdroppedwidth = 352
Global Const $cb_seteditsel = 322
Global Const $cb_setextendedui = 341
Global Const $cb_sethorizontalextent = 350
Global Const $cb_setitemdata = 337
Global Const $cb_setitemheight = 339
Global Const $cb_setlocale = 345
Global Const $cb_setminvisible = 5889
Global Const $cb_settopindex = 348
Global Const $cb_showdropdown = 335
Global Const $cbn_closeup = 8
Global Const $cbn_dblclk = 2
Global Const $cbn_dropdown = 7
Global Const $cbn_editchange = 5
Global Const $cbn_editupdate = 6
Global Const $cbn_errspace = (-1)
Global Const $cbn_killfocus = 4
Global Const $cbn_selchange = 1
Global Const $cbn_selendcancel = 10
Global Const $cbn_selendok = 9
Global Const $cbn_setfocus = 3
Global Const $cbes_ex_casesensitive = 16
Global Const $cbes_ex_noeditimage = 1
Global Const $cbes_ex_noeditimageindent = 2
Global Const $cbes_ex_nosizelimit = 8
Global Const $__comboboxconstant_wm_user = 1024
Global Const $cbem_deleteitem = $cb_deletestring
Global Const $cbem_getcombocontrol = ($__comboboxconstant_wm_user + 6)
Global Const $cbem_geteditcontrol = ($__comboboxconstant_wm_user + 7)
Global Const $cbem_getexstyle = ($__comboboxconstant_wm_user + 9)
Global Const $cbem_getextendedstyle = ($__comboboxconstant_wm_user + 9)
Global Const $cbem_getimagelist = ($__comboboxconstant_wm_user + 3)
Global Const $cbem_getitema = ($__comboboxconstant_wm_user + 4)
Global Const $cbem_getitemw = ($__comboboxconstant_wm_user + 13)
Global Const $cbem_getunicodeformat = 8192 + 6
Global Const $cbem_haseditchanged = ($__comboboxconstant_wm_user + 10)
Global Const $cbem_insertitema = ($__comboboxconstant_wm_user + 1)
Global Const $cbem_insertitemw = ($__comboboxconstant_wm_user + 11)
Global Const $cbem_setexstyle = ($__comboboxconstant_wm_user + 8)
Global Const $cbem_setextendedstyle = ($__comboboxconstant_wm_user + 14)
Global Const $cbem_setimagelist = ($__comboboxconstant_wm_user + 2)
Global Const $cbem_setitema = ($__comboboxconstant_wm_user + 5)
Global Const $cbem_setitemw = ($__comboboxconstant_wm_user + 12)
Global Const $cbem_setunicodeformat = 8192 + 5
Global Const $cbem_setwindowtheme = 8192 + 11
Global Const $cben_first = (-800)
Global Const $cben_last = (-830)
Global Const $cben_beginedit = ($cben_first - 4)
Global Const $cben_deleteitem = ($cben_first - 2)
Global Const $cben_dragbegina = ($cben_first - 8)
Global Const $cben_dragbeginw = ($cben_first - 9)
Global Const $cben_endedita = ($cben_first - 5)
Global Const $cben_endeditw = ($cben_first - 6)
Global Const $cben_getdispinfo = ($cben_first + 0)
Global Const $cben_getdispinfoa = ($cben_first + 0)
Global Const $cben_getdispinfow = ($cben_first - 7)
Global Const $cben_insertitem = ($cben_first - 1)
Global Const $cbeif_di_setitem = 268435456
Global Const $cbeif_image = 2
Global Const $cbeif_indent = 16
Global Const $cbeif_lparam = 32
Global Const $cbeif_overlay = 8
Global Const $cbeif_selectedimage = 4
Global Const $cbeif_text = 1
Global Const $gui_ss_default_combo = 2097218
Global Const $es_left = 0
Global Const $es_center = 1
Global Const $es_right = 2
Global Const $es_multiline = 4
Global Const $es_uppercase = 8
Global Const $es_lowercase = 16
Global Const $es_password = 32
Global Const $es_autovscroll = 64
Global Const $es_autohscroll = 128
Global Const $es_nohidesel = 256
Global Const $es_oemconvert = 1024
Global Const $es_readonly = 2048
Global Const $es_wantreturn = 4096
Global Const $es_number = 8192
Global Const $ec_err = -1
Global Const $ecm_first = 5376
Global Const $em_canundo = 198
Global Const $em_charfrompos = 215
Global Const $em_emptyundobuffer = 205
Global Const $em_fmtlines = 200
Global Const $em_getcuebanner = ($ecm_first + 2)
Global Const $em_getfirstvisibleline = 206
Global Const $em_gethandle = 189
Global Const $em_getimestatus = 217
Global Const $em_getlimittext = 213
Global Const $em_getline = 196
Global Const $em_getlinecount = 186
Global Const $em_getmargins = 212
Global Const $em_getmodify = 184
Global Const $em_getpasswordchar = 210
Global Const $em_getrect = 178
Global Const $em_getsel = 176
Global Const $em_getthumb = 190
Global Const $em_getwordbreakproc = 209
Global Const $em_hideballoontip = ($ecm_first + 4)
Global Const $em_limittext = 197
Global Const $em_linefromchar = 201
Global Const $em_lineindex = 187
Global Const $em_linelength = 193
Global Const $em_linescroll = 182
Global Const $em_posfromchar = 214
Global Const $em_replacesel = 194
Global Const $em_scroll = 181
Global Const $em_scrollcaret = 183
Global Const $em_setcuebanner = ($ecm_first + 1)
Global Const $em_sethandle = 188
Global Const $em_setimestatus = 216
Global Const $em_setlimittext = $em_limittext
Global Const $em_setmargins = 211
Global Const $em_setmodify = 185
Global Const $em_setpasswordchar = 204
Global Const $em_setreadonly = 207
Global Const $em_setrect = 179
Global Const $em_setrectnp = 180
Global Const $em_setsel = 177
Global Const $em_settabstops = 203
Global Const $em_setwordbreakproc = 208
Global Const $em_showballoontip = ($ecm_first + 3)
Global Const $em_undo = 199
Global Const $ec_leftmargin = 1
Global Const $ec_rightmargin = 2
Global Const $ec_usefontinfo = 65535
Global Const $emsis_compositionstring = 1
Global Const $eimes_getcompstratonce = 1
Global Const $eimes_cancelcompstrinfocus = 2
Global Const $eimes_completecompstrkillfocus = 4
Global Const $en_align_ltr_ec = 1792
Global Const $en_align_rtl_ec = 1793
Global Const $en_change = 768
Global Const $en_errspace = 1280
Global Const $en_hscroll = 1537
Global Const $en_killfocus = 512
Global Const $en_maxtext = 1281
Global Const $en_setfocus = 256
Global Const $en_update = 1024
Global Const $en_vscroll = 1538
Global Const $gui_ss_default_edit = 3150016
Global Const $gui_ss_default_input = 128
Global Const $gui_event_single = 0
Global Const $gui_event_array = 1
Global Const $gui_event_none = 0
Global Const $gui_event_close = -3
Global Const $gui_event_minimize = -4
Global Const $gui_event_restore = -5
Global Const $gui_event_maximize = -6
Global Const $gui_event_primarydown = -7
Global Const $gui_event_primaryup = -8
Global Const $gui_event_secondarydown = -9
Global Const $gui_event_secondaryup = -10
Global Const $gui_event_mousemove = -11
Global Const $gui_event_resized = -12
Global Const $gui_event_dropped = -13
Global Const $gui_rundefmsg = "GUI_RUNDEFMSG"
Global Const $gui_avistop = 0
Global Const $gui_avistart = 1
Global Const $gui_aviclose = 2
Global Const $gui_checked = 1
Global Const $gui_indeterminate = 2
Global Const $gui_unchecked = 4
Global Const $gui_dropaccepted = 8
Global Const $gui_nodropaccepted = 4096
Global Const $gui_acceptfiles = $gui_dropaccepted
Global Const $gui_show = 16
Global Const $gui_hide = 32
Global Const $gui_enable = 64
Global Const $gui_disable = 128
Global Const $gui_focus = 256
Global Const $gui_nofocus = 8192
Global Const $gui_defbutton = 512
Global Const $gui_expand = 1024
Global Const $gui_ontop = 2048
Global Const $gui_fontnormal = 0
Global Const $gui_fontitalic = 2
Global Const $gui_fontunder = 4
Global Const $gui_fontstrike = 8
Global Const $gui_dockauto = 1
Global Const $gui_dockleft = 2
Global Const $gui_dockright = 4
Global Const $gui_dockhcenter = 8
Global Const $gui_docktop = 32
Global Const $gui_dockbottom = 64
Global Const $gui_dockvcenter = 128
Global Const $gui_dockwidth = 256
Global Const $gui_dockheight = 512
Global Const $gui_docksize = 768
Global Const $gui_dockmenubar = 544
Global Const $gui_dockstatebar = 576
Global Const $gui_dockall = 802
Global Const $gui_dockborders = 102
Global Const $gui_gr_close = 1
Global Const $gui_gr_line = 2
Global Const $gui_gr_bezier = 4
Global Const $gui_gr_move = 6
Global Const $gui_gr_color = 8
Global Const $gui_gr_rect = 10
Global Const $gui_gr_ellipse = 12
Global Const $gui_gr_pie = 14
Global Const $gui_gr_dot = 16
Global Const $gui_gr_pixel = 18
Global Const $gui_gr_hint = 20
Global Const $gui_gr_refresh = 22
Global Const $gui_gr_pensize = 24
Global Const $gui_gr_nobkcolor = -2
Global Const $gui_bkcolor_default = -1
Global Const $gui_bkcolor_transparent = -2
Global Const $gui_bkcolor_lv_alternate = -33554432
Global Const $gui_read_default = 0
Global Const $gui_read_extended = 1
Global Const $gui_cursor_nooverride = 0
Global Const $gui_cursor_override = 1
Global Const $gui_ws_ex_parentdrag = 1048576
Global Const $ss_left = 0
Global Const $ss_center = 1
Global Const $ss_right = 2
Global Const $ss_icon = 3
Global Const $ss_blackrect = 4
Global Const $ss_grayrect = 5
Global Const $ss_whiterect = 6
Global Const $ss_blackframe = 7
Global Const $ss_grayframe = 8
Global Const $ss_whiteframe = 9
Global Const $ss_simple = 11
Global Const $ss_leftnowordwrap = 12
Global Const $ss_bitmap = 14
Global Const $ss_enhmetafile = 15
Global Const $ss_etchedhorz = 16
Global Const $ss_etchedvert = 17
Global Const $ss_etchedframe = 18
Global Const $ss_realsizecontrol = 64
Global Const $ss_noprefix = 128
Global Const $ss_notify = 256
Global Const $ss_centerimage = 512
Global Const $ss_rightjust = 1024
Global Const $ss_sunken = 4096
Global Const $gui_ss_default_label = 0
Global Const $gui_ss_default_graphic = 0
Global Const $gui_ss_default_icon = $ss_notify
Global Const $gui_ss_default_pic = $ss_notify
Global Const $stm_seticon = 368
Global Const $stm_geticon = 369
Global Const $stm_setimage = 370
Global Const $stm_getimage = 371
Global Const $wc_animate = "SysAnimate32"
Global Const $wc_button = "Button"
Global Const $wc_combobox = "ComboBox"
Global Const $wc_comboboxex = "ComboBoxEx32"
Global Const $wc_datetimepick = "SysDateTimePick32"
Global Const $wc_edit = "Edit"
Global Const $wc_header = "SysHeader32"
Global Const $wc_hotkey = "msctls_hotkey32"
Global Const $wc_ipaddress = "SysIPAddress32"
Global Const $wc_link = "SysLink"
Global Const $wc_listbox = "ListBox"
Global Const $wc_listview = "SysListView32"
Global Const $wc_monthcal = "SysMonthCal32"
Global Const $wc_nativefontctl = "NativeFontCtl"
Global Const $wc_pagescroller = "SysPager"
Global Const $wc_progress = "msctls_progress32"
Global Const $wc_rebar = "ReBarWindow32"
Global Const $wc_scrollbar = "ScrollBar"
Global Const $wc_static = "Static"
Global Const $wc_statusbar = "msctls_statusbar32"
Global Const $wc_tabcontrol = "SysTabControl32"
Global Const $wc_toolbar = "ToolbarWindow32"
Global Const $wc_tooltips = "tooltips_class32"
Global Const $wc_trackbar = "msctls_trackbar32"
Global Const $wc_treeview = "SysTreeView32"
Global Const $wc_updown = "msctls_updown32"
Global Const $ws_overlapped = 0
Global Const $ws_tiled = $ws_overlapped
Global Const $ws_maximizebox = 65536
Global Const $ws_minimizebox = 131072
Global Const $ws_tabstop = 65536
Global Const $ws_group = 131072
Global Const $ws_sizebox = 262144
Global Const $ws_thickframe = $ws_sizebox
Global Const $ws_sysmenu = 524288
Global Const $ws_hscroll = 1048576
Global Const $ws_vscroll = 2097152
Global Const $ws_dlgframe = 4194304
Global Const $ws_border = 8388608
Global Const $ws_caption = 12582912
Global Const $ws_overlappedwindow = BitOR($ws_caption, $ws_maximizebox, $ws_minimizebox, $ws_overlapped, $ws_sysmenu, $ws_thickframe)
Global Const $ws_tiledwindow = $ws_overlappedwindow
Global Const $ws_maximize = 16777216
Global Const $ws_clipchildren = 33554432
Global Const $ws_clipsiblings = 67108864
Global Const $ws_disabled = 134217728
Global Const $ws_visible = 268435456
Global Const $ws_minimize = 536870912
Global Const $ws_iconic = $ws_minimize
Global Const $ws_child = 1073741824
Global Const $ws_childwindow = $ws_child
Global Const $ws_popup = -2147483648
Global Const $ws_popupwindow = -2138570752
Global Const $ds_3dlook = 4
Global Const $ds_absalign = 1
Global Const $ds_center = 2048
Global Const $ds_centermouse = 4096
Global Const $ds_contexthelp = 8192
Global Const $ds_control = 1024
Global Const $ds_fixedsys = 8
Global Const $ds_localedit = 32
Global Const $ds_modalframe = 128
Global Const $ds_nofailcreate = 16
Global Const $ds_noidlemsg = 256
Global Const $ds_setfont = 64
Global Const $ds_setforeground = 512
Global Const $ds_shellfont = BitOR($ds_fixedsys, $ds_setfont)
Global Const $ds_sysmodal = 2
Global Const $ws_ex_acceptfiles = 16
Global Const $ws_ex_appwindow = 262144
Global Const $ws_ex_composited = 33554432
Global Const $ws_ex_controlparent = 65536
Global Const $ws_ex_clientedge = 512
Global Const $ws_ex_contexthelp = 1024
Global Const $ws_ex_dlgmodalframe = 1
Global Const $ws_ex_layered = 524288
Global Const $ws_ex_layoutrtl = 4194304
Global Const $ws_ex_left = 0
Global Const $ws_ex_leftscrollbar = 16384
Global Const $ws_ex_ltrreading = 0
Global Const $ws_ex_mdichild = 64
Global Const $ws_ex_noactivate = 134217728
Global Const $ws_ex_noinheritlayout = 1048576
Global Const $ws_ex_noparentnotify = 4
Global Const $ws_ex_right = 4096
Global Const $ws_ex_rightscrollbar = 0
Global Const $ws_ex_rtlreading = 8192
Global Const $ws_ex_staticedge = 131072
Global Const $ws_ex_toolwindow = 128
Global Const $ws_ex_topmost = 8
Global Const $ws_ex_transparent = 32
Global Const $ws_ex_windowedge = 256
Global Const $ws_ex_overlappedwindow = BitOR($ws_ex_clientedge, $ws_ex_windowedge)
Global Const $ws_ex_palettewindow = BitOR($ws_ex_toolwindow, $ws_ex_topmost, $ws_ex_windowedge)
Global Const $wm_null = 0
Global Const $wm_create = 1
Global Const $wm_destroy = 2
Global Const $wm_move = 3
Global Const $wm_sizewait = 4
Global Const $wm_size = 5
Global Const $wm_activate = 6
Global Const $wm_setfocus = 7
Global Const $wm_killfocus = 8
Global Const $wm_setvisible = 9
Global Const $wm_enable = 10
Global Const $wm_setredraw = 11
Global Const $wm_settext = 12
Global Const $wm_gettext = 13
Global Const $wm_gettextlength = 14
Global Const $wm_paint = 15
Global Const $wm_close = 16
Global Const $wm_queryendsession = 17
Global Const $wm_quit = 18
Global Const $wm_erasebkgnd = 20
Global Const $wm_queryopen = 19
Global Const $wm_syscolorchange = 21
Global Const $wm_endsession = 22
Global Const $wm_systemerror = 23
Global Const $wm_showwindow = 24
Global Const $wm_ctlcolor = 25
Global Const $wm_settingchange = 26
Global Const $wm_wininichange = 26
Global Const $wm_devmodechange = 27
Global Const $wm_activateapp = 28
Global Const $wm_fontchange = 29
Global Const $wm_timechange = 30
Global Const $wm_cancelmode = 31
Global Const $wm_setcursor = 32
Global Const $wm_mouseactivate = 33
Global Const $wm_childactivate = 34
Global Const $wm_queuesync = 35
Global Const $wm_getminmaxinfo = 36
Global Const $wm_logoff = 37
Global Const $wm_painticon = 38
Global Const $wm_iconerasebkgnd = 39
Global Const $wm_nextdlgctl = 40
Global Const $wm_alttabactive = 41
Global Const $wm_spoolerstatus = 42
Global Const $wm_drawitem = 43
Global Const $wm_measureitem = 44
Global Const $wm_deleteitem = 45
Global Const $wm_vkeytoitem = 46
Global Const $wm_chartoitem = 47
Global Const $wm_setfont = 48
Global Const $wm_getfont = 49
Global Const $wm_sethotkey = 50
Global Const $wm_gethotkey = 51
Global Const $wm_filesyschange = 52
Global Const $wm_isactiveicon = 53
Global Const $wm_queryparkicon = 54
Global Const $wm_querydragicon = 55
Global Const $wm_winhelp = 56
Global Const $wm_compareitem = 57
Global Const $wm_fullscreen = 58
Global Const $wm_clientshutdown = 59
Global Const $wm_ddemlevent = 60
Global Const $wm_getobject = 61
Global Const $wm_calcscroll = 63
Global Const $wm_testing = 64
Global Const $wm_compacting = 65
Global Const $wm_otherwindowcreated = 66
Global Const $wm_otherwindowdestroyed = 67
Global Const $wm_commnotify = 68
Global Const $wm_mediastatuschange = 69
Global Const $wm_windowposchanging = 70
Global Const $wm_windowposchanged = 71
Global Const $wm_power = 72
Global Const $wm_copyglobaldata = 73
Global Const $wm_copydata = 74
Global Const $wm_canceljournal = 75
Global Const $wm_logonnotify = 76
Global Const $wm_keyf1 = 77
Global Const $wm_notify = 78
Global Const $wm_access_window = 79
Global Const $wm_inputlangchangerequest = 80
Global Const $wm_inputlangchange = 81
Global Const $wm_tcard = 82
Global Const $wm_help = 83
Global Const $wm_userchanged = 84
Global Const $wm_notifyformat = 85
Global Const $wm_qm_activate = 96
Global Const $wm_hook_do_callback = 97
Global Const $wm_syscopydata = 98
Global Const $wm_finaldestroy = 112
Global Const $wm_measureitem_clientdata = 113
Global Const $wm_contextmenu = 123
Global Const $wm_stylechanging = 124
Global Const $wm_stylechanged = 125
Global Const $wm_displaychange = 126
Global Const $wm_geticon = 127
Global Const $wm_seticon = 128
Global Const $wm_nccreate = 129
Global Const $wm_ncdestroy = 130
Global Const $wm_nccalcsize = 131
Global Const $wm_nchittest = 132
Global Const $wm_ncpaint = 133
Global Const $wm_ncactivate = 134
Global Const $wm_getdlgcode = 135
Global Const $wm_syncpaint = 136
Global Const $wm_synctask = 137
Global Const $wm_kludgeminrect = 139
Global Const $wm_lpkdrawswitchwnd = 140
Global Const $wm_uahdestroywindow = 144
Global Const $wm_uahdrawmenu = 145
Global Const $wm_uahdrawmenuitem = 146
Global Const $wm_uahinitmenu = 147
Global Const $wm_uahmeasuremenuitem = 148
Global Const $wm_uahncpaintmenupopup = 149
Global Const $wm_ncmousemove = 160
Global Const $wm_nclbuttondown = 161
Global Const $wm_nclbuttonup = 162
Global Const $wm_nclbuttondblclk = 163
Global Const $wm_ncrbuttondown = 164
Global Const $wm_ncrbuttonup = 165
Global Const $wm_ncrbuttondblclk = 166
Global Const $wm_ncmbuttondown = 167
Global Const $wm_ncmbuttonup = 168
Global Const $wm_ncmbuttondblclk = 169
Global Const $wm_ncxbuttondown = 171
Global Const $wm_ncxbuttonup = 172
Global Const $wm_ncxbuttondblclk = 173
Global Const $wm_ncuahdrawcaption = 174
Global Const $wm_ncuahdrawframe = 175
Global Const $wm_input_device_change = 254
Global Const $wm_input = 255
Global Const $wm_keydown = 256
Global Const $wm_keyfirst = 256
Global Const $wm_keyup = 257
Global Const $wm_char = 258
Global Const $wm_deadchar = 259
Global Const $wm_syskeydown = 260
Global Const $wm_syskeyup = 261
Global Const $wm_syschar = 262
Global Const $wm_sysdeadchar = 263
Global Const $wm_yomichar = 264
Global Const $wm_keylast = 265
Global Const $wm_unichar = 265
Global Const $wm_convertrequest = 266
Global Const $wm_convertresult = 267
Global Const $wm_im_info = 268
Global Const $wm_ime_startcomposition = 269
Global Const $wm_ime_endcomposition = 270
Global Const $wm_ime_composition = 271
Global Const $wm_ime_keylast = 271
Global Const $wm_initdialog = 272
Global Const $wm_command = 273
Global Const $wm_syscommand = 274
Global Const $wm_timer = 275
Global Const $wm_hscroll = 276
Global Const $wm_vscroll = 277
Global Const $wm_initmenu = 278
Global Const $wm_initmenupopup = 279
Global Const $wm_systimer = 280
Global Const $wm_gesture = 281
Global Const $wm_gesturenotify = 282
Global Const $wm_gestureinput = 283
Global Const $wm_gesturenotified = 284
Global Const $wm_menuselect = 287
Global Const $wm_menuchar = 288
Global Const $wm_enteridle = 289
Global Const $wm_menurbuttonup = 290
Global Const $wm_menudrag = 291
Global Const $wm_menugetobject = 292
Global Const $wm_uninitmenupopup = 293
Global Const $wm_menucommand = 294
Global Const $wm_changeuistate = 295
Global Const $wm_updateuistate = 296
Global Const $wm_queryuistate = 297
Global Const $wm_lbtrackpoint = 305
Global Const $wm_ctlcolormsgbox = 306
Global Const $wm_ctlcoloredit = 307
Global Const $wm_ctlcolorlistbox = 308
Global Const $wm_ctlcolorbtn = 309
Global Const $wm_ctlcolordlg = 310
Global Const $wm_ctlcolorscrollbar = 311
Global Const $wm_ctlcolorstatic = 312
Global Const $mn_gethmenu = 481
Global Const $wm_parentnotify = 528
Global Const $wm_entermenuloop = 529
Global Const $wm_exitmenuloop = 530
Global Const $wm_nextmenu = 531
Global Const $wm_sizing = 532
Global Const $wm_capturechanged = 533
Global Const $wm_moving = 534
Global Const $wm_powerbroadcast = 536
Global Const $wm_devicechange = 537
Global Const $wm_mdicreate = 544
Global Const $wm_mdidestroy = 545
Global Const $wm_mdiactivate = 546
Global Const $wm_mdirestore = 547
Global Const $wm_mdinext = 548
Global Const $wm_mdimaximize = 549
Global Const $wm_mditile = 550
Global Const $wm_mdicascade = 551
Global Const $wm_mdiiconarrange = 552
Global Const $wm_mdigetactive = 553
Global Const $wm_dropobject = 554
Global Const $wm_querydropobject = 555
Global Const $wm_begindrag = 556
Global Const $wm_dragloop = 557
Global Const $wm_dragselect = 558
Global Const $wm_dragmove = 559
Global Const $wm_mdisetmenu = 560
Global Const $wm_entersizemove = 561
Global Const $wm_exitsizemove = 562
Global Const $wm_dropfiles = 563
Global Const $wm_mdirefreshmenu = 564
Global Const $wm_touch = 576
Global Const $wm_ime_setcontext = 641
Global Const $wm_ime_notify = 642
Global Const $wm_ime_control = 643
Global Const $wm_ime_compositionfull = 644
Global Const $wm_ime_select = 645
Global Const $wm_ime_char = 646
Global Const $wm_ime_system = 647
Global Const $wm_ime_request = 648
Global Const $wm_ime_keydown = 656
Global Const $wm_ime_keyup = 657
Global Const $wm_ncmousehover = 672
Global Const $wm_mousehover = 673
Global Const $wm_ncmouseleave = 674
Global Const $wm_mouseleave = 675
Global Const $wm_wtssession_change = 689
Global Const $wm_tablet_first = 704
Global Const $wm_tablet_last = 735
Global Const $wm_cut = 768
Global Const $wm_copy = 769
Global Const $wm_paste = 770
Global Const $wm_clear = 771
Global Const $wm_undo = 772
Global Const $wm_paletteischanging = 784
Global Const $wm_hotkey = 786
Global Const $wm_palettechanged = 785
Global Const $wm_sysmenu = 787
Global Const $wm_hookmsg = 788
Global Const $wm_exitprocess = 789
Global Const $wm_wakethread = 790
Global Const $wm_print = 791
Global Const $wm_printclient = 792
Global Const $wm_appcommand = 793
Global Const $wm_querynewpalette = 783
Global Const $wm_themechanged = 794
Global Const $wm_uahinit = 795
Global Const $wm_desktopnotify = 796
Global Const $wm_clipboardupdate = 797
Global Const $wm_dwmcompositionchanged = 798
Global Const $wm_dwmncrenderingchanged = 799
Global Const $wm_dwmcolorizationcolorchanged = 800
Global Const $wm_dwmwindowmaximizedchange = 801
Global Const $wm_dwmexileframe = 802
Global Const $wm_dwmsendiconicthumbnail = 803
Global Const $wm_magnification_started = 804
Global Const $wm_magnification_ended = 805
Global Const $wm_dwmsendiconiclivepreviewbitmap = 806
Global Const $wm_dwmthumbnailsizechanged = 807
Global Const $wm_magnification_output = 808
Global Const $wm_measurecontrol = 816
Global Const $wm_getactiontext = 817
Global Const $wm_forwardkeydown = 819
Global Const $wm_forwardkeyup = 820
Global Const $wm_gettitlebarinfoex = 831
Global Const $wm_notifywow = 832
Global Const $wm_handheldfirst = 856
Global Const $wm_handheldlast = 863
Global Const $wm_afxfirst = 864
Global Const $wm_afxlast = 895
Global Const $wm_penwinfirst = 896
Global Const $wm_penwinlast = 911
Global Const $wm_dde_initiate = 992
Global Const $wm_dde_terminate = 993
Global Const $wm_dde_advise = 994
Global Const $wm_dde_unadvise = 995
Global Const $wm_dde_ack = 996
Global Const $wm_dde_data = 997
Global Const $wm_dde_request = 998
Global Const $wm_dde_poke = 999
Global Const $wm_dde_execute = 1000
Global Const $wm_dbnotification = 1021
Global Const $wm_netconnect = 1022
Global Const $wm_hibernate = 1023
Global Const $wm_user = 1024
Global Const $wm_app = 32768
Global Const $nm_first = 0
Global Const $nm_outofmemory = $nm_first - 1
Global Const $nm_click = $nm_first - 2
Global Const $nm_dblclk = $nm_first - 3
Global Const $nm_return = $nm_first - 4
Global Const $nm_rclick = $nm_first - 5
Global Const $nm_rdblclk = $nm_first - 6
Global Const $nm_setfocus = $nm_first - 7
Global Const $nm_killfocus = $nm_first - 8
Global Const $nm_customdraw = $nm_first - 12
Global Const $nm_hover = $nm_first - 13
Global Const $nm_nchittest = $nm_first - 14
Global Const $nm_keydown = $nm_first - 15
Global Const $nm_releasedcapture = $nm_first - 16
Global Const $nm_setcursor = $nm_first - 17
Global Const $nm_char = $nm_first - 18
Global Const $nm_tooltipscreated = $nm_first - 19
Global Const $nm_ldown = $nm_first - 20
Global Const $nm_rdown = $nm_first - 21
Global Const $nm_themechanged = $nm_first - 22
Global Const $wm_mousefirst = 512
Global Const $wm_mousemove = 512
Global Const $wm_lbuttondown = 513
Global Const $wm_lbuttonup = 514
Global Const $wm_lbuttondblclk = 515
Global Const $wm_rbuttondown = 516
Global Const $wm_rbuttonup = 517
Global Const $wm_rbuttondblclk = 518
Global Const $wm_mbuttondown = 519
Global Const $wm_mbuttonup = 520
Global Const $wm_mbuttondblclk = 521
Global Const $wm_mousewheel = 522
Global Const $wm_xbuttondown = 523
Global Const $wm_xbuttonup = 524
Global Const $wm_xbuttondblclk = 525
Global Const $wm_mousehwheel = 526
Global Const $ps_solid = 0
Global Const $ps_dash = 1
Global Const $ps_dot = 2
Global Const $ps_dashdot = 3
Global Const $ps_dashdotdot = 4
Global Const $ps_null = 5
Global Const $ps_insideframe = 6
Global Const $ps_userstyle = 7
Global Const $ps_alternate = 8
Global Const $ps_endcap_round = 0
Global Const $ps_endcap_square = 256
Global Const $ps_endcap_flat = 512
Global Const $ps_join_bevel = 4096
Global Const $ps_join_miter = 8192
Global Const $ps_join_round = 0
Global Const $ps_geometric = 65536
Global Const $ps_cosmetic = 0
Global Const $lwa_alpha = 2
Global Const $lwa_colorkey = 1
Global Const $rgn_and = 1
Global Const $rgn_or = 2
Global Const $rgn_xor = 3
Global Const $rgn_diff = 4
Global Const $rgn_copy = 5
Global Const $errorregion = 0
Global Const $nullregion = 1
Global Const $simpleregion = 2
Global Const $complexregion = 3
Global Const $transparent = 1
Global Const $opaque = 2
Global Const $ccm_first = 8192
Global Const $ccm_getunicodeformat = ($ccm_first + 6)
Global Const $ccm_setunicodeformat = ($ccm_first + 5)
Global Const $ccm_setbkcolor = $ccm_first + 1
Global Const $ccm_setcolorscheme = $ccm_first + 2
Global Const $ccm_getcolorscheme = $ccm_first + 3
Global Const $ccm_getdroptarget = $ccm_first + 4
Global Const $ccm_setwindowtheme = $ccm_first + 11
Global Const $ga_parent = 1
Global Const $ga_root = 2
Global Const $ga_rootowner = 3
Global Const $sm_cxscreen = 0
Global Const $sm_cyscreen = 1
Global Const $sm_cxvscroll = 2
Global Const $sm_cyhscroll = 3
Global Const $sm_cycaption = 4
Global Const $sm_cxborder = 5
Global Const $sm_cyborder = 6
Global Const $sm_cxdlgframe = 7
Global Const $sm_cydlgframe = 8
Global Const $sm_cyvthumb = 9
Global Const $sm_cxhthumb = 10
Global Const $sm_cxicon = 11
Global Const $sm_cyicon = 12
Global Const $sm_cxcursor = 13
Global Const $sm_cycursor = 14
Global Const $sm_cymenu = 15
Global Const $sm_cxfullscreen = 16
Global Const $sm_cyfullscreen = 17
Global Const $sm_cykanjiwindow = 18
Global Const $sm_mousepresent = 19
Global Const $sm_cyvscroll = 20
Global Const $sm_cxhscroll = 21
Global Const $sm_debug = 22
Global Const $sm_swapbutton = 23
Global Const $sm_reserved1 = 24
Global Const $sm_reserved2 = 25
Global Const $sm_reserved3 = 26
Global Const $sm_reserved4 = 27
Global Const $sm_cxmin = 28
Global Const $sm_cymin = 29
Global Const $sm_cxsize = 30
Global Const $sm_cysize = 31
Global Const $sm_cxframe = 32
Global Const $sm_cyframe = 33
Global Const $sm_cxmintrack = 34
Global Const $sm_cymintrack = 35
Global Const $sm_cxdoubleclk = 36
Global Const $sm_cydoubleclk = 37
Global Const $sm_cxiconspacing = 38
Global Const $sm_cyiconspacing = 39
Global Const $sm_menudropalignment = 40
Global Const $sm_penwindows = 41
Global Const $sm_dbcsenabled = 42
Global Const $sm_cmousebuttons = 43
Global Const $sm_secure = 44
Global Const $sm_cxedge = 45
Global Const $sm_cyedge = 46
Global Const $sm_cxminspacing = 47
Global Const $sm_cyminspacing = 48
Global Const $sm_cxsmicon = 49
Global Const $sm_cysmicon = 50
Global Const $sm_cysmcaption = 51
Global Const $sm_cxsmsize = 52
Global Const $sm_cysmsize = 53
Global Const $sm_cxmenusize = 54
Global Const $sm_cymenusize = 55
Global Const $sm_arrange = 56
Global Const $sm_cxminimized = 57
Global Const $sm_cyminimized = 58
Global Const $sm_cxmaxtrack = 59
Global Const $sm_cymaxtrack = 60
Global Const $sm_cxmaximized = 61
Global Const $sm_cymaximized = 62
Global Const $sm_network = 63
Global Const $sm_cleanboot = 67
Global Const $sm_cxdrag = 68
Global Const $sm_cydrag = 69
Global Const $sm_showsounds = 70
Global Const $sm_cxmenucheck = 71
Global Const $sm_cymenucheck = 72
Global Const $sm_slowmachine = 73
Global Const $sm_mideastenabled = 74
Global Const $sm_mousewheelpresent = 75
Global Const $sm_xvirtualscreen = 76
Global Const $sm_yvirtualscreen = 77
Global Const $sm_cxvirtualscreen = 78
Global Const $sm_cyvirtualscreen = 79
Global Const $sm_cmonitors = 80
Global Const $sm_samedisplayformat = 81
Global Const $sm_immenabled = 82
Global Const $sm_cxfocusborder = 83
Global Const $sm_cyfocusborder = 84
Global Const $sm_tabletpc = 86
Global Const $sm_mediacenter = 87
Global Const $sm_starter = 88
Global Const $sm_serverr2 = 89
Global Const $sm_cmetrics = 90
Global Const $sm_remotesession = 4096
Global Const $sm_shuttingdown = 8192
Global Const $sm_remotecontrol = 8193
Global Const $sm_caretblinkingenabled = 8194
Global Const $blackness = 66
Global Const $captureblt = 1073741824
Global Const $dstinvert = 5570569
Global Const $mergecopy = 12583114
Global Const $mergepaint = 12255782
Global Const $nomirrorbitmap = -2147483648
Global Const $notsrccopy = 3342344
Global Const $notsrcerase = 1114278
Global Const $patcopy = 15728673
Global Const $patinvert = 5898313
Global Const $patpaint = 16452105
Global Const $srcand = 8913094
Global Const $srccopy = 13369376
Global Const $srcerase = 4457256
Global Const $srcinvert = 6684742
Global Const $srcpaint = 15597702
Global Const $whiteness = 16711778
Global Const $dt_bottom = 8
Global Const $dt_calcrect = 1024
Global Const $dt_center = 1
Global Const $dt_editcontrol = 8192
Global Const $dt_end_ellipsis = 32768
Global Const $dt_expandtabs = 64
Global Const $dt_externalleading = 512
Global Const $dt_hideprefix = 1048576
Global Const $dt_internal = 4096
Global Const $dt_left = 0
Global Const $dt_modifystring = 65536
Global Const $dt_noclip = 256
Global Const $dt_nofullwidthcharbreak = 524288
Global Const $dt_noprefix = 2048
Global Const $dt_path_ellipsis = 16384
Global Const $dt_prefixonly = 2097152
Global Const $dt_right = 2
Global Const $dt_rtlreading = 131072
Global Const $dt_singleline = 32
Global Const $dt_tabstop = 128
Global Const $dt_top = 0
Global Const $dt_vcenter = 4
Global Const $dt_wordbreak = 16
Global Const $dt_word_ellipsis = 262144
Global Const $rdw_erase = 4
Global Const $rdw_frame = 1024
Global Const $rdw_internalpaint = 2
Global Const $rdw_invalidate = 1
Global Const $rdw_noerase = 32
Global Const $rdw_noframe = 2048
Global Const $rdw_nointernalpaint = 16
Global Const $rdw_validate = 8
Global Const $rdw_erasenow = 512
Global Const $rdw_updatenow = 256
Global Const $rdw_allchildren = 128
Global Const $rdw_nochildren = 64
Global Const $wm_renderformat = 773
Global Const $wm_renderallformats = 774
Global Const $wm_destroyclipboard = 775
Global Const $wm_drawclipboard = 776
Global Const $wm_paintclipboard = 777
Global Const $wm_vscrollclipboard = 778
Global Const $wm_sizeclipboard = 779
Global Const $wm_askcbformatname = 780
Global Const $wm_changecbchain = 781
Global Const $wm_hscrollclipboard = 782
Global Const $hterror = -2
Global Const $httransparent = -1
Global Const $htnowhere = 0
Global Const $htclient = 1
Global Const $htcaption = 2
Global Const $htsysmenu = 3
Global Const $htgrowbox = 4
Global Const $htsize = $htgrowbox
Global Const $htmenu = 5
Global Const $hthscroll = 6
Global Const $htvscroll = 7
Global Const $htminbutton = 8
Global Const $htmaxbutton = 9
Global Const $htleft = 10
Global Const $htright = 11
Global Const $httop = 12
Global Const $httopleft = 13
Global Const $httopright = 14
Global Const $htbottom = 15
Global Const $htbottomleft = 16
Global Const $htbottomright = 17
Global Const $htborder = 18
Global Const $htreduce = $htminbutton
Global Const $htzoom = $htmaxbutton
Global Const $htsizefirst = $htleft
Global Const $htsizelast = $htbottomright
Global Const $htobject = 19
Global Const $htclose = 20
Global Const $hthelp = 21
Global Const $color_scrollbar = 0
Global Const $color_background = 1
Global Const $color_activecaption = 2
Global Const $color_inactivecaption = 3
Global Const $color_menu = 4
Global Const $color_window = 5
Global Const $color_windowframe = 6
Global Const $color_menutext = 7
Global Const $color_windowtext = 8
Global Const $color_captiontext = 9
Global Const $color_activeborder = 10
Global Const $color_inactiveborder = 11
Global Const $color_appworkspace = 12
Global Const $color_highlight = 13
Global Const $color_highlighttext = 14
Global Const $color_btnface = 15
Global Const $color_btnshadow = 16
Global Const $color_graytext = 17
Global Const $color_btntext = 18
Global Const $color_inactivecaptiontext = 19
Global Const $color_btnhighlight = 20
Global Const $color_3ddkshadow = 21
Global Const $color_3dlight = 22
Global Const $color_infotext = 23
Global Const $color_infobk = 24
Global Const $color_hotlight = 26
Global Const $color_gradientactivecaption = 27
Global Const $color_gradientinactivecaption = 28
Global Const $color_menuhilight = 29
Global Const $color_menubar = 30
Global Const $color_desktop = 1
Global Const $color_3dface = 15
Global Const $color_3dshadow = 16
Global Const $color_3dhighlight = 20
Global Const $color_3dhilight = 20
Global Const $color_btnhilight = 20
Global Const $hinst_commctrl = -1
Global Const $idb_std_small_color = 0
Global Const $idb_std_large_color = 1
Global Const $idb_view_small_color = 4
Global Const $idb_view_large_color = 5
Global Const $idb_hist_small_color = 8
Global Const $idb_hist_large_color = 9
Global Const $startf_forceofffeedback = 128
Global Const $startf_forceonfeedback = 64
Global Const $startf_preventpinning = 8192
Global Const $startf_runfullscreen = 32
Global Const $startf_titleisappid = 4096
Global Const $startf_titleislinkname = 2048
Global Const $startf_usecountchars = 8
Global Const $startf_usefillattribute = 16
Global Const $startf_usehotkey = 512
Global Const $startf_useposition = 4
Global Const $startf_useshowwindow = 1
Global Const $startf_usesize = 2
Global Const $startf_usestdhandles = 256
Global Const $cdds_prepaint = 1
Global Const $cdds_postpaint = 2
Global Const $cdds_preerase = 3
Global Const $cdds_posterase = 4
Global Const $cdds_item = 65536
Global Const $cdds_itemprepaint = 65537
Global Const $cdds_itempostpaint = 65538
Global Const $cdds_itempreerase = 65539
Global Const $cdds_itemposterase = 65540
Global Const $cdds_subitem = 131072
Global Const $cdis_selected = 1
Global Const $cdis_grayed = 2
Global Const $cdis_disabled = 4
Global Const $cdis_checked = 8
Global Const $cdis_focus = 16
Global Const $cdis_default = 32
Global Const $cdis_hot = 64
Global Const $cdis_marked = 128
Global Const $cdis_indeterminate = 256
Global Const $cdis_showkeyboardcues = 512
Global Const $cdis_nearhot = 1024
Global Const $cdis_othersidehot = 2048
Global Const $cdis_drophilited = 4096
Global Const $cdrf_dodefault = 0
Global Const $cdrf_newfont = 2
Global Const $cdrf_skipdefault = 4
Global Const $cdrf_notifypostpaint = 16
Global Const $cdrf_notifyitemdraw = 32
Global Const $cdrf_notifysubitemdraw = 32
Global Const $cdrf_notifyposterase = 64
Global Const $cdrf_doerase = 8
Global Const $cdrf_skippostpaint = 256
Global Const $gui_ss_default_gui = BitOR($ws_minimizebox, $ws_caption, $ws_popup, $ws_sysmenu)
Global Const $opt_coordsrelative = 0
Global Const $opt_coordsabsolute = 1
Global Const $opt_coordsclient = 2
Global Const $opt_errorsilent = 0
Global Const $opt_errorfatal = 1
Global Const $opt_capsnostore = 0
Global Const $opt_capsstore = 1
Global Const $opt_matchstart = 1
Global Const $opt_matchany = 2
Global Const $opt_matchexact = 3
Global Const $opt_matchadvanced = 4
Global Const $ccs_top = 1
Global Const $ccs_nomovey = 2
Global Const $ccs_bottom = 3
Global Const $ccs_noresize = 4
Global Const $ccs_noparentalign = 8
Global Const $ccs_nohilite = 16
Global Const $ccs_adjustable = 32
Global Const $ccs_nodivider = 64
Global Const $ccs_vert = 128
Global Const $ccs_left = 129
Global Const $ccs_nomovex = 130
Global Const $ccs_right = 131
Global Const $dt_drivetype = 1
Global Const $dt_ssdstatus = 2
Global Const $dt_bustype = 3
Global Const $proxy_ie = 0
Global Const $proxy_none = 1
Global Const $proxy_specified = 2
Global Const $objid_window = 0
Global Const $objid_titlebar = -2
Global Const $objid_sizegrip = -7
Global Const $objid_caret = -8
Global Const $objid_cursor = -9
Global Const $objid_alert = -10
Global Const $objid_sound = -11
Global Const $dlg_centerontop = 0
Global Const $dlg_notitle = 1
Global Const $dlg_notontop = 2
Global Const $dlg_textleft = 4
Global Const $dlg_textright = 8
Global Const $dlg_moveable = 16
Global Const $dlg_textvcenter = 32
Global Const $idc_unknown = 0
Global Const $idc_appstarting = 1
Global Const $idc_arrow = 2
Global Const $idc_cross = 3
Global Const $idc_hand = 32649
Global Const $idc_help = 4
Global Const $idc_ibeam = 5
Global Const $idc_icon = 6
Global Const $idc_no = 7
Global Const $idc_size = 8
Global Const $idc_sizeall = 9
Global Const $idc_sizenesw = 10
Global Const $idc_sizens = 11
Global Const $idc_sizenwse = 12
Global Const $idc_sizewe = 13
Global Const $idc_uparrow = 14
Global Const $idc_wait = 15
Global Const $idi_application = 32512
Global Const $idi_asterisk = 32516
Global Const $idi_exclamation = 32515
Global Const $idi_hand = 32513
Global Const $idi_question = 32514
Global Const $idi_winlogo = 32517
Global Const $idi_shield = 32518
Global Const $idi_error = $idi_hand
Global Const $idi_information = $idi_asterisk
Global Const $idi_warning = $idi_exclamation
Global Const $sd_logoff = 0
Global Const $sd_shutdown = 1
Global Const $sd_reboot = 2
Global Const $sd_force = 4
Global Const $sd_powerdown = 8
Global Const $sd_forcehung = 16
Global Const $sd_standby = 32
Global Const $sd_hibernate = 64
Global Const $stdin_child = 1
Global Const $stdout_child = 2
Global Const $stderr_child = 4
Global Const $stderr_merged = 8
Global Const $stdio_inherit_parent = 16
Global Const $run_create_new_console = 65536
Global Const $ubound_dimensions = 0
Global Const $ubound_rows = 1
Global Const $ubound_columns = 2
Global Const $mouseeventf_absolute = 32768
Global Const $mouseeventf_move = 1
Global Const $mouseeventf_leftdown = 2
Global Const $mouseeventf_leftup = 4
Global Const $mouseeventf_rightdown = 8
Global Const $mouseeventf_rightup = 16
Global Const $mouseeventf_middledown = 32
Global Const $mouseeventf_middleup = 64
Global Const $mouseeventf_wheel = 2048
Global Const $mouseeventf_xdown = 128
Global Const $mouseeventf_xup = 256
Global Const $reg_none = 0
Global Const $reg_sz = 1
Global Const $reg_expand_sz = 2
Global Const $reg_binary = 3
Global Const $reg_dword = 4
Global Const $reg_dword_little_endian = 4
Global Const $reg_dword_big_endian = 5
Global Const $reg_link = 6
Global Const $reg_multi_sz = 7
Global Const $reg_resource_list = 8
Global Const $reg_full_resource_descriptor = 9
Global Const $reg_resource_requirements_list = 10
Global Const $reg_qword = 11
Global Const $reg_qword_little_endian = 11
Global Const $hwnd_bottom = 1
Global Const $hwnd_notopmost = -2
Global Const $hwnd_top = 0
Global Const $hwnd_topmost = -1
Global Const $swp_nosize = 1
Global Const $swp_nomove = 2
Global Const $swp_nozorder = 4
Global Const $swp_noredraw = 8
Global Const $swp_noactivate = 16
Global Const $swp_framechanged = 32
Global Const $swp_drawframe = 32
Global Const $swp_showwindow = 64
Global Const $swp_hidewindow = 128
Global Const $swp_nocopybits = 256
Global Const $swp_noownerzorder = 512
Global Const $swp_noreposition = 512
Global Const $swp_nosendchanging = 1024
Global Const $swp_defererase = 8192
Global Const $swp_asyncwindowpos = 16384
Global Const $keyword_default = 1
Global Const $keyword_null = 2
Global Const $declared_local = -1
Global Const $declared_unknown = 0
Global Const $declared_global = 1
Global Const $assign_create = 0
Global Const $assign_forcelocal = 1
Global Const $assign_forceglobal = 2
Global Const $assign_existfail = 4
Global Const $bi_enable = 0
Global Const $bi_disable = 1
Global Const $break_enable = 1
Global Const $break_disable = 0
Global Const $cdtray_open = "open"
Global Const $cdtray_closed = "closed"
Global Const $send_default = 0
Global Const $send_raw = 1
Global Const $dir_default = 0
Global Const $dir_extended = 1
Global Const $dir_norecurse = 2
Global Const $dir_remove = 1
Global Const $dt_all = "ALL"
Global Const $dt_cdrom = "CDROM"
Global Const $dt_removable = "REMOVABLE"
Global Const $dt_fixed = "FIXED"
Global Const $dt_network = "NETWORK"
Global Const $dt_ramdisk = "RAMDISK"
Global Const $dt_unknown = "UNKNOWN"
Global Const $dt_undefined = 1
Global Const $dt_fat = "FAT"
Global Const $dt_fat32 = "FAT32"
Global Const $dt_exfat = "exFAT"
Global Const $dt_ntfs = "NTFS"
Global Const $dt_nwfs = "NWFS"
Global Const $dt_cdfs = "CDFS"
Global Const $dt_udf = "UDF"
Global Const $dma_default = 0
Global Const $dma_persistent = 1
Global Const $dma_authentication = 8
Global Const $ds_unknown = "UNKNOWN"
Global Const $ds_ready = "READY"
Global Const $ds_notready = "NOTREADY"
Global Const $ds_invalid = "INVALID"
Global Const $mouse_click_left = "left"
Global Const $mouse_click_right = "right"
Global Const $mouse_click_middle = "middle"
Global Const $mouse_click_main = "main"
Global Const $mouse_click_menu = "menu"
Global Const $mouse_click_primary = "primary"
Global Const $mouse_click_secondary = "secondary"
Global Const $mouse_wheel_up = "up"
Global Const $mouse_wheel_down = "down"
Global Const $number_auto = 0
Global Const $number_32bit = 1
Global Const $number_64bit = 2
Global Const $number_double = 3
Global Const $obj_name = 1
Global Const $obj_string = 2
Global Const $obj_progid = 3
Global Const $obj_file = 4
Global Const $obj_module = 5
Global Const $obj_clsid = 6
Global Const $obj_iid = 7
Global Const $exitclose_normal = 0
Global Const $exitclose_byexit = 1
Global Const $exitclose_byclick = 2
Global Const $exitclose_bylogoff = 3
Global Const $exitclose_bysutdown = 4
Global Const $process_stats_memory = 0
Global Const $process_stats_io = 1
Global Const $process_low = 0
Global Const $process_belownormal = 1
Global Const $process_normal = 2
Global Const $process_abovenormal = 3
Global Const $process_high = 4
Global Const $process_realtime = 5
Global Const $run_logon_noprofile = 0
Global Const $run_logon_profile = 1
Global Const $run_logon_network = 2
Global Const $run_logon_inherit = 4
Global Const $sound_nowait = 0
Global Const $sound_wait = 1
Global Const $shex_open = "open"
Global Const $shex_edit = "edit"
Global Const $shex_print = "print"
Global Const $shex_properties = "properties"
Global Const $tcp_data_default = 0
Global Const $tcp_data_binary = 1
Global Const $udp_open_default = 0
Global Const $udp_open_broadcast = 1
Global Const $udp_data_default = 0
Global Const $udp_data_binary = 1
Global Const $udp_data_array = 2
Global Const $tip_noicon = 0
Global Const $tip_infoicon = 1
Global Const $tip_warningicon = 2
Global Const $tip_erroricon = 3
Global Const $tip_balloon = 1
Global Const $tip_center = 2
Global Const $tip_forcevisible = 4
Global Const $windows_noontop = 0
Global Const $windows_ontop = 1
Global Const $color_aqua = 65535
Global Const $color_black = 0
Global Const $color_blue = 255
Global Const $color_cream = 16776176
Global Const $color_fuchsia = 16711935
Global Const $color_gray = 8421504
Global Const $color_green = 32768
Global Const $color_lime = 65280
Global Const $color_maroon = 9116770
Global Const $color_medblue = 708
Global Const $color_medgray = 10526884
Global Const $color_moneygreen = 12639424
Global Const $color_navy = 128
Global Const $color_olive = 8421376
Global Const $color_purple = 8388736
Global Const $color_red = 16711680
Global Const $color_silver = 12632256
Global Const $color_skyblue = 10930928
Global Const $color_teal = 32896
Global Const $color_white = 16777215
Global Const $color_yellow = 16776960
Global Const $clr_none = -1
Global Const $clr_default = -16777216
Global Const $clr_aqua = 16776960
Global Const $clr_black = 0
Global Const $clr_blue = 16711680
Global Const $clr_cream = 15793151
Global Const $clr_fuchsia = 16711935
Global Const $clr_gray = 8421504
Global Const $clr_green = 32768
Global Const $clr_lime = 65280
Global Const $clr_maroon = 6429835
Global Const $clr_medblue = 12845568
Global Const $clr_medgray = 10789024
Global Const $clr_moneygreen = 12639424
Global Const $clr_navy = 8388608
Global Const $clr_olive = 32896
Global Const $clr_purple = 8388736
Global Const $clr_red = 255
Global Const $clr_silver = 12632256
Global Const $clr_skyblue = 15780518
Global Const $clr_teal = 8421376
Global Const $clr_white = 16777215
Global Const $clr_yellow = 65535
Global Const $cc_anycolor = 256
Global Const $cc_fullopen = 2
Global Const $cc_rgbinit = 1
Global Const $ddl_archive = 32
Global Const $ddl_directory = 16
Global Const $ddl_drives = 16384
Global Const $ddl_exclusive = 32768
Global Const $ddl_hidden = 2
Global Const $ddl_readonly = 1
Global Const $ddl_readwrite = 0
Global Const $ddl_system = 4
Global Const $fc_nooverwrite = 0
Global Const $fc_overwrite = 1
Global Const $fc_createpath = 8
Global Const $ft_modified = 0
Global Const $ft_created = 1
Global Const $ft_accessed = 2
Global Const $ft_array = 0
Global Const $ft_string = 1
Global Const $fsf_createbutton = 1
Global Const $fsf_newdialog = 2
Global Const $fsf_editcontrol = 4
Global Const $ft_nonrecursive = 0
Global Const $ft_recursive = 1
Global Const $fo_read = 0
Global Const $fo_append = 1
Global Const $fo_overwrite = 2
Global Const $fo_createpath = 8
Global Const $fo_binary = 16
Global Const $fo_unicode = 32
Global Const $fo_utf16_le = 32
Global Const $fo_utf16_be = 64
Global Const $fo_utf8 = 128
Global Const $fo_utf8_nobom = 256
Global Const $fo_ansi = 512
Global Const $fo_utf16_le_nobom = 1024
Global Const $fo_utf16_be_nobom = 2048
Global Const $fo_utf8_full = 16384
Global Const $fo_fullfile_detect = 16384
Global Const $eof = -1
Global Const $fd_filemustexist = 1
Global Const $fd_pathmustexist = 2
Global Const $fd_multiselect = 4
Global Const $fd_promptcreatenew = 8
Global Const $fd_promptoverwrite = 16
Global Const $create_new = 1
Global Const $create_always = 2
Global Const $open_existing = 3
Global Const $open_always = 4
Global Const $truncate_existing = 5
Global Const $invalid_set_file_pointer = -1
Global Const $file_begin = 0
Global Const $file_current = 1
Global Const $file_end = 2
Global Const $file_attribute_readonly = 1
Global Const $file_attribute_hidden = 2
Global Const $file_attribute_system = 4
Global Const $file_attribute_directory = 16
Global Const $file_attribute_archive = 32
Global Const $file_attribute_device = 64
Global Const $file_attribute_normal = 128
Global Const $file_attribute_temporary = 256
Global Const $file_attribute_sparse_file = 512
Global Const $file_attribute_reparse_point = 1024
Global Const $file_attribute_compressed = 2048
Global Const $file_attribute_offline = 4096
Global Const $file_attribute_not_content_indexed = 8192
Global Const $file_attribute_encrypted = 16384
Global Const $file_share_read = 1
Global Const $file_share_write = 2
Global Const $file_share_delete = 4
Global Const $file_share_readwrite = BitOR($file_share_read, $file_share_write)
Global Const $file_share_any = BitOR($file_share_read, $file_share_write, $file_share_delete)
Global Const $generic_all = 268435456
Global Const $generic_execute = 536870912
Global Const $generic_write = 1073741824
Global Const $generic_read = -2147483648
Global Const $generic_readwrite = BitOR($generic_read, $generic_write)
Global Const $file_encoding_utf16le = 32
Global Const $fe_entire_utf8 = 1
Global Const $fe_partialfirst_utf8 = 2
Global Const $fn_fullpath = 0
Global Const $fn_relativepath = 1
Global Const $fv_comments = "Comments"
Global Const $fv_companyname = "CompanyName"
Global Const $fv_filedescription = "FileDescription"
Global Const $fv_fileversion = "FileVersion"
Global Const $fv_internalname = "InternalName"
Global Const $fv_legalcopyright = "LegalCopyright"
Global Const $fv_legaltrademarks = "LegalTrademarks"
Global Const $fv_originalfilename = "OriginalFilename"
Global Const $fv_productname = "ProductName"
Global Const $fv_productversion = "ProductVersion"
Global Const $fv_privatebuild = "PrivateBuild"
Global Const $fv_specialbuild = "SpecialBuild"
Global Const $frta_nocount = 0
Global Const $frta_count = 1
Global Const $frta_intarrays = 2
Global Const $frta_entiresplit = 4
Global Const $flta_filesfolders = 0
Global Const $flta_files = 1
Global Const $flta_folders = 2
Global Const $fltar_filesfolders = 0
Global Const $fltar_files = 1
Global Const $fltar_folders = 2
Global Const $fltar_nohidden = 4
Global Const $fltar_nosystem = 8
Global Const $fltar_nolink = 16
Global Const $fltar_norecur = 0
Global Const $fltar_recur = 1
Global Const $fltar_nosort = 0
Global Const $fltar_sort = 1
Global Const $fltar_fastsort = 2
Global Const $fltar_nopath = 0
Global Const $fltar_relpath = 1
Global Const $fltar_fullpath = 2
Global Const $mb_ok = 0
Global Const $mb_okcancel = 1
Global Const $mb_abortretryignore = 2
Global Const $mb_yesnocancel = 3
Global Const $mb_yesno = 4
Global Const $mb_retrycancel = 5
Global Const $mb_canceltrycontinue = 6
Global Const $mb_help = 16384
Global Const $mb_iconstop = 16
Global Const $mb_iconerror = 16
Global Const $mb_iconhand = 16
Global Const $mb_iconquestion = 32
Global Const $mb_iconexclamation = 48
Global Const $mb_iconwarning = 48
Global Const $mb_iconinformation = 64
Global Const $mb_iconasterisk = 64
Global Const $mb_usericon = 128
Global Const $mb_defbutton1 = 0
Global Const $mb_defbutton2 = 256
Global Const $mb_defbutton3 = 512
Global Const $mb_defbutton4 = 768
Global Const $mb_applmodal = 0
Global Const $mb_systemmodal = 4096
Global Const $mb_taskmodal = 8192
Global Const $mb_default_desktop_only = 131072
Global Const $mb_right = 524288
Global Const $mb_rtlreading = 1048576
Global Const $mb_setforeground = 65536
Global Const $mb_topmost = 262144
Global Const $mb_service_notification = 2097152
Global Const $mb_rightjustified = $mb_right
Global Const $idtimeout = -1
Global Const $idok = 1
Global Const $idcancel = 2
Global Const $idabort = 3
Global Const $idretry = 4
Global Const $idignore = 5
Global Const $idyes = 6
Global Const $idno = 7
Global Const $idclose = 8
Global Const $idhelp = 9
Global Const $idtryagain = 10
Global Const $idcontinue = 11
Global Const $process_terminate = 1
Global Const $process_create_thread = 2
Global Const $process_set_sessionid = 4
Global Const $process_vm_operation = 8
Global Const $process_vm_read = 16
Global Const $process_vm_write = 32
Global Const $process_dup_handle = 64
Global Const $process_create_process = 128
Global Const $process_set_quota = 256
Global Const $process_set_information = 512
Global Const $process_query_information = 1024
Global Const $process_query_limited_information = 4096
Global Const $process_suspend_resume = 2048
Global Const $process_all_access = 2035711
Global Const $str_nocasesense = 0
Global Const $str_casesense = 1
Global Const $str_nocasesensebasic = 2
Global Const $str_stripleading = 1
Global Const $str_striptrailing = 2
Global Const $str_stripspaces = 4
Global Const $str_stripall = 8
Global Const $str_chrsplit = 0
Global Const $str_entiresplit = 1
Global Const $str_nocount = 2
Global Const $str_regexpmatch = 0
Global Const $str_regexparraymatch = 1
Global Const $str_regexparrayfullmatch = 2
Global Const $str_regexparrayglobalmatch = 3
Global Const $str_regexparrayglobalfullmatch = 4
Global Const $str_endisstart = 0
Global Const $str_endnotstart = 1
Global Const $sb_ansi = 1
Global Const $sb_utf16le = 2
Global Const $sb_utf16be = 3
Global Const $sb_utf8 = 4
Global Const $se_utf16 = 0
Global Const $se_ansi = 1
Global Const $se_utf8 = 2
Global Const $str_utf16 = 0
Global Const $str_ucs2 = 1
Global Const $tray_item_exit = 3
Global Const $tray_item_pause = 4
Global Const $tray_item_first = 7
Global Const $tray_checked = 1
Global Const $tray_unchecked = 4
Global Const $tray_enable = 64
Global Const $tray_disable = 128
Global Const $tray_focus = 256
Global Const $tray_default = 512
Global Const $tray_event_none = 0
Global Const $tray_event_showicon = -3
Global Const $tray_event_hideicon = -4
Global Const $tray_event_flashicon = -5
Global Const $tray_event_noflashicon = -6
Global Const $tray_event_primarydown = -7
Global Const $tray_event_primaryup = -8
Global Const $tray_event_secondarydown = -9
Global Const $tray_event_secondaryup = -10
Global Const $tray_event_mouseover = -11
Global Const $tray_event_mouseout = -12
Global Const $tray_event_primarydouble = -13
Global Const $tray_event_secondarydouble = -14
Global Const $tip_iconnone = 0
Global Const $tip_iconasterisk = 1
Global Const $tip_iconexclamation = 2
Global Const $tip_iconhand = 3
Global Const $tip_nosound = 16
Global Const $tray_item_normal = 0
Global Const $tray_item_radio = 1
Global Const $tray_click_show = 0
Global Const $tray_click_primarydown = 1
Global Const $tray_click_primaryup = 2
Global Const $tray_dblclick_primary = 4
Global Const $tray_click_secondarydown = 8
Global Const $tray_click_secondaryup = 16
Global Const $tray_dblclick_secondary = 32
Global Const $tray_click_hovering = 64
Global Const $tray_iconstate_show = 1
Global Const $tray_iconstate_hide = 2
Global Const $tray_iconstate_flash = 4
Global Const $tray_iconstate_stopflash = 8
Global Const $tray_iconstate_reset = 16
Global Enum $arrayfill_force_default, $arrayfill_force_singleitem, $arrayfill_force_int, $arrayfill_force_number, $arrayfill_force_ptr, $arrayfill_force_hwnd, $arrayfill_force_string
Global Enum $arrayunique_nocount, $arrayunique_count
Global Enum $arrayunique_auto, $arrayunique_force32, $arrayunique_force64, $arrayunique_match, $arrayunique_distinct

Func _arrayadd(ByRef $aarray, $vvalue, $istart = 0, $sdelim_item = "|", $sdelim_row = @CRLF, $iforce = $arrayfill_force_default)
	If $istart = Default Then $istart = 0
	If $sdelim_item = Default Then $sdelim_item = "|"
	If $sdelim_row = Default Then $sdelim_row = @CRLF
	If $iforce = Default Then $iforce = $arrayfill_force_default
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	Local $hdatatype = 0
	Switch $iforce
		Case $arrayfill_force_int
			$hdatatype = Int
		Case $arrayfill_force_number
			$hdatatype = Number
		Case $arrayfill_force_ptr
			$hdatatype = Ptr
		Case $arrayfill_force_hwnd
			$hdatatype = HWnd
		Case $arrayfill_force_string
			$hdatatype = String
	EndSwitch
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $iforce = $arrayfill_force_singleitem Then
				ReDim $aarray[$idim_1 + 1]
				$aarray[$idim_1] = $vvalue
				Return $idim_1
			EndIf
			If IsArray($vvalue) Then
				If UBound($vvalue, $ubound_dimensions) <> 1 Then Return SetError(5, 0, -1)
				$hdatatype = 0
			Else
				Local $atmp = StringSplit($vvalue, $sdelim_item, $str_nocount + $str_entiresplit)
				If UBound($atmp, $ubound_rows) = 1 Then
					$atmp[0] = $vvalue
				EndIf
				$vvalue = $atmp
			EndIf
			Local $iadd = UBound($vvalue, $ubound_rows)
			ReDim $aarray[$idim_1 + $iadd]
			For $i = 0 To $iadd - 1
				If IsFunc($hdatatype) Then
					$aarray[$idim_1 + $i] = $hdatatype($vvalue[$i])
				Else
					$aarray[$idim_1 + $i] = $vvalue[$i]
				EndIf
			Next
			Return $idim_1 + $iadd - 1
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns)
			If $istart < 0 OR $istart > $idim_2 - 1 Then Return SetError(4, 0, -1)
			Local $ivaldim_1, $ivaldim_2 = 0, $icolcount
			If IsArray($vvalue) Then
				If UBound($vvalue, $ubound_dimensions) <> 2 Then Return SetError(5, 0, -1)
				$ivaldim_1 = UBound($vvalue, $ubound_rows)
				$ivaldim_2 = UBound($vvalue, $ubound_columns)
				$hdatatype = 0
			Else
				Local $asplit_1 = StringSplit($vvalue, $sdelim_row, $str_nocount + $str_entiresplit)
				$ivaldim_1 = UBound($asplit_1, $ubound_rows)
				Local $atmp[$ivaldim_1][0], $asplit_2
				For $i = 0 To $ivaldim_1 - 1
					$asplit_2 = StringSplit($asplit_1[$i], $sdelim_item, $str_nocount + $str_entiresplit)
					$icolcount = UBound($asplit_2)
					If $icolcount > $ivaldim_2 Then
						$ivaldim_2 = $icolcount
						ReDim $atmp[$ivaldim_1][$ivaldim_2]
					EndIf
					For $j = 0 To $icolcount - 1
						$atmp[$i][$j] = $asplit_2[$j]
					Next
				Next
				$vvalue = $atmp
			EndIf
			If UBound($vvalue, $ubound_columns) + $istart > UBound($aarray, $ubound_columns) Then Return SetError(3, 0, -1)
			ReDim $aarray[$idim_1 + $ivaldim_1][$idim_2]
			For $iwriteto_index = 0 To $ivaldim_1 - 1
				For $j = 0 To $idim_2 - 1
					If $j < $istart Then
						$aarray[$iwriteto_index + $idim_1][$j] = ""
					ElseIf $j - $istart > $ivaldim_2 - 1 Then
						$aarray[$iwriteto_index + $idim_1][$j] = ""
					Else
						If IsFunc($hdatatype) Then
							$aarray[$iwriteto_index + $idim_1][$j] = $hdatatype($vvalue[$iwriteto_index][$j - $istart])
						Else
							$aarray[$iwriteto_index + $idim_1][$j] = $vvalue[$iwriteto_index][$j - $istart]
						EndIf
					EndIf
				Next
			Next
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return UBound($aarray, $ubound_rows) - 1
EndFunc

Func _arraybinarysearch(Const ByRef $aarray, $vvalue, $istart = 0, $iend = 0, $icolumn = 0)
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $icolumn = Default Then $icolumn = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	If $idim_1 = 0 Then Return SetError(6, 0, -1)
	If $iend < 1 OR $iend > $idim_1 - 1 Then $iend = $idim_1 - 1
	If $istart < 0 Then $istart = 0
	If $istart > $iend Then Return SetError(4, 0, -1)
	Local $imid = Int(($iend + $istart) / 2)
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $aarray[$istart] > $vvalue OR $aarray[$iend] < $vvalue Then Return SetError(2, 0, -1)
			While $istart <= $imid AND $vvalue <> $aarray[$imid]
				If $vvalue < $aarray[$imid] Then
					$iend = $imid - 1
				Else
					$istart = $imid + 1
				EndIf
				$imid = Int(($iend + $istart) / 2)
			WEnd
			If $istart > $iend Then Return SetError(3, 0, -1)
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			If $icolumn < 0 OR $icolumn > $idim_2 Then Return SetError(7, 0, -1)
			If $aarray[$istart][$icolumn] > $vvalue OR $aarray[$iend][$icolumn] < $vvalue Then Return SetError(2, 0, -1)
			While $istart <= $imid AND $vvalue <> $aarray[$imid][$icolumn]
				If $vvalue < $aarray[$imid][$icolumn] Then
					$iend = $imid - 1
				Else
					$istart = $imid + 1
				EndIf
				$imid = Int(($iend + $istart) / 2)
			WEnd
			If $istart > $iend Then Return SetError(3, 0, -1)
		Case Else
			Return SetError(5, 0, -1)
	EndSwitch
	Return $imid
EndFunc

Func _arraycoldelete(ByRef $aarray, $icolumn, $bconvert = False)
	If $bconvert = Default Then $bconvert = False
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	If UBound($aarray, $ubound_dimensions) <> 2 Then Return SetError(2, 0, -1)
	Local $idim_2 = UBound($aarray, $ubound_columns)
	Switch $idim_2
		Case 2
			If $icolumn < 0 OR $icolumn > 1 Then Return SetError(3, 0, -1)
			If $bconvert Then
				Local $atemparray[$idim_1]
				For $i = 0 To $idim_1 - 1
					$atemparray[$i] = $aarray[$i][(NOT $icolumn)]
				Next
				$aarray = $atemparray
			Else
				ContinueCase
			EndIf
		Case Else
			If $icolumn < 0 OR $icolumn > $idim_2 - 1 Then Return SetError(3, 0, -1)
			For $i = 0 To $idim_1 - 1
				For $j = $icolumn To $idim_2 - 2
					$aarray[$i][$j] = $aarray[$i][$j + 1]
				Next
			Next
			ReDim $aarray[$idim_1][$idim_2 - 1]
	EndSwitch
	Return UBound($aarray, $ubound_columns)
EndFunc

Func _arraycolinsert(ByRef $aarray, $icolumn)
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			Local $atemparray[$idim_1][2]
			Switch $icolumn
				Case 0, 1
					For $i = 0 To $idim_1 - 1
						$atemparray[$i][(NOT $icolumn)] = $aarray[$i]
					Next
				Case Else
					Return SetError(3, 0, -1)
			EndSwitch
			$aarray = $atemparray
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns)
			If $icolumn < 0 OR $icolumn > $idim_2 Then Return SetError(3, 0, -1)
			ReDim $aarray[$idim_1][$idim_2 + 1]
			For $i = 0 To $idim_1 - 1
				For $j = $idim_2 To $icolumn + 1 Step -1
					$aarray[$i][$j] = $aarray[$i][$j - 1]
				Next
				$aarray[$i][$icolumn] = ""
			Next
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return UBound($aarray, $ubound_columns)
EndFunc

Func _arraycombinations(Const ByRef $aarray, $iset, $sdelimiter = "")
	If $sdelimiter = Default Then $sdelimiter = ""
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(2, 0, 0)
	Local $in = UBound($aarray)
	Local $ir = $iset
	Local $aidx[$ir]
	For $i = 0 To $ir - 1
		$aidx[$i] = $i
	Next
	Local $itotal = __array_combinations($in, $ir)
	Local $ileft = $itotal
	Local $aresult[$itotal + 1]
	$aresult[0] = $itotal
	Local $icount = 1
	While $ileft > 0
		__array_getnext($in, $ir, $ileft, $itotal, $aidx)
		For $i = 0 To $iset - 1
			$aresult[$icount] &= $aarray[$aidx[$i]] & $sdelimiter
		Next
		If $sdelimiter <> "" Then $aresult[$icount] = StringTrimRight($aresult[$icount], 1)
		$icount += 1
	WEnd
	Return $aresult
EndFunc

Func _arrayconcatenate(ByRef $aarraytarget, Const ByRef $aarraysource, $istart = 0)
	If $istart = Default Then $istart = 0
	If NOT IsArray($aarraytarget) Then Return SetError(1, 0, -1)
	If NOT IsArray($aarraysource) Then Return SetError(2, 0, -1)
	Local $idim_total_tgt = UBound($aarraytarget, $ubound_dimensions)
	Local $idim_total_src = UBound($aarraysource, $ubound_dimensions)
	Local $idim_1_tgt = UBound($aarraytarget, $ubound_rows)
	Local $idim_1_src = UBound($aarraysource, $ubound_rows)
	If $istart < 0 OR $istart > $idim_1_src - 1 Then Return SetError(6, 0, -1)
	Switch $idim_total_tgt
		Case 1
			If $idim_total_src <> 1 Then Return SetError(4, 0, -1)
			ReDim $aarraytarget[$idim_1_tgt + $idim_1_src - $istart]
			For $i = $istart To $idim_1_src - 1
				$aarraytarget[$idim_1_tgt + $i - $istart] = $aarraysource[$i]
			Next
		Case 2
			If $idim_total_src <> 2 Then Return SetError(4, 0, -1)
			Local $idim_2_tgt = UBound($aarraytarget, $ubound_columns)
			If UBound($aarraysource, $ubound_columns) <> $idim_2_tgt Then Return SetError(5, 0, -1)
			ReDim $aarraytarget[$idim_1_tgt + $idim_1_src - $istart][$idim_2_tgt]
			For $i = $istart To $idim_1_src - 1
				For $j = 0 To $idim_2_tgt - 1
					$aarraytarget[$idim_1_tgt + $i - $istart][$j] = $aarraysource[$i][$j]
				Next
			Next
		Case Else
			Return SetError(3, 0, -1)
	EndSwitch
	Return UBound($aarraytarget, $ubound_rows)
EndFunc

Func _arraydelete(ByRef $aarray, $vrange)
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If IsArray($vrange) Then
		If UBound($vrange, $ubound_dimensions) <> 1 OR UBound($vrange, $ubound_rows) < 2 Then Return SetError(4, 0, -1)
	Else
		Local $inumber, $asplit_1, $asplit_2
		$vrange = StringStripWS($vrange, 8)
		$asplit_1 = StringSplit($vrange, ";")
		$vrange = ""
		For $i = 1 To $asplit_1[0]
			If NOT StringRegExp($asplit_1[$i], "^\d+(-\d+)?$") Then Return SetError(3, 0, -1)
			$asplit_2 = StringSplit($asplit_1[$i], "-")
			Switch $asplit_2[0]
				Case 1
					$vrange &= $asplit_2[1] & ";"
				Case 2
					If Number($asplit_2[2]) >= Number($asplit_2[1]) Then
						$inumber = $asplit_2[1] - 1
						Do
							$inumber += 1
							$vrange &= $inumber & ";"
						Until $inumber = $asplit_2[2]
					EndIf
			EndSwitch
		Next
		$vrange = StringSplit(StringTrimRight($vrange, 1), ";")
	EndIf
	If $vrange[1] < 0 OR $vrange[$vrange[0]] > $idim_1 Then Return SetError(5, 0, -1)
	Local $icopyto_index = 0
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			For $i = 1 To $vrange[0]
				$aarray[$vrange[$i]] = ChrW(64177)
			Next
			For $ireadfrom_index = 0 To $idim_1
				If $aarray[$ireadfrom_index] == ChrW(64177) Then
					ContinueLoop
				Else
					If $ireadfrom_index <> $icopyto_index Then
						$aarray[$icopyto_index] = $aarray[$ireadfrom_index]
					EndIf
					$icopyto_index += 1
				EndIf
			Next
			ReDim $aarray[$idim_1 - $vrange[0] + 1]
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			For $i = 1 To $vrange[0]
				$aarray[$vrange[$i]][0] = ChrW(64177)
			Next
			For $ireadfrom_index = 0 To $idim_1
				If $aarray[$ireadfrom_index][0] == ChrW(64177) Then
					ContinueLoop
				Else
					If $ireadfrom_index <> $icopyto_index Then
						For $j = 0 To $idim_2
							$aarray[$icopyto_index][$j] = $aarray[$ireadfrom_index][$j]
						Next
					EndIf
					$icopyto_index += 1
				EndIf
			Next
			ReDim $aarray[$idim_1 - $vrange[0] + 1][$idim_2 + 1]
		Case Else
			Return SetError(2, 0, False)
	EndSwitch
	Return UBound($aarray, $ubound_rows)
EndFunc

Func _arraydisplay(Const ByRef $aarray, $stitle = Default, $sarrayrange = Default, $iflags = Default, $vuser_separator = Default, $sheader = Default, $imax_colwidth = Default, $ialt_color = Default, $huser_function = Default)
	If $stitle = Default Then $stitle = "ArrayDisplay"
	If $sarrayrange = Default Then $sarrayrange = ""
	If $iflags = Default Then $iflags = 0
	If $vuser_separator = Default Then $vuser_separator = ""
	If $sheader = Default Then $sheader = ""
	If $imax_colwidth = Default Then $imax_colwidth = 350
	If $ialt_color = Default Then $ialt_color = 0
	If $huser_function = Default Then $huser_function = 0
	Local $itranspose = BitAND($iflags, 1)
	Local $icolalign = BitAND($iflags, 6)
	Local $iverbose = BitAND($iflags, 8)
	Local $ibuttonmargin = ((BitAND($iflags, 32)) ? (0) : ((BitAND($iflags, 16)) ? (20) : (40)))
	Local $inorow = BitAND($iflags, 64)
	Local $smsg = "", $iret = 1
	If IsArray($aarray) Then
		Local $idimension = UBound($aarray, $ubound_dimensions), $irowcount = UBound($aarray, $ubound_rows), $icolcount = UBound($aarray, $ubound_columns)
		If $idimension > 2 Then
			$smsg = "Larger than 2D array passed to function"
			$iret = 2
		EndIf
	Else
		$smsg = "No array variable passed to function"
	EndIf
	If $smsg Then
		If $iverbose AND MsgBox($mb_systemmodal + $mb_iconerror + $mb_yesno, "ArrayDisplay Error: " & $stitle, $smsg & @CRLF & @CRLF & "Exit the script?") = $idyes Then
			Exit
		Else
			Return SetError($iret, 0, "")
		EndIf
	EndIf
	Local $icw_colwidth = Number($vuser_separator)
	Local $sad_separator = ChrW(64177)
	Local $scurr_separator = Opt("GUIDataSeparatorChar", $sad_separator)
	If $vuser_separator = "" Then $vuser_separator = $scurr_separator
	Local $vtmp, $irowlimit = 65525, $icollimit = 250
	Local $idatarow = $irowcount
	Local $idatacol = $icolcount
	Local $iitem_start = 0, $iitem_end = $irowcount - 1, $isubitem_start = 0, $isubitem_end = (($idimension = 2) ? ($icolcount - 1) : (0))
	Local $brange_flag = False, $avrangesplit
	If $sarrayrange Then
		Local $aarray_range = StringRegExp($sarrayrange & "||", "(?U)(.*)\|", 3)
		If $aarray_range[0] Then
			$avrangesplit = StringSplit($aarray_range[0], ":")
			If @error Then
				$iitem_end = Number($avrangesplit[1])
			Else
				$iitem_start = Number($avrangesplit[1])
				$iitem_end = Number($avrangesplit[2])
			EndIf
		EndIf
		If $iitem_start > $iitem_end Then
			$vtmp = $iitem_start
			$iitem_start = $iitem_end
			$iitem_end = $vtmp
		EndIf
		If $iitem_start < 0 Then $iitem_start = 0
		If $iitem_end > $irowcount - 1 Then $iitem_end = $irowcount - 1
		If $iitem_start <> 0 OR $iitem_end <> $irowcount - 1 Then $brange_flag = True
		If $idimension = 2 AND $aarray_range[1] Then
			$avrangesplit = StringSplit($aarray_range[1], ":")
			If @error Then
				$isubitem_end = Number($avrangesplit[1])
			Else
				$isubitem_start = Number($avrangesplit[1])
				$isubitem_end = Number($avrangesplit[2])
			EndIf
			If $isubitem_start > $isubitem_end Then
				$vtmp = $isubitem_start
				$isubitem_start = $isubitem_end
				$isubitem_end = $vtmp
			EndIf
			If $isubitem_start < 0 Then $isubitem_start = 0
			If $isubitem_end > $icolcount - 1 Then $isubitem_end = $icolcount - 1
			If $isubitem_start <> 0 OR $isubitem_end <> $icolcount - 1 Then $brange_flag = True
		EndIf
	EndIf
	Local $sdisplaydata = "[" & $idatarow
	Local $btruncated = False
	If $itranspose Then
		If $iitem_end - $iitem_start > $icollimit Then
			$btruncated = True
			$iitem_end = $iitem_start + $icollimit - 1
		EndIf
	Else
		If $iitem_end - $iitem_start > $irowlimit Then
			$btruncated = True
			$iitem_end = $iitem_start + $irowlimit - 1
		EndIf
	EndIf
	If $btruncated Then
		$sdisplaydata &= "*]"
	Else
		$sdisplaydata &= "]"
	EndIf
	If $idimension = 2 Then
		$sdisplaydata &= " [" & $idatacol
		If $itranspose Then
			If $isubitem_end - $isubitem_start > $irowlimit Then
				$btruncated = True
				$isubitem_end = $isubitem_start + $irowlimit - 1
			EndIf
		Else
			If $isubitem_end - $isubitem_start > $icollimit Then
				$btruncated = True
				$isubitem_end = $isubitem_start + $icollimit - 1
			EndIf
		EndIf
		If $btruncated Then
			$sdisplaydata &= "*]"
		Else
			$sdisplaydata &= "]"
		EndIf
	EndIf
	Local $stipdata = ""
	If $btruncated Then $stipdata &= "Truncated"
	If $brange_flag Then
		If $stipdata Then $stipdata &= " - "
		$stipdata &= "Range set"
	EndIf
	If $itranspose Then
		If $stipdata Then $stipdata &= " - "
		$stipdata &= "Transposed"
	EndIf
	Local $asheader = StringSplit($sheader, $scurr_separator, $str_nocount)
	If UBound($asheader) = 0 Then Local $asheader[1] = [""]
	$sheader = "Row"
	Local $iindex = $isubitem_start
	If $itranspose Then
		For $j = $iitem_start To $iitem_end
			$sheader &= $sad_separator & "Col " & $j
		Next
	Else
		If $asheader[0] Then
			For $iindex = $isubitem_start To $isubitem_end
				If $iindex >= UBound($asheader) Then ExitLoop
				$sheader &= $sad_separator & $asheader[$iindex]
			Next
		EndIf
		For $j = $iindex To $isubitem_end
			$sheader &= $sad_separator & "Col " & $j
		Next
	EndIf
	If $inorow Then $sheader = StringTrimLeft($sheader, 4)
	If $iverbose AND ($iitem_end - $iitem_start + 1) * ($isubitem_end - $isubitem_start + 1) > 10000 Then
		SplashTextOn("ArrayDisplay", "Preparing display" & @CRLF & @CRLF & "Please be patient", 300, 100)
	EndIf
	Local $ibuffer = 4094
	If $itranspose Then
		$vtmp = $iitem_start
		$iitem_start = $isubitem_start
		$isubitem_start = $vtmp
		$vtmp = $iitem_end
		$iitem_end = $isubitem_end
		$isubitem_end = $vtmp
	EndIf
	Local $avarraytext[$iitem_end - $iitem_start + 1]
	For $i = $iitem_start To $iitem_end
		If NOT $inorow Then $avarraytext[$i - $iitem_start] = "[" & $i & "]"
		For $j = $isubitem_start To $isubitem_end
			If $idimension = 1 Then
				If $itranspose Then
					Switch VarGetType($aarray[$j])
						Case "Array"
							$vtmp = "{Array}"
						Case Else
							$vtmp = $aarray[$j]
					EndSwitch
				Else
					Switch VarGetType($aarray[$i])
						Case "Array"
							$vtmp = "{Array}"
						Case Else
							$vtmp = $aarray[$i]
					EndSwitch
				EndIf
			Else
				If $itranspose Then
					Switch VarGetType($aarray[$j][$i])
						Case "Array"
							$vtmp = "{Array}"
						Case Else
							$vtmp = $aarray[$j][$i]
					EndSwitch
				Else
					Switch VarGetType($aarray[$i][$j])
						Case "Array"
							$vtmp = "{Array}"
						Case Else
							$vtmp = $aarray[$i][$j]
					EndSwitch
				EndIf
			EndIf
			If StringLen($vtmp) > $ibuffer Then $vtmp = StringLeft($vtmp, $ibuffer)
			$avarraytext[$i - $iitem_start] &= $sad_separator & $vtmp
		Next
		If $inorow Then $avarraytext[$i - $iitem_start] = StringTrimLeft($avarraytext[$i - $iitem_start], 1)
	Next
	Local Const $_arrayconstant_gui_dockbottom = 64
	Local Const $_arrayconstant_gui_dockborders = 102
	Local Const $_arrayconstant_gui_dockheight = 512
	Local Const $_arrayconstant_gui_dockleft = 2
	Local Const $_arrayconstant_gui_dockright = 4
	Local Const $_arrayconstant_gui_dockhcenter = 8
	Local Const $_arrayconstant_gui_event_close = -3
	Local Const $_arrayconstant_gui_focus = 256
	Local Const $_arrayconstant_gui_bkcolor_lv_alternate = -33554432
	Local Const $_arrayconstant_ss_center = 1
	Local Const $_arrayconstant_ss_centerimage = 512
	Local Const $_arrayconstant_lvm_getitemcount = (4096 + 4)
	Local Const $_arrayconstant_lvm_getitemrect = (4096 + 14)
	Local Const $_arrayconstant_lvm_getcolumnwidth = (4096 + 29)
	Local Const $_arrayconstant_lvm_setcolumnwidth = (4096 + 30)
	Local Const $_arrayconstant_lvm_getitemstate = (4096 + 44)
	Local Const $_arrayconstant_lvm_getselectedcount = (4096 + 50)
	Local Const $_arrayconstant_lvm_setextendedlistviewstyle = (4096 + 54)
	Local Const $_arrayconstant_lvs_ex_gridlines = 1
	Local Const $_arrayconstant_lvis_selected = 2
	Local Const $_arrayconstant_lvs_showselalways = 8
	Local Const $_arrayconstant_lvs_ex_fullrowselect = 32
	Local Const $_arrayconstant_ws_ex_clientedge = 512
	Local Const $_arrayconstant_ws_maximizebox = 65536
	Local Const $_arrayconstant_ws_minimizebox = 131072
	Local Const $_arrayconstant_ws_sizebox = 262144
	Local Const $_arrayconstant_wm_setredraw = 11
	Local Const $_arrayconstant_lvscw_autosize = -1
	Local $icoordmode = Opt("GUICoordMode", 1)
	Local $iorgwidth = 210, $iheight = 200, $iminsize = 250
	Local $hgui = GUICreate($stitle, $iorgwidth, $iheight, Default, Default, BitOR($_arrayconstant_ws_sizebox, $_arrayconstant_ws_minimizebox, $_arrayconstant_ws_maximizebox))
	Local $aiguisize = WinGetClientSize($hgui)
	Local $ibuttonwidth_2 = $aiguisize[0] / 2
	Local $ibuttonwidth_3 = $aiguisize[0] / 3
	Local $idlistview = GUICtrlCreateListView($sheader, 0, 0, $aiguisize[0], $aiguisize[1] - $ibuttonmargin, $_arrayconstant_lvs_showselalways)
	GUICtrlSetBkColor($idlistview, $_arrayconstant_gui_bkcolor_lv_alternate)
	GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setextendedlistviewstyle, $_arrayconstant_lvs_ex_gridlines, $_arrayconstant_lvs_ex_gridlines)
	GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setextendedlistviewstyle, $_arrayconstant_lvs_ex_fullrowselect, $_arrayconstant_lvs_ex_fullrowselect)
	GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setextendedlistviewstyle, $_arrayconstant_ws_ex_clientedge, $_arrayconstant_ws_ex_clientedge)
	Local $idcopy_id = 9999, $idcopy_data = 99999, $iddata_label = 99999, $iduser_func = 99999, $idexit_script = 99999
	If $ibuttonmargin Then
		$idcopy_id = GUICtrlCreateButton("Copy Data && Hdr/Row", 0, $aiguisize[1] - $ibuttonmargin, $ibuttonwidth_2, 20)
		$idcopy_data = GUICtrlCreateButton("Copy Data Only", $ibuttonwidth_2, $aiguisize[1] - $ibuttonmargin, $ibuttonwidth_2, 20)
		If $ibuttonmargin = 40 Then
			Local $ibuttonwidth_var = $ibuttonwidth_2
			Local $ioffset = $ibuttonwidth_2
			If IsFunc($huser_function) Then
				$iduser_func = GUICtrlCreateButton("Run User Func", $ibuttonwidth_3, $aiguisize[1] - 20, $ibuttonwidth_3, 20)
				$ibuttonwidth_var = $ibuttonwidth_3
				$ioffset = $ibuttonwidth_3 * 2
			EndIf
			$idexit_script = GUICtrlCreateButton("Exit Script", $ioffset, $aiguisize[1] - 20, $ibuttonwidth_var, 20)
			$iddata_label = GUICtrlCreateLabel($sdisplaydata, 0, $aiguisize[1] - 20, $ibuttonwidth_var, 18, BitOR($_arrayconstant_ss_center, $_arrayconstant_ss_centerimage))
			Select
				Case $btruncated OR $itranspose OR $brange_flag
					GUICtrlSetColor($iddata_label, 16711680)
					GUICtrlSetTip($iddata_label, $stipdata)
			EndSelect
		EndIf
	EndIf
	GUICtrlSetResizing($idlistview, $_arrayconstant_gui_dockborders)
	GUICtrlSetResizing($idcopy_id, $_arrayconstant_gui_dockleft + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSetResizing($idcopy_data, $_arrayconstant_gui_dockright + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSetResizing($iddata_label, $_arrayconstant_gui_dockleft + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSetResizing($iduser_func, $_arrayconstant_gui_dockhcenter + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSetResizing($idexit_script, $_arrayconstant_gui_dockright + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSendMsg($idlistview, $_arrayconstant_wm_setredraw, 0, 0)
	Local $iditem
	For $i = 0 To UBound($avarraytext) - 1
		$iditem = GUICtrlCreateListViewItem($avarraytext[$i], $idlistview)
		If $ialt_color Then
			GUICtrlSetBkColor($iditem, $ialt_color)
		EndIf
	Next
	If $icolalign Then
		Local Const $_arrayconstant_lvcf_fmt = 1
		Local Const $_arrayconstant_lvm_setcolumnw = (4096 + 96)
		Local $tcolumn = DllStructCreate("uint Mask;int Fmt;int CX;ptr Text;int TextMax;int SubItem;int Image;int Order;int cxMin;int cxDefault;int cxIdeal")
		DllStructSetData($tcolumn, "Mask", $_arrayconstant_lvcf_fmt)
		DllStructSetData($tcolumn, "Fmt", $icolalign / 2)
		Local $pcolumn = DllStructGetPtr($tcolumn)
		For $i = 1 To $isubitem_end - $isubitem_start + 1
			GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setcolumnw, $i, $pcolumn)
		Next
	EndIf
	GUICtrlSendMsg($idlistview, $_arrayconstant_wm_setredraw, 1, 0)
	Local $iborder = 45
	If UBound($avarraytext) > 20 Then
		$iborder += 20
	EndIf
	Local $iwidth = $iborder, $icolwidth = 0, $aicolwidth[$isubitem_end - $isubitem_start + 2], $imin_colwidth = 55
	For $i = 0 To $isubitem_end - $isubitem_start + 1
		GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setcolumnwidth, $i, $_arrayconstant_lvscw_autosize)
		$icolwidth = GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getcolumnwidth, $i, 0)
		If $icolwidth < $imin_colwidth Then
			GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setcolumnwidth, $i, $imin_colwidth)
			$icolwidth = $imin_colwidth
		EndIf
		$iwidth += $icolwidth
		$aicolwidth[$i] = $icolwidth
	Next
	If $inorow Then $iwidth -= 55
	If $iwidth > @DesktopWidth - 100 Then
		$iwidth = $iborder
		For $i = 0 To $isubitem_end - $isubitem_start + 1
			If $aicolwidth[$i] > $imax_colwidth Then
				GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_setcolumnwidth, $i, $imax_colwidth)
				$iwidth += $imax_colwidth
			Else
				$iwidth += $aicolwidth[$i]
			EndIf
		Next
	EndIf
	If $iwidth > @DesktopWidth - 100 Then
		$iwidth = @DesktopWidth - 100
	ElseIf $iwidth < $iminsize Then
		$iwidth = $iminsize
	EndIf
	Local $trect = DllStructCreate("struct; long Left;long Top;long Right;long Bottom; endstruct")
	DllCall("user32.dll", "struct*", "SendMessageW", "hwnd", GUICtrlGetHandle($idlistview), "uint", $_arrayconstant_lvm_getitemrect, "wparam", 0, "struct*", $trect)
	Local $aiwin_pos = WinGetPos($hgui)
	Local $ailv_pos = ControlGetPos($hgui, "", $idlistview)
	$iheight = ((UBound($avarraytext) + 2) * (DllStructGetData($trect, "Bottom") - DllStructGetData($trect, "Top"))) + $aiwin_pos[3] - $ailv_pos[3]
	If $iheight > @DesktopHeight - 100 Then
		$iheight = @DesktopHeight - 100
	ElseIf $iheight < $iminsize Then
		$iheight = $iminsize
	EndIf
	If $iverbose Then SplashOff()
	GUISetState(@SW_HIDE, $hgui)
	WinMove($hgui, "", (@DesktopWidth - $iwidth) / 2, (@DesktopHeight - $iheight) / 2, $iwidth, $iheight)
	GUISetState(@SW_SHOW, $hgui)
	Local $ioneventmode = Opt("GUIOnEventMode", 0), $imsg
	While 1
		$imsg = GUIGetMsg()
		Switch $imsg
			Case $_arrayconstant_gui_event_close
				ExitLoop
			Case $idcopy_id, $idcopy_data
				Local $isel_count = GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getselectedcount, 0, 0)
				If $iverbose AND (NOT $isel_count) AND ($iitem_end - $iitem_start) * ($isubitem_end - $isubitem_start) > 10000 Then
					SplashTextOn("ArrayDisplay", "Copying data" & @CRLF & @CRLF & "Please be patient", 300, 100)
				EndIf
				Local $sclip = "", $sitem, $asplit
				For $i = 0 To $iitem_end - $iitem_start
					If $isel_count AND NOT (GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getitemstate, $i, $_arrayconstant_lvis_selected)) Then
						ContinueLoop
					EndIf
					$sitem = $avarraytext[$i]
					If $imsg = $idcopy_data Then
						$sitem = StringRegExpReplace($sitem, "^\[\d+\].(.*)$", "$1")
					EndIf
					If $icw_colwidth Then
						$asplit = StringSplit($sitem, $sad_separator)
						$sitem = ""
						For $j = 1 To $asplit[0]
							$sitem &= StringFormat("%-" & $icw_colwidth + 1 & "s", StringLeft($asplit[$j], $icw_colwidth))
						Next
					Else
						$sitem = StringReplace($sitem, $sad_separator, $vuser_separator)
					EndIf
					$sclip &= $sitem & @CRLF
				Next
				If $imsg = $idcopy_id Then
					If $icw_colwidth Then
						$asplit = StringSplit($sheader, $sad_separator)
						$sitem = ""
						For $j = 1 To $asplit[0]
							$sitem &= StringFormat("%-" & $icw_colwidth + 1 & "s", StringLeft($asplit[$j], $icw_colwidth))
						Next
					Else
						$sitem = StringReplace($sheader, $sad_separator, $vuser_separator)
					EndIf
					$sclip = $sitem & @CRLF & $sclip
				EndIf
				ClipPut($sclip)
				SplashOff()
				GUICtrlSetState($idlistview, $_arrayconstant_gui_focus)
			Case $iduser_func
				Local $aiselitems[$irowlimit] = [0]
				For $i = 0 To GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getitemcount, 0, 0)
					If GUICtrlSendMsg($idlistview, $_arrayconstant_lvm_getitemstate, $i, $_arrayconstant_lvis_selected) Then
						$aiselitems[0] += 1
						$aiselitems[$aiselitems[0]] = $i + $iitem_start
					EndIf
				Next
				ReDim $aiselitems[$aiselitems[0] + 1]
				$huser_function($aarray, $aiselitems)
				GUICtrlSetState($idlistview, $_arrayconstant_gui_focus)
			Case $idexit_script
				GUIDelete($hgui)
				Exit
		EndSwitch
	WEnd
	GUIDelete($hgui)
	Opt("GUICoordMode", $icoordmode)
	Opt("GUIOnEventMode", $ioneventmode)
	Opt("GUIDataSeparatorChar", $scurr_separator)
	Return 1
EndFunc

Func _arrayextract(Const ByRef $aarray, $istart_row = -1, $iend_row = -1, $istart_col = -1, $iend_col = -1)
	If $istart_row = Default Then $istart_row = -1
	If $iend_row = Default Then $iend_row = -1
	If $istart_col = Default Then $istart_col = -1
	If $iend_col = Default Then $iend_col = -1
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If $iend_row = -1 Then $iend_row = $idim_1
	If $istart_row = -1 Then $istart_row = 0
	If $istart_row < -1 OR $iend_row < -1 Then Return SetError(3, 0, -1)
	If $istart_row > $idim_1 OR $iend_row > $idim_1 Then Return SetError(3, 0, -1)
	If $istart_row > $iend_row Then Return SetError(4, 0, -1)
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			Local $aretarray[$iend_row - $istart_row + 1]
			For $i = 0 To $iend_row - $istart_row
				$aretarray[$i] = $aarray[$i + $istart_row]
			Next
			Return $aretarray
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			If $iend_col = -1 Then $iend_col = $idim_2
			If $istart_col = -1 Then $istart_col = 0
			If $istart_col < -1 OR $iend_col < -1 Then Return SetError(5, 0, -1)
			If $istart_col > $idim_2 OR $iend_col > $idim_2 Then Return SetError(5, 0, -1)
			If $istart_col > $iend_col Then Return SetError(6, 0, -1)
			If $istart_col = $iend_col Then
				Local $aretarray[$iend_row - $istart_row + 1]
			Else
				Local $aretarray[$iend_row - $istart_row + 1][$iend_col - $istart_col + 1]
			EndIf
			For $i = 0 To $iend_row - $istart_row
				For $j = 0 To $iend_col - $istart_col
					If $istart_col = $iend_col Then
						$aretarray[$i] = $aarray[$i + $istart_row][$j + $istart_col]
					Else
						$aretarray[$i][$j] = $aarray[$i + $istart_row][$j + $istart_col]
					EndIf
				Next
			Next
			Return $aretarray
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return 1
EndFunc

Func _arrayfindall(Const ByRef $aarray, $vvalue, $istart = 0, $iend = 0, $icase = 0, $icompare = 0, $isubitem = 0, $brow = False)
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $icase = Default Then $icase = 0
	If $icompare = Default Then $icompare = 0
	If $isubitem = Default Then $isubitem = 0
	If $brow = Default Then $brow = False
	$istart = _arraysearch($aarray, $vvalue, $istart, $iend, $icase, $icompare, 1, $isubitem, $brow)
	If @error Then Return SetError(@error, 0, -1)
	Local $iindex = 0, $avresult[UBound($aarray, ($brow ? $ubound_columns : $ubound_rows))]
	Do
		$avresult[$iindex] = $istart
		$iindex += 1
		$istart = _arraysearch($aarray, $vvalue, $istart + 1, $iend, $icase, $icompare, 1, $isubitem, $brow)
	Until @error
	ReDim $avresult[$iindex]
	Return $avresult
EndFunc

Func _arrayinsert(ByRef $aarray, $vrange, $vvalue = "", $istart = 0, $sdelim_item = "|", $sdelim_row = @CRLF, $iforce = $arrayfill_force_default)
	If $vvalue = Default Then $vvalue = ""
	If $istart = Default Then $istart = 0
	If $sdelim_item = Default Then $sdelim_item = "|"
	If $sdelim_row = Default Then $sdelim_row = @CRLF
	If $iforce = Default Then $iforce = $arrayfill_force_default
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	Local $hdatatype = 0
	Switch $iforce
		Case $arrayfill_force_int
			$hdatatype = Int
		Case $arrayfill_force_number
			$hdatatype = Number
		Case $arrayfill_force_ptr
			$hdatatype = Ptr
		Case $arrayfill_force_hwnd
			$hdatatype = HWnd
		Case $arrayfill_force_string
			$hdatatype = String
	EndSwitch
	Local $asplit_1, $asplit_2
	If IsArray($vrange) Then
		If UBound($vrange, $ubound_dimensions) <> 1 OR UBound($vrange, $ubound_rows) < 2 Then Return SetError(4, 0, -1)
	Else
		Local $inumber
		$vrange = StringStripWS($vrange, 8)
		$asplit_1 = StringSplit($vrange, ";")
		$vrange = ""
		For $i = 1 To $asplit_1[0]
			If NOT StringRegExp($asplit_1[$i], "^\d+(-\d+)?$") Then Return SetError(3, 0, -1)
			$asplit_2 = StringSplit($asplit_1[$i], "-")
			Switch $asplit_2[0]
				Case 1
					$vrange &= $asplit_2[1] & ";"
				Case 2
					If Number($asplit_2[2]) >= Number($asplit_2[1]) Then
						$inumber = $asplit_2[1] - 1
						Do
							$inumber += 1
							$vrange &= $inumber & ";"
						Until $inumber = $asplit_2[2]
					EndIf
			EndSwitch
		Next
		$vrange = StringSplit(StringTrimRight($vrange, 1), ";")
	EndIf
	If $vrange[1] < 0 OR $vrange[$vrange[0]] > $idim_1 Then Return SetError(5, 0, -1)
	For $i = 2 To $vrange[0]
		If $vrange[$i] < $vrange[$i - 1] Then Return SetError(3, 0, -1)
	Next
	Local $icopyto_index = $idim_1 + $vrange[0]
	Local $iinsertpoint_index = $vrange[0]
	Local $iinsert_index = $vrange[$iinsertpoint_index]
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $iforce = $arrayfill_force_singleitem Then
				ReDim $aarray[$idim_1 + $vrange[0] + 1]
				For $ireadfromindex = $idim_1 To 0 Step -1
					$aarray[$icopyto_index] = $aarray[$ireadfromindex]
					$icopyto_index -= 1
					$iinsert_index = $vrange[$iinsertpoint_index]
					While $ireadfromindex = $iinsert_index
						$aarray[$icopyto_index] = $vvalue
						$icopyto_index -= 1
						$iinsertpoint_index -= 1
						If $iinsertpoint_index < 1 Then ExitLoop 2
						$iinsert_index = $vrange[$iinsertpoint_index]
					WEnd
				Next
				Return $idim_1 + $vrange[0] + 1
			EndIf
			ReDim $aarray[$idim_1 + $vrange[0] + 1]
			If IsArray($vvalue) Then
				If UBound($vvalue, $ubound_dimensions) <> 1 Then Return SetError(5, 0, -1)
				$hdatatype = 0
			Else
				Local $atmp = StringSplit($vvalue, $sdelim_item, $str_nocount + $str_entiresplit)
				If UBound($atmp, $ubound_rows) = 1 Then
					$atmp[0] = $vvalue
					$hdatatype = 0
				EndIf
				$vvalue = $atmp
			EndIf
			For $ireadfromindex = $idim_1 To 0 Step -1
				$aarray[$icopyto_index] = $aarray[$ireadfromindex]
				$icopyto_index -= 1
				$iinsert_index = $vrange[$iinsertpoint_index]
				While $ireadfromindex = $iinsert_index
					If $iinsertpoint_index <= UBound($vvalue, $ubound_rows) Then
						If IsFunc($hdatatype) Then
							$aarray[$icopyto_index] = $hdatatype($vvalue[$iinsertpoint_index - 1])
						Else
							$aarray[$icopyto_index] = $vvalue[$iinsertpoint_index - 1]
						EndIf
					Else
						$aarray[$icopyto_index] = ""
					EndIf
					$icopyto_index -= 1
					$iinsertpoint_index -= 1
					If $iinsertpoint_index = 0 Then ExitLoop 2
					$iinsert_index = $vrange[$iinsertpoint_index]
				WEnd
			Next
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns)
			If $istart < 0 OR $istart > $idim_2 - 1 Then Return SetError(6, 0, -1)
			Local $ivaldim_1, $ivaldim_2
			If IsArray($vvalue) Then
				If UBound($vvalue, $ubound_dimensions) <> 2 Then Return SetError(7, 0, -1)
				$ivaldim_1 = UBound($vvalue, $ubound_rows)
				$ivaldim_2 = UBound($vvalue, $ubound_columns)
				$hdatatype = 0
			Else
				$asplit_1 = StringSplit($vvalue, $sdelim_row, $str_nocount + $str_entiresplit)
				$ivaldim_1 = UBound($asplit_1, $ubound_rows)
				StringReplace($asplit_1[0], $sdelim_item, "")
				$ivaldim_2 = @extended + 1
				Local $atmp[$ivaldim_1][$ivaldim_2]
				For $i = 0 To $ivaldim_1 - 1
					$asplit_2 = StringSplit($asplit_1[$i], $sdelim_item, $str_nocount + $str_entiresplit)
					For $j = 0 To $ivaldim_2 - 1
						$atmp[$i][$j] = $asplit_2[$j]
					Next
				Next
				$vvalue = $atmp
			EndIf
			If UBound($vvalue, $ubound_columns) + $istart > UBound($aarray, $ubound_columns) Then Return SetError(8, 0, -1)
			ReDim $aarray[$idim_1 + $vrange[0] + 1][$idim_2]
			For $ireadfromindex = $idim_1 To 0 Step -1
				For $j = 0 To $idim_2 - 1
					$aarray[$icopyto_index][$j] = $aarray[$ireadfromindex][$j]
				Next
				$icopyto_index -= 1
				$iinsert_index = $vrange[$iinsertpoint_index]
				While $ireadfromindex = $iinsert_index
					For $j = 0 To $idim_2 - 1
						If $j < $istart Then
							$aarray[$icopyto_index][$j] = ""
						ElseIf $j - $istart > $ivaldim_2 - 1 Then
							$aarray[$icopyto_index][$j] = ""
						Else
							If $iinsertpoint_index - 1 < $ivaldim_1 Then
								If IsFunc($hdatatype) Then
									$aarray[$icopyto_index][$j] = $hdatatype($vvalue[$iinsertpoint_index - 1][$j - $istart])
								Else
									$aarray[$icopyto_index][$j] = $vvalue[$iinsertpoint_index - 1][$j - $istart]
								EndIf
							Else
								$aarray[$icopyto_index][$j] = ""
							EndIf
						EndIf
					Next
					$icopyto_index -= 1
					$iinsertpoint_index -= 1
					If $iinsertpoint_index = 0 Then ExitLoop 2
					$iinsert_index = $vrange[$iinsertpoint_index]
				WEnd
			Next
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return UBound($aarray, $ubound_rows)
EndFunc

Func _arraymax(Const ByRef $aarray, $icompnumeric = 0, $istart = -1, $iend = -1, $isubitem = 0)
	Local $iresult = _arraymaxindex($aarray, $icompnumeric, $istart, $iend, $isubitem)
	If @error Then Return SetError(@error, 0, "")
	If UBound($aarray, $ubound_dimensions) = 1 Then
		Return $aarray[$iresult]
	Else
		Return $aarray[$iresult][$isubitem]
	EndIf
EndFunc

Func _arraymaxindex(Const ByRef $aarray, $icompnumeric = 0, $istart = -1, $iend = -1, $isubitem = 0)
	If $icompnumeric = Default Then $icompnumeric = 0
	If $istart = Default Then $istart = -1
	If $iend = Default Then $iend = -1
	If $isubitem = Default Then $isubitem = 0
	Local $iret = __array_minmaxindex($aarray, $icompnumeric, $istart, $iend, $isubitem, __array_greaterthan)
	Return SetError(@error, 0, $iret)
EndFunc

Func _arraymin(Const ByRef $aarray, $icompnumeric = 0, $istart = -1, $iend = -1, $isubitem = 0)
	Local $iresult = _arrayminindex($aarray, $icompnumeric, $istart, $iend, $isubitem)
	If @error Then Return SetError(@error, 0, "")
	If UBound($aarray, $ubound_dimensions) = 1 Then
		Return $aarray[$iresult]
	Else
		Return $aarray[$iresult][$isubitem]
	EndIf
EndFunc

Func _arrayminindex(Const ByRef $aarray, $icompnumeric = 0, $istart = -1, $iend = -1, $isubitem = 0)
	If $icompnumeric = Default Then $icompnumeric = 0
	If $istart = Default Then $istart = -1
	If $iend = Default Then $iend = -1
	If $isubitem = Default Then $isubitem = 0
	Local $iret = __array_minmaxindex($aarray, $icompnumeric, $istart, $iend, $isubitem, __array_lessthan)
	Return SetError(@error, 0, $iret)
EndFunc

Func _arraypermute(ByRef $aarray, $sdelimiter = "")
	If $sdelimiter = Default Then $sdelimiter = ""
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(2, 0, 0)
	Local $isize = UBound($aarray), $ifactorial = 1, $aidx[$isize], $aresult[1], $icount = 1
	If UBound($aarray) Then
		For $i = 0 To $isize - 1
			$aidx[$i] = $i
		Next
		For $i = $isize To 1 Step -1
			$ifactorial *= $i
		Next
		ReDim $aresult[$ifactorial + 1]
		$aresult[0] = $ifactorial
		__array_exeterinternal($aarray, 0, $isize, $sdelimiter, $aidx, $aresult, $icount)
	Else
		$aresult[0] = 0
	EndIf
	Return $aresult
EndFunc

Func _arraypop(ByRef $aarray)
	If (NOT IsArray($aarray)) Then Return SetError(1, 0, "")
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(2, 0, "")
	Local $iubound = UBound($aarray) - 1
	If $iubound = -1 Then Return SetError(3, 0, "")
	Local $slastval = $aarray[$iubound]
	If $iubound > -1 Then
		ReDim $aarray[$iubound]
	EndIf
	Return $slastval
EndFunc

Func _arraypush(ByRef $aarray, $vvalue, $idirection = 0)
	If $idirection = Default Then $idirection = 0
	If (NOT IsArray($aarray)) Then Return SetError(1, 0, 0)
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(3, 0, 0)
	Local $iubound = UBound($aarray) - 1
	If IsArray($vvalue) Then
		Local $iubounds = UBound($vvalue)
		If ($iubounds - 1) > $iubound Then Return SetError(2, 0, 0)
		If $idirection Then
			For $i = $iubound To $iubounds Step -1
				$aarray[$i] = $aarray[$i - $iubounds]
			Next
			For $i = 0 To $iubounds - 1
				$aarray[$i] = $vvalue[$i]
			Next
		Else
			For $i = 0 To $iubound - $iubounds
				$aarray[$i] = $aarray[$i + $iubounds]
			Next
			For $i = 0 To $iubounds - 1
				$aarray[$i + $iubound - $iubounds + 1] = $vvalue[$i]
			Next
		EndIf
	Else
		If $iubound > -1 Then
			If $idirection Then
				For $i = $iubound To 1 Step -1
					$aarray[$i] = $aarray[$i - 1]
				Next
				$aarray[0] = $vvalue
			Else
				For $i = 0 To $iubound - 1
					$aarray[$i] = $aarray[$i + 1]
				Next
				$aarray[$iubound] = $vvalue
			EndIf
		EndIf
	EndIf
	Return 1
EndFunc

Func _arrayreverse(ByRef $aarray, $istart = 0, $iend = 0)
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	If UBound($aarray, $ubound_dimensions) <> 1 Then Return SetError(3, 0, 0)
	If NOT UBound($aarray) Then Return SetError(4, 0, 0)
	Local $vtmp, $iubound = UBound($aarray) - 1
	If $iend < 1 OR $iend > $iubound Then $iend = $iubound
	If $istart < 0 Then $istart = 0
	If $istart > $iend Then Return SetError(2, 0, 0)
	For $i = $istart To Int(($istart + $iend - 1) / 2)
		$vtmp = $aarray[$i]
		$aarray[$i] = $aarray[$iend]
		$aarray[$iend] = $vtmp
		$iend -= 1
	Next
	Return 1
EndFunc

Func _arraysearch(Const ByRef $aarray, $vvalue, $istart = 0, $iend = 0, $icase = 0, $icompare = 0, $iforward = 1, $isubitem = -1, $brow = False)
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $icase = Default Then $icase = 0
	If $icompare = Default Then $icompare = 0
	If $iforward = Default Then $iforward = 1
	If $isubitem = Default Then $isubitem = -1
	If $brow = Default Then $brow = False
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray) - 1
	If $idim_1 = -1 Then Return SetError(3, 0, -1)
	Local $idim_2 = UBound($aarray, $ubound_columns) - 1
	Local $bcomptype = False
	If $icompare = 2 Then
		$icompare = 0
		$bcomptype = True
	EndIf
	If $brow Then
		If UBound($aarray, $ubound_dimensions) = 1 Then Return SetError(5, 0, -1)
		If $iend < 1 OR $iend > $idim_2 Then $iend = $idim_2
		If $istart < 0 Then $istart = 0
		If $istart > $iend Then Return SetError(4, 0, -1)
	Else
		If $iend < 1 OR $iend > $idim_1 Then $iend = $idim_1
		If $istart < 0 Then $istart = 0
		If $istart > $iend Then Return SetError(4, 0, -1)
	EndIf
	Local $istep = 1
	If NOT $iforward Then
		Local $itmp = $istart
		$istart = $iend
		$iend = $itmp
		$istep = -1
	EndIf
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If NOT $icompare Then
				If NOT $icase Then
					For $i = $istart To $iend Step $istep
						If $bcomptype AND VarGetType($aarray[$i]) <> VarGetType($vvalue) Then ContinueLoop
						If $aarray[$i] = $vvalue Then Return $i
					Next
				Else
					For $i = $istart To $iend Step $istep
						If $bcomptype AND VarGetType($aarray[$i]) <> VarGetType($vvalue) Then ContinueLoop
						If $aarray[$i] == $vvalue Then Return $i
					Next
				EndIf
			Else
				For $i = $istart To $iend Step $istep
					If $icompare = 3 Then
						If StringRegExp($aarray[$i], $vvalue) Then Return $i
					Else
						If StringInStr($aarray[$i], $vvalue, $icase) > 0 Then Return $i
					EndIf
				Next
			EndIf
		Case 2
			Local $idim_sub
			If $brow Then
				$idim_sub = $idim_1
				If $isubitem > $idim_sub Then $isubitem = $idim_sub
				If $isubitem < 0 Then
					$isubitem = 0
				Else
					$idim_sub = $isubitem
				EndIf
			Else
				$idim_sub = $idim_2
				If $isubitem > $idim_sub Then $isubitem = $idim_sub
				If $isubitem < 0 Then
					$isubitem = 0
				Else
					$idim_sub = $isubitem
				EndIf
			EndIf
			For $j = $isubitem To $idim_sub
				If NOT $icompare Then
					If NOT $icase Then
						For $i = $istart To $iend Step $istep
							If $brow Then
								If $bcomptype AND VarGetType($aarray[$j][$j]) <> VarGetType($vvalue) Then ContinueLoop
								If $aarray[$j][$i] = $vvalue Then Return $i
							Else
								If $bcomptype AND VarGetType($aarray[$i][$j]) <> VarGetType($vvalue) Then ContinueLoop
								If $aarray[$i][$j] = $vvalue Then Return $i
							EndIf
						Next
					Else
						For $i = $istart To $iend Step $istep
							If $brow Then
								If $bcomptype AND VarGetType($aarray[$j][$i]) <> VarGetType($vvalue) Then ContinueLoop
								If $aarray[$j][$i] == $vvalue Then Return $i
							Else
								If $bcomptype AND VarGetType($aarray[$i][$j]) <> VarGetType($vvalue) Then ContinueLoop
								If $aarray[$i][$j] == $vvalue Then Return $i
							EndIf
						Next
					EndIf
				Else
					For $i = $istart To $iend Step $istep
						If $icompare = 3 Then
							If $brow Then
								If StringRegExp($aarray[$j][$i], $vvalue) Then Return $i
							Else
								If StringRegExp($aarray[$i][$j], $vvalue) Then Return $i
							EndIf
						Else
							If $brow Then
								If StringInStr($aarray[$j][$i], $vvalue, $icase) > 0 Then Return $i
							Else
								If StringInStr($aarray[$i][$j], $vvalue, $icase) > 0 Then Return $i
							EndIf
						EndIf
					Next
				EndIf
			Next
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return SetError(6, 0, -1)
EndFunc

Func _arrayshuffle(ByRef $aarray, $istart_row = 0, $iend_row = 0, $icol = -1)
	If $istart_row = Default Then $istart_row = 0
	If $iend_row = Default Then $iend_row = 0
	If $icol = Default Then $icol = -1
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows)
	If $iend_row = 0 Then $iend_row = $idim_1 - 1
	If $istart_row < 0 OR $istart_row > $idim_1 - 1 Then Return SetError(3, 0, -1)
	If $iend_row < 1 OR $iend_row > $idim_1 - 1 Then Return SetError(3, 0, -1)
	If $istart_row > $iend_row Then Return SetError(4, 0, -1)
	Local $vtmp, $irand
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			For $i = $iend_row To $istart_row + 1 Step -1
				$irand = Random($istart_row, $i, 1)
				$vtmp = $aarray[$i]
				$aarray[$i] = $aarray[$irand]
				$aarray[$irand] = $vtmp
			Next
			Return 1
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns)
			If $icol < -1 OR $icol > $idim_2 - 1 Then Return SetError(5, 0, -1)
			Local $icol_start, $icol_end
			If $icol = -1 Then
				$icol_start = 0
				$icol_end = $idim_2 - 1
			Else
				$icol_start = $icol
				$icol_end = $icol
			EndIf
			For $i = $iend_row To $istart_row + 1 Step -1
				$irand = Random($istart_row, $i, 1)
				For $j = $icol_start To $icol_end
					$vtmp = $aarray[$i][$j]
					$aarray[$i][$j] = $aarray[$irand][$j]
					$aarray[$irand][$j] = $vtmp
				Next
			Next
			Return 1
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
EndFunc

Func _arraysort(ByRef $aarray, $idescending = 0, $istart = 0, $iend = 0, $isubitem = 0, $ipivot = 0)
	If $idescending = Default Then $idescending = 0
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $isubitem = Default Then $isubitem = 0
	If $ipivot = Default Then $ipivot = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	Local $iubound = UBound($aarray) - 1
	If $iubound = -1 Then Return SetError(5, 0, 0)
	If $iend = Default Then $iend = 0
	If $iend < 1 OR $iend > $iubound OR $iend = Default Then $iend = $iubound
	If $istart < 0 OR $istart = Default Then $istart = 0
	If $istart > $iend Then Return SetError(2, 0, 0)
	If $idescending = Default Then $idescending = 0
	If $ipivot = Default Then $ipivot = 0
	If $isubitem = Default Then $isubitem = 0
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $ipivot Then
				__arraydualpivotsort($aarray, $istart, $iend)
			Else
				__arrayquicksort1d($aarray, $istart, $iend)
			EndIf
			If $idescending Then _arrayreverse($aarray, $istart, $iend)
		Case 2
			If $ipivot Then Return SetError(6, 0, 0)
			Local $isubmax = UBound($aarray, $ubound_columns) - 1
			If $isubitem > $isubmax Then Return SetError(3, 0, 0)
			If $idescending Then
				$idescending = -1
			Else
				$idescending = 1
			EndIf
			__arrayquicksort2d($aarray, $idescending, $istart, $iend, $isubitem, $isubmax)
		Case Else
			Return SetError(4, 0, 0)
	EndSwitch
	Return 1
EndFunc

Func __arrayquicksort1d(ByRef $aarray, Const ByRef $istart, Const ByRef $iend)
	If $iend <= $istart Then Return
	Local $vtmp
	If ($iend - $istart) < 15 Then
		Local $vcur
		For $i = $istart + 1 To $iend
			$vtmp = $aarray[$i]
			If IsNumber($vtmp) Then
				For $j = $i - 1 To $istart Step -1
					$vcur = $aarray[$j]
					If ($vtmp >= $vcur AND IsNumber($vcur)) OR (NOT IsNumber($vcur) AND StringCompare($vtmp, $vcur) >= 0) Then ExitLoop
					$aarray[$j + 1] = $vcur
				Next
			Else
				For $j = $i - 1 To $istart Step -1
					If (StringCompare($vtmp, $aarray[$j]) >= 0) Then ExitLoop
					$aarray[$j + 1] = $aarray[$j]
				Next
			EndIf
			$aarray[$j + 1] = $vtmp
		Next
		Return
	EndIf
	Local $l = $istart, $r = $iend, $vpivot = $aarray[Int(($istart + $iend) / 2)], $bnum = IsNumber($vpivot)
	Do
		If $bnum Then
			While ($aarray[$l] < $vpivot AND IsNumber($aarray[$l])) OR (NOT IsNumber($aarray[$l]) AND StringCompare($aarray[$l], $vpivot) < 0)
				$l += 1
			WEnd
			While ($aarray[$r] > $vpivot AND IsNumber($aarray[$r])) OR (NOT IsNumber($aarray[$r]) AND StringCompare($aarray[$r], $vpivot) > 0)
				$r -= 1
			WEnd
		Else
			While (StringCompare($aarray[$l], $vpivot) < 0)
				$l += 1
			WEnd
			While (StringCompare($aarray[$r], $vpivot) > 0)
				$r -= 1
			WEnd
		EndIf
		If $l <= $r Then
			$vtmp = $aarray[$l]
			$aarray[$l] = $aarray[$r]
			$aarray[$r] = $vtmp
			$l += 1
			$r -= 1
		EndIf
	Until $l > $r
	__arrayquicksort1d($aarray, $istart, $r)
	__arrayquicksort1d($aarray, $l, $iend)
EndFunc

Func __arrayquicksort2d(ByRef $aarray, Const ByRef $istep, Const ByRef $istart, Const ByRef $iend, Const ByRef $isubitem, Const ByRef $isubmax)
	If $iend <= $istart Then Return
	Local $vtmp, $l = $istart, $r = $iend, $vpivot = $aarray[Int(($istart + $iend) / 2)][$isubitem], $bnum = IsNumber($vpivot)
	Do
		If $bnum Then
			While ($istep * ($aarray[$l][$isubitem] - $vpivot) < 0 AND IsNumber($aarray[$l][$isubitem])) OR (NOT IsNumber($aarray[$l][$isubitem]) AND $istep * StringCompare($aarray[$l][$isubitem], $vpivot) < 0)
				$l += 1
			WEnd
			While ($istep * ($aarray[$r][$isubitem] - $vpivot) > 0 AND IsNumber($aarray[$r][$isubitem])) OR (NOT IsNumber($aarray[$r][$isubitem]) AND $istep * StringCompare($aarray[$r][$isubitem], $vpivot) > 0)
				$r -= 1
			WEnd
		Else
			While ($istep * StringCompare($aarray[$l][$isubitem], $vpivot) < 0)
				$l += 1
			WEnd
			While ($istep * StringCompare($aarray[$r][$isubitem], $vpivot) > 0)
				$r -= 1
			WEnd
		EndIf
		If $l <= $r Then
			For $i = 0 To $isubmax
				$vtmp = $aarray[$l][$i]
				$aarray[$l][$i] = $aarray[$r][$i]
				$aarray[$r][$i] = $vtmp
			Next
			$l += 1
			$r -= 1
		EndIf
	Until $l > $r
	__arrayquicksort2d($aarray, $istep, $istart, $r, $isubitem, $isubmax)
	__arrayquicksort2d($aarray, $istep, $l, $iend, $isubitem, $isubmax)
EndFunc

Func __arraydualpivotsort(ByRef $aarray, $ipivot_left, $ipivot_right, $bleftmost = True)
	If $ipivot_left > $ipivot_right Then Return
	Local $ilength = $ipivot_right - $ipivot_left + 1
	Local $i, $j, $k, $iai, $iak, $ia1, $ia2, $ilast
	If $ilength < 45 Then
		If $bleftmost Then
			$i = $ipivot_left
			While $i < $ipivot_right
				$j = $i
				$iai = $aarray[$i + 1]
				While $iai < $aarray[$j]
					$aarray[$j + 1] = $aarray[$j]
					$j -= 1
					If $j + 1 = $ipivot_left Then ExitLoop
				WEnd
				$aarray[$j + 1] = $iai
				$i += 1
			WEnd
		Else
			While 1
				If $ipivot_left >= $ipivot_right Then Return 1
				$ipivot_left += 1
				If $aarray[$ipivot_left] < $aarray[$ipivot_left - 1] Then ExitLoop
			WEnd
			While 1
				$k = $ipivot_left
				$ipivot_left += 1
				If $ipivot_left > $ipivot_right Then ExitLoop
				$ia1 = $aarray[$k]
				$ia2 = $aarray[$ipivot_left]
				If $ia1 < $ia2 Then
					$ia2 = $ia1
					$ia1 = $aarray[$ipivot_left]
				EndIf
				$k -= 1
				While $ia1 < $aarray[$k]
					$aarray[$k + 2] = $aarray[$k]
					$k -= 1
				WEnd
				$aarray[$k + 2] = $ia1
				While $ia2 < $aarray[$k]
					$aarray[$k + 1] = $aarray[$k]
					$k -= 1
				WEnd
				$aarray[$k + 1] = $ia2
				$ipivot_left += 1
			WEnd
			$ilast = $aarray[$ipivot_right]
			$ipivot_right -= 1
			While $ilast < $aarray[$ipivot_right]
				$aarray[$ipivot_right + 1] = $aarray[$ipivot_right]
				$ipivot_right -= 1
			WEnd
			$aarray[$ipivot_right + 1] = $ilast
		EndIf
		Return 1
	EndIf
	Local $iseventh = BitShift($ilength, 3) + BitShift($ilength, 6) + 1
	Local $ie1, $ie2, $ie3, $ie4, $ie5, $t
	$ie3 = Ceiling(($ipivot_left + $ipivot_right) / 2)
	$ie2 = $ie3 - $iseventh
	$ie1 = $ie2 - $iseventh
	$ie4 = $ie3 + $iseventh
	$ie5 = $ie4 + $iseventh
	If $aarray[$ie2] < $aarray[$ie1] Then
		$t = $aarray[$ie2]
		$aarray[$ie2] = $aarray[$ie1]
		$aarray[$ie1] = $t
	EndIf
	If $aarray[$ie3] < $aarray[$ie2] Then
		$t = $aarray[$ie3]
		$aarray[$ie3] = $aarray[$ie2]
		$aarray[$ie2] = $t
		If $t < $aarray[$ie1] Then
			$aarray[$ie2] = $aarray[$ie1]
			$aarray[$ie1] = $t
		EndIf
	EndIf
	If $aarray[$ie4] < $aarray[$ie3] Then
		$t = $aarray[$ie4]
		$aarray[$ie4] = $aarray[$ie3]
		$aarray[$ie3] = $t
		If $t < $aarray[$ie2] Then
			$aarray[$ie3] = $aarray[$ie2]
			$aarray[$ie2] = $t
			If $t < $aarray[$ie1] Then
				$aarray[$ie2] = $aarray[$ie1]
				$aarray[$ie1] = $t
			EndIf
		EndIf
	EndIf
	If $aarray[$ie5] < $aarray[$ie4] Then
		$t = $aarray[$ie5]
		$aarray[$ie5] = $aarray[$ie4]
		$aarray[$ie4] = $t
		If $t < $aarray[$ie3] Then
			$aarray[$ie4] = $aarray[$ie3]
			$aarray[$ie3] = $t
			If $t < $aarray[$ie2] Then
				$aarray[$ie3] = $aarray[$ie2]
				$aarray[$ie2] = $t
				If $t < $aarray[$ie1] Then
					$aarray[$ie2] = $aarray[$ie1]
					$aarray[$ie1] = $t
				EndIf
			EndIf
		EndIf
	EndIf
	Local $iless = $ipivot_left
	Local $igreater = $ipivot_right
	If (($aarray[$ie1] <> $aarray[$ie2]) AND ($aarray[$ie2] <> $aarray[$ie3]) AND ($aarray[$ie3] <> $aarray[$ie4]) AND ($aarray[$ie4] <> $aarray[$ie5])) Then
		Local $ipivot_1 = $aarray[$ie2]
		Local $ipivot_2 = $aarray[$ie4]
		$aarray[$ie2] = $aarray[$ipivot_left]
		$aarray[$ie4] = $aarray[$ipivot_right]
		Do
			$iless += 1
		Until $aarray[$iless] >= $ipivot_1
		Do
			$igreater -= 1
		Until $aarray[$igreater] <= $ipivot_2
		$k = $iless
		While $k <= $igreater
			$iak = $aarray[$k]
			If $iak < $ipivot_1 Then
				$aarray[$k] = $aarray[$iless]
				$aarray[$iless] = $iak
				$iless += 1
			ElseIf $iak > $ipivot_2 Then
				While $aarray[$igreater] > $ipivot_2
					$igreater -= 1
					If $igreater + 1 = $k Then ExitLoop 2
				WEnd
				If $aarray[$igreater] < $ipivot_1 Then
					$aarray[$k] = $aarray[$iless]
					$aarray[$iless] = $aarray[$igreater]
					$iless += 1
				Else
					$aarray[$k] = $aarray[$igreater]
				EndIf
				$aarray[$igreater] = $iak
				$igreater -= 1
			EndIf
			$k += 1
		WEnd
		$aarray[$ipivot_left] = $aarray[$iless - 1]
		$aarray[$iless - 1] = $ipivot_1
		$aarray[$ipivot_right] = $aarray[$igreater + 1]
		$aarray[$igreater + 1] = $ipivot_2
		__arraydualpivotsort($aarray, $ipivot_left, $iless - 2, True)
		__arraydualpivotsort($aarray, $igreater + 2, $ipivot_right, False)
		If ($iless < $ie1) AND ($ie5 < $igreater) Then
			While $aarray[$iless] = $ipivot_1
				$iless += 1
			WEnd
			While $aarray[$igreater] = $ipivot_2
				$igreater -= 1
			WEnd
			$k = $iless
			While $k <= $igreater
				$iak = $aarray[$k]
				If $iak = $ipivot_1 Then
					$aarray[$k] = $aarray[$iless]
					$aarray[$iless] = $iak
					$iless += 1
				ElseIf $iak = $ipivot_2 Then
					While $aarray[$igreater] = $ipivot_2
						$igreater -= 1
						If $igreater + 1 = $k Then ExitLoop 2
					WEnd
					If $aarray[$igreater] = $ipivot_1 Then
						$aarray[$k] = $aarray[$iless]
						$aarray[$iless] = $ipivot_1
						$iless += 1
					Else
						$aarray[$k] = $aarray[$igreater]
					EndIf
					$aarray[$igreater] = $iak
					$igreater -= 1
				EndIf
				$k += 1
			WEnd
		EndIf
		__arraydualpivotsort($aarray, $iless, $igreater, False)
	Else
		Local $ipivot = $aarray[$ie3]
		$k = $iless
		While $k <= $igreater
			If $aarray[$k] = $ipivot Then
				$k += 1
				ContinueLoop
			EndIf
			$iak = $aarray[$k]
			If $iak < $ipivot Then
				$aarray[$k] = $aarray[$iless]
				$aarray[$iless] = $iak
				$iless += 1
			Else
				While $aarray[$igreater] > $ipivot
					$igreater -= 1
				WEnd
				If $aarray[$igreater] < $ipivot Then
					$aarray[$k] = $aarray[$iless]
					$aarray[$iless] = $aarray[$igreater]
					$iless += 1
				Else
					$aarray[$k] = $ipivot
				EndIf
				$aarray[$igreater] = $iak
				$igreater -= 1
			EndIf
			$k += 1
		WEnd
		__arraydualpivotsort($aarray, $ipivot_left, $iless - 1, True)
		__arraydualpivotsort($aarray, $igreater + 1, $ipivot_right, False)
	EndIf
EndFunc

Func _arrayswap(ByRef $aarray, $iindex_1, $iindex_2, $bcol = False, $istart = -1, $iend = -1)
	If $bcol = Default Then $bcol = False
	If $istart = Default Then $istart = -1
	If $iend = Default Then $iend = -1
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	Local $idim_2 = UBound($aarray, $ubound_columns) - 1
	If $idim_2 = -1 Then
		$bcol = False
		$istart = -1
		$iend = -1
	EndIf
	If $istart > $iend Then Return SetError(5, 0, -1)
	If $bcol Then
		If $iindex_1 < 0 OR $iindex_2 > $idim_2 Then Return SetError(3, 0, -1)
		If $istart = -1 Then $istart = 0
		If $iend = -1 Then $iend = $idim_1
	Else
		If $iindex_1 < 0 OR $iindex_2 > $idim_1 Then Return SetError(3, 0, -1)
		If $istart = -1 Then $istart = 0
		If $iend = -1 Then $iend = $idim_2
	EndIf
	Local $vtmp
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			$vtmp = $aarray[$iindex_1]
			$aarray[$iindex_1] = $aarray[$iindex_2]
			$aarray[$iindex_2] = $vtmp
		Case 2
			If $istart < -1 OR $iend < -1 Then Return SetError(4, 0, -1)
			If $bcol Then
				If $istart > $idim_1 OR $iend > $idim_1 Then Return SetError(4, 0, -1)
				For $j = $istart To $iend
					$vtmp = $aarray[$j][$iindex_1]
					$aarray[$j][$iindex_1] = $aarray[$j][$iindex_2]
					$aarray[$j][$iindex_2] = $vtmp
				Next
			Else
				If $istart > $idim_2 OR $iend > $idim_2 Then Return SetError(4, 0, -1)
				For $j = $istart To $iend
					$vtmp = $aarray[$iindex_1][$j]
					$aarray[$iindex_1][$j] = $aarray[$iindex_2][$j]
					$aarray[$iindex_2][$j] = $vtmp
				Next
			EndIf
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return 1
EndFunc

Func _arraytoclip(Const ByRef $aarray, $sdelim_col = "|", $istart_row = -1, $iend_row = -1, $sdelim_row = @CRLF, $istart_col = -1, $iend_col = -1)
	Local $sresult = _arraytostring($aarray, $sdelim_col, $istart_row, $iend_row, $sdelim_row, $istart_col, $iend_col)
	If @error Then Return SetError(@error, 0, 0)
	If ClipPut($sresult) Then Return 1
	Return SetError(-1, 0, 0)
EndFunc

Func _arraytostring(Const ByRef $aarray, $sdelim_col = "|", $istart_row = -1, $iend_row = -1, $sdelim_row = @CRLF, $istart_col = -1, $iend_col = -1)
	If $sdelim_col = Default Then $sdelim_col = "|"
	If $sdelim_row = Default Then $sdelim_row = @CRLF
	If $istart_row = Default Then $istart_row = -1
	If $iend_row = Default Then $iend_row = -1
	If $istart_col = Default Then $istart_col = -1
	If $iend_col = Default Then $iend_col = -1
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If $istart_row = -1 Then $istart_row = 0
	If $iend_row = -1 Then $iend_row = $idim_1
	If $istart_row < -1 OR $iend_row < -1 Then Return SetError(3, 0, -1)
	If $istart_row > $idim_1 OR $iend_row > $idim_1 Then Return SetError(3, 0, "")
	If $istart_row > $iend_row Then Return SetError(4, 0, -1)
	Local $sret = ""
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			For $i = $istart_row To $iend_row
				$sret &= $aarray[$i] & $sdelim_col
			Next
			Return StringTrimRight($sret, StringLen($sdelim_col))
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			If $istart_col = -1 Then $istart_col = 0
			If $iend_col = -1 Then $iend_col = $idim_2
			If $istart_col < -1 OR $iend_col < -1 Then Return SetError(5, 0, -1)
			If $istart_col > $idim_2 OR $iend_col > $idim_2 Then Return SetError(5, 0, -1)
			If $istart_col > $iend_col Then Return SetError(6, 0, -1)
			For $i = $istart_row To $iend_row
				For $j = $istart_col To $iend_col
					$sret &= $aarray[$i][$j] & $sdelim_col
				Next
				$sret = StringTrimRight($sret, StringLen($sdelim_col)) & $sdelim_row
			Next
			Return StringTrimRight($sret, StringLen($sdelim_row))
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return 1
EndFunc

Func _arraytranspose(ByRef $aarray)
	Switch UBound($aarray, 0)
		Case 0
			Return SetError(2, 0, 0)
		Case 1
			Local $atemp[1][UBound($aarray)]
			For $i = 0 To UBound($aarray) - 1
				$atemp[0][$i] = $aarray[$i]
			Next
			$aarray = $atemp
		Case 2
			Local $idim_1 = UBound($aarray, 1), $idim_2 = UBound($aarray, 2)
			If $idim_1 <> $idim_2 Then
				Local $atemp[$idim_2][$idim_1]
				For $i = 0 To $idim_1 - 1
					For $j = 0 To $idim_2 - 1
						$atemp[$j][$i] = $aarray[$i][$j]
					Next
				Next
				$aarray = $atemp
			Else
				Local $velement
				For $i = 0 To $idim_1 - 1
					For $j = $i + 1 To $idim_2 - 1
						$velement = $aarray[$i][$j]
						$aarray[$i][$j] = $aarray[$j][$i]
						$aarray[$j][$i] = $velement
					Next
				Next
			EndIf
		Case Else
			Return SetError(1, 0, 0)
	EndSwitch
	Return 1
EndFunc

Func _arraytrim(ByRef $aarray, $itrimnum, $idirection = 0, $istart = 0, $iend = 0, $isubitem = 0)
	If $idirection = Default Then $idirection = 0
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $isubitem = Default Then $isubitem = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If $iend = 0 Then $iend = $idim_1
	If $istart > $iend Then Return SetError(3, 0, -1)
	If $istart < 0 OR $iend < 0 Then Return SetError(3, 0, -1)
	If $istart > $idim_1 OR $iend > $idim_1 Then Return SetError(3, 0, -1)
	If $istart > $iend Then Return SetError(4, 0, -1)
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $idirection Then
				For $i = $istart To $iend
					$aarray[$i] = StringTrimRight($aarray[$i], $itrimnum)
				Next
			Else
				For $i = $istart To $iend
					$aarray[$i] = StringTrimLeft($aarray[$i], $itrimnum)
				Next
			EndIf
		Case 2
			Local $idim_2 = UBound($aarray, $ubound_columns) - 1
			If $isubitem < 0 OR $isubitem > $idim_2 Then Return SetError(5, 0, -1)
			If $idirection Then
				For $i = $istart To $iend
					$aarray[$i][$isubitem] = StringTrimRight($aarray[$i][$isubitem], $itrimnum)
				Next
			Else
				For $i = $istart To $iend
					$aarray[$i][$isubitem] = StringTrimLeft($aarray[$i][$isubitem], $itrimnum)
				Next
			EndIf
		Case Else
			Return SetError(2, 0, 0)
	EndSwitch
	Return 1
EndFunc

Func _arrayunique(Const ByRef $aarray, $icolumn = 0, $ibase = 0, $icase = 0, $icount = $arrayunique_count, $iinttype = $arrayunique_auto)
	If $icolumn = Default Then $icolumn = 0
	If $ibase = Default Then $ibase = 0
	If $icase = Default Then $icase = 0
	If $icount = Default Then $icount = $arrayunique_count
	If UBound($aarray, $ubound_rows) = 0 Then Return SetError(1, 0, 0)
	Local $idims = UBound($aarray, $ubound_dimensions), $inumcolumns = UBound($aarray, $ubound_columns)
	If $idims > 2 Then Return SetError(2, 0, 0)
	If $ibase < 0 OR $ibase > 1 OR (NOT IsInt($ibase)) Then Return SetError(3, 0, 0)
	If $icase < 0 OR $icase > 1 OR (NOT IsInt($icase)) Then Return SetError(3, 0, 0)
	If $icount < 0 OR $icount > 1 OR (NOT IsInt($icount)) Then Return SetError(4, 0, 0)
	If $iinttype < 0 OR $iinttype > 4 OR (NOT IsInt($iinttype)) Then Return SetError(5, 0, 0)
	If $icolumn < 0 OR ($inumcolumns = 0 AND $icolumn > 0) OR ($inumcolumns > 0 AND $icolumn >= $inumcolumns) Then Return SetError(6, 0, 0)
	If $iinttype = $arrayunique_auto Then
		Local $vfirstelem = (($idims = 1) ? ($aarray[$ibase]) : ($aarray[$icolumn][$ibase]))
		If IsInt($vfirstelem) Then
			Switch VarGetType($vfirstelem)
				Case "Int32"
					$iinttype = $arrayunique_force32
				Case "Int64"
					$iinttype = $arrayunique_force64
			EndSwitch
		Else
			$iinttype = $arrayunique_force32
		EndIf
	EndIf
	ObjEvent("AutoIt.Error", "__ArrayUnique_AutoErrFunc")
	Local $odictionary = ObjCreate("Scripting.Dictionary")
	$odictionary.comparemode = Number(NOT $icase)
	Local $velem, $stype, $vkey, $bcomerror = False
	For $i = $ibase To UBound($aarray) - 1
		If $idims = 1 Then
			$velem = $aarray[$i]
		Else
			$velem = $aarray[$i][$icolumn]
		EndIf
		Switch $iinttype
			Case $arrayunique_force32
				$odictionary.item($velem)
				If @error Then
					$bcomerror = True
					ExitLoop
				EndIf
			Case $arrayunique_force64
				$stype = VarGetType($velem)
				If $stype = "Int32" Then
					$bcomerror = True
					ExitLoop
				EndIf
				$vkey = "#" & $stype & "#" & String($velem)
				If NOT $odictionary.item($vkey) Then
					$odictionary($vkey) = $velem
				EndIf
			Case $arrayunique_match
				$stype = VarGetType($velem)
				If StringLeft($stype, 3) = "Int" Then
					$vkey = "#Int#" & String($velem)
				Else
					$vkey = "#" & $stype & "#" & String($velem)
				EndIf
				If NOT $odictionary.item($vkey) Then
					$odictionary($vkey) = $velem
				EndIf
			Case $arrayunique_distinct
				$vkey = "#" & VarGetType($velem) & "#" & String($velem)
				If NOT $odictionary.item($vkey) Then
					$odictionary($vkey) = $velem
				EndIf
		EndSwitch
	Next
	Local $avalues, $j = 0
	If $bcomerror Then
		Return SetError(7, 0, 0)
	ElseIf $iinttype <> $arrayunique_force32 Then
		Local $avalues[$odictionary.count]
		For $vkey In $odictionary.keys()
			$avalues[$j] = $odictionary($vkey)
			If StringLeft($vkey, 5) = "#Ptr#" Then
				$avalues[$j] = Ptr($avalues[$j])
			EndIf
			$j += 1
		Next
	Else
		$avalues = $odictionary.keys()
	EndIf
	If $icount Then
		_arrayinsert($avalues, 0, $odictionary.count)
	EndIf
	Return $avalues
EndFunc

Func _array1dtohistogram($aarray, $isizing = 100)
	If UBound($aarray, 0) > 1 Then Return SetError(1, 0, "")
	$isizing = $isizing * 8
	Local $t, $n, $imin = 0, $imax = 0, $ioffset = 0
	For $i = 0 To UBound($aarray) - 1
		$t = $aarray[$i]
		$t = IsNumber($t) ? Round($t) : 0
		If $t < $imin Then $imin = $t
		If $t > $imax Then $imax = $t
	Next
	Local $irange = Int(Round(($imax - $imin) / 8)) * 8
	Local $ispaceratio = 4
	For $i = 0 To UBound($aarray) - 1
		$t = $aarray[$i]
		If $t Then
			$n = Abs(Round(($isizing * $t) / $irange) / 8)
			$aarray[$i] = ""
			If $t > 0 Then
				If $imin Then
					$ioffset = Int(Abs(Round(($isizing * $imin) / $irange) / 8) / 8 * $ispaceratio)
					$aarray[$i] = __array_stringrepeat(ChrW(32), $ioffset)
				EndIf
			Else
				If $imin <> $t Then
					$ioffset = Int(Abs(Round(($isizing * ($t - $imin)) / $irange) / 8) / 8 * $ispaceratio)
					$aarray[$i] = __array_stringrepeat(ChrW(32), $ioffset)
				EndIf
			EndIf
			$aarray[$i] &= __array_stringrepeat(ChrW(9608), Int($n / 8))
			$n = Mod($n, 8)
			If $n > 0 Then $aarray[$i] &= ChrW(9608 + 8 - $n)
			$aarray[$i] &= " " & $t
		Else
			$aarray[$i] = ""
		EndIf
	Next
	Return $aarray
EndFunc

Func __array_stringrepeat($sstring, $irepeatcount)
	$irepeatcount = Int($irepeatcount)
	If StringLen($sstring) < 1 OR $irepeatcount <= 0 Then Return SetError(1, 0, "")
	Local $sresult = ""
	While $irepeatcount > 1
		If BitAND($irepeatcount, 1) Then $sresult &= $sstring
		$sstring &= $sstring
		$irepeatcount = BitShift($irepeatcount, 1)
	WEnd
	Return $sstring & $sresult
EndFunc

Func __array_exeterinternal(ByRef $aarray, $istart, $isize, $sdelimiter, ByRef $aidx, ByRef $aresult, ByRef $icount)
	If $istart == $isize - 1 Then
		For $i = 0 To $isize - 1
			$aresult[$icount] &= $aarray[$aidx[$i]] & $sdelimiter
		Next
		If $sdelimiter <> "" Then $aresult[$icount] = StringTrimRight($aresult[$icount], StringLen($sdelimiter))
		$icount += 1
	Else
		Local $itemp
		For $i = $istart To $isize - 1
			$itemp = $aidx[$i]
			$aidx[$i] = $aidx[$istart]
			$aidx[$istart] = $itemp
			__array_exeterinternal($aarray, $istart + 1, $isize, $sdelimiter, $aidx, $aresult, $icount)
			$aidx[$istart] = $aidx[$i]
			$aidx[$i] = $itemp
		Next
	EndIf
EndFunc

Func __array_combinations($in, $ir)
	Local $i_total = 1
	For $i = $ir To 1 Step -1
		$i_total *= ($in / $i)
		$in -= 1
	Next
	Return Round($i_total)
EndFunc

Func __array_getnext($in, $ir, ByRef $ileft, $itotal, ByRef $aidx)
	If $ileft == $itotal Then
		$ileft -= 1
		Return
	EndIf
	Local $i = $ir - 1
	While $aidx[$i] == $in - $ir + $i
		$i -= 1
	WEnd
	$aidx[$i] += 1
	For $j = $i + 1 To $ir - 1
		$aidx[$j] = $aidx[$i] + $j - $i
	Next
	$ileft -= 1
EndFunc

Func __array_minmaxindex(Const ByRef $aarray, $icompnumeric, $istart, $iend, $isubitem, $fucomparison)
	If $icompnumeric = Default Then $icompnumeric = 0
	If $icompnumeric <> 1 Then $icompnumeric = 0
	If $istart = Default Then $istart = 0
	If $iend = Default Then $iend = 0
	If $isubitem = Default Then $isubitem = 0
	If NOT IsArray($aarray) Then Return SetError(1, 0, -1)
	Local $idim_1 = UBound($aarray, $ubound_rows) - 1
	If $idim_1 < 0 Then Return SetError(1, 0, -1)
	If $iend = -1 Then $iend = $idim_1
	If $istart = -1 Then $istart = 0
	If $istart < -1 OR $iend < -1 Then Return SetError(3, 0, -1)
	If $istart > $idim_1 OR $iend > $idim_1 Then Return SetError(3, 0, -1)
	If $istart > $iend Then Return SetError(4, 0, -1)
	If $idim_1 < 0 Then Return SetError(5, 0, -1)
	Local $imaxminindex = $istart
	Switch UBound($aarray, $ubound_dimensions)
		Case 1
			If $icompnumeric Then
				For $i = $istart To $iend
					If $fucomparison(Number($aarray[$i]), Number($aarray[$imaxminindex])) Then $imaxminindex = $i
				Next
			Else
				For $i = $istart To $iend
					If $fucomparison($aarray[$i], $aarray[$imaxminindex]) Then $imaxminindex = $i
				Next
			EndIf
		Case 2
			If $isubitem < 0 OR $isubitem > UBound($aarray, $ubound_columns) - 1 Then Return SetError(6, 0, -1)
			If $icompnumeric Then
				For $i = $istart To $iend
					If $fucomparison(Number($aarray[$i][$isubitem]), Number($aarray[$imaxminindex][$isubitem])) Then $imaxminindex = $i
				Next
			Else
				For $i = $istart To $iend
					If $fucomparison($aarray[$i][$isubitem], $aarray[$imaxminindex][$isubitem]) Then $imaxminindex = $i
				Next
			EndIf
		Case Else
			Return SetError(2, 0, -1)
	EndSwitch
	Return $imaxminindex
EndFunc

Func __array_greaterthan($vvalue1, $vvalue2)
	Return $vvalue1 > $vvalue2
EndFunc

Func __array_lessthan($vvalue1, $vvalue2)
	Return $vvalue1 < $vvalue2
EndFunc

Func __arrayunique_autoerrfunc()
EndFunc

Global Const $fw_dontcare = 0
Global Const $fw_thin = 100
Global Const $fw_extralight = 200
Global Const $fw_ultralight = 200
Global Const $fw_light = 300
Global Const $fw_normal = 400
Global Const $fw_regular = 400
Global Const $fw_medium = 500
Global Const $fw_semibold = 600
Global Const $fw_demibold = 600
Global Const $fw_bold = 700
Global Const $fw_extrabold = 800
Global Const $fw_ultrabold = 800
Global Const $fw_heavy = 900
Global Const $fw_black = 900
Global Const $cf_effects = 256
Global Const $cf_printerfonts = 2
Global Const $cf_screenfonts = 1
Global Const $cf_noscriptsel = 8388608
Global Const $cf_inittologfontstruct = 64
Global Const $logpixelsx = 88
Global Const $logpixelsy = 90
Global Const $ansi_charset = 0
Global Const $arabic_charset = 178
Global Const $baltic_charset = 186
Global Const $chinesebig5_charset = 136
Global Const $default_charset = 1
Global Const $easteurope_charset = 238
Global Const $gb2312_charset = 134
Global Const $greek_charset = 161
Global Const $hangeul_charset = 129
Global Const $hebrew_charset = 177
Global Const $johab_charset = 130
Global Const $mac_charset = 77
Global Const $oem_charset = 255
Global Const $russian_charset = 204
Global Const $shiftjis_charset = 128
Global Const $symbol_charset = 2
Global Const $thai_charset = 222
Global Const $turkish_charset = 162
Global Const $vietnamese_charset = 163
Global Const $out_character_precis = 2
Global Const $out_default_precis = 0
Global Const $out_device_precis = 5
Global Const $out_outline_precis = 8
Global Const $out_ps_only_precis = 10
Global Const $out_raster_precis = 6
Global Const $out_string_precis = 1
Global Const $out_stroke_precis = 3
Global Const $out_tt_only_precis = 7
Global Const $out_tt_precis = 4
Global Const $clip_character_precis = 1
Global Const $clip_default_precis = 0
Global Const $clip_dfa_disable = 48
Global Const $clip_embedded = 128
Global Const $clip_lh_angles = 16
Global Const $clip_mask = 15
Global Const $clip_dfa_override = 64
Global Const $clip_stroke_precis = 2
Global Const $clip_tt_always = 32
Global Const $antialiased_quality = 4
Global Const $default_quality = 0
Global Const $draft_quality = 1
Global Const $nonantialiased_quality = 3
Global Const $proof_quality = 2
Global Const $cleartype_quality = 5
Global Const $default_pitch = 0
Global Const $fixed_pitch = 1
Global Const $variable_pitch = 2
Global Const $ff_decorative = 80
Global Const $ff_dontcare = 0
Global Const $ff_modern = 48
Global Const $ff_roman = 16
Global Const $ff_script = 64
Global Const $ff_swiss = 32
Global Const $fs_regular = 0
Global Const $fs_bold = 1
Global Const $fs_italic = 2
Global Const $tagpoint = "struct;long X;long Y;endstruct"
Global Const $tagrect = "struct;long Left;long Top;long Right;long Bottom;endstruct"
Global Const $tagsize = "struct;long X;long Y;endstruct"
Global Const $tagmargins = "int cxLeftWidth;int cxRightWidth;int cyTopHeight;int cyBottomHeight"
Global Const $tagfiletime = "struct;dword Lo;dword Hi;endstruct"
Global Const $tagsystemtime = "struct;word Year;word Month;word Dow;word Day;word Hour;word Minute;word Second;word MSeconds;endstruct"
Global Const $tagtime_zone_information = "struct;long Bias;wchar StdName[32];word StdDate[8];long StdBias;wchar DayName[32];word DayDate[8];long DayBias;endstruct"
Global Const $tagnmhdr = "struct;hwnd hWndFrom;uint_ptr IDFrom;INT Code;endstruct"
Global Const $tagcomboboxexitem = "uint Mask;int_ptr Item;ptr Text;int TextMax;int Image;int SelectedImage;int OverlayImage;" & "int Indent;lparam Param"
Global Const $tagnmcbedragbegin = $tagnmhdr & ";int ItemID;wchar szText[260]"
Global Const $tagnmcbeendedit = $tagnmhdr & ";bool fChanged;int NewSelection;wchar szText[260];int Why"
Global Const $tagnmcomboboxex = $tagnmhdr & ";uint Mask;int_ptr Item;ptr Text;int TextMax;int Image;" & "int SelectedImage;int OverlayImage;int Indent;lparam Param"
Global Const $tagdtprange = "word MinYear;word MinMonth;word MinDOW;word MinDay;word MinHour;word MinMinute;" & "word MinSecond;word MinMSecond;word MaxYear;word MaxMonth;word MaxDOW;word MaxDay;word MaxHour;" & "word MaxMinute;word MaxSecond;word MaxMSecond;bool MinValid;bool MaxValid"
Global Const $tagnmdatetimechange = $tagnmhdr & ";dword Flag;" & $tagsystemtime
Global Const $tagnmdatetimeformat = $tagnmhdr & ";ptr Format;" & $tagsystemtime & ";ptr pDisplay;wchar Display[64]"
Global Const $tagnmdatetimeformatquery = $tagnmhdr & ";ptr Format;struct;long SizeX;long SizeY;endstruct"
Global Const $tagnmdatetimekeydown = $tagnmhdr & ";int VirtKey;ptr Format;" & $tagsystemtime
Global Const $tagnmdatetimestring = $tagnmhdr & ";ptr UserString;" & $tagsystemtime & ";dword Flags"
Global Const $tageventlogrecord = "dword Length;dword Reserved;dword RecordNumber;dword TimeGenerated;dword TimeWritten;dword EventID;" & "word EventType;word NumStrings;word EventCategory;word ReservedFlags;dword ClosingRecordNumber;dword StringOffset;" & "dword UserSidLength;dword UserSidOffset;dword DataLength;dword DataOffset"
Global Const $taggdip_effectparams_blur = "float Radius; bool ExpandEdge"
Global Const $taggdip_effectparams_brightnesscontrast = "int BrightnessLevel; int ContrastLevel"
Global Const $taggdip_effectparams_colorbalance = "int CyanRed; int MagentaGreen; int YellowBlue"
Global Const $taggdip_effectparams_colorcurve = "int Adjustment; int Channel; int AdjustValue"
Global Const $taggdip_effectparams_colorlut = "byte LutB[256]; byte LutG[256]; byte LutR[256]; byte LutA[256]"
Global Const $taggdip_effectparams_huesaturationlightness = "int HueLevel; int SaturationLevel; int LightnessLevel"
Global Const $taggdip_effectparams_levels = "int Highlight; int Midtone; int Shadow"
Global Const $taggdip_effectparams_redeyecorrection = "uint NumberOfAreas; ptr Areas"
Global Const $taggdip_effectparams_sharpen = "float Radius; float Amount"
Global Const $taggdip_effectparams_tint = "int Hue; int Amount"
Global Const $taggdipbitmapdata = "uint Width;uint Height;int Stride;int Format;ptr Scan0;uint_ptr Reserved"
Global Const $taggdipcolormatrix = "float m[25]"
Global Const $taggdipencoderparam = "struct;byte GUID[16];ulong NumberOfValues;ulong Type;ptr Values;endstruct"
Global Const $taggdipencoderparams = "uint Count;" & $taggdipencoderparam
Global Const $taggdiprectf = "struct;float X;float Y;float Width;float Height;endstruct"
Global Const $taggdipstartupinput = "uint Version;ptr Callback;bool NoThread;bool NoCodecs"
Global Const $taggdipstartupoutput = "ptr HookProc;ptr UnhookProc"
Global Const $taggdipimagecodecinfo = "byte CLSID[16];byte FormatID[16];ptr CodecName;ptr DllName;ptr FormatDesc;ptr FileExt;" & "ptr MimeType;dword Flags;dword Version;dword SigCount;dword SigSize;ptr SigPattern;ptr SigMask"
Global Const $taggdippencoderparams = "uint Count;byte Params[1]"
Global Const $taghditem = "uint Mask;int XY;ptr Text;handle hBMP;int TextMax;int Fmt;lparam Param;int Image;int Order;uint Type;ptr pFilter;uint State"
Global Const $tagnmhddispinfo = $tagnmhdr & ";int Item;uint Mask;ptr Text;int TextMax;int Image;lparam lParam"
Global Const $tagnmhdfilterbtnclick = $tagnmhdr & ";int Item;" & $tagrect
Global Const $tagnmheader = $tagnmhdr & ";int Item;int Button;ptr pItem"
Global Const $taggetipaddress = "byte Field4;byte Field3;byte Field2;byte Field1"
Global Const $tagnmipaddress = $tagnmhdr & ";int Field;int Value"
Global Const $taglvfindinfo = "struct;uint Flags;ptr Text;lparam Param;" & $tagpoint & ";uint Direction;endstruct"
Global Const $taglvhittestinfo = $tagpoint & ";uint Flags;int Item;int SubItem;int iGroup"
Global Const $taglvitem = "struct;uint Mask;int Item;int SubItem;uint State;uint StateMask;ptr Text;int TextMax;int Image;lparam Param;" & "int Indent;int GroupID;uint Columns;ptr pColumns;ptr piColFmt;int iGroup;endstruct"
Global Const $tagnmlistview = $tagnmhdr & ";int Item;int SubItem;uint NewState;uint OldState;uint Changed;" & "struct;long ActionX;long ActionY;endstruct;lparam Param"
Global Const $tagnmlvcustomdraw = "struct;" & $tagnmhdr & ";dword dwDrawStage;handle hdc;" & $tagrect & ";dword_ptr dwItemSpec;uint uItemState;lparam lItemlParam;endstruct" & ";dword clrText;dword clrTextBk;int iSubItem;dword dwItemType;dword clrFace;int iIconEffect;" & "int iIconPhase;int iPartID;int iStateID;struct;long TextLeft;long TextTop;long TextRight;long TextBottom;endstruct;uint uAlign"
Global Const $tagnmlvdispinfo = $tagnmhdr & ";" & $taglvitem
Global Const $tagnmlvfinditem = $tagnmhdr & ";int Start;" & $taglvfindinfo
Global Const $tagnmlvgetinfotip = $tagnmhdr & ";dword Flags;ptr Text;int TextMax;int Item;int SubItem;lparam lParam"
Global Const $tagnmitemactivate = $tagnmhdr & ";int Index;int SubItem;uint NewState;uint OldState;uint Changed;" & $tagpoint & ";lparam lParam;uint KeyFlags"
Global Const $tagnmlvkeydown = "align 1;" & $tagnmhdr & ";word VKey;uint Flags"
Global Const $tagnmlvscroll = $tagnmhdr & ";int DX;int DY"
Global Const $tagmchittestinfo = "uint Size;" & $tagpoint & ";uint Hit;" & $tagsystemtime & ";" & $tagrect & ";int iOffset;int iRow;int iCol"
Global Const $tagmcmonthrange = "word MinYear;word MinMonth;word MinDOW;word MinDay;word MinHour;word MinMinute;word MinSecond;" & "word MinMSeconds;word MaxYear;word MaxMonth;word MaxDOW;word MaxDay;word MaxHour;word MaxMinute;word MaxSecond;" & "word MaxMSeconds;short Span"
Global Const $tagmcrange = "word MinYear;word MinMonth;word MinDOW;word MinDay;word MinHour;word MinMinute;word MinSecond;" & "word MinMSeconds;word MaxYear;word MaxMonth;word MaxDOW;word MaxDay;word MaxHour;word MaxMinute;word MaxSecond;" & "word MaxMSeconds;short MinSet;short MaxSet"
Global Const $tagmcselrange = "word MinYear;word MinMonth;word MinDOW;word MinDay;word MinHour;word MinMinute;word MinSecond;" & "word MinMSeconds;word MaxYear;word MaxMonth;word MaxDOW;word MaxDay;word MaxHour;word MaxMinute;word MaxSecond;" & "word MaxMSeconds"
Global Const $tagnmdaystate = $tagnmhdr & ";" & $tagsystemtime & ";int DayState;ptr pDayState"
Global Const $tagnmselchange = $tagnmhdr & ";struct;word BegYear;word BegMonth;word BegDOW;word BegDay;word BegHour;word BegMinute;word BegSecond;word BegMSeconds;endstruct;" & "struct;word EndYear;word EndMonth;word EndDOW;word EndDay;word EndHour;word EndMinute;word EndSecond;word EndMSeconds;endstruct"
Global Const $tagnmobjectnotify = $tagnmhdr & ";int Item;ptr piid;ptr pObject;long Result;dword dwFlags"
Global Const $tagnmtckeydown = "align 1;" & $tagnmhdr & ";word VKey;uint Flags"
Global Const $tagtvitem = "struct;uint Mask;handle hItem;uint State;uint StateMask;ptr Text;int TextMax;int Image;int SelectedImage;" & "int Children;lparam Param;endstruct"
Global Const $tagtvitemex = "struct;" & $tagtvitem & ";int Integral;uint uStateEx;hwnd hwnd;int iExpandedImage;int iReserved;endstruct"
Global Const $tagnmtreeview = $tagnmhdr & ";uint Action;" & "struct;uint OldMask;handle OldhItem;uint OldState;uint OldStateMask;" & "ptr OldText;int OldTextMax;int OldImage;int OldSelectedImage;int OldChildren;lparam OldParam;endstruct;" & "struct;uint NewMask;handle NewhItem;uint NewState;uint NewStateMask;" & "ptr NewText;int NewTextMax;int NewImage;int NewSelectedImage;int NewChildren;lparam NewParam;endstruct;" & "struct;long PointX;long PointY;endstruct"
Global Const $tagnmtvcustomdraw = "struct;" & $tagnmhdr & ";dword DrawStage;handle HDC;" & $tagrect & ";dword_ptr ItemSpec;uint ItemState;lparam ItemParam;endstruct" & ";dword ClrText;dword ClrTextBk;int Level"
Global Const $tagnmtvdispinfo = $tagnmhdr & ";" & $tagtvitem
Global Const $tagnmtvgetinfotip = $tagnmhdr & ";ptr Text;int TextMax;handle hItem;lparam lParam"
Global Const $tagnmtvitemchange = $tagnmhdr & ";uint Changed;handle hItem;uint StateNew;uint StateOld;lparam lParam;"
Global Const $tagtvhittestinfo = $tagpoint & ";uint Flags;handle Item"
Global Const $tagnmtvkeydown = "align 1;" & $tagnmhdr & ";word VKey;uint Flags"
Global Const $tagnmmouse = $tagnmhdr & ";dword_ptr ItemSpec;dword_ptr ItemData;" & $tagpoint & ";lparam HitInfo"
Global Const $tagtoken_privileges = "dword Count;align 4;int64 LUID;dword Attributes"
Global Const $tagimageinfo = "handle hBitmap;handle hMask;int Unused1;int Unused2;" & $tagrect
Global Const $tagmenuinfo = "dword Size;INT Mask;dword Style;uint YMax;handle hBack;dword ContextHelpID;ulong_ptr MenuData"
Global Const $tagmenuiteminfo = "uint Size;uint Mask;uint Type;uint State;uint ID;handle SubMenu;handle BmpChecked;handle BmpUnchecked;" & "ulong_ptr ItemData;ptr TypeData;uint CCH;handle BmpItem"
Global Const $tagrebarbandinfo = "uint cbSize;uint fMask;uint fStyle;dword clrFore;dword clrBack;ptr lpText;uint cch;" & "int iImage;hwnd hwndChild;uint cxMinChild;uint cyMinChild;uint cx;handle hbmBack;uint wID;uint cyChild;uint cyMaxChild;" & "uint cyIntegral;uint cxIdeal;lparam lParam;uint cxHeader" & ((@OSVersion = "WIN_XP") ? "" : ";" & $tagrect & ";uint uChevronState")
Global Const $tagnmrebarautobreak = $tagnmhdr & ";uint uBand;uint wID;lparam lParam;uint uMsg;uint fStyleCurrent;bool fAutoBreak"
Global Const $tagnmrbautosize = $tagnmhdr & ";bool fChanged;" & "struct;long TargetLeft;long TargetTop;long TargetRight;long TargetBottom;endstruct;" & "struct;long ActualLeft;long ActualTop;long ActualRight;long ActualBottom;endstruct"
Global Const $tagnmrebar = $tagnmhdr & ";dword dwMask;uint uBand;uint fStyle;uint wID;lparam lParam"
Global Const $tagnmrebarchevron = $tagnmhdr & ";uint uBand;uint wID;lparam lParam;" & $tagrect & ";lparam lParamNM"
Global Const $tagnmrebarchildsize = $tagnmhdr & ";uint uBand;uint wID;" & "struct;long CLeft;long CTop;long CRight;long CBottom;endstruct;" & "struct;long BLeft;long BTop;long BRight;long BBottom;endstruct"
Global Const $tagcolorscheme = "dword Size;dword BtnHighlight;dword BtnShadow"
Global Const $tagnmtoolbar = $tagnmhdr & ";int iItem;" & "struct;int iBitmap;int idCommand;byte fsState;byte fsStyle;dword_ptr dwData;int_ptr iString;endstruct" & ";int cchText;ptr pszText;" & $tagrect
Global Const $tagnmtbhotitem = $tagnmhdr & ";int idOld;int idNew;dword dwFlags"
Global Const $tagtbbutton = "int Bitmap;int Command;byte State;byte Style;dword_ptr Param;int_ptr String"
Global Const $tagtbbuttoninfo = "uint Size;dword Mask;int Command;int Image;byte State;byte Style;word CX;dword_ptr Param;ptr Text;int TextMax"
Global Const $tagnetresource = "dword Scope;dword Type;dword DisplayType;dword Usage;ptr LocalName;ptr RemoteName;ptr Comment;ptr Provider"
Global Const $tagoverlapped = "ulong_ptr Internal;ulong_ptr InternalHigh;struct;dword Offset;dword OffsetHigh;endstruct;handle hEvent"
Global Const $tagopenfilename = "dword StructSize;hwnd hwndOwner;handle hInstance;ptr lpstrFilter;ptr lpstrCustomFilter;" & "dword nMaxCustFilter;dword nFilterIndex;ptr lpstrFile;dword nMaxFile;ptr lpstrFileTitle;dword nMaxFileTitle;" & "ptr lpstrInitialDir;ptr lpstrTitle;dword Flags;word nFileOffset;word nFileExtension;ptr lpstrDefExt;lparam lCustData;" & "ptr lpfnHook;ptr lpTemplateName;ptr pvReserved;dword dwReserved;dword FlagsEx"
Global Const $tagbitmapinfoheader = "struct;dword biSize;long biWidth;long biHeight;word biPlanes;word biBitCount;" & "dword biCompression;dword biSizeImage;long biXPelsPerMeter;long biYPelsPerMeter;dword biClrUsed;dword biClrImportant;endstruct"
Global Const $tagbitmapinfo = $tagbitmapinfoheader & ";dword biRGBQuad[1]"
Global Const $tagblendfunction = "byte Op;byte Flags;byte Alpha;byte Format"
Global Const $tagguid = "struct;ulong Data1;ushort Data2;ushort Data3;byte Data4[8];endstruct"
Global Const $tagwindowplacement = "uint length;uint flags;uint showCmd;long ptMinPosition[2];long ptMaxPosition[2];long rcNormalPosition[4]"
Global Const $tagwindowpos = "hwnd hWnd;hwnd InsertAfter;int X;int Y;int CX;int CY;uint Flags"
Global Const $tagscrollinfo = "uint cbSize;uint fMask;int nMin;int nMax;uint nPage;int nPos;int nTrackPos"
Global Const $tagscrollbarinfo = "dword cbSize;" & $tagrect & ";int dxyLineButton;int xyThumbTop;" & "int xyThumbBottom;int reserved;dword rgstate[6]"
Global Const $taglogfont = "struct;long Height;long Width;long Escapement;long Orientation;long Weight;byte Italic;byte Underline;" & "byte Strikeout;byte CharSet;byte OutPrecision;byte ClipPrecision;byte Quality;byte PitchAndFamily;wchar FaceName[32];endstruct"
Global Const $tagkbdllhookstruct = "dword vkCode;dword scanCode;dword flags;dword time;ulong_ptr dwExtraInfo"
Global Const $tagprocess_information = "handle hProcess;handle hThread;dword ProcessID;dword ThreadID"
Global Const $tagstartupinfo = "dword Size;ptr Reserved1;ptr Desktop;ptr Title;dword X;dword Y;dword XSize;dword YSize;dword XCountChars;" & "dword YCountChars;dword FillAttribute;dword Flags;word ShowWindow;word Reserved2;ptr Reserved3;handle StdInput;" & "handle StdOutput;handle StdError"
Global Const $tagsecurity_attributes = "dword Length;ptr Descriptor;bool InheritHandle"
Global Const $tagwin32_find_data = "dword dwFileAttributes;dword ftCreationTime[2];dword ftLastAccessTime[2];dword ftLastWriteTime[2];dword nFileSizeHigh;dword nFileSizeLow;dword dwReserved0;dword dwReserved1;wchar cFileName[260];wchar cAlternateFileName[14]"
Global Const $tagtextmetric = "long tmHeight;long tmAscent;long tmDescent;long tmInternalLeading;long tmExternalLeading;" & "long tmAveCharWidth;long tmMaxCharWidth;long tmWeight;long tmOverhang;long tmDigitizedAspectX;long tmDigitizedAspectY;" & "wchar tmFirstChar;wchar tmLastChar;wchar tmDefaultChar;wchar tmBreakChar;byte tmItalic;byte tmUnderlined;byte tmStruckOut;" & "byte tmPitchAndFamily;byte tmCharSet"

Func _winapi_getlasterror(Const $_icurrenterror = @error, Const $_icurrentextended = @extended)
	Local $aresult = DllCall("kernel32.dll", "dword", "GetLastError")
	Return SetError($_icurrenterror, $_icurrentextended, $aresult[0])
EndFunc

Func _winapi_setlasterror($ierrorcode, Const $_icurrenterror = @error, Const $_icurrentextended = @extended)
	DllCall("kernel32.dll", "none", "SetLastError", "dword", $ierrorcode)
	Return SetError($_icurrenterror, $_icurrentextended, NULL )
EndFunc

Func __comerrorformating($ocomerror, $sprefix = @TAB)
	Local Const $str_striptrailing = 2
	Local $serror = "COM Error encountered in " & @ScriptName & " (" & $ocomerror.scriptline & ") :" & @CRLF & $sprefix & "Number        " & @TAB & "= 0x" & Hex($ocomerror.number, 8) & " (" & $ocomerror.number & ")" & @CRLF & $sprefix & "WinDescription" & @TAB & "= " & StringStripWS($ocomerror.windescription, $str_striptrailing) & @CRLF & $sprefix & "Description   " & @TAB & "= " & StringStripWS($ocomerror.description, $str_striptrailing) & @CRLF & $sprefix & "Source        " & @TAB & "= " & $ocomerror.source & @CRLF & $sprefix & "HelpFile      " & @TAB & "= " & $ocomerror.helpfile & @CRLF & $sprefix & "HelpContext   " & @TAB & "= " & $ocomerror.helpcontext & @CRLF & $sprefix & "LastDllError  " & @TAB & "= " & $ocomerror.lastdllerror & @CRLF & $sprefix & "Retcode       " & @TAB & "= 0x" & Hex($ocomerror.retcode)
	Return $serror
EndFunc

Global Const $__miscconstant_cc_anycolor = 256
Global Const $__miscconstant_cc_fullopen = 2
Global Const $__miscconstant_cc_rgbinit = 1
Global Const $tagchoosecolor = "dword Size;hwnd hWndOwnder;handle hInstance;dword rgbResult;ptr CustColors;dword Flags;lparam lCustData;" & "ptr lpfnHook;ptr lpTemplateName"
Global Const $tagchoosefont = "dword Size;hwnd hWndOwner;handle hDC;ptr LogFont;int PointSize;dword Flags;dword rgbColors;lparam CustData;" & "ptr fnHook;ptr TemplateName;handle hInstance;ptr szStyle;word FontType;int SizeMin;int SizeMax"

Func _choosecolor($ireturntype = 0, $icolorref = 0, $ireftype = 0, $hwndownder = 0)
	Local $tagcustcolors = "dword[16]"
	Local $tchoose = DllStructCreate($tagchoosecolor)
	Local $tcc = DllStructCreate($tagcustcolors)
	If $ireftype = 1 Then
		$icolorref = Int($icolorref)
	ElseIf $ireftype = 2 Then
		$icolorref = Hex(String($icolorref), 6)
		$icolorref = "0x" & StringMid($icolorref, 5, 2) & StringMid($icolorref, 3, 2) & StringMid($icolorref, 1, 2)
	EndIf
	DllStructSetData($tchoose, "Size", DllStructGetSize($tchoose))
	DllStructSetData($tchoose, "hWndOwnder", $hwndownder)
	DllStructSetData($tchoose, "rgbResult", $icolorref)
	DllStructSetData($tchoose, "CustColors", DllStructGetPtr($tcc))
	DllStructSetData($tchoose, "Flags", BitOR($__miscconstant_cc_anycolor, $__miscconstant_cc_fullopen, $__miscconstant_cc_rgbinit))
	Local $aresult = DllCall("comdlg32.dll", "bool", "ChooseColor", "struct*", $tchoose)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] = 0 Then Return SetError(-3, -3, -1)
	Local $scolor_picked = DllStructGetData($tchoose, "rgbResult")
	If $ireturntype = 1 Then
		Return "0x" & Hex(String($scolor_picked), 6)
	ElseIf $ireturntype = 2 Then
		$scolor_picked = Hex(String($scolor_picked), 6)
		Return "0x" & StringMid($scolor_picked, 5, 2) & StringMid($scolor_picked, 3, 2) & StringMid($scolor_picked, 1, 2)
	ElseIf $ireturntype = 0 Then
		Return $scolor_picked
	Else
		Return SetError(-4, -4, -1)
	EndIf
EndFunc

Func _choosefont($sfontname = "Courier New", $ipointsize = 10, $ifontcolorref = 0, $ifontweight = 0, $bitalic = False, $bunderline = False, $bstrikethru = False, $hwndowner = 0)
	Local $iitalic = 0, $iunderline = 0, $istrikeout = 0
	$ifontcolorref = BitOR(BitShift(BitAND($ifontcolorref, 255), -16), BitAND($ifontcolorref, 65280), BitShift(BitAND($ifontcolorref, 16711680), 16))
	Local $hdc = __misc_getdc(0)
	Local $iheight = Round(($ipointsize * __misc_getdevicecaps($hdc, $logpixelsx)) / 72, 0)
	__misc_releasedc(0, $hdc)
	Local $tchoosefont = DllStructCreate($tagchoosefont)
	Local $tlogfont = DllStructCreate($taglogfont)
	DllStructSetData($tchoosefont, "Size", DllStructGetSize($tchoosefont))
	DllStructSetData($tchoosefont, "hWndOwner", $hwndowner)
	DllStructSetData($tchoosefont, "LogFont", DllStructGetPtr($tlogfont))
	DllStructSetData($tchoosefont, "PointSize", $ipointsize)
	DllStructSetData($tchoosefont, "Flags", BitOR($cf_screenfonts, $cf_printerfonts, $cf_effects, $cf_inittologfontstruct, $cf_noscriptsel))
	DllStructSetData($tchoosefont, "rgbColors", $ifontcolorref)
	DllStructSetData($tchoosefont, "FontType", 0)
	DllStructSetData($tlogfont, "Height", $iheight)
	DllStructSetData($tlogfont, "Weight", $ifontweight)
	DllStructSetData($tlogfont, "Italic", $bitalic)
	DllStructSetData($tlogfont, "Underline", $bunderline)
	DllStructSetData($tlogfont, "Strikeout", $bstrikethru)
	DllStructSetData($tlogfont, "FaceName", $sfontname)
	Local $aresult = DllCall("comdlg32.dll", "bool", "ChooseFontW", "struct*", $tchoosefont)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] = 0 Then Return SetError(-3, -3, -1)
	Local $sfacename = DllStructGetData($tlogfont, "FaceName")
	If StringLen($sfacename) = 0 AND StringLen($sfontname) > 0 Then $sfacename = $sfontname
	If DllStructGetData($tlogfont, "Italic") Then $iitalic = 2
	If DllStructGetData($tlogfont, "Underline") Then $iunderline = 4
	If DllStructGetData($tlogfont, "Strikeout") Then $istrikeout = 8
	Local $iattributes = BitOR($iitalic, $iunderline, $istrikeout)
	Local $isize = DllStructGetData($tchoosefont, "PointSize") / 10
	Local $icolorref = DllStructGetData($tchoosefont, "rgbColors")
	Local $iweight = DllStructGetData($tlogfont, "Weight")
	Local $scolor_picked = Hex(String($icolorref), 6)
	Return StringSplit($iattributes & "," & $sfacename & "," & $isize & "," & $iweight & "," & $icolorref & "," & "0x" & $scolor_picked & "," & "0x" & StringMid($scolor_picked, 5, 2) & StringMid($scolor_picked, 3, 2) & StringMid($scolor_picked, 1, 2), ",")
EndFunc

Func _clipputfile($sfilepath, $sdelimiter = "|")
	Local Const $gmem_moveable = 2, $cf_hdrop = 15
	$sfilepath &= $sdelimiter & $sdelimiter
	Local $nglobmemsize = 2 * (StringLen($sfilepath) + 20)
	Local $aresult = DllCall("user32.dll", "bool", "OpenClipboard", "hwnd", 0)
	If @error OR $aresult[0] = 0 Then Return SetError(1, _winapi_getlasterror(), False)
	Local $ierror = 0, $ilasterror = 0
	$aresult = DllCall("user32.dll", "bool", "EmptyClipboard")
	If @error OR NOT $aresult[0] Then
		$ierror = 2
		$ilasterror = _winapi_getlasterror()
	Else
		$aresult = DllCall("kernel32.dll", "handle", "GlobalAlloc", "uint", $gmem_moveable, "ulong_ptr", $nglobmemsize)
		If @error OR NOT $aresult[0] Then
			$ierror = 3
			$ilasterror = _winapi_getlasterror()
		Else
			Local $hglobal = $aresult[0]
			$aresult = DllCall("kernel32.dll", "ptr", "GlobalLock", "handle", $hglobal)
			If @error OR NOT $aresult[0] Then
				$ierror = 4
				$ilasterror = _winapi_getlasterror()
			Else
				Local $hlock = $aresult[0]
				Local $tdropfiles = DllStructCreate("dword pFiles;" & $tagpoint & ";bool fNC;bool fWide;wchar[" & StringLen($sfilepath) + 1 & "]", $hlock)
				If @error Then Return SetError(5, 6, False)
				Local $tstruct = DllStructCreate("dword;long;long;bool;bool")
				DllStructSetData($tdropfiles, "pFiles", DllStructGetSize($tstruct))
				DllStructSetData($tdropfiles, "X", 0)
				DllStructSetData($tdropfiles, "Y", 0)
				DllStructSetData($tdropfiles, "fNC", 0)
				DllStructSetData($tdropfiles, "fWide", 1)
				DllStructSetData($tdropfiles, 6, $sfilepath)
				For $i = 1 To StringLen($sfilepath)
					If DllStructGetData($tdropfiles, 6, $i) = $sdelimiter Then DllStructSetData($tdropfiles, 6, Chr(0), $i)
				Next
				$aresult = DllCall("user32.dll", "handle", "SetClipboardData", "uint", $cf_hdrop, "handle", $hglobal)
				If @error OR NOT $aresult[0] Then
					$ierror = 6
					$ilasterror = _winapi_getlasterror()
				EndIf
				$aresult = DllCall("kernel32.dll", "bool", "GlobalUnlock", "handle", $hglobal)
				If (@error OR NOT $aresult[0]) AND NOT $ierror AND _winapi_getlasterror() Then
					$ierror = 8
					$ilasterror = _winapi_getlasterror()
				EndIf
			EndIf
			$aresult = DllCall("kernel32.dll", "ptr", "GlobalFree", "handle", $hglobal)
			If (@error OR $aresult[0]) AND NOT $ierror Then
				$ierror = 9
				$ilasterror = _winapi_getlasterror()
			EndIf
		EndIf
	EndIf
	$aresult = DllCall("user32.dll", "bool", "CloseClipboard")
	If (@error OR NOT $aresult[0]) AND NOT $ierror Then Return SetError(7, _winapi_getlasterror(), False)
	If $ierror Then Return SetError($ierror, $ilasterror, False)
	Return True
EndFunc

Func _mousetrap($ileft = 0, $itop = 0, $iright = 0, $ibottom = 0)
	Local $areturn = 0
	If $ileft = Default Then $ileft = 0
	If $itop = Default Then $itop = 0
	If $iright = Default Then $iright = 0
	If $ibottom = Default Then $ibottom = 0
	If @NumParams = 0 Then
		$areturn = DllCall("user32.dll", "bool", "ClipCursor", "ptr", 0)
		If @error OR NOT $areturn[0] Then Return SetError(1, _winapi_getlasterror(), False)
	Else
		If @NumParams = 2 Then
			$iright = $ileft + 1
			$ibottom = $itop + 1
		EndIf
		Local $trect = DllStructCreate($tagrect)
		DllStructSetData($trect, "Left", $ileft)
		DllStructSetData($trect, "Top", $itop)
		DllStructSetData($trect, "Right", $iright)
		DllStructSetData($trect, "Bottom", $ibottom)
		$areturn = DllCall("user32.dll", "bool", "ClipCursor", "struct*", $trect)
		If @error OR NOT $areturn[0] Then Return SetError(2, _winapi_getlasterror(), False)
	EndIf
	Return True
EndFunc

Func _singleton($soccurrencename, $iflag = 0)
	Local Const $error_already_exists = 183
	Local Const $security_descriptor_revision = 1
	Local $tsecurityattributes = 0
	If BitAND($iflag, 2) Then
		Local $tsecuritydescriptor = DllStructCreate("byte;byte;word;ptr[4]")
		Local $aret = DllCall("advapi32.dll", "bool", "InitializeSecurityDescriptor", "struct*", $tsecuritydescriptor, "dword", $security_descriptor_revision)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then
			$aret = DllCall("advapi32.dll", "bool", "SetSecurityDescriptorDacl", "struct*", $tsecuritydescriptor, "bool", 1, "ptr", 0, "bool", 0)
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] Then
				$tsecurityattributes = DllStructCreate($tagsecurity_attributes)
				DllStructSetData($tsecurityattributes, 1, DllStructGetSize($tsecurityattributes))
				DllStructSetData($tsecurityattributes, 2, DllStructGetPtr($tsecuritydescriptor))
				DllStructSetData($tsecurityattributes, 3, 0)
			EndIf
		EndIf
	EndIf
	Local $ahandle = DllCall("kernel32.dll", "handle", "CreateMutexW", "struct*", $tsecurityattributes, "bool", 1, "wstr", $soccurrencename)
	If @error Then Return SetError(@error, @extended, 0)
	Local $alasterror = DllCall("kernel32.dll", "dword", "GetLastError")
	If @error Then Return SetError(@error, @extended, 0)
	If $alasterror[0] = $error_already_exists Then
		If BitAND($iflag, 1) Then
			DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $ahandle[0])
			If @error Then Return SetError(@error, @extended, 0)
			Return SetError($alasterror[0], $alasterror[0], 0)
		Else
			Exit -1
		EndIf
	EndIf
	Return $ahandle[0]
EndFunc

Func _ispressed($shexkey, $vdll = "user32.dll")
	Local $a_r = DllCall($vdll, "short", "GetAsyncKeyState", "int", "0x" & $shexkey)
	If @error Then Return SetError(@error, @extended, False)
	Return BitAND($a_r[0], 32768) <> 0
EndFunc

Func _versioncompare($sversion1, $sversion2)
	If $sversion1 = $sversion2 Then Return 0
	Local $ssubversion1 = "", $ssubversion2 = ""
	If StringIsAlpha(StringRight($sversion1, 1)) Then
		$ssubversion1 = StringRight($sversion1, 1)
		$sversion1 = StringTrimRight($sversion1, 1)
	EndIf
	If StringIsAlpha(StringRight($sversion2, 1)) Then
		$ssubversion2 = StringRight($sversion2, 1)
		$sversion2 = StringTrimRight($sversion2, 1)
	EndIf
	Local $aversion1 = StringSplit($sversion1, ".,"), $aversion2 = StringSplit($sversion2, ".,")
	Local $ipartdifference = ($aversion1[0] - $aversion2[0])
	If $ipartdifference < 0 Then
		ReDim $aversion1[UBound($aversion2)]
		$aversion1[0] = UBound($aversion1) - 1
		For $i = (UBound($aversion1) - Abs($ipartdifference)) To $aversion1[0]
			$aversion1[$i] = "0"
		Next
	ElseIf $ipartdifference > 0 Then
		ReDim $aversion2[UBound($aversion1)]
		$aversion2[0] = UBound($aversion2) - 1
		For $i = (UBound($aversion2) - Abs($ipartdifference)) To $aversion2[0]
			$aversion2[$i] = "0"
		Next
	EndIf
	For $i = 1 To $aversion1[0]
		If StringIsDigit($aversion1[$i]) AND StringIsDigit($aversion2[$i]) Then
			If Number($aversion1[$i]) > Number($aversion2[$i]) Then
				Return SetExtended(2, 1)
			ElseIf Number($aversion1[$i]) < Number($aversion2[$i]) Then
				Return SetExtended(2, -1)
			ElseIf $i = $aversion1[0] Then
				If $ssubversion1 > $ssubversion2 Then
					Return SetExtended(3, 1)
				ElseIf $ssubversion1 < $ssubversion2 Then
					Return SetExtended(3, -1)
				EndIf
			EndIf
		Else
			If $aversion1[$i] > $aversion2[$i] Then
				Return SetExtended(1, 1)
			ElseIf $aversion1[$i] < $aversion2[$i] Then
				Return SetExtended(1, -1)
			EndIf
		EndIf
	Next
	Return SetExtended(Abs($ipartdifference), 0)
EndFunc

Func __misc_getdc($hwnd)
	Local $aresult = DllCall("user32.dll", "handle", "GetDC", "hwnd", $hwnd)
	If @error OR NOT $aresult[0] Then Return SetError(1, _winapi_getlasterror(), 0)
	Return $aresult[0]
EndFunc

Func __misc_getdevicecaps($hdc, $iindex)
	Local $aresult = DllCall("gdi32.dll", "int", "GetDeviceCaps", "handle", $hdc, "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func __misc_releasedc($hwnd, $hdc)
	Local $aresult = DllCall("user32.dll", "int", "ReleaseDC", "hwnd", $hwnd, "handle", $hdc)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0] <> 0
EndFunc

Func _filecountlines($sfilepath)
	Local $hfileopen = FileOpen($sfilepath, $fo_read)
	If $hfileopen = -1 Then Return SetError(1, 0, 0)
	Local $sfileread = StringStripWS(FileRead($hfileopen), $str_striptrailing)
	FileClose($hfileopen)
	Return UBound(StringRegExp($sfileread, "\R", $str_regexparrayglobalmatch)) + 1 - Int($sfileread = "")
EndFunc

Func _filecreate($sfilepath)
	Local $hfileopen = FileOpen($sfilepath, BitOR($fo_overwrite, $fo_createpath))
	If $hfileopen = -1 Then Return SetError(1, 0, 0)
	Local $ifilewrite = FileWrite($hfileopen, "")
	FileClose($hfileopen)
	If NOT $ifilewrite Then Return SetError(2, 0, 0)
	Return 1
EndFunc

Func _filelisttoarray($sfilepath, $sfilter = "*", $iflag = $flta_filesfolders, $breturnpath = False)
	Local $sdelimiter = "|", $sfilelist = "", $sfilename = "", $sfullpath = ""
	$sfilepath = StringRegExpReplace($sfilepath, "[\\/]+$", "") & "\"
	If $iflag = Default Then $iflag = $flta_filesfolders
	If $breturnpath Then $sfullpath = $sfilepath
	If $sfilter = Default Then $sfilter = "*"
	If NOT FileExists($sfilepath) Then Return SetError(1, 0, 0)
	If StringRegExp($sfilter, "[\\/:><\|]|(?s)^\s*$") Then Return SetError(2, 0, 0)
	If NOT ($iflag = 0 OR $iflag = 1 OR $iflag = 2) Then Return SetError(3, 0, 0)
	Local $hsearch = FileFindFirstFile($sfilepath & $sfilter)
	If @error Then Return SetError(4, 0, 0)
	While 1
		$sfilename = FileFindNextFile($hsearch)
		If @error Then ExitLoop
		If ($iflag + @extended = 2) Then ContinueLoop
		$sfilelist &= $sdelimiter & $sfullpath & $sfilename
	WEnd
	FileClose($hsearch)
	If $sfilelist = "" Then Return SetError(4, 0, 0)
	Return StringSplit(StringTrimLeft($sfilelist, 1), $sdelimiter)
EndFunc

Func _filelisttoarrayrec($sfilepath, $smask = "*", $ireturn = $fltar_filesfolders, $irecur = $fltar_norecur, $isort = $fltar_nosort, $ireturnpath = $fltar_relpath)
	If NOT FileExists($sfilepath) Then Return SetError(1, 1, "")
	If $smask = Default Then $smask = "*"
	If $ireturn = Default Then $ireturn = $fltar_filesfolders
	If $irecur = Default Then $irecur = $fltar_norecur
	If $isort = Default Then $isort = $fltar_nosort
	If $ireturnpath = Default Then $ireturnpath = $fltar_relpath
	If $irecur > 1 OR NOT IsInt($irecur) Then Return SetError(1, 6, "")
	Local $blongpath = False
	If StringLeft($sfilepath, 4) == "\\?\" Then
		$blongpath = True
	EndIf
	Local $sfolderslash = ""
	If StringRight($sfilepath, 1) = "\" Then
		$sfolderslash = "\"
	Else
		$sfilepath = $sfilepath & "\"
	EndIf
	Local $asfoldersearchlist[100] = [1]
	$asfoldersearchlist[1] = $sfilepath
	Local $ihide_hs = 0, $shide_hs = ""
	If BitAND($ireturn, 4) Then
		$ihide_hs += 2
		$shide_hs &= "H"
		$ireturn -= 4
	EndIf
	If BitAND($ireturn, 8) Then
		$ihide_hs += 4
		$shide_hs &= "S"
		$ireturn -= 8
	EndIf
	Local $ihide_link = 0
	If BitAND($ireturn, 16) Then
		$ihide_link = 1024
		$ireturn -= 16
	EndIf
	Local $imaxlevel = 0
	If $irecur < 0 Then
		StringReplace($sfilepath, "\", "", 0, $str_nocasesensebasic)
		$imaxlevel = @extended - $irecur
	EndIf
	Local $sexclude_list = "", $sexclude_list_folder = "", $sinclude_list = "*"
	Local $amasksplit = StringSplit($smask, "|")
	Switch $amasksplit[0]
		Case 3
			$sexclude_list_folder = $amasksplit[3]
			ContinueCase
		Case 2
			$sexclude_list = $amasksplit[2]
			ContinueCase
		Case 1
			$sinclude_list = $amasksplit[1]
	EndSwitch
	Local $sinclude_file_mask = ".+"
	If $sinclude_list <> "*" Then
		If NOT __fltar_listtomask($sinclude_file_mask, $sinclude_list) Then Return SetError(1, 2, "")
	EndIf
	Local $sinclude_folder_mask = ".+"
	Switch $ireturn
		Case 0
			Switch $irecur
				Case 0
					$sinclude_folder_mask = $sinclude_file_mask
			EndSwitch
		Case 2
			$sinclude_folder_mask = $sinclude_file_mask
	EndSwitch
	Local $sexclude_file_mask = ":"
	If $sexclude_list <> "" Then
		If NOT __fltar_listtomask($sexclude_file_mask, $sexclude_list) Then Return SetError(1, 3, "")
	EndIf
	Local $sexclude_folder_mask = ":"
	If $irecur Then
		If $sexclude_list_folder Then
			If NOT __fltar_listtomask($sexclude_folder_mask, $sexclude_list_folder) Then Return SetError(1, 4, "")
		EndIf
		If $ireturn = 2 Then
			$sexclude_folder_mask = $sexclude_file_mask
		EndIf
	Else
		$sexclude_folder_mask = $sexclude_file_mask
	EndIf
	If NOT ($ireturn = 0 OR $ireturn = 1 OR $ireturn = 2) Then Return SetError(1, 5, "")
	If NOT ($isort = 0 OR $isort = 1 OR $isort = 2) Then Return SetError(1, 7, "")
	If NOT ($ireturnpath = 0 OR $ireturnpath = 1 OR $ireturnpath = 2) Then Return SetError(1, 8, "")
	If $ihide_link Then
		Local $tfile_data = DllStructCreate("struct;align 4;dword FileAttributes;uint64 CreationTime;uint64 LastAccessTime;uint64 LastWriteTime;" & "dword FileSizeHigh;dword FileSizeLow;dword Reserved0;dword Reserved1;wchar FileName[260];wchar AlternateFileName[14];endstruct")
		Local $hdll = DllOpen("kernel32.dll"), $adll_ret
	EndIf
	Local $asreturnlist[100] = [0]
	Local $asfilematchlist = $asreturnlist, $asrootfilematchlist = $asreturnlist, $asfoldermatchlist = $asreturnlist
	Local $bfolder = False, $hsearch = 0, $scurrentpath = "", $sname = "", $sretpath = ""
	Local $iattribs = 0, $sattribs = ""
	Local $asfolderfilesectionlist[100][2] = [[0, 0]]
	While $asfoldersearchlist[0] > 0
		$scurrentpath = $asfoldersearchlist[$asfoldersearchlist[0]]
		$asfoldersearchlist[0] -= 1
		Switch $ireturnpath
			Case 1
				$sretpath = StringReplace($scurrentpath, $sfilepath, "")
			Case 2
				If $blongpath Then
					$sretpath = StringTrimLeft($scurrentpath, 4)
				Else
					$sretpath = $scurrentpath
				EndIf
		EndSwitch
		If $ihide_link Then
			$adll_ret = DllCall($hdll, "handle", "FindFirstFileW", "wstr", $scurrentpath & "*", "struct*", $tfile_data)
			If @error OR NOT $adll_ret[0] Then
				ContinueLoop
			EndIf
			$hsearch = $adll_ret[0]
		Else
			$hsearch = FileFindFirstFile($scurrentpath & "*")
			If $hsearch = -1 Then
				ContinueLoop
			EndIf
		EndIf
		If $ireturn = 0 AND $isort AND $ireturnpath Then
			__fltar_addtolist($asfolderfilesectionlist, $sretpath, $asfilematchlist[0] + 1)
		EndIf
		$sattribs = ""
		While 1
			If $ihide_link Then
				$adll_ret = DllCall($hdll, "int", "FindNextFileW", "handle", $hsearch, "struct*", $tfile_data)
				If @error OR NOT $adll_ret[0] Then
					ExitLoop
				EndIf
				$sname = DllStructGetData($tfile_data, "FileName")
				If $sname = ".." Then
					ContinueLoop
				EndIf
				$iattribs = DllStructGetData($tfile_data, "FileAttributes")
				If $ihide_hs AND BitAND($iattribs, $ihide_hs) Then
					ContinueLoop
				EndIf
				If BitAND($iattribs, $ihide_link) Then
					ContinueLoop
				EndIf
				$bfolder = False
				If BitAND($iattribs, 16) Then
					$bfolder = True
				EndIf
			Else
				$bfolder = False
				$sname = FileFindNextFile($hsearch, 1)
				If @error Then
					ExitLoop
				EndIf
				$sattribs = @extended
				If StringInStr($sattribs, "D") Then
					$bfolder = True
				EndIf
				If StringRegExp($sattribs, "[" & $shide_hs & "]") Then
					ContinueLoop
				EndIf
			EndIf
			If $bfolder Then
				Select
					Case $irecur < 0
						StringReplace($scurrentpath, "\", "", 0, $str_nocasesensebasic)
						If @extended < $imaxlevel Then
							ContinueCase
						EndIf
					Case $irecur = 1
						If NOT StringRegExp($sname, $sexclude_folder_mask) Then
							__fltar_addtolist($asfoldersearchlist, $scurrentpath & $sname & "\")
						EndIf
				EndSelect
			EndIf
			If $isort Then
				If $bfolder Then
					If StringRegExp($sname, $sinclude_folder_mask) AND NOT StringRegExp($sname, $sexclude_folder_mask) Then
						__fltar_addtolist($asfoldermatchlist, $sretpath & $sname & $sfolderslash)
					EndIf
				Else
					If StringRegExp($sname, $sinclude_file_mask) AND NOT StringRegExp($sname, $sexclude_file_mask) Then
						If $scurrentpath = $sfilepath Then
							__fltar_addtolist($asrootfilematchlist, $sretpath & $sname)
						Else
							__fltar_addtolist($asfilematchlist, $sretpath & $sname)
						EndIf
					EndIf
				EndIf
			Else
				If $bfolder Then
					If $ireturn <> 1 AND StringRegExp($sname, $sinclude_folder_mask) AND NOT StringRegExp($sname, $sexclude_folder_mask) Then
						__fltar_addtolist($asreturnlist, $sretpath & $sname & $sfolderslash)
					EndIf
				Else
					If $ireturn <> 2 AND StringRegExp($sname, $sinclude_file_mask) AND NOT StringRegExp($sname, $sexclude_file_mask) Then
						__fltar_addtolist($asreturnlist, $sretpath & $sname)
					EndIf
				EndIf
			EndIf
		WEnd
		If $ihide_link Then
			DllCall($hdll, "int", "FindClose", "ptr", $hsearch)
		Else
			FileClose($hsearch)
		EndIf
	WEnd
	If $ihide_link Then
		DllClose($hdll)
	EndIf
	If $isort Then
		Switch $ireturn
			Case 2
				If $asfoldermatchlist[0] = 0 Then Return SetError(1, 9, "")
				ReDim $asfoldermatchlist[$asfoldermatchlist[0] + 1]
				$asreturnlist = $asfoldermatchlist
				__arraydualpivotsort($asreturnlist, 1, $asreturnlist[0])
			Case 1
				If $asrootfilematchlist[0] = 0 AND $asfilematchlist[0] = 0 Then Return SetError(1, 9, "")
				If $ireturnpath = 0 Then
					__fltar_addfilelists($asreturnlist, $asrootfilematchlist, $asfilematchlist)
					__arraydualpivotsort($asreturnlist, 1, $asreturnlist[0])
				Else
					__fltar_addfilelists($asreturnlist, $asrootfilematchlist, $asfilematchlist, 1)
				EndIf
			Case 0
				If $asrootfilematchlist[0] = 0 AND $asfoldermatchlist[0] = 0 Then Return SetError(1, 9, "")
				If $ireturnpath = 0 Then
					__fltar_addfilelists($asreturnlist, $asrootfilematchlist, $asfilematchlist)
					$asreturnlist[0] += $asfoldermatchlist[0]
					ReDim $asfoldermatchlist[$asfoldermatchlist[0] + 1]
					_arrayconcatenate($asreturnlist, $asfoldermatchlist, 1)
					__arraydualpivotsort($asreturnlist, 1, $asreturnlist[0])
				Else
					Local $asreturnlist[$asfilematchlist[0] + $asrootfilematchlist[0] + $asfoldermatchlist[0] + 1]
					$asreturnlist[0] = $asfilematchlist[0] + $asrootfilematchlist[0] + $asfoldermatchlist[0]
					__arraydualpivotsort($asrootfilematchlist, 1, $asrootfilematchlist[0])
					For $i = 1 To $asrootfilematchlist[0]
						$asreturnlist[$i] = $asrootfilematchlist[$i]
					Next
					Local $inextinsertionindex = $asrootfilematchlist[0] + 1
					__arraydualpivotsort($asfoldermatchlist, 1, $asfoldermatchlist[0])
					Local $sfoldertofind = ""
					For $i = 1 To $asfoldermatchlist[0]
						$asreturnlist[$inextinsertionindex] = $asfoldermatchlist[$i]
						$inextinsertionindex += 1
						If $sfolderslash Then
							$sfoldertofind = $asfoldermatchlist[$i]
						Else
							$sfoldertofind = $asfoldermatchlist[$i] & "\"
						EndIf
						Local $ifilesectionendindex = 0, $ifilesectionstartindex = 0
						For $j = 1 To $asfolderfilesectionlist[0][0]
							If $sfoldertofind = $asfolderfilesectionlist[$j][0] Then
								$ifilesectionstartindex = $asfolderfilesectionlist[$j][1]
								If $j = $asfolderfilesectionlist[0][0] Then
									$ifilesectionendindex = $asfilematchlist[0]
								Else
									$ifilesectionendindex = $asfolderfilesectionlist[$j + 1][1] - 1
								EndIf
								If $isort = 1 Then
									__arraydualpivotsort($asfilematchlist, $ifilesectionstartindex, $ifilesectionendindex)
								EndIf
								For $k = $ifilesectionstartindex To $ifilesectionendindex
									$asreturnlist[$inextinsertionindex] = $asfilematchlist[$k]
									$inextinsertionindex += 1
								Next
								ExitLoop
							EndIf
						Next
					Next
				EndIf
		EndSwitch
	Else
		If $asreturnlist[0] = 0 Then Return SetError(1, 9, "")
		ReDim $asreturnlist[$asreturnlist[0] + 1]
	EndIf
	Return $asreturnlist
EndFunc

Func __fltar_addfilelists(ByRef $astarget, $assource_1, $assource_2, $isort = 0)
	ReDim $assource_1[$assource_1[0] + 1]
	If $isort = 1 Then __arraydualpivotsort($assource_1, 1, $assource_1[0])
	$astarget = $assource_1
	$astarget[0] += $assource_2[0]
	ReDim $assource_2[$assource_2[0] + 1]
	If $isort = 1 Then __arraydualpivotsort($assource_2, 1, $assource_2[0])
	_arrayconcatenate($astarget, $assource_2, 1)
EndFunc

Func __fltar_addtolist(ByRef $alist, $vvalue_0, $vvalue_1 = -1)
	If $vvalue_1 = -1 Then
		$alist[0] += 1
		If UBound($alist) <= $alist[0] Then ReDim $alist[UBound($alist) * 2]
		$alist[$alist[0]] = $vvalue_0
	Else
		$alist[0][0] += 1
		If UBound($alist) <= $alist[0][0] Then ReDim $alist[UBound($alist) * 2][2]
		$alist[$alist[0][0]][0] = $vvalue_0
		$alist[$alist[0][0]][1] = $vvalue_1
	EndIf
EndFunc

Func __fltar_listtomask(ByRef $smask, $slist)
	If StringRegExp($slist, "\\|/|:|\<|\>|\|") Then Return 0
	$slist = StringReplace(StringStripWS(StringRegExpReplace($slist, "\s*;\s*", ";"), $str_stripleading + $str_striptrailing), ";", "|")
	$slist = StringReplace(StringReplace(StringRegExpReplace($slist, "[][$^.{}()+\-]", "\\$0"), "?", "."), "*", ".*?")
	$smask = "(?i)^(" & $slist & ")\z"
	Return 1
EndFunc

Func _fileprint($sfilepath, $ishow = @SW_HIDE)
	If $ishow = Default Then $ishow = @SW_HIDE
	Return ShellExecute($sfilepath, "", @WorkingDir, "print", $ishow)
EndFunc

Func _filereadtoarray($sfilepath, ByRef $vreturn, $iflags = $frta_count, $sdelimiter = "")
	$vreturn = 0
	If $iflags = Default Then $iflags = $frta_count
	If $sdelimiter = Default Then $sdelimiter = ""
	Local $bexpand = True
	If BitAND($iflags, $frta_intarrays) Then
		$bexpand = False
		$iflags -= $frta_intarrays
	EndIf
	Local $ientire = $str_chrsplit
	If BitAND($iflags, $frta_entiresplit) Then
		$ientire = $str_entiresplit
		$iflags -= $frta_entiresplit
	EndIf
	Local $inocount = 0
	If $iflags <> $frta_count Then
		$iflags = $frta_nocount
		$inocount = $str_nocount
	EndIf
	If $sdelimiter Then
		Local $alines = FILEREADTOARRAY($sfilepath)
		If @error Then Return SetError(@error, 0, 0)
		Local $idim_1 = UBound($alines) + $iflags
		If $bexpand Then
			Local $idim_2 = UBound(StringSplit($alines[0], $sdelimiter, $ientire + $str_nocount))
			Local $atemp_array[$idim_1][$idim_2]
			Local $ifields, $asplit
			For $i = 0 To $idim_1 - $iflags - 1
				$asplit = StringSplit($alines[$i], $sdelimiter, $ientire + $str_nocount)
				$ifields = UBound($asplit)
				If $ifields <> $idim_2 Then
					Return SetError(3, 0, 0)
				EndIf
				For $j = 0 To $ifields - 1
					$atemp_array[$i + $iflags][$j] = $asplit[$j]
				Next
			Next
			If $idim_2 < 2 Then Return SetError(4, 0, 0)
			If $iflags Then
				$atemp_array[0][0] = $idim_1 - $iflags
				$atemp_array[0][1] = $idim_2
			EndIf
		Else
			Local $atemp_array[$idim_1]
			For $i = 0 To $idim_1 - $iflags - 1
				$atemp_array[$i + $iflags] = StringSplit($alines[$i], $sdelimiter, $ientire + $inocount)
			Next
			If $iflags Then
				$atemp_array[0] = $idim_1 - $iflags
			EndIf
		EndIf
		$vreturn = $atemp_array
	Else
		If $iflags Then
			Local $hfileopen = FileOpen($sfilepath, $fo_read)
			If $hfileopen = -1 Then Return SetError(1, 0, 0)
			Local $sfileread = FileRead($hfileopen)
			FileClose($hfileopen)
			If StringLen($sfileread) Then
				$vreturn = StringRegExp(@LF & $sfileread, "(?|(\N+)\z|(\N*)(?:\R))", 3)
				$vreturn[0] = UBound($vreturn) - 1
			Else
				Return SetError(2, 0, 0)
			EndIf
		Else
			$vreturn = FILEREADTOARRAY($sfilepath)
			If @error Then
				$vreturn = 0
				Return SetError(@error, 0, 0)
			EndIf
		EndIf
	EndIf
	Return 1
EndFunc

Func _filewritefromarray($sfilepath, Const ByRef $aarray, $ibase = Default, $iubound = Default, $sdelimiter = "|")
	Local $ireturn = 0
	If NOT IsArray($aarray) Then Return SetError(2, 0, $ireturn)
	Local $idims = UBound($aarray, $ubound_dimensions)
	If $idims > 2 Then Return SetError(4, 0, 0)
	Local $ilast = UBound($aarray) - 1
	If $iubound = Default OR $iubound > $ilast Then $iubound = $ilast
	If $ibase < 0 OR $ibase = Default Then $ibase = 0
	If $ibase > $iubound Then Return SetError(5, 0, $ireturn)
	If $sdelimiter = Default Then $sdelimiter = "|"
	Local $hfileopen = $sfilepath
	If IsString($sfilepath) Then
		$hfileopen = FileOpen($sfilepath, $fo_overwrite)
		If $hfileopen = -1 Then Return SetError(1, 0, $ireturn)
	EndIf
	Local $ierror = 0
	$ireturn = 1
	Switch $idims
		Case 1
			For $i = $ibase To $iubound
				If NOT FileWrite($hfileopen, $aarray[$i] & @CRLF) Then
					$ierror = 3
					$ireturn = 0
					ExitLoop
				EndIf
			Next
		Case 2
			Local $stemp = ""
			For $i = $ibase To $iubound
				$stemp = $aarray[$i][0]
				For $j = 1 To UBound($aarray, $ubound_columns) - 1
					$stemp &= $sdelimiter & $aarray[$i][$j]
				Next
				If NOT FileWrite($hfileopen, $stemp & @CRLF) Then
					$ierror = 3
					$ireturn = 0
					ExitLoop
				EndIf
			Next
	EndSwitch
	If IsString($sfilepath) Then FileClose($hfileopen)
	Return SetError($ierror, 0, $ireturn)
EndFunc

Func _filewritelog($slogpath, $slogmsg, $iflag = -1)
	Local $iopenmode = $fo_append
	Local $sdatenow = @YEAR & "-" & @MON & "-" & @MDAY
	Local $stimenow = @HOUR & ":" & @MIN & ":" & @SEC
	Local $smsg = $sdatenow & " " & $stimenow & " : " & $slogmsg
	If $iflag = Default Then $iflag = -1
	If $iflag <> -1 Then
		$iopenmode = $fo_overwrite
		$smsg &= @CRLF & FileRead($slogpath)
	EndIf
	Local $hfileopen = $slogpath
	If IsString($slogpath) Then
		$hfileopen = FileOpen($slogpath, $iopenmode)
	EndIf
	If $hfileopen = -1 Then Return SetError(1, 0, 0)
	Local $ireturn = FileWriteLine($hfileopen, $smsg)
	If IsString($slogpath) Then $ireturn = FileClose($hfileopen)
	If $ireturn <= 0 Then Return SetError(2, $ireturn, 0)
	Return $ireturn
EndFunc

Func _filewritetoline($sfilepath, $iline, $stext, $boverwrite = False)
	If $iline <= 0 Then Return SetError(4, 0, 0)
	If NOT IsString($stext) Then
		$stext = String($stext)
		If $stext = "" Then Return SetError(6, 0, 0)
	EndIf
	If $boverwrite = Default Then $boverwrite = False
	If NOT (IsBool($boverwrite) OR $boverwrite = 0 OR $boverwrite = 1) Then Return SetError(5, 0, 0)
	If NOT FileExists($sfilepath) Then Return SetError(2, 0, 0)
	Local $aarray = FILEREADTOARRAY($sfilepath)
	Local $iubound = UBound($aarray) - 1
	If ($iubound + 1) < $iline Then Return SetError(1, 0, 0)
	Local $hfileopen = FileOpen($sfilepath, FileGetEncoding($sfilepath) + $fo_overwrite)
	If $hfileopen = -1 Then Return SetError(3, 0, 0)
	Local $sdata = ""
	$iline -= 1
	For $i = 0 To $iubound
		If $i = $iline Then
			If $boverwrite Then
				If $stext Then $sdata &= $stext & @CRLF
			Else
				$sdata &= $stext & @CRLF & $aarray[$i] & @CRLF
			EndIf
		ElseIf $i < $iubound Then
			$sdata &= $aarray[$i] & @CRLF
		ElseIf $i = $iubound Then
			$sdata &= $aarray[$i]
		EndIf
	Next
	FileWrite($hfileopen, $sdata)
	FileClose($hfileopen)
	Return 1
EndFunc

Func _pathfull($srelativepath, $sbasepath = @WorkingDir)
	If NOT $srelativepath OR $srelativepath = "." Then Return $sbasepath
	Local $sfullpath = StringReplace($srelativepath, "/", "\")
	Local Const $sfullpathconst = $sfullpath
	Local $spath
	Local $brootonly = StringLeft($sfullpath, 1) = "\" AND StringMid($sfullpath, 2, 1) <> "\"
	If $sbasepath = Default Then $sbasepath = @WorkingDir
	For $i = 1 To 2
		$spath = StringLeft($sfullpath, 2)
		If $spath = "\\" Then
			$sfullpath = StringTrimLeft($sfullpath, 2)
			Local $nserverlen = StringInStr($sfullpath, "\") - 1
			$spath = "\\" & StringLeft($sfullpath, $nserverlen)
			$sfullpath = StringTrimLeft($sfullpath, $nserverlen)
			ExitLoop
		ElseIf StringRight($spath, 1) = ":" Then
			$sfullpath = StringTrimLeft($sfullpath, 2)
			ExitLoop
		Else
			$sfullpath = $sbasepath & "\" & $sfullpath
		EndIf
	Next
	If StringLeft($sfullpath, 1) <> "\" Then
		If StringLeft($sfullpathconst, 2) = StringLeft($sbasepath, 2) Then
			$sfullpath = $sbasepath & "\" & $sfullpath
		Else
			$sfullpath = "\" & $sfullpath
		EndIf
	EndIf
	Local $atemp = StringSplit($sfullpath, "\")
	Local $apathparts[$atemp[0]], $j = 0
	For $i = 2 To $atemp[0]
		If $atemp[$i] = ".." Then
			If $j Then $j -= 1
		ElseIf NOT ($atemp[$i] = "" AND $i <> $atemp[0]) AND $atemp[$i] <> "." Then
			$apathparts[$j] = $atemp[$i]
			$j += 1
		EndIf
	Next
	$sfullpath = $spath
	If NOT $brootonly Then
		For $i = 0 To $j - 1
			$sfullpath &= "\" & $apathparts[$i]
		Next
	Else
		$sfullpath &= $sfullpathconst
		If StringInStr($sfullpath, "..") Then $sfullpath = _pathfull($sfullpath)
	EndIf
	Do
		$sfullpath = StringReplace($sfullpath, ".\", "\")
	Until @extended = 0
	Return $sfullpath
EndFunc

Func _pathgetrelative($sfrom, $sto)
	If StringRight($sfrom, 1) <> "\" Then $sfrom &= "\"
	If StringRight($sto, 1) <> "\" Then $sto &= "\"
	If $sfrom = $sto Then Return SetError(1, 0, StringTrimRight($sto, 1))
	Local $asfrom = StringSplit($sfrom, "\")
	Local $asto = StringSplit($sto, "\")
	If $asfrom[1] <> $asto[1] Then Return SetError(2, 0, StringTrimRight($sto, 1))
	Local $i = 2
	Local $idiff = 1
	While 1
		If $asfrom[$i] <> $asto[$i] Then
			$idiff = $i
			ExitLoop
		EndIf
		$i += 1
	WEnd
	$i = 1
	Local $srelpath = ""
	For $j = 1 To $asto[0]
		If $i >= $idiff Then
			$srelpath &= "\" & $asto[$i]
		EndIf
		$i += 1
	Next
	$srelpath = StringTrimLeft($srelpath, 1)
	$i = 1
	For $j = 1 To $asfrom[0]
		If $i > $idiff Then
			$srelpath = "..\" & $srelpath
		EndIf
		$i += 1
	Next
	If StringRight($srelpath, 1) == "\" Then $srelpath = StringTrimRight($srelpath, 1)
	Return $srelpath
EndFunc

Func _pathmake($sdrive, $sdir, $sfilename, $sextension)
	If StringLen($sdrive) Then
		If NOT (StringLeft($sdrive, 2) = "\\") Then $sdrive = StringLeft($sdrive, 1) & ":"
	EndIf
	If StringLen($sdir) Then
		If NOT (StringRight($sdir, 1) = "\") AND NOT (StringRight($sdir, 1) = "/") Then $sdir = $sdir & "\"
	Else
		$sdir = "\"
	EndIf
	If StringLen($sdir) Then
		If NOT (StringLeft($sdir, 1) = "\") AND NOT (StringLeft($sdir, 1) = "/") Then $sdir = "\" & $sdir
	EndIf
	If StringLen($sextension) Then
		If NOT (StringLeft($sextension, 1) = ".") Then $sextension = "." & $sextension
	EndIf
	Return $sdrive & $sdir & $sfilename & $sextension
EndFunc

Func _pathsplit($sfilepath, ByRef $sdrive, ByRef $sdir, ByRef $sfilename, ByRef $sextension)
	Local $aarray = StringRegExp($sfilepath, "^\h*((?:\\\\\?\\)*(\\\\[^\?\/\\]+|[A-Za-z]:)?(.*[\/\\]\h*)?((?:[^\.\/\\]|(?(?=\.[^\/\\]*\.)\.))*)?([^\/\\]*))$", $str_regexparraymatch)
	If @error Then
		ReDim $aarray[5]
		$aarray[0] = $sfilepath
	EndIf
	$sdrive = $aarray[1]
	If StringLeft($aarray[2], 1) == "/" Then
		$sdir = StringRegExpReplace($aarray[2], "\h*[\/\\]+\h*", "\/")
	Else
		$sdir = StringRegExpReplace($aarray[2], "\h*[\/\\]+\h*", "\\")
	EndIf
	$aarray[2] = $sdir
	$sfilename = $aarray[3]
	$sextension = $aarray[4]
	Return $aarray
EndFunc

Func _replacestringinfile($sfilepath, $ssearchstring, $sreplacestring, $icasesensitive = 0, $ioccurance = 1)
	If StringInStr(FileGetAttrib($sfilepath), "R") Then Return SetError(1, 0, -1)
	Local $hfileopen = FileOpen($sfilepath, $fo_read)
	If $hfileopen = -1 Then Return SetError(2, 0, -1)
	Local $sfileread = FileRead($hfileopen)
	FileClose($hfileopen)
	If $icasesensitive = Default Then $icasesensitive = 0
	If $ioccurance = Default Then $ioccurance = 1
	$sfileread = StringReplace($sfileread, $ssearchstring, $sreplacestring, 1 - $ioccurance, $icasesensitive)
	Local $ireturn = @extended
	If $ireturn Then
		Local $ifileencoding = FileGetEncoding($sfilepath)
		$hfileopen = FileOpen($sfilepath, $ifileencoding + $fo_overwrite)
		If $hfileopen = -1 Then Return SetError(3, 0, -1)
		FileWrite($hfileopen, $sfileread)
		FileClose($hfileopen)
	EndIf
	Return $ireturn
EndFunc

Func _tempfile($sdirectoryname = @TempDir, $sfileprefix = "~", $sfileextension = ".tmp", $irandomlength = 7)
	If $irandomlength = Default OR $irandomlength <= 0 Then $irandomlength = 7
	If $sdirectoryname = Default OR (NOT FileExists($sdirectoryname)) Then $sdirectoryname = @TempDir
	If $sfileextension = Default Then $sfileextension = ".tmp"
	If $sfileprefix = Default Then $sfileprefix = "~"
	If NOT FileExists($sdirectoryname) Then $sdirectoryname = @ScriptDir
	$sdirectoryname = StringRegExpReplace($sdirectoryname, "[\\/]+$", "")
	$sfileextension = StringRegExpReplace($sfileextension, "^\.+", "")
	$sfileprefix = StringRegExpReplace($sfileprefix, '[\\/:*?"<>|]', "")
	Local $stempname = ""
	Do
		$stempname = ""
		While StringLen($stempname) < $irandomlength
			$stempname &= Chr(Random(97, 122, 1))
		WEnd
		$stempname = $sdirectoryname & "\" & $sfileprefix & $stempname & "." & $sfileextension
	Until NOT FileExists($stempname)
	Return $stempname
EndFunc

Global Const $se_assignprimarytoken_name = "SeAssignPrimaryTokenPrivilege"
Global Const $se_audit_name = "SeAuditPrivilege"
Global Const $se_backup_name = "SeBackupPrivilege"
Global Const $se_change_notify_name = "SeChangeNotifyPrivilege"
Global Const $se_create_global_name = "SeCreateGlobalPrivilege"
Global Const $se_create_pagefile_name = "SeCreatePagefilePrivilege"
Global Const $se_create_permanent_name = "SeCreatePermanentPrivilege"
Global Const $se_create_symbolic_link_name = "SeCreateSymbolicLinkPrivilege"
Global Const $se_create_token_name = "SeCreateTokenPrivilege"
Global Const $se_debug_name = "SeDebugPrivilege"
Global Const $se_enable_delegation_name = "SeEnableDelegationPrivilege"
Global Const $se_impersonate_name = "SeImpersonatePrivilege"
Global Const $se_inc_base_priority_name = "SeIncreaseBasePriorityPrivilege"
Global Const $se_inc_working_set_name = "SeIncreaseWorkingSetPrivilege"
Global Const $se_increase_quota_name = "SeIncreaseQuotaPrivilege"
Global Const $se_load_driver_name = "SeLoadDriverPrivilege"
Global Const $se_lock_memory_name = "SeLockMemoryPrivilege"
Global Const $se_machine_account_name = "SeMachineAccountPrivilege"
Global Const $se_manage_volume_name = "SeManageVolumePrivilege"
Global Const $se_prof_single_process_name = "SeProfileSingleProcessPrivilege"
Global Const $se_relabel_name = "SeRelabelPrivilege"
Global Const $se_remote_shutdown_name = "SeRemoteShutdownPrivilege"
Global Const $se_restore_name = "SeRestorePrivilege"
Global Const $se_security_name = "SeSecurityPrivilege"
Global Const $se_shutdown_name = "SeShutdownPrivilege"
Global Const $se_sync_agent_name = "SeSyncAgentPrivilege"
Global Const $se_system_environment_name = "SeSystemEnvironmentPrivilege"
Global Const $se_system_profile_name = "SeSystemProfilePrivilege"
Global Const $se_systemtime_name = "SeSystemtimePrivilege"
Global Const $se_take_ownership_name = "SeTakeOwnershipPrivilege"
Global Const $se_tcb_name = "SeTcbPrivilege"
Global Const $se_time_zone_name = "SeTimeZonePrivilege"
Global Const $se_trusted_credman_access_name = "SeTrustedCredManAccessPrivilege"
Global Const $se_unsolicited_input_name = "SeUnsolicitedInputPrivilege"
Global Const $se_undock_name = "SeUndockPrivilege"
Global Const $se_privilege_enabled_by_default = 1
Global Const $se_privilege_enabled = 2
Global Const $se_privilege_removed = 4
Global Const $se_privilege_used_for_access = -2147483648
Global Const $se_group_mandatory = 1
Global Const $se_group_enabled_by_default = 2
Global Const $se_group_enabled = 4
Global Const $se_group_owner = 8
Global Const $se_group_use_for_deny_only = 16
Global Const $se_group_integrity = 32
Global Const $se_group_integrity_enabled = 64
Global Const $se_group_resource = 536870912
Global Const $se_group_logon_id = -1073741824
Global Enum $tokenprimary = 1, $tokenimpersonation
Global Enum $securityanonymous = 0, $securityidentification, $securityimpersonation, $securitydelegation
Global Enum $tokenuser = 1, $tokengroups, $tokenprivileges, $tokenowner, $tokenprimarygroup, $tokendefaultdacl, $tokensource, $tokentype, $tokenimpersonationlevel, $tokenstatistics, $tokenrestrictedsids, $tokensessionid, $tokengroupsandprivileges, $tokensessionreference, $tokensandboxinert, $tokenauditpolicy, $tokenorigin, $tokenelevationtype, $tokenlinkedtoken, $tokenelevation, $tokenhasrestrictions, $tokenaccessinformation, $tokenvirtualizationallowed, $tokenvirtualizationenabled, $tokenintegritylevel, $tokenuiaccess, $tokenmandatorypolicy, $tokenlogonsid
Global Const $token_assign_primary = 1
Global Const $token_duplicate = 2
Global Const $token_impersonate = 4
Global Const $token_query = 8
Global Const $token_query_source = 16
Global Const $token_adjust_privileges = 32
Global Const $token_adjust_groups = 64
Global Const $token_adjust_default = 128
Global Const $token_adjust_sessionid = 256
Global Const $token_all_access = 983551
Global Const $token_read = 131080
Global Const $token_write = 131296
Global Const $token_execute = 131072
Global Const $token_has_traverse_privilege = 1
Global Const $token_has_backup_privilege = 2
Global Const $token_has_restore_privilege = 4
Global Const $token_has_admin_group = 8
Global Const $token_is_restricted = 16
Global Const $token_session_not_referenced = 32
Global Const $token_sandbox_inert = 64
Global Const $token_has_impersonate_privilege = 128
Global Const $rights_delete = 65536
Global Const $read_control = 131072
Global Const $write_dac = 262144
Global Const $write_owner = 524288
Global Const $synchronize = 1048576
Global Const $access_system_security = 16777216
Global Const $standard_rights_required = 983040
Global Const $standard_rights_read = $read_control
Global Const $standard_rights_write = $read_control
Global Const $standard_rights_execute = $read_control
Global Const $standard_rights_all = 2031616
Global Const $specific_rights_all = 65535
Global Enum $not_used_access = 0, $grant_access, $set_access, $deny_access, $revoke_access, $set_audit_success, $set_audit_failure
Global Enum $trustee_is_unknown = 0, $trustee_is_user, $trustee_is_group, $trustee_is_domain, $trustee_is_alias, $trustee_is_well_known_group, $trustee_is_deleted, $trustee_is_invalid, $trustee_is_computer
Global Const $logon_with_profile = 1
Global Const $logon_netcredentials_only = 2
Global Enum $sidtypeuser = 1, $sidtypegroup, $sidtypedomain, $sidtypealias, $sidtypewellknowngroup, $sidtypedeletedaccount, $sidtypeinvalid, $sidtypeunknown, $sidtypecomputer, $sidtypelabel
Global Const $sid_administrators = "S-1-5-32-544"
Global Const $sid_users = "S-1-5-32-545"
Global Const $sid_guests = "S-1-5-32-546"
Global Const $sid_account_operators = "S-1-5-32-548"
Global Const $sid_server_operators = "S-1-5-32-549"
Global Const $sid_print_operators = "S-1-5-32-550"
Global Const $sid_backup_operators = "S-1-5-32-551"
Global Const $sid_replicator = "S-1-5-32-552"
Global Const $sid_owner = "S-1-3-0"
Global Const $sid_everyone = "S-1-1-0"
Global Const $sid_network = "S-1-5-2"
Global Const $sid_interactive = "S-1-5-4"
Global Const $sid_system = "S-1-5-18"
Global Const $sid_authenticated_users = "S-1-5-11"
Global Const $sid_schannel_authentication = "S-1-5-64-14"
Global Const $sid_digest_authentication = "S-1-5-64-21"
Global Const $sid_nt_service = "S-1-5-80"
Global Const $sid_untrusted_mandatory_level = "S-1-16-0"
Global Const $sid_low_mandatory_level = "S-1-16-4096"
Global Const $sid_medium_mandatory_level = "S-1-16-8192"
Global Const $sid_medium_plus_mandatory_level = "S-1-16-8448"
Global Const $sid_high_mandatory_level = "S-1-16-12288"
Global Const $sid_system_mandatory_level = "S-1-16-16384"
Global Const $sid_protected_process_mandatory_level = "S-1-16-20480"
Global Const $sid_secure_process_mandatory_level = "S-1-16-28672"
Global Const $sid_all_services = "S-1-5-80-0"

Func _security__adjusttokenprivileges($htoken, $bdisableall, $tnewstate, $ibufferlen, $tprevstate = 0, $prequired = 0)
	Local $acall = DllCall("advapi32.dll", "bool", "AdjustTokenPrivileges", "handle", $htoken, "bool", $bdisableall, "struct*", $tnewstate, "dword", $ibufferlen, "struct*", $tprevstate, "struct*", $prequired)
	If @error Then Return SetError(@error, @extended, False)
	Return NOT ($acall[0] = 0)
EndFunc

Func _security__createprocesswithtoken($htoken, $ilogonflags, $scommandline, $icreationflags, $scurdir, $tstartupinfo, $tprocess_information)
	Local $acall = DllCall("advapi32.dll", "bool", "CreateProcessWithTokenW", "handle", $htoken, "dword", $ilogonflags, "ptr", 0, "wstr", $scommandline, "dword", $icreationflags, "struct*", 0, "wstr", $scurdir, "struct*", $tstartupinfo, "struct*", $tprocess_information)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, False)
	Return True
EndFunc

Func _security__duplicatetokenex($hexistingtoken, $idesiredaccess, $iimpersonationlevel, $itokentype)
	Local $acall = DllCall("advapi32.dll", "bool", "DuplicateTokenEx", "handle", $hexistingtoken, "dword", $idesiredaccess, "struct*", 0, "int", $iimpersonationlevel, "int", $itokentype, "handle*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $acall[6]
EndFunc

Func _security__getaccountsid($saccount, $ssystem = "")
	Local $aacct = _security__lookupaccountname($saccount, $ssystem)
	If @error Then Return SetError(@error, @extended, 0)
	If IsArray($aacct) Then Return _security__stringsidtosid($aacct[0])
	Return ""
EndFunc

Func _security__getlengthsid($psid)
	If NOT _security__isvalidsid($psid) Then Return SetError(@error + 10, @extended, 0)
	Local $acall = DllCall("advapi32.dll", "dword", "GetLengthSid", "struct*", $psid)
	If @error Then Return SetError(@error, @extended, 0)
	Return $acall[0]
EndFunc

Func _security__gettokeninformation($htoken, $iclass)
	Local $acall = DllCall("advapi32.dll", "bool", "GetTokenInformation", "handle", $htoken, "int", $iclass, "struct*", 0, "dword", 0, "dword*", 0)
	If @error OR NOT $acall[5] Then Return SetError(@error + 10, @extended, 0)
	Local $ilen = $acall[5]
	Local $tbuffer = DllStructCreate("byte[" & $ilen & "]")
	$acall = DllCall("advapi32.dll", "bool", "GetTokenInformation", "handle", $htoken, "int", $iclass, "struct*", $tbuffer, "dword", DllStructGetSize($tbuffer), "dword*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $tbuffer
EndFunc

Func _security__impersonateself($ilevel = $securityimpersonation)
	Local $acall = DllCall("advapi32.dll", "bool", "ImpersonateSelf", "int", $ilevel)
	If @error Then Return SetError(@error, @extended, False)
	Return NOT ($acall[0] = 0)
EndFunc

Func _security__isvalidsid($psid)
	Local $acall = DllCall("advapi32.dll", "bool", "IsValidSid", "struct*", $psid)
	If @error Then Return SetError(@error, @extended, False)
	Return NOT ($acall[0] = 0)
EndFunc

Func _security__lookupaccountname($saccount, $ssystem = "")
	Local $tdata = DllStructCreate("byte SID[256]")
	Local $acall = DllCall("advapi32.dll", "bool", "LookupAccountNameW", "wstr", $ssystem, "wstr", $saccount, "struct*", $tdata, "dword*", DllStructGetSize($tdata), "wstr", "", "dword*", DllStructGetSize($tdata), "int*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Local $aacct[3]
	$aacct[0] = _security__sidtostringsid(DllStructGetPtr($tdata, "SID"))
	$aacct[1] = $acall[5]
	$aacct[2] = $acall[7]
	Return $aacct
EndFunc

Func _security__lookupaccountsid($vsid, $ssystem = "")
	Local $psid, $aacct[3]
	If IsString($vsid) Then
		$psid = _security__stringsidtosid($vsid)
	Else
		$psid = $vsid
	EndIf
	If NOT _security__isvalidsid($psid) Then Return SetError(@error + 10, @extended, 0)
	Local $stypesystem = "ptr"
	If $ssystem Then $stypesystem = "wstr"
	Local $acall = DllCall("advapi32.dll", "bool", "LookupAccountSidW", $stypesystem, $ssystem, "struct*", $psid, "wstr", "", "dword*", 65536, "wstr", "", "dword*", 65536, "int*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Local $aacct[3]
	$aacct[0] = $acall[3]
	$aacct[1] = $acall[5]
	$aacct[2] = $acall[7]
	Return $aacct
EndFunc

Func _security__lookupprivilegevalue($ssystem, $sname)
	Local $acall = DllCall("advapi32.dll", "bool", "LookupPrivilegeValueW", "wstr", $ssystem, "wstr", $sname, "int64*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $acall[3]
EndFunc

Func _security__openprocesstoken($hprocess, $iaccess)
	Local $acall = DllCall("advapi32.dll", "bool", "OpenProcessToken", "handle", $hprocess, "dword", $iaccess, "handle*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $acall[3]
EndFunc

Func _security__openthreadtoken($iaccess, $hthread = 0, $bopenasself = False)
	If $hthread = 0 Then
		Local $aresult = DllCall("kernel32.dll", "handle", "GetCurrentThread")
		If @error Then Return SetError(@error + 10, @extended, 0)
		$hthread = $aresult[0]
	EndIf
	Local $acall = DllCall("advapi32.dll", "bool", "OpenThreadToken", "handle", $hthread, "dword", $iaccess, "bool", $bopenasself, "handle*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Return $acall[4]
EndFunc

Func _security__openthreadtokenex($iaccess, $hthread = 0, $bopenasself = False)
	Local $htoken = _security__openthreadtoken($iaccess, $hthread, $bopenasself)
	If $htoken = 0 Then
		Local Const $error_no_token = 1008
		If _winapi_getlasterror() <> $error_no_token Then Return SetError(20, _winapi_getlasterror(), 0)
		If NOT _security__impersonateself() Then Return SetError(@error + 10, _winapi_getlasterror(), 0)
		$htoken = _security__openthreadtoken($iaccess, $hthread, $bopenasself)
		If $htoken = 0 Then Return SetError(@error, _winapi_getlasterror(), 0)
	EndIf
	Return $htoken
EndFunc

Func _security__setprivilege($htoken, $sprivilege, $benable)
	Local $iluid = _security__lookupprivilegevalue("", $sprivilege)
	If $iluid = 0 Then Return SetError(@error + 10, @extended, False)
	Local Const $tagtoken_privileges = "dword Count;align 4;int64 LUID;dword Attributes"
	Local $tcurrstate = DllStructCreate($tagtoken_privileges)
	Local $icurrstate = DllStructGetSize($tcurrstate)
	Local $tprevstate = DllStructCreate($tagtoken_privileges)
	Local $iprevstate = DllStructGetSize($tprevstate)
	Local $trequired = DllStructCreate("int Data")
	DllStructSetData($tcurrstate, "Count", 1)
	DllStructSetData($tcurrstate, "LUID", $iluid)
	If NOT _security__adjusttokenprivileges($htoken, False, $tcurrstate, $icurrstate, $tprevstate, $trequired) Then Return SetError(2, @error, False)
	DllStructSetData($tprevstate, "Count", 1)
	DllStructSetData($tprevstate, "LUID", $iluid)
	Local $iattributes = DllStructGetData($tprevstate, "Attributes")
	If $benable Then
		$iattributes = BitOR($iattributes, $se_privilege_enabled)
	Else
		$iattributes = BitAND($iattributes, BitNOT($se_privilege_enabled))
	EndIf
	DllStructSetData($tprevstate, "Attributes", $iattributes)
	If NOT _security__adjusttokenprivileges($htoken, False, $tprevstate, $iprevstate, $tcurrstate, $trequired) Then Return SetError(3, @error, False)
	Return True
EndFunc

Func _security__settokeninformation($htoken, $itokeninformation, $vtokeninformation, $itokeninformationlength)
	Local $acall = DllCall("advapi32.dll", "bool", "SetTokenInformation", "handle", $htoken, "int", $itokeninformation, "struct*", $vtokeninformation, "dword", $itokeninformationlength)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, False)
	Return True
EndFunc

Func _security__sidtostringsid($psid)
	If NOT _security__isvalidsid($psid) Then Return SetError(@error + 10, 0, "")
	Local $acall = DllCall("advapi32.dll", "bool", "ConvertSidToStringSidW", "struct*", $psid, "ptr*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, "")
	Local $pstringsid = $acall[2]
	Local $alen = DllCall("kernel32.dll", "int", "lstrlenW", "struct*", $pstringsid)
	Local $ssid = DllStructGetData(DllStructCreate("wchar Text[" & $alen[0] + 1 & "]", $pstringsid), "Text")
	DllCall("kernel32.dll", "handle", "LocalFree", "handle", $pstringsid)
	Return $ssid
EndFunc

Func _security__sidtypestr($itype)
	Switch $itype
		Case $sidtypeuser
			Return "User"
		Case $sidtypegroup
			Return "Group"
		Case $sidtypedomain
			Return "Domain"
		Case $sidtypealias
			Return "Alias"
		Case $sidtypewellknowngroup
			Return "Well Known Group"
		Case $sidtypedeletedaccount
			Return "Deleted Account"
		Case $sidtypeinvalid
			Return "Invalid"
		Case $sidtypeunknown
			Return "Unknown Type"
		Case $sidtypecomputer
			Return "Computer"
		Case $sidtypelabel
			Return "A mandatory integrity label SID"
		Case Else
			Return "Unknown SID Type"
	EndSwitch
EndFunc

Func _security__stringsidtosid($ssid)
	Local $acall = DllCall("advapi32.dll", "bool", "ConvertStringSidToSidW", "wstr", $ssid, "ptr*", 0)
	If @error OR NOT $acall[0] Then Return SetError(@error, @extended, 0)
	Local $psid = $acall[2]
	Local $tbuffer = DllStructCreate("byte Data[" & _security__getlengthsid($psid) & "]", $psid)
	Local $tsid = DllStructCreate("byte Data[" & DllStructGetSize($tbuffer) & "]")
	DllStructSetData($tsid, "Data", DllStructGetData($tbuffer, "Data"))
	DllCall("kernel32.dll", "handle", "LocalFree", "handle", $psid)
	Return $tsid
EndFunc

Func _sendmessage($hwnd, $imsg, $wparam = 0, $lparam = 0, $ireturn = 0, $wparamtype = "wparam", $lparamtype = "lparam", $sreturntype = "lresult")
	Local $aresult = DllCall("user32.dll", $sreturntype, "SendMessageW", "hwnd", $hwnd, "uint", $imsg, $wparamtype, $wparam, $lparamtype, $lparam)
	If @error Then Return SetError(@error, @extended, "")
	If $ireturn >= 0 AND $ireturn <= 4 Then Return $aresult[$ireturn]
	Return $aresult
EndFunc

Func _sendmessagea($hwnd, $imsg, $wparam = 0, $lparam = 0, $ireturn = 0, $wparamtype = "wparam", $lparamtype = "lparam", $sreturntype = "lresult")
	Local $aresult = DllCall("user32.dll", $sreturntype, "SendMessageA", "hwnd", $hwnd, "uint", $imsg, $wparamtype, $wparam, $lparamtype, $lparam)
	If @error Then Return SetError(@error, @extended, "")
	If $ireturn >= 0 AND $ireturn <= 4 Then Return $aresult[$ireturn]
	Return $aresult
EndFunc

Global Const $hgdi_error = Ptr(-1)
Global Const $invalid_handle_value = Ptr(-1)
Global Const $clr_invalid = -1
Global Const $null_brush = 5
Global Const $null_pen = 8
Global Const $black_brush = 4
Global Const $dkgray_brush = 3
Global Const $dc_brush = 18
Global Const $gray_brush = 2
Global Const $hollow_brush = $null_brush
Global Const $ltgray_brush = 1
Global Const $white_brush = 0
Global Const $black_pen = 7
Global Const $dc_pen = 19
Global Const $white_pen = 6
Global Const $ansi_fixed_font = 11
Global Const $ansi_var_font = 12
Global Const $device_default_font = 14
Global Const $default_gui_font = 17
Global Const $oem_fixed_font = 10
Global Const $system_font = 13
Global Const $system_fixed_font = 16
Global Const $default_palette = 15
Global Const $mb_precomposed = 1
Global Const $mb_composite = 2
Global Const $mb_useglyphchars = 4
Global Const $ulw_alpha = 2
Global Const $ulw_colorkey = 1
Global Const $ulw_opaque = 4
Global Const $ulw_ex_noresize = 8
Global Const $wh_callwndproc = 4
Global Const $wh_callwndprocret = 12
Global Const $wh_cbt = 5
Global Const $wh_debug = 9
Global Const $wh_foregroundidle = 11
Global Const $wh_getmessage = 3
Global Const $wh_journalplayback = 1
Global Const $wh_journalrecord = 0
Global Const $wh_keyboard = 2
Global Const $wh_keyboard_ll = 13
Global Const $wh_mouse = 7
Global Const $wh_mouse_ll = 14
Global Const $wh_msgfilter = -1
Global Const $wh_shell = 10
Global Const $wh_sysmsgfilter = 6
Global Const $wpf_asyncwindowplacement = 4
Global Const $wpf_restoretomaximized = 2
Global Const $wpf_setminposition = 1
Global Const $kf_extended = 256
Global Const $kf_altdown = 8192
Global Const $kf_up = 32768
Global Const $llkhf_extended = BitShift($kf_extended, 8)
Global Const $llkhf_injected = 16
Global Const $llkhf_altdown = BitShift($kf_altdown, 8)
Global Const $llkhf_up = BitShift($kf_up, 8)
Global Const $ofn_allowmultiselect = 512
Global Const $ofn_createprompt = 8192
Global Const $ofn_dontaddtorecent = 33554432
Global Const $ofn_enablehook = 32
Global Const $ofn_enableincludenotify = 4194304
Global Const $ofn_enablesizing = 8388608
Global Const $ofn_enabletemplate = 64
Global Const $ofn_enabletemplatehandle = 128
Global Const $ofn_explorer = 524288
Global Const $ofn_extensiondifferent = 1024
Global Const $ofn_filemustexist = 4096
Global Const $ofn_forceshowhidden = 268435456
Global Const $ofn_hidereadonly = 4
Global Const $ofn_longnames = 2097152
Global Const $ofn_nochangedir = 8
Global Const $ofn_nodereferencelinks = 1048576
Global Const $ofn_nolongnames = 262144
Global Const $ofn_nonetworkbutton = 131072
Global Const $ofn_noreadonlyreturn = 32768
Global Const $ofn_notestfilecreate = 65536
Global Const $ofn_novalidate = 256
Global Const $ofn_overwriteprompt = 2
Global Const $ofn_pathmustexist = 2048
Global Const $ofn_readonly = 1
Global Const $ofn_shareaware = 16384
Global Const $ofn_showhelp = 16
Global Const $ofn_ex_noplacesbar = 1
Global Const $tmpf_fixed_pitch = 1
Global Const $tmpf_vector = 2
Global Const $tmpf_truetype = 4
Global Const $tmpf_device = 8
Global Const $duplicate_close_source = 1
Global Const $duplicate_same_access = 2
Global Const $di_mask = 1
Global Const $di_image = 2
Global Const $di_normal = 3
Global Const $di_compat = 4
Global Const $di_defaultsize = 8
Global Const $di_nomirror = 16
Global Const $display_device_attached_to_desktop = 1
Global Const $display_device_multi_driver = 2
Global Const $display_device_primary_device = 4
Global Const $display_device_mirroring_driver = 8
Global Const $display_device_vga_compatible = 16
Global Const $display_device_removable = 32
Global Const $display_device_disconnect = 33554432
Global Const $display_device_remote = 67108864
Global Const $display_device_modespruned = 134217728
Global Const $flashw_caption = 1
Global Const $flashw_tray = 2
Global Const $flashw_timer = 4
Global Const $flashw_timernofg = 12
Global Const $format_message_allocate_buffer = 256
Global Const $format_message_ignore_inserts = 512
Global Const $format_message_from_string = 1024
Global Const $format_message_from_hmodule = 2048
Global Const $format_message_from_system = 4096
Global Const $format_message_argument_array = 8192
Global Const $gw_hwndfirst = 0
Global Const $gw_hwndlast = 1
Global Const $gw_hwndnext = 2
Global Const $gw_hwndprev = 3
Global Const $gw_owner = 4
Global Const $gw_child = 5
Global Const $gw_enabledpopup = 6
Global Const $gwl_wndproc = -4
Global Const $gwl_hinstance = -6
Global Const $gwl_hwndparent = -8
Global Const $gwl_id = -12
Global Const $gwl_style = -16
Global Const $gwl_exstyle = -20
Global Const $gwl_userdata = -21
Global Const $std_cut = 0
Global Const $std_copy = 1
Global Const $std_paste = 2
Global Const $std_undo = 3
Global Const $std_redow = 4
Global Const $std_delete = 5
Global Const $std_filenew = 6
Global Const $std_fileopen = 7
Global Const $std_filesave = 8
Global Const $std_printpre = 9
Global Const $std_properties = 10
Global Const $std_help = 11
Global Const $std_find = 12
Global Const $std_replace = 13
Global Const $std_print = 14
Global Const $image_bitmap = 0
Global Const $image_icon = 1
Global Const $image_cursor = 2
Global Const $image_enhmetafile = 3
Global Const $kb_sendspecial = 0
Global Const $kb_sendraw = 1
Global Const $kb_capsoff = 0
Global Const $kb_capson = 1
Global Const $dont_resolve_dll_references = 1
Global Const $load_library_as_datafile = 2
Global Const $load_with_altered_search_path = 8
Global Const $load_ignore_code_authz_level = 16
Global Const $load_library_as_datafile_exclusive = 64
Global Const $load_library_as_image_resource = 32
Global Const $load_library_search_application_dir = 512
Global Const $load_library_search_default_dirs = 4096
Global Const $load_library_search_dll_load_dir = 256
Global Const $load_library_search_system32 = 2048
Global Const $load_library_search_user_dirs = 1024
Global Const $s_ok = 0
Global Const $e_abort = -2147467260
Global Const $e_accessdenied = -2147024891
Global Const $e_fail = -2147467259
Global Const $e_handle = -2147024890
Global Const $e_invalidarg = -2147024809
Global Const $e_nointerface = -2147467262
Global Const $e_notimpl = -2147467263
Global Const $e_outofmemory = -2147024882
Global Const $e_pointer = -2147467261
Global Const $e_unexpected = -2147418113
Global Const $lr_defaultcolor = 0
Global Const $lr_monochrome = 1
Global Const $lr_color = 2
Global Const $lr_copyreturnorg = 4
Global Const $lr_copydeleteorg = 8
Global Const $lr_loadfromfile = 16
Global Const $lr_loadtransparent = 32
Global Const $lr_defaultsize = 64
Global Const $lr_vgacolor = 128
Global Const $lr_loadmap3dcolors = 4096
Global Const $lr_createdibsection = 8192
Global Const $lr_copyfromresource = 16384
Global Const $lr_shared = 32768
Global Const $obm_trtype = 32732
Global Const $obm_lfarrowi = 32734
Global Const $obm_rgarrowi = 32735
Global Const $obm_dnarrowi = 32736
Global Const $obm_uparrowi = 32737
Global Const $obm_combo = 32738
Global Const $obm_mnarrow = 32739
Global Const $obm_lfarrowd = 32740
Global Const $obm_rgarrowd = 32741
Global Const $obm_dnarrowd = 32742
Global Const $obm_uparrowd = 32743
Global Const $obm_restored = 32744
Global Const $obm_zoomd = 32745
Global Const $obm_reduced = 32746
Global Const $obm_restore = 32747
Global Const $obm_zoom = 32748
Global Const $obm_reduce = 32749
Global Const $obm_lfarrow = 32750
Global Const $obm_rgarrow = 32751
Global Const $obm_dnarrow = 32752
Global Const $obm_uparrow = 32753
Global Const $obm_close = 32754
Global Const $obm_old_restore = 32755
Global Const $obm_old_zoom = 32756
Global Const $obm_old_reduce = 32757
Global Const $obm_btncorners = 32758
Global Const $obm_checkboxes = 32759
Global Const $obm_check = 32760
Global Const $obm_btsize = 32761
Global Const $obm_old_lfarrow = 32762
Global Const $obm_old_rgarrow = 32763
Global Const $obm_old_dnarrow = 32764
Global Const $obm_old_uparrow = 32765
Global Const $obm_size = 32766
Global Const $obm_old_close = 32767
Global Const $oic_sample = 32512
Global Const $oic_hand = 32513
Global Const $oic_ques = 32514
Global Const $oic_bang = 32515
Global Const $oic_note = 32516
Global Const $oic_winlogo = 32517
Global Const $oic_warning = $oic_bang
Global Const $oic_error = $oic_hand
Global Const $oic_information = $oic_note
Global $__g_ainprocess_winapi[64][2] = [[0, 0]]
Global $__g_awinlist_winapi[64][2] = [[0, 0]]
Global Const $__winapiconstant_wm_setfont = 48
Global Const $__winapiconstant_fw_normal = 400
Global Const $__winapiconstant_default_charset = 1
Global Const $__winapiconstant_out_default_precis = 0
Global Const $__winapiconstant_clip_default_precis = 0
Global Const $__winapiconstant_default_quality = 0
Global Const $__winapiconstant_logpixelsx = 88
Global Const $__winapiconstant_logpixelsy = 90
Global Const $tagcursorinfo = "dword Size;dword Flags;handle hCursor;" & $tagpoint
Global Const $tagdisplay_device = "dword Size;wchar Name[32];wchar String[128];dword Flags;wchar ID[128];wchar Key[128]"
Global Const $tagflashwinfo = "uint Size;hwnd hWnd;dword Flags;uint Count;dword TimeOut"
Global Const $tagiconinfo = "bool Icon;dword XHotSpot;dword YHotSpot;handle hMask;handle hColor"
Global Const $tagmemorystatusex = "dword Length;dword MemoryLoad;" & "uint64 TotalPhys;uint64 AvailPhys;uint64 TotalPageFile;uint64 AvailPageFile;" & "uint64 TotalVirtual;uint64 AvailVirtual;uint64 AvailExtendedVirtual"

Func _winapi_attachconsole($ipid = -1)
	Local $aresult = DllCall("kernel32.dll", "bool", "AttachConsole", "dword", $ipid)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_attachthreadinput($iattach, $iattachto, $battach)
	Local $aresult = DllCall("user32.dll", "bool", "AttachThreadInput", "dword", $iattach, "dword", $iattachto, "bool", $battach)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_beep($ifreq = 500, $iduration = 1000)
	Local $aresult = DllCall("kernel32.dll", "bool", "Beep", "dword", $ifreq, "dword", $iduration)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_bitblt($hdestdc, $ixdest, $iydest, $iwidth, $iheight, $hsrcdc, $ixsrc, $iysrc, $irop)
	Local $aresult = DllCall("gdi32.dll", "bool", "BitBlt", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidth, "int", $iheight, "handle", $hsrcdc, "int", $ixsrc, "int", $iysrc, "dword", $irop)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_callnexthookex($hhook, $icode, $wparam, $lparam)
	Local $aresult = DllCall("user32.dll", "lresult", "CallNextHookEx", "handle", $hhook, "int", $icode, "wparam", $wparam, "lparam", $lparam)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_callwindowproc($pprevwndfunc, $hwnd, $imsg, $wparam, $lparam)
	Local $aresult = DllCall("user32.dll", "lresult", "CallWindowProc", "ptr", $pprevwndfunc, "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_clienttoscreen($hwnd, ByRef $tpoint)
	Local $aret = DllCall("user32.dll", "bool", "ClientToScreen", "hwnd", $hwnd, "struct*", $tpoint)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $tpoint
EndFunc

Func _winapi_closehandle($hobject)
	Local $aresult = DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hobject)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_combinergn($hrgndest, $hrgnsrc1, $hrgnsrc2, $icombinemode)
	Local $aresult = DllCall("gdi32.dll", "int", "CombineRgn", "handle", $hrgndest, "handle", $hrgnsrc1, "handle", $hrgnsrc2, "int", $icombinemode)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_commdlgextendederror()
	Local Const $cderr_dialogfailure = 65535
	Local Const $cderr_findresfailure = 6
	Local Const $cderr_initialization = 2
	Local Const $cderr_loadresfailure = 7
	Local Const $cderr_loadstrfailure = 5
	Local Const $cderr_lockresfailure = 8
	Local Const $cderr_memallocfailure = 9
	Local Const $cderr_memlockfailure = 10
	Local Const $cderr_nohinstance = 4
	Local Const $cderr_nohook = 11
	Local Const $cderr_notemplate = 3
	Local Const $cderr_registermsgfail = 12
	Local Const $cderr_structsize = 1
	Local Const $fnerr_buffertoosmall = 12291
	Local Const $fnerr_invalidfilename = 12290
	Local Const $fnerr_subclassfailure = 12289
	Local $aresult = DllCall("comdlg32.dll", "dword", "CommDlgExtendedError")
	If NOT @error Then
		Switch $aresult[0]
			Case $cderr_dialogfailure
				Return SetError($aresult[0], 0, "The dialog box could not be created." & @LF & "The common dialog box function's call to the DialogBox function failed." & @LF & "For example, this error occurs if the common dialog box call specifies an invalid window handle.")
			Case $cderr_findresfailure
				Return SetError($aresult[0], 0, "The common dialog box function failed to find a specified resource.")
			Case $cderr_initialization
				Return SetError($aresult[0], 0, "The common dialog box function failed during initialization." & @LF & "This error often occurs when sufficient memory is not available.")
			Case $cderr_loadresfailure
				Return SetError($aresult[0], 0, "The common dialog box function failed to load a specified resource.")
			Case $cderr_loadstrfailure
				Return SetError($aresult[0], 0, "The common dialog box function failed to load a specified string.")
			Case $cderr_lockresfailure
				Return SetError($aresult[0], 0, "The common dialog box function failed to lock a specified resource.")
			Case $cderr_memallocfailure
				Return SetError($aresult[0], 0, "The common dialog box function was unable to allocate memory for internal structures.")
			Case $cderr_memlockfailure
				Return SetError($aresult[0], 0, "The common dialog box function was unable to lock the memory associated with a handle.")
			Case $cderr_nohinstance
				Return SetError($aresult[0], 0, "The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box," & @LF & "but you failed to provide a corresponding instance handle.")
			Case $cderr_nohook
				Return SetError($aresult[0], 0, "The ENABLEHOOK flag was set in the Flags member of the initialization structure for the corresponding common dialog box," & @LF & "but you failed to provide a pointer to a corresponding hook procedure.")
			Case $cderr_notemplate
				Return SetError($aresult[0], 0, "The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box," & @LF & "but you failed to provide a corresponding template.")
			Case $cderr_registermsgfail
				Return SetError($aresult[0], 0, "The RegisterWindowMessage function returned an error code when it was called by the common dialog box function.")
			Case $cderr_structsize
				Return SetError($aresult[0], 0, "The lStructSize member of the initialization structure for the corresponding common dialog box is invalid")
			Case $fnerr_buffertoosmall
				Return SetError($aresult[0], 0, "The buffer pointed to by the lpstrFile member of the OPENFILENAME structure is too small for the file name specified by the user." & @LF & "The first two bytes of the lpstrFile buffer contain an integer value specifying the size, in TCHARs, required to receive the full name.")
			Case $fnerr_invalidfilename
				Return SetError($aresult[0], 0, "A file name is invalid.")
			Case $fnerr_subclassfailure
				Return SetError($aresult[0], 0, "An attempt to subclass a list box failed because sufficient memory was not available.")
		EndSwitch
	EndIf
	Return SetError(@error, @extended, "0x" & Hex($aresult[0]))
EndFunc

Func _winapi_copyicon($hicon)
	Local $aresult = DllCall("user32.dll", "handle", "CopyIcon", "handle", $hicon)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createbitmap($iwidth, $iheight, $iplanes = 1, $ibitsperpel = 1, $pbits = 0)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateBitmap", "int", $iwidth, "int", $iheight, "uint", $iplanes, "uint", $ibitsperpel, "struct*", $pbits)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createcompatiblebitmap($hdc, $iwidth, $iheight)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateCompatibleBitmap", "handle", $hdc, "int", $iwidth, "int", $iheight)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createcompatibledc($hdc)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createevent($tattributes = 0, $bmanualreset = True, $binitialstate = True, $sname = "")
	Local $snametype = "wstr"
	If $sname = "" Then
		$sname = 0
		$snametype = "ptr"
	EndIf
	Local $aresult = DllCall("kernel32.dll", "handle", "CreateEventW", "struct*", $tattributes, "bool", $bmanualreset, "bool", $binitialstate, $snametype, $sname)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createfile($sfilename, $icreation, $iaccess = 4, $ishare = 0, $iattributes = 0, $tsecurity = 0)
	Local $ida = 0, $ism = 0, $icd = 0, $ifa = 0
	If BitAND($iaccess, 1) <> 0 Then $ida = BitOR($ida, $generic_execute)
	If BitAND($iaccess, 2) <> 0 Then $ida = BitOR($ida, $generic_read)
	If BitAND($iaccess, 4) <> 0 Then $ida = BitOR($ida, $generic_write)
	If BitAND($ishare, 1) <> 0 Then $ism = BitOR($ism, $file_share_delete)
	If BitAND($ishare, 2) <> 0 Then $ism = BitOR($ism, $file_share_read)
	If BitAND($ishare, 4) <> 0 Then $ism = BitOR($ism, $file_share_write)
	Switch $icreation
		Case 0
			$icd = $create_new
		Case 1
			$icd = $create_always
		Case 2
			$icd = $open_existing
		Case 3
			$icd = $open_always
		Case 4
			$icd = $truncate_existing
	EndSwitch
	If BitAND($iattributes, 1) <> 0 Then $ifa = BitOR($ifa, $file_attribute_archive)
	If BitAND($iattributes, 2) <> 0 Then $ifa = BitOR($ifa, $file_attribute_hidden)
	If BitAND($iattributes, 4) <> 0 Then $ifa = BitOR($ifa, $file_attribute_readonly)
	If BitAND($iattributes, 8) <> 0 Then $ifa = BitOR($ifa, $file_attribute_system)
	Local $aresult = DllCall("kernel32.dll", "handle", "CreateFileW", "wstr", $sfilename, "dword", $ida, "dword", $ism, "struct*", $tsecurity, "dword", $icd, "dword", $ifa, "ptr", 0)
	If @error OR ($aresult[0] = $invalid_handle_value) Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createfont($iheight, $iwidth, $iescape = 0, $iorientn = 0, $iweight = $__winapiconstant_fw_normal, $bitalic = False, $bunderline = False, $bstrikeout = False, $icharset = $__winapiconstant_default_charset, $ioutputprec = $__winapiconstant_out_default_precis, $iclipprec = $__winapiconstant_clip_default_precis, $iquality = $__winapiconstant_default_quality, $ipitch = 0, $sface = "Arial")
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateFontW", "int", $iheight, "int", $iwidth, "int", $iescape, "int", $iorientn, "int", $iweight, "dword", $bitalic, "dword", $bunderline, "dword", $bstrikeout, "dword", $icharset, "dword", $ioutputprec, "dword", $iclipprec, "dword", $iquality, "dword", $ipitch, "wstr", $sface)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createfontindirect($tlogfont)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateFontIndirectW", "struct*", $tlogfont)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createpen($ipenstyle, $iwidth, $icolor)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreatePen", "int", $ipenstyle, "int", $iwidth, "INT", $icolor)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createprocess($sappname, $scommand, $tsecurity, $tthread, $binherit, $iflags, $penviron, $sdir, $tstartupinfo, $tprocess)
	Local $tcommand = 0
	Local $sappnametype = "wstr", $sdirtype = "wstr"
	If $sappname = "" Then
		$sappnametype = "ptr"
		$sappname = 0
	EndIf
	If $scommand <> "" Then
		$tcommand = DllStructCreate("wchar Text[" & 260 + 1 & "]")
		DllStructSetData($tcommand, "Text", $scommand)
	EndIf
	If $sdir = "" Then
		$sdirtype = "ptr"
		$sdir = 0
	EndIf
	Local $aresult = DllCall("kernel32.dll", "bool", "CreateProcessW", $sappnametype, $sappname, "struct*", $tcommand, "struct*", $tsecurity, "struct*", $tthread, "bool", $binherit, "dword", $iflags, "struct*", $penviron, $sdirtype, $sdir, "struct*", $tstartupinfo, "struct*", $tprocess)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_createrectrgn($ileftrect, $itoprect, $irightrect, $ibottomrect)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateRectRgn", "int", $ileftrect, "int", $itoprect, "int", $irightrect, "int", $ibottomrect)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createroundrectrgn($ileftrect, $itoprect, $irightrect, $ibottomrect, $iwidthellipse, $iheightellipse)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateRoundRectRgn", "int", $ileftrect, "int", $itoprect, "int", $irightrect, "int", $ibottomrect, "int", $iwidthellipse, "int", $iheightellipse)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createsolidbitmap($hwnd, $icolor, $iwidth, $iheight, $brgb = 1)
	Local $hdc = _winapi_getdc($hwnd)
	Local $hdestdc = _winapi_createcompatibledc($hdc)
	Local $hbitmap = _winapi_createcompatiblebitmap($hdc, $iwidth, $iheight)
	Local $hold = _winapi_selectobject($hdestdc, $hbitmap)
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, 1, 0)
	DllStructSetData($trect, 2, 0)
	DllStructSetData($trect, 3, $iwidth)
	DllStructSetData($trect, 4, $iheight)
	If $brgb Then
		$icolor = BitOR(BitAND($icolor, 65280), BitShift(BitAND($icolor, 255), -16), BitShift(BitAND($icolor, 16711680), 16))
	EndIf
	Local $hbrush = _winapi_createsolidbrush($icolor)
	If NOT _winapi_fillrect($hdestdc, $trect, $hbrush) Then
		_winapi_deleteobject($hbitmap)
		$hbitmap = 0
	EndIf
	_winapi_deleteobject($hbrush)
	_winapi_releasedc($hwnd, $hdc)
	_winapi_selectobject($hdestdc, $hold)
	_winapi_deletedc($hdestdc)
	If NOT $hbitmap Then Return SetError(1, 0, 0)
	Return $hbitmap
EndFunc

Func _winapi_createsolidbrush($icolor)
	Local $aresult = DllCall("gdi32.dll", "handle", "CreateSolidBrush", "INT", $icolor)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_createwindowex($iexstyle, $sclass, $sname, $istyle, $ix, $iy, $iwidth, $iheight, $hparent, $hmenu = 0, $hinstance = 0, $pparam = 0)
	If $hinstance = 0 Then $hinstance = _winapi_getmodulehandle("")
	Local $aresult = DllCall("user32.dll", "hwnd", "CreateWindowExW", "dword", $iexstyle, "wstr", $sclass, "wstr", $sname, "dword", $istyle, "int", $ix, "int", $iy, "int", $iwidth, "int", $iheight, "hwnd", $hparent, "handle", $hmenu, "handle", $hinstance, "struct*", $pparam)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_defwindowproc($hwnd, $imsg, $wparam, $lparam)
	Local $aresult = DllCall("user32.dll", "lresult", "DefWindowProc", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_deletedc($hdc)
	Local $aresult = DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hdc)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_deleteobject($hobject)
	Local $aresult = DllCall("gdi32.dll", "bool", "DeleteObject", "handle", $hobject)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_destroyicon($hicon)
	Local $aresult = DllCall("user32.dll", "bool", "DestroyIcon", "handle", $hicon)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_destroywindow($hwnd)
	Local $aresult = DllCall("user32.dll", "bool", "DestroyWindow", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawedge($hdc, $trect, $iedgetype, $iflags)
	Local $aresult = DllCall("user32.dll", "bool", "DrawEdge", "handle", $hdc, "struct*", $trect, "uint", $iedgetype, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawframecontrol($hdc, $trect, $itype, $istate)
	Local $aresult = DllCall("user32.dll", "bool", "DrawFrameControl", "handle", $hdc, "struct*", $trect, "uint", $itype, "uint", $istate)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawicon($hdc, $ix, $iy, $hicon)
	Local $aresult = DllCall("user32.dll", "bool", "DrawIcon", "handle", $hdc, "int", $ix, "int", $iy, "handle", $hicon)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawiconex($hdc, $ix, $iy, $hicon, $iwidth = 0, $iheight = 0, $istep = 0, $hbrush = 0, $iflags = 3)
	Local $ioptions
	Switch $iflags
		Case 1
			$ioptions = $di_mask
		Case 2
			$ioptions = $di_image
		Case 3
			$ioptions = $di_normal
		Case 4
			$ioptions = $di_compat
		Case 5
			$ioptions = $di_defaultsize
		Case Else
			$ioptions = $di_nomirror
	EndSwitch
	Local $aresult = DllCall("user32.dll", "bool", "DrawIconEx", "handle", $hdc, "int", $ix, "int", $iy, "handle", $hicon, "int", $iwidth, "int", $iheight, "uint", $istep, "handle", $hbrush, "uint", $ioptions)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_drawline($hdc, $ix1, $iy1, $ix2, $iy2)
	_winapi_moveto($hdc, $ix1, $iy1)
	If @error Then Return SetError(@error, @extended, False)
	_winapi_lineto($hdc, $ix2, $iy2)
	If @error Then Return SetError(@error + 10, @extended, False)
	Return True
EndFunc

Func _winapi_drawtext($hdc, $stext, ByRef $trect, $iflags)
	Local $aresult = DllCall("user32.dll", "int", "DrawTextW", "handle", $hdc, "wstr", $stext, "int", -1, "struct*", $trect, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_duplicatehandle($hsourceprocesshandle, $hsourcehandle, $htargetprocesshandle, $idesiredaccess, $iinherithandle, $ioptions)
	Local $aresult = DllCall("kernel32.dll", "bool", "DuplicateHandle", "handle", $hsourceprocesshandle, "handle", $hsourcehandle, "handle", $htargetprocesshandle, "handle*", 0, "dword", $idesiredaccess, "bool", $iinherithandle, "dword", $ioptions)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, 0)
	Return $aresult[4]
EndFunc

Func _winapi_enablewindow($hwnd, $benable = True)
	Local $aresult = DllCall("user32.dll", "bool", "EnableWindow", "hwnd", $hwnd, "bool", $benable)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_enumdisplaydevices($sdevice, $idevnum)
	Local $tname = 0, $iflags = 0, $adevice[5]
	If $sdevice <> "" Then
		$tname = DllStructCreate("wchar Text[" & StringLen($sdevice) + 1 & "]")
		DllStructSetData($tname, "Text", $sdevice)
	EndIf
	Local $tdevice = DllStructCreate($tagdisplay_device)
	Local $idevice = DllStructGetSize($tdevice)
	DllStructSetData($tdevice, "Size", $idevice)
	Local $aret = DllCall("user32.dll", "bool", "EnumDisplayDevicesW", "struct*", $tname, "dword", $idevnum, "struct*", $tdevice, "dword", 1)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Local $in = DllStructGetData($tdevice, "Flags")
	If BitAND($in, $display_device_attached_to_desktop) <> 0 Then $iflags = BitOR($iflags, 1)
	If BitAND($in, $display_device_primary_device) <> 0 Then $iflags = BitOR($iflags, 2)
	If BitAND($in, $display_device_mirroring_driver) <> 0 Then $iflags = BitOR($iflags, 4)
	If BitAND($in, $display_device_vga_compatible) <> 0 Then $iflags = BitOR($iflags, 8)
	If BitAND($in, $display_device_removable) <> 0 Then $iflags = BitOR($iflags, 16)
	If BitAND($in, $display_device_modespruned) <> 0 Then $iflags = BitOR($iflags, 32)
	$adevice[0] = True
	$adevice[1] = DllStructGetData($tdevice, "Name")
	$adevice[2] = DllStructGetData($tdevice, "String")
	$adevice[3] = $iflags
	$adevice[4] = DllStructGetData($tdevice, "ID")
	Return $adevice
EndFunc

Func _winapi_enumwindows($bvisible = True, $hwnd = Default)
	__winapi_enumwindowsinit()
	If $hwnd = Default Then $hwnd = _winapi_getdesktopwindow()
	__winapi_enumwindowschild($hwnd, $bvisible)
	Return $__g_awinlist_winapi
EndFunc

Func __winapi_enumwindowsadd($hwnd, $sclass = "")
	If $sclass = "" Then $sclass = _winapi_getclassname($hwnd)
	$__g_awinlist_winapi[0][0] += 1
	Local $icount = $__g_awinlist_winapi[0][0]
	If $icount >= $__g_awinlist_winapi[0][1] Then
		ReDim $__g_awinlist_winapi[$icount + 64][2]
		$__g_awinlist_winapi[0][1] += 64
	EndIf
	$__g_awinlist_winapi[$icount][0] = $hwnd
	$__g_awinlist_winapi[$icount][1] = $sclass
EndFunc

Func __winapi_enumwindowschild($hwnd, $bvisible = True)
	$hwnd = _winapi_getwindow($hwnd, $gw_child)
	While $hwnd <> 0
		If (NOT $bvisible) OR _winapi_iswindowvisible($hwnd) Then
			__winapi_enumwindowsadd($hwnd)
			__winapi_enumwindowschild($hwnd, $bvisible)
		EndIf
		$hwnd = _winapi_getwindow($hwnd, $gw_hwndnext)
	WEnd
EndFunc

Func __winapi_enumwindowsinit()
	ReDim $__g_awinlist_winapi[64][2]
	$__g_awinlist_winapi[0][0] = 0
	$__g_awinlist_winapi[0][1] = 64
EndFunc

Func _winapi_enumwindowspopup()
	__winapi_enumwindowsinit()
	Local $hwnd = _winapi_getwindow(_winapi_getdesktopwindow(), $gw_child)
	Local $sclass
	While $hwnd <> 0
		If _winapi_iswindowvisible($hwnd) Then
			$sclass = _winapi_getclassname($hwnd)
			If $sclass = "#32768" Then
				__winapi_enumwindowsadd($hwnd)
			ElseIf $sclass = "ToolbarWindow32" Then
				__winapi_enumwindowsadd($hwnd)
			ElseIf $sclass = "ToolTips_Class32" Then
				__winapi_enumwindowsadd($hwnd)
			ElseIf $sclass = "BaseBar" Then
				__winapi_enumwindowschild($hwnd)
			EndIf
		EndIf
		$hwnd = _winapi_getwindow($hwnd, $gw_hwndnext)
	WEnd
	Return $__g_awinlist_winapi
EndFunc

Func _winapi_enumwindowstop()
	__winapi_enumwindowsinit()
	Local $hwnd = _winapi_getwindow(_winapi_getdesktopwindow(), $gw_child)
	While $hwnd <> 0
		If _winapi_iswindowvisible($hwnd) Then __winapi_enumwindowsadd($hwnd)
		$hwnd = _winapi_getwindow($hwnd, $gw_hwndnext)
	WEnd
	Return $__g_awinlist_winapi
EndFunc

Func _winapi_expandenvironmentstrings($sstring)
	Local $aresult = DllCall("kernel32.dll", "dword", "ExpandEnvironmentStringsW", "wstr", $sstring, "wstr", "", "dword", 4096)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, "")
	Return $aresult[2]
EndFunc

Func _winapi_extracticonex($sfilepath, $iindex, $palarge, $pasmall, $iicons)
	Local $aresult = DllCall("shell32.dll", "uint", "ExtractIconExW", "wstr", $sfilepath, "int", $iindex, "struct*", $palarge, "struct*", $pasmall, "uint", $iicons)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_fatalappexit($smessage)
	DllCall("kernel32.dll", "none", "FatalAppExitW", "uint", 0, "wstr", $smessage)
	If @error Then Return SetError(@error, @extended)
EndFunc

Func _winapi_fillrect($hdc, $trect, $hbrush)
	Local $aresult
	If IsPtr($hbrush) Then
		$aresult = DllCall("user32.dll", "int", "FillRect", "handle", $hdc, "struct*", $trect, "handle", $hbrush)
	Else
		$aresult = DllCall("user32.dll", "int", "FillRect", "handle", $hdc, "struct*", $trect, "dword_ptr", $hbrush)
	EndIf
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_findexecutable($sfilename, $sdirectory = "")
	Local $aresult = DllCall("shell32.dll", "INT", "FindExecutableW", "wstr", $sfilename, "wstr", $sdirectory, "wstr", "")
	If @error Then Return SetError(@error, @extended, "")
	If $aresult[0] <= 32 Then Return SetError(10, $aresult[0], "")
	Return SetExtended($aresult[0], $aresult[3])
EndFunc

Func _winapi_findwindow($sclassname, $swindowname)
	Local $aresult = DllCall("user32.dll", "hwnd", "FindWindowW", "wstr", $sclassname, "wstr", $swindowname)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_flashwindow($hwnd, $binvert = True)
	Local $aresult = DllCall("user32.dll", "bool", "FlashWindow", "hwnd", $hwnd, "bool", $binvert)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_flashwindowex($hwnd, $iflags = 3, $icount = 3, $itimeout = 0)
	Local $tflash = DllStructCreate($tagflashwinfo)
	Local $iflash = DllStructGetSize($tflash)
	Local $imode = 0
	If BitAND($iflags, 1) <> 0 Then $imode = BitOR($imode, $flashw_caption)
	If BitAND($iflags, 2) <> 0 Then $imode = BitOR($imode, $flashw_tray)
	If BitAND($iflags, 4) <> 0 Then $imode = BitOR($imode, $flashw_timer)
	If BitAND($iflags, 8) <> 0 Then $imode = BitOR($imode, $flashw_timernofg)
	DllStructSetData($tflash, "Size", $iflash)
	DllStructSetData($tflash, "hWnd", $hwnd)
	DllStructSetData($tflash, "Flags", $imode)
	DllStructSetData($tflash, "Count", $icount)
	DllStructSetData($tflash, "Timeout", $itimeout)
	Local $aresult = DllCall("user32.dll", "bool", "FlashWindowEx", "struct*", $tflash)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_floattoint($nfloat)
	Local $tfloat = DllStructCreate("float")
	Local $tint = DllStructCreate("int", DllStructGetPtr($tfloat))
	DllStructSetData($tfloat, 1, $nfloat)
	Return DllStructGetData($tint, 1)
EndFunc

Func _winapi_flushfilebuffers($hfile)
	Local $aresult = DllCall("kernel32.dll", "bool", "FlushFileBuffers", "handle", $hfile)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_formatmessage($iflags, $psource, $imessageid, $ilanguageid, ByRef $pbuffer, $isize, $varguments)
	Local $sbuffertype = "struct*"
	If IsString($pbuffer) Then $sbuffertype = "wstr"
	Local $aresult = DllCall("kernel32.dll", "dword", "FormatMessageW", "dword", $iflags, "struct*", $psource, "dword", $imessageid, "dword", $ilanguageid, $sbuffertype, $pbuffer, "dword", $isize, "ptr", $varguments)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, 0)
	If $sbuffertype = "wstr" Then $pbuffer = $aresult[5]
	Return $aresult[0]
EndFunc

Func _winapi_framerect($hdc, $trect, $hbrush)
	Local $aresult = DllCall("user32.dll", "int", "FrameRect", "handle", $hdc, "struct*", $trect, "handle", $hbrush)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_freelibrary($hmodule)
	Local $aresult = DllCall("kernel32.dll", "bool", "FreeLibrary", "handle", $hmodule)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_getancestor($hwnd, $iflags = 1)
	Local $aresult = DllCall("user32.dll", "hwnd", "GetAncestor", "hwnd", $hwnd, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getasynckeystate($ikey)
	Local $aresult = DllCall("user32.dll", "short", "GetAsyncKeyState", "int", $ikey)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getbkmode($hdc)
	Local $aresult = DllCall("gdi32.dll", "int", "GetBkMode", "handle", $hdc)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getclassname($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $aresult = DllCall("user32.dll", "int", "GetClassNameW", "hwnd", $hwnd, "wstr", "", "int", 4096)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, "")
	Return SetExtended($aresult[0], $aresult[2])
EndFunc

Func _winapi_getclientheight($hwnd)
	Local $trect = _winapi_getclientrect($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($trect, "Bottom") - DllStructGetData($trect, "Top")
EndFunc

Func _winapi_getclientwidth($hwnd)
	Local $trect = _winapi_getclientrect($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($trect, "Right") - DllStructGetData($trect, "Left")
EndFunc

Func _winapi_getclientrect($hwnd)
	Local $trect = DllStructCreate($tagrect)
	Local $aret = DllCall("user32.dll", "bool", "GetClientRect", "hwnd", $hwnd, "struct*", $trect)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $trect
EndFunc

Func _winapi_getcurrentprocess()
	Local $aresult = DllCall("kernel32.dll", "handle", "GetCurrentProcess")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getcurrentprocessid()
	Local $aresult = DllCall("kernel32.dll", "dword", "GetCurrentProcessId")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getcurrentthread()
	Local $aresult = DllCall("kernel32.dll", "handle", "GetCurrentThread")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getcurrentthreadid()
	Local $aresult = DllCall("kernel32.dll", "dword", "GetCurrentThreadId")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getcursorinfo()
	Local $tcursor = DllStructCreate($tagcursorinfo)
	Local $icursor = DllStructGetSize($tcursor)
	DllStructSetData($tcursor, "Size", $icursor)
	Local $aret = DllCall("user32.dll", "bool", "GetCursorInfo", "struct*", $tcursor)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Local $acursor[5]
	$acursor[0] = True
	$acursor[1] = DllStructGetData($tcursor, "Flags") <> 0
	$acursor[2] = DllStructGetData($tcursor, "hCursor")
	$acursor[3] = DllStructGetData($tcursor, "X")
	$acursor[4] = DllStructGetData($tcursor, "Y")
	Return $acursor
EndFunc

Func _winapi_getdc($hwnd)
	Local $aresult = DllCall("user32.dll", "handle", "GetDC", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getdesktopwindow()
	Local $aresult = DllCall("user32.dll", "hwnd", "GetDesktopWindow")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getdevicecaps($hdc, $iindex)
	Local $aresult = DllCall("gdi32.dll", "int", "GetDeviceCaps", "handle", $hdc, "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getdibits($hdc, $hbitmap, $istartscan, $iscanlines, $pbits, $tbi, $iusage)
	Local $aresult = DllCall("gdi32.dll", "int", "GetDIBits", "handle", $hdc, "handle", $hbitmap, "uint", $istartscan, "uint", $iscanlines, "struct*", $pbits, "struct*", $tbi, "uint", $iusage)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_getdlgctrlid($hwnd)
	Local $aresult = DllCall("user32.dll", "int", "GetDlgCtrlID", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getdlgitem($hwnd, $iitemid)
	Local $aresult = DllCall("user32.dll", "hwnd", "GetDlgItem", "hwnd", $hwnd, "int", $iitemid)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getfilesizeex($hfile)
	Local $aresult = DllCall("kernel32.dll", "bool", "GetFileSizeEx", "handle", $hfile, "int64*", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, -1)
	Return $aresult[2]
EndFunc

Func _winapi_getfocus()
	Local $aresult = DllCall("user32.dll", "hwnd", "GetFocus")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getforegroundwindow()
	Local $aresult = DllCall("user32.dll", "hwnd", "GetForegroundWindow")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getguiresources($iflag = 0, $hprocess = -1)
	If $hprocess = -1 Then $hprocess = _winapi_getcurrentprocess()
	Local $aresult = DllCall("user32.dll", "dword", "GetGuiResources", "handle", $hprocess, "dword", $iflag)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_geticoninfo($hicon)
	Local $tinfo = DllStructCreate($tagiconinfo)
	Local $aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $hicon, "struct*", $tinfo)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Local $aicon[6]
	$aicon[0] = True
	$aicon[1] = DllStructGetData($tinfo, "Icon") <> 0
	$aicon[2] = DllStructGetData($tinfo, "XHotSpot")
	$aicon[3] = DllStructGetData($tinfo, "YHotSpot")
	$aicon[4] = DllStructGetData($tinfo, "hMask")
	$aicon[5] = DllStructGetData($tinfo, "hColor")
	Return $aicon
EndFunc

Func _winapi_getlasterrormessage()
	Local $ilasterror = _winapi_getlasterror()
	Local $tbufferptr = DllStructCreate("ptr")
	Local $ncount = _winapi_formatmessage(BitOR($format_message_allocate_buffer, $format_message_from_system), 0, $ilasterror, 0, $tbufferptr, 0, 0)
	If @error Then Return SetError(@error, 0, "")
	Local $stext = ""
	Local $pbuffer = DllStructGetData($tbufferptr, 1)
	If $pbuffer Then
		If $ncount > 0 Then
			Local $tbuffer = DllStructCreate("wchar[" & ($ncount + 1) & "]", $pbuffer)
			$stext = DllStructGetData($tbuffer, 1)
			If StringRight($stext, 2) = @CRLF Then $stext = StringTrimRight($stext, 2)
		EndIf
		_winapi_localfree($pbuffer)
	EndIf
	Return $stext
EndFunc

Func _winapi_getlayeredwindowattributes($hwnd, ByRef $itranscolor, ByRef $itransgui, $bcolorref = False)
	$itranscolor = -1
	$itransgui = -1
	Local $aresult = DllCall("user32.dll", "bool", "GetLayeredWindowAttributes", "hwnd", $hwnd, "INT*", $itranscolor, "byte*", $itransgui, "dword*", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, 0)
	If NOT $bcolorref Then
		$aresult[2] = Int(BinaryMid($aresult[2], 3, 1) & BinaryMid($aresult[2], 2, 1) & BinaryMid($aresult[2], 1, 1))
	EndIf
	$itranscolor = $aresult[2]
	$itransgui = $aresult[3]
	Return $aresult[4]
EndFunc

Func _winapi_getmodulehandle($smodulename)
	Local $smodulenametype = "wstr"
	If $smodulename = "" Then
		$smodulename = 0
		$smodulenametype = "ptr"
	EndIf
	Local $aresult = DllCall("kernel32.dll", "handle", "GetModuleHandleW", $smodulenametype, $smodulename)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getmousepos($btoclient = False, $hwnd = 0)
	Local $imode = Opt("MouseCoordMode", 1)
	Local $apos = MouseGetPos()
	Opt("MouseCoordMode", $imode)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $apos[0])
	DllStructSetData($tpoint, "Y", $apos[1])
	If $btoclient AND NOT _winapi_screentoclient($hwnd, $tpoint) Then Return SetError(@error + 20, @extended, 0)
	Return $tpoint
EndFunc

Func _winapi_getmouseposx($btoclient = False, $hwnd = 0)
	Local $tpoint = _winapi_getmousepos($btoclient, $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($tpoint, "X")
EndFunc

Func _winapi_getmouseposy($btoclient = False, $hwnd = 0)
	Local $tpoint = _winapi_getmousepos($btoclient, $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($tpoint, "Y")
EndFunc

Func _winapi_getobject($hobject, $isize, $pobject)
	Local $aresult = DllCall("gdi32.dll", "int", "GetObjectW", "handle", $hobject, "int", $isize, "struct*", $pobject)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getopenfilename($stitle = "", $sfilter = "All files (*.*)", $sinitaldir = ".", $sdefaultfile = "", $sdefaultext = "", $ifilterindex = 1, $iflags = 0, $iflagsex = 0, $hwndowner = 0)
	Local $ipathlen = 4096
	Local $inulls = 0
	Local $tofn = DllStructCreate($tagopenfilename)
	Local $afiles[1] = [0]
	Local $iflag = $iflags
	Local $asflines = StringSplit($sfilter, "|")
	Local $asfilter[$asflines[0] * 2 + 1]
	Local $istart, $ifinal, $tagfilter
	$asfilter[0] = $asflines[0] * 2
	For $i = 1 To $asflines[0]
		$istart = StringInStr($asflines[$i], "(", 0, 1)
		$ifinal = StringInStr($asflines[$i], ")", 0, -1)
		$asfilter[$i * 2 - 1] = StringStripWS(StringLeft($asflines[$i], $istart - 1), $str_stripleading + $str_striptrailing)
		$asfilter[$i * 2] = StringStripWS(StringTrimRight(StringTrimLeft($asflines[$i], $istart), StringLen($asflines[$i]) - $ifinal + 1), $str_stripleading + $str_striptrailing)
		$tagfilter &= "wchar[" & StringLen($asfilter[$i * 2 - 1]) + 1 & "];wchar[" & StringLen($asfilter[$i * 2]) + 1 & "];"
	Next
	Local $ttitle = DllStructCreate("wchar Title[" & StringLen($stitle) + 1 & "]")
	Local $tinitialdir = DllStructCreate("wchar InitDir[" & StringLen($sinitaldir) + 1 & "]")
	Local $tfilter = DllStructCreate($tagfilter & "wchar")
	Local $tpath = DllStructCreate("wchar Path[" & $ipathlen & "]")
	Local $textn = DllStructCreate("wchar Extension[" & StringLen($sdefaultext) + 1 & "]")
	For $i = 1 To $asfilter[0]
		DllStructSetData($tfilter, $i, $asfilter[$i])
	Next
	DllStructSetData($ttitle, "Title", $stitle)
	DllStructSetData($tinitialdir, "InitDir", $sinitaldir)
	DllStructSetData($tpath, "Path", $sdefaultfile)
	DllStructSetData($textn, "Extension", $sdefaultext)
	DllStructSetData($tofn, "StructSize", DllStructGetSize($tofn))
	DllStructSetData($tofn, "hwndOwner", $hwndowner)
	DllStructSetData($tofn, "lpstrFilter", DllStructGetPtr($tfilter))
	DllStructSetData($tofn, "nFilterIndex", $ifilterindex)
	DllStructSetData($tofn, "lpstrFile", DllStructGetPtr($tpath))
	DllStructSetData($tofn, "nMaxFile", $ipathlen)
	DllStructSetData($tofn, "lpstrInitialDir", DllStructGetPtr($tinitialdir))
	DllStructSetData($tofn, "lpstrTitle", DllStructGetPtr($ttitle))
	DllStructSetData($tofn, "Flags", $iflag)
	DllStructSetData($tofn, "lpstrDefExt", DllStructGetPtr($textn))
	DllStructSetData($tofn, "FlagsEx", $iflagsex)
	Local $ares = DllCall("comdlg32.dll", "bool", "GetOpenFileNameW", "struct*", $tofn)
	If @error OR NOT $ares[0] Then Return SetError(@error + 10, @extended, $afiles)
	If BitAND($iflags, $ofn_allowmultiselect) = $ofn_allowmultiselect AND BitAND($iflags, $ofn_explorer) = $ofn_explorer Then
		For $x = 1 To $ipathlen
			If DllStructGetData($tpath, "Path", $x) = Chr(0) Then
				DllStructSetData($tpath, "Path", "|", $x)
				$inulls += 1
			Else
				$inulls = 0
			EndIf
			If $inulls = 2 Then ExitLoop
		Next
		DllStructSetData($tpath, "Path", Chr(0), $x - 1)
		$afiles = StringSplit(DllStructGetData($tpath, "Path"), "|")
		If $afiles[0] = 1 Then Return __winapi_parsefiledialogpath(DllStructGetData($tpath, "Path"))
		Return StringSplit(DllStructGetData($tpath, "Path"), "|")
	ElseIf BitAND($iflags, $ofn_allowmultiselect) = $ofn_allowmultiselect Then
		$afiles = StringSplit(DllStructGetData($tpath, "Path"), " ")
		If $afiles[0] = 1 Then Return __winapi_parsefiledialogpath(DllStructGetData($tpath, "Path"))
		Return StringSplit(StringReplace(DllStructGetData($tpath, "Path"), " ", "|"), "|")
	Else
		Return __winapi_parsefiledialogpath(DllStructGetData($tpath, "Path"))
	EndIf
EndFunc

Func _winapi_getoverlappedresult($hfile, $toverlapped, ByRef $ibytes, $bwait = False)
	Local $aresult = DllCall("kernel32.dll", "bool", "GetOverlappedResult", "handle", $hfile, "struct*", $toverlapped, "dword*", 0, "bool", $bwait)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, False)
	$ibytes = $aresult[3]
	Return $aresult[0]
EndFunc

Func _winapi_getparent($hwnd)
	Local $aresult = DllCall("user32.dll", "hwnd", "GetParent", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getprocaddress($hmodule, $vname)
	Local $stype = "str"
	If IsNumber($vname) Then $stype = "word"
	Local $aresult = DllCall("kernel32.dll", "ptr", "GetProcAddress", "handle", $hmodule, $stype, $vname)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getprocessaffinitymask($hprocess)
	Local $aresult = DllCall("kernel32.dll", "bool", "GetProcessAffinityMask", "handle", $hprocess, "dword_ptr*", 0, "dword_ptr*", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, 0)
	Local $amask[3]
	$amask[0] = True
	$amask[1] = $aresult[2]
	$amask[2] = $aresult[3]
	Return $amask
EndFunc

Func _winapi_getsavefilename($stitle = "", $sfilter = "All files (*.*)", $sinitaldir = ".", $sdefaultfile = "", $sdefaultext = "", $ifilterindex = 1, $iflags = 0, $iflagsex = 0, $hwndowner = 0)
	Local $ipathlen = 4096
	Local $tofn = DllStructCreate($tagopenfilename)
	Local $afiles[1] = [0]
	Local $iflag = $iflags
	Local $asflines = StringSplit($sfilter, "|")
	Local $asfilter[$asflines[0] * 2 + 1]
	Local $istart, $ifinal, $tagfilter
	$asfilter[0] = $asflines[0] * 2
	For $i = 1 To $asflines[0]
		$istart = StringInStr($asflines[$i], "(", 0, 1)
		$ifinal = StringInStr($asflines[$i], ")", 0, -1)
		$asfilter[$i * 2 - 1] = StringStripWS(StringLeft($asflines[$i], $istart - 1), $str_stripleading + $str_striptrailing)
		$asfilter[$i * 2] = StringStripWS(StringTrimRight(StringTrimLeft($asflines[$i], $istart), StringLen($asflines[$i]) - $ifinal + 1), $str_stripleading + $str_striptrailing)
		$tagfilter &= "wchar[" & StringLen($asfilter[$i * 2 - 1]) + 1 & "];wchar[" & StringLen($asfilter[$i * 2]) + 1 & "];"
	Next
	Local $ttitle = DllStructCreate("wchar Title[" & StringLen($stitle) + 1 & "]")
	Local $tinitialdir = DllStructCreate("wchar InitDir[" & StringLen($sinitaldir) + 1 & "]")
	Local $tfilter = DllStructCreate($tagfilter & "wchar")
	Local $tpath = DllStructCreate("wchar Path[" & $ipathlen & "]")
	Local $textn = DllStructCreate("wchar Extension[" & StringLen($sdefaultext) + 1 & "]")
	For $i = 1 To $asfilter[0]
		DllStructSetData($tfilter, $i, $asfilter[$i])
	Next
	DllStructSetData($ttitle, "Title", $stitle)
	DllStructSetData($tinitialdir, "InitDir", $sinitaldir)
	DllStructSetData($tpath, "Path", $sdefaultfile)
	DllStructSetData($textn, "Extension", $sdefaultext)
	DllStructSetData($tofn, "StructSize", DllStructGetSize($tofn))
	DllStructSetData($tofn, "hwndOwner", $hwndowner)
	DllStructSetData($tofn, "lpstrFilter", DllStructGetPtr($tfilter))
	DllStructSetData($tofn, "nFilterIndex", $ifilterindex)
	DllStructSetData($tofn, "lpstrFile", DllStructGetPtr($tpath))
	DllStructSetData($tofn, "nMaxFile", $ipathlen)
	DllStructSetData($tofn, "lpstrInitialDir", DllStructGetPtr($tinitialdir))
	DllStructSetData($tofn, "lpstrTitle", DllStructGetPtr($ttitle))
	DllStructSetData($tofn, "Flags", $iflag)
	DllStructSetData($tofn, "lpstrDefExt", DllStructGetPtr($textn))
	DllStructSetData($tofn, "FlagsEx", $iflagsex)
	Local $ares = DllCall("comdlg32.dll", "bool", "GetSaveFileNameW", "struct*", $tofn)
	If @error OR NOT $ares[0] Then Return SetError(@error + 10, @extended, $afiles)
	Return __winapi_parsefiledialogpath(DllStructGetData($tpath, "Path"))
EndFunc

Func _winapi_getstockobject($iobject)
	Local $aresult = DllCall("gdi32.dll", "handle", "GetStockObject", "int", $iobject)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getstdhandle($istdhandle)
	If $istdhandle < 0 OR $istdhandle > 2 Then Return SetError(2, 0, -1)
	Local Const $ahandle[3] = [-10, -11, -12]
	Local $aresult = DllCall("kernel32.dll", "handle", "GetStdHandle", "dword", $ahandle[$istdhandle])
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_getsyscolor($iindex)
	Local $aresult = DllCall("user32.dll", "INT", "GetSysColor", "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getsyscolorbrush($iindex)
	Local $aresult = DllCall("user32.dll", "handle", "GetSysColorBrush", "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getsystemmetrics($iindex)
	Local $aresult = DllCall("user32.dll", "int", "GetSystemMetrics", "int", $iindex)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_gettextextentpoint32($hdc, $stext)
	Local $tsize = DllStructCreate($tagsize)
	Local $isize = StringLen($stext)
	Local $aret = DllCall("gdi32.dll", "bool", "GetTextExtentPoint32W", "handle", $hdc, "wstr", $stext, "int", $isize, "struct*", $tsize)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $tsize
EndFunc

Func _winapi_gettextmetrics($hdc)
	Local $ttextmetric = DllStructCreate($tagtextmetric)
	Local $aret = DllCall("gdi32.dll", "bool", "GetTextMetricsW", "handle", $hdc, "struct*", $ttextmetric)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $ttextmetric
EndFunc

Func _winapi_getwindow($hwnd, $icmd)
	Local $aresult = DllCall("user32.dll", "hwnd", "GetWindow", "hwnd", $hwnd, "uint", $icmd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getwindowdc($hwnd)
	Local $aresult = DllCall("user32.dll", "handle", "GetWindowDC", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getwindowheight($hwnd)
	Local $trect = _winapi_getwindowrect($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($trect, "Bottom") - DllStructGetData($trect, "Top")
EndFunc

Func _winapi_getwindowlong($hwnd, $iindex)
	Local $sfuncname = "GetWindowLongW"
	If @AutoItX64 Then $sfuncname = "GetWindowLongPtrW"
	Local $aresult = DllCall("user32.dll", "long_ptr", $sfuncname, "hwnd", $hwnd, "int", $iindex)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getwindowplacement($hwnd)
	Local $twindowplacement = DllStructCreate($tagwindowplacement)
	DllStructSetData($twindowplacement, "length", DllStructGetSize($twindowplacement))
	Local $aret = DllCall("user32.dll", "bool", "GetWindowPlacement", "hwnd", $hwnd, "struct*", $twindowplacement)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $twindowplacement
EndFunc

Func _winapi_getwindowrect($hwnd)
	Local $trect = DllStructCreate($tagrect)
	Local $aret = DllCall("user32.dll", "bool", "GetWindowRect", "hwnd", $hwnd, "struct*", $trect)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $trect
EndFunc

Func _winapi_getwindowrgn($hwnd, $hrgn)
	Local $aresult = DllCall("user32.dll", "int", "GetWindowRgn", "hwnd", $hwnd, "handle", $hrgn)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_getwindowtext($hwnd)
	Local $aresult = DllCall("user32.dll", "int", "GetWindowTextW", "hwnd", $hwnd, "wstr", "", "int", 4096)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, "")
	Return SetExtended($aresult[0], $aresult[2])
EndFunc

Func _winapi_getwindowthreadprocessid($hwnd, ByRef $ipid)
	Local $aresult = DllCall("user32.dll", "dword", "GetWindowThreadProcessId", "hwnd", $hwnd, "dword*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	$ipid = $aresult[2]
	Return $aresult[0]
EndFunc

Func _winapi_getwindowwidth($hwnd)
	Local $trect = _winapi_getwindowrect($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return DllStructGetData($trect, "Right") - DllStructGetData($trect, "Left")
EndFunc

Func _winapi_getxyfrompoint(ByRef $tpoint, ByRef $ix, ByRef $iy)
	$ix = DllStructGetData($tpoint, "X")
	$iy = DllStructGetData($tpoint, "Y")
EndFunc

Func _winapi_globalmemorystatus()
	Local $tmem = DllStructCreate($tagmemorystatusex)
	DllStructSetData($tmem, 1, DllStructGetSize($tmem))
	Local $aret = DllCall("kernel32.dll", "bool", "GlobalMemoryStatusEx", "struct*", $tmem)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Local $amem[7]
	$amem[0] = DllStructGetData($tmem, 2)
	$amem[1] = DllStructGetData($tmem, 3)
	$amem[2] = DllStructGetData($tmem, 4)
	$amem[3] = DllStructGetData($tmem, 5)
	$amem[4] = DllStructGetData($tmem, 6)
	$amem[5] = DllStructGetData($tmem, 7)
	$amem[6] = DllStructGetData($tmem, 8)
	Return $amem
EndFunc

Func _winapi_guidfromstring($sguid)
	Local $tguid = DllStructCreate($tagguid)
	_winapi_guidfromstringex($sguid, $tguid)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $tguid
EndFunc

Func _winapi_guidfromstringex($sguid, $tguid)
	Local $aresult = DllCall("ole32.dll", "long", "CLSIDFromString", "wstr", $sguid, "struct*", $tguid)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_hiword($ilong)
	Return BitShift($ilong, 16)
EndFunc

Func _winapi_inprocess($hwnd, ByRef $hlastwnd)
	If $hwnd = $hlastwnd Then Return True
	For $ii = $__g_ainprocess_winapi[0][0] To 1 Step -1
		If $hwnd = $__g_ainprocess_winapi[$ii][0] Then
			If $__g_ainprocess_winapi[$ii][1] Then
				$hlastwnd = $hwnd
				Return True
			Else
				Return False
			EndIf
		EndIf
	Next
	Local $ipid
	_winapi_getwindowthreadprocessid($hwnd, $ipid)
	Local $icount = $__g_ainprocess_winapi[0][0] + 1
	If $icount >= 64 Then $icount = 1
	$__g_ainprocess_winapi[0][0] = $icount
	$__g_ainprocess_winapi[$icount][0] = $hwnd
	$__g_ainprocess_winapi[$icount][1] = ($ipid = @AutoItPID)
	Return $__g_ainprocess_winapi[$icount][1]
EndFunc

Func _winapi_inttofloat($iint)
	Local $tint = DllStructCreate("int")
	Local $tfloat = DllStructCreate("float", DllStructGetPtr($tint))
	DllStructSetData($tint, 1, $iint)
	Return DllStructGetData($tfloat, 1)
EndFunc

Func _winapi_isclassname($hwnd, $sclassname)
	Local $sseparator = Opt("GUIDataSeparatorChar")
	Local $aclassname = StringSplit($sclassname, $sseparator)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $sclasscheck = _winapi_getclassname($hwnd)
	For $x = 1 To UBound($aclassname) - 1
		If StringUpper(StringMid($sclasscheck, 1, StringLen($aclassname[$x]))) = StringUpper($aclassname[$x]) Then Return True
	Next
	Return False
EndFunc

Func _winapi_iswindow($hwnd)
	Local $aresult = DllCall("user32.dll", "bool", "IsWindow", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_iswindowvisible($hwnd)
	Local $aresult = DllCall("user32.dll", "bool", "IsWindowVisible", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_invalidaterect($hwnd, $trect = 0, $berase = True)
	Local $aresult = DllCall("user32.dll", "bool", "InvalidateRect", "hwnd", $hwnd, "struct*", $trect, "bool", $berase)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_lineto($hdc, $ix, $iy)
	Local $aresult = DllCall("gdi32.dll", "bool", "LineTo", "handle", $hdc, "int", $ix, "int", $iy)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_loadbitmap($hinstance, $sbitmap)
	Local $sbitmaptype = "int"
	If IsString($sbitmap) Then $sbitmaptype = "wstr"
	Local $aresult = DllCall("user32.dll", "handle", "LoadBitmapW", "handle", $hinstance, $sbitmaptype, $sbitmap)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_loadimage($hinstance, $simage, $itype, $ixdesired, $iydesired, $iload)
	Local $aresult, $simagetype = "int"
	If IsString($simage) Then $simagetype = "wstr"
	$aresult = DllCall("user32.dll", "handle", "LoadImageW", "handle", $hinstance, $simagetype, $simage, "uint", $itype, "int", $ixdesired, "int", $iydesired, "uint", $iload)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_loadlibrary($sfilename)
	Local $aresult = DllCall("kernel32.dll", "handle", "LoadLibraryW", "wstr", $sfilename)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_loadlibraryex($sfilename, $iflags = 0)
	Local $aresult = DllCall("kernel32.dll", "handle", "LoadLibraryExW", "wstr", $sfilename, "ptr", 0, "dword", $iflags)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_loadshell32icon($iiconid)
	Local $ticons = DllStructCreate("ptr Data")
	Local $iicons = _winapi_extracticonex("shell32.dll", $iiconid, 0, $ticons, 1)
	If @error Then Return SetError(@error, @extended, 0)
	If $iicons <= 0 Then Return SetError(10, 0, 0)
	Return DllStructGetData($ticons, "Data")
EndFunc

Func _winapi_loadstring($hinstance, $istringid)
	Local $aresult = DllCall("user32.dll", "int", "LoadStringW", "handle", $hinstance, "uint", $istringid, "wstr", "", "int", 4096)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, "")
	Return SetExtended($aresult[0], $aresult[3])
EndFunc

Func _winapi_localfree($hmemory)
	Local $aresult = DllCall("kernel32.dll", "handle", "LocalFree", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_loword($ilong)
	Return BitAND($ilong, 65535)
EndFunc

Func _winapi_makelangid($ilngidprimary, $ilngidsub)
	Return BitOR(BitShift($ilngidsub, -10), $ilngidprimary)
EndFunc

Func _winapi_makelcid($ilngid, $isortid)
	Return BitOR(BitShift($isortid, -16), $ilngid)
EndFunc

Func _winapi_makelong($ilo, $ihi)
	Return BitOR(BitShift($ihi, -16), BitAND($ilo, 65535))
EndFunc

Func _winapi_makeqword($ilodword, $ihidword)
	Local $tint64 = DllStructCreate("uint64")
	Local $tdwords = DllStructCreate("dword;dword", DllStructGetPtr($tint64))
	DllStructSetData($tdwords, 1, $ilodword)
	DllStructSetData($tdwords, 2, $ihidword)
	Return DllStructGetData($tint64, 1)
EndFunc

Func _winapi_messagebeep($itype = 1)
	Local $isound
	Switch $itype
		Case 1
			$isound = 0
		Case 2
			$isound = 16
		Case 3
			$isound = 32
		Case 4
			$isound = 48
		Case 5
			$isound = 64
		Case Else
			$isound = -1
	EndSwitch
	Local $aresult = DllCall("user32.dll", "bool", "MessageBeep", "uint", $isound)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_msgbox($iflags, $stitle, $stext)
	BlockInput(0)
	MsgBox($iflags, $stitle, $stext & "      ")
EndFunc

Func _winapi_mouse_event($iflags, $ix = 0, $iy = 0, $idata = 0, $iextrainfo = 0)
	DllCall("user32.dll", "none", "mouse_event", "dword", $iflags, "dword", $ix, "dword", $iy, "dword", $idata, "ulong_ptr", $iextrainfo)
	If @error Then Return SetError(@error, @extended)
EndFunc

Func _winapi_moveto($hdc, $ix, $iy)
	Local $aresult = DllCall("gdi32.dll", "bool", "MoveToEx", "handle", $hdc, "int", $ix, "int", $iy, "ptr", 0)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_movewindow($hwnd, $ix, $iy, $iwidth, $iheight, $brepaint = True)
	Local $aresult = DllCall("user32.dll", "bool", "MoveWindow", "hwnd", $hwnd, "int", $ix, "int", $iy, "int", $iwidth, "int", $iheight, "bool", $brepaint)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_muldiv($inumber, $inumerator, $idenominator)
	Local $aresult = DllCall("kernel32.dll", "int", "MulDiv", "int", $inumber, "int", $inumerator, "int", $idenominator)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_multibytetowidechar($vtext, $icodepage = 0, $iflags = 0, $bretstring = False)
	Local $stexttype = "str"
	If NOT IsString($vtext) Then $stexttype = "struct*"
	Local $aresult = DllCall("kernel32.dll", "int", "MultiByteToWideChar", "uint", $icodepage, "dword", $iflags, $stexttype, $vtext, "int", -1, "ptr", 0, "int", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, 0)
	Local $iout = $aresult[0]
	Local $tout = DllStructCreate("wchar[" & $iout & "]")
	$aresult = DllCall("kernel32.dll", "int", "MultiByteToWideChar", "uint", $icodepage, "dword", $iflags, $stexttype, $vtext, "int", -1, "struct*", $tout, "int", $iout)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 20, @extended, 0)
	If $bretstring Then Return DllStructGetData($tout, 1)
	Return $tout
EndFunc

Func _winapi_multibytetowidecharex($stext, $ptext, $icodepage = 0, $iflags = 0)
	Local $aresult = DllCall("kernel32.dll", "int", "MultiByteToWideChar", "uint", $icodepage, "dword", $iflags, "STR", $stext, "int", -1, "struct*", $ptext, "int", (StringLen($stext) + 1) * 2)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_openprocess($iaccess, $binherit, $ipid, $bdebugpriv = False)
	Local $aresult = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", $iaccess, "bool", $binherit, "dword", $ipid)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return $aresult[0]
	If NOT $bdebugpriv Then Return SetError(100, 0, 0)
	Local $htoken = _security__openthreadtokenex(BitOR($token_adjust_privileges, $token_query))
	If @error Then Return SetError(@error + 10, @extended, 0)
	_security__setprivilege($htoken, "SeDebugPrivilege", True)
	Local $ierror = @error
	Local $iextended = @extended
	Local $iret = 0
	If NOT @error Then
		$aresult = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", $iaccess, "bool", $binherit, "dword", $ipid)
		$ierror = @error
		$iextended = @extended
		If $aresult[0] Then $iret = $aresult[0]
		_security__setprivilege($htoken, "SeDebugPrivilege", False)
		If @error Then
			$ierror = @error + 20
			$iextended = @extended
		EndIf
	Else
		$ierror = @error + 30
	EndIf
	_winapi_closehandle($htoken)
	Return SetError($ierror, $iextended, $iret)
EndFunc

Func __winapi_parsefiledialogpath($spath)
	Local $afiles[3]
	$afiles[0] = 2
	Local $stemp = StringMid($spath, 1, StringInStr($spath, "\", 0, -1) - 1)
	$afiles[1] = $stemp
	$afiles[2] = StringMid($spath, StringInStr($spath, "\", 0, -1) + 1)
	Return $afiles
EndFunc

Func _winapi_pathfindonpath(Const $sfilepath, $aextrapaths = "", Const $spathdelimiter = @LF)
	Local $iextracount = 0
	If IsString($aextrapaths) Then
		If StringLen($aextrapaths) Then
			$aextrapaths = StringSplit($aextrapaths, $spathdelimiter, $str_entiresplit + $str_nocount)
			$iextracount = UBound($aextrapaths, $ubound_rows)
		EndIf
	ElseIf IsArray($aextrapaths) Then
		$iextracount = UBound($aextrapaths)
	EndIf
	Local $tpaths, $tpathptrs
	If $iextracount Then
		Local $tagstruct = ""
		For $path In $aextrapaths
			$tagstruct &= "wchar[" & StringLen($path) + 1 & "];"
		Next
		$tpaths = DllStructCreate($tagstruct)
		$tpathptrs = DllStructCreate("ptr[" & $iextracount + 1 & "]")
		For $i = 1 To $iextracount
			DllStructSetData($tpaths, $i, $aextrapaths[$i - 1])
			DllStructSetData($tpathptrs, 1, DllStructGetPtr($tpaths, $i), $i)
		Next
		DllStructSetData($tpathptrs, 1, Ptr(0), $iextracount + 1)
	EndIf
	Local $aresult = DllCall("shlwapi.dll", "bool", "PathFindOnPathW", "wstr", $sfilepath, "struct*", $tpathptrs)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, $sfilepath)
	Return $aresult[1]
EndFunc

Func _winapi_pointfromrect(ByRef $trect, $bcenter = True)
	Local $ix1 = DllStructGetData($trect, "Left")
	Local $iy1 = DllStructGetData($trect, "Top")
	Local $ix2 = DllStructGetData($trect, "Right")
	Local $iy2 = DllStructGetData($trect, "Bottom")
	If $bcenter Then
		$ix1 = $ix1 + (($ix2 - $ix1) / 2)
		$iy1 = $iy1 + (($iy2 - $iy1) / 2)
	EndIf
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $ix1)
	DllStructSetData($tpoint, "Y", $iy1)
	Return $tpoint
EndFunc

Func _winapi_postmessage($hwnd, $imsg, $wparam, $lparam)
	Local $aresult = DllCall("user32.dll", "bool", "PostMessage", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_primarylangid($ilngid)
	Return BitAND($ilngid, 1023)
EndFunc

Func _winapi_ptinrect(ByRef $trect, ByRef $tpoint)
	Local $aresult = DllCall("user32.dll", "bool", "PtInRect", "struct*", $trect, "struct", $tpoint)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_readfile($hfile, $pbuffer, $itoread, ByRef $iread, $toverlapped = 0)
	Local $aresult = DllCall("kernel32.dll", "bool", "ReadFile", "handle", $hfile, "struct*", $pbuffer, "dword", $itoread, "dword*", 0, "struct*", $toverlapped)
	If @error Then Return SetError(@error, @extended, False)
	$iread = $aresult[4]
	Return $aresult[0]
EndFunc

Func _winapi_readprocessmemory($hprocess, $pbaseaddress, $pbuffer, $isize, ByRef $iread)
	Local $aresult = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", $hprocess, "ptr", $pbaseaddress, "struct*", $pbuffer, "ulong_ptr", $isize, "ulong_ptr*", 0)
	If @error Then Return SetError(@error, @extended, False)
	$iread = $aresult[5]
	Return $aresult[0]
EndFunc

Func _winapi_rectisempty(ByRef $trect)
	Return (DllStructGetData($trect, "Left") = 0) AND (DllStructGetData($trect, "Top") = 0) AND (DllStructGetData($trect, "Right") = 0) AND (DllStructGetData($trect, "Bottom") = 0)
EndFunc

Func _winapi_redrawwindow($hwnd, $trect = 0, $hregion = 0, $iflags = 5)
	Local $aresult = DllCall("user32.dll", "bool", "RedrawWindow", "hwnd", $hwnd, "struct*", $trect, "handle", $hregion, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_registerwindowmessage($smessage)
	Local $aresult = DllCall("user32.dll", "uint", "RegisterWindowMessageW", "wstr", $smessage)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_releasecapture()
	Local $aresult = DllCall("user32.dll", "bool", "ReleaseCapture")
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_releasedc($hwnd, $hdc)
	Local $aresult = DllCall("user32.dll", "int", "ReleaseDC", "hwnd", $hwnd, "handle", $hdc)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_screentoclient($hwnd, ByRef $tpoint)
	Local $aresult = DllCall("user32.dll", "bool", "ScreenToClient", "hwnd", $hwnd, "struct*", $tpoint)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_selectobject($hdc, $hgdiobj)
	Local $aresult = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdc, "handle", $hgdiobj)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setbkcolor($hdc, $icolor)
	Local $aresult = DllCall("gdi32.dll", "INT", "SetBkColor", "handle", $hdc, "INT", $icolor)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_setbkmode($hdc, $ibkmode)
	Local $aresult = DllCall("gdi32.dll", "int", "SetBkMode", "handle", $hdc, "int", $ibkmode)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setcapture($hwnd)
	Local $aresult = DllCall("user32.dll", "hwnd", "SetCapture", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setcursor($hcursor)
	Local $aresult = DllCall("user32.dll", "handle", "SetCursor", "handle", $hcursor)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setdefaultprinter($sprinter)
	Local $aresult = DllCall("winspool.drv", "bool", "SetDefaultPrinterW", "wstr", $sprinter)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setdibits($hdc, $hbitmap, $istartscan, $iscanlines, $pbits, $tbmi, $icoloruse = 0)
	Local $aresult = DllCall("gdi32.dll", "int", "SetDIBits", "handle", $hdc, "handle", $hbitmap, "uint", $istartscan, "uint", $iscanlines, "struct*", $pbits, "struct*", $tbmi, "INT", $icoloruse)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setendoffile($hfile)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetEndOfFile", "handle", $hfile)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setevent($hevent)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetEvent", "handle", $hevent)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setfilepointer($hfile, $ipos, $imethod = 0)
	Local $aresult = DllCall("kernel32.dll", "INT", "SetFilePointer", "handle", $hfile, "long", $ipos, "ptr", 0, "long", $imethod)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_setfocus($hwnd)
	Local $aresult = DllCall("user32.dll", "hwnd", "SetFocus", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setfont($hwnd, $hfont, $bredraw = True)
	_sendmessage($hwnd, $__winapiconstant_wm_setfont, $hfont, $bredraw, 0, "hwnd")
EndFunc

Func _winapi_sethandleinformation($hobject, $imask, $iflags)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetHandleInformation", "handle", $hobject, "dword", $imask, "dword", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setlayeredwindowattributes($hwnd, $itranscolor, $itransgui = 255, $iflags = 3, $bcolorref = False)
	If $iflags = Default OR $iflags = "" OR $iflags < 0 Then $iflags = 3
	If NOT $bcolorref Then
		$itranscolor = Int(BinaryMid($itranscolor, 3, 1) & BinaryMid($itranscolor, 2, 1) & BinaryMid($itranscolor, 1, 1))
	EndIf
	Local $aresult = DllCall("user32.dll", "bool", "SetLayeredWindowAttributes", "hwnd", $hwnd, "INT", $itranscolor, "byte", $itransgui, "dword", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setparent($hwndchild, $hwndparent)
	Local $aresult = DllCall("user32.dll", "hwnd", "SetParent", "hwnd", $hwndchild, "hwnd", $hwndparent)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setprocessaffinitymask($hprocess, $imask)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetProcessAffinityMask", "handle", $hprocess, "ulong_ptr", $imask)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setsyscolors($velements, $vcolors)
	Local $bisearray = IsArray($velements), $biscarray = IsArray($vcolors)
	Local $ielementnum
	If NOT $biscarray AND NOT $bisearray Then
		$ielementnum = 1
	ElseIf $biscarray OR $bisearray Then
		If NOT $biscarray OR NOT $bisearray Then Return SetError(-1, -1, False)
		If UBound($velements) <> UBound($vcolors) Then Return SetError(-1, -1, False)
		$ielementnum = UBound($velements)
	EndIf
	Local $telements = DllStructCreate("int Element[" & $ielementnum & "]")
	Local $tcolors = DllStructCreate("INT NewColor[" & $ielementnum & "]")
	If NOT $bisearray Then
		DllStructSetData($telements, "Element", $velements, 1)
	Else
		For $x = 0 To $ielementnum - 1
			DllStructSetData($telements, "Element", $velements[$x], $x + 1)
		Next
	EndIf
	If NOT $biscarray Then
		DllStructSetData($tcolors, "NewColor", $vcolors, 1)
	Else
		For $x = 0 To $ielementnum - 1
			DllStructSetData($tcolors, "NewColor", $vcolors[$x], $x + 1)
		Next
	EndIf
	Local $aresult = DllCall("user32.dll", "bool", "SetSysColors", "int", $ielementnum, "struct*", $telements, "struct*", $tcolors)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_settextcolor($hdc, $icolor)
	Local $aresult = DllCall("gdi32.dll", "INT", "SetTextColor", "handle", $hdc, "INT", $icolor)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowlong($hwnd, $iindex, $ivalue)
	_winapi_setlasterror(0)
	Local $sfuncname = "SetWindowLongW"
	If @AutoItX64 Then $sfuncname = "SetWindowLongPtrW"
	Local $aresult = DllCall("user32.dll", "long_ptr", $sfuncname, "hwnd", $hwnd, "int", $iindex, "long_ptr", $ivalue)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowplacement($hwnd, $twindowplacement)
	Local $aresult = DllCall("user32.dll", "bool", "SetWindowPlacement", "hwnd", $hwnd, "struct*", $twindowplacement)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowpos($hwnd, $hafter, $ix, $iy, $icx, $icy, $iflags)
	Local $aresult = DllCall("user32.dll", "bool", "SetWindowPos", "hwnd", $hwnd, "hwnd", $hafter, "int", $ix, "int", $iy, "int", $icx, "int", $icy, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowrgn($hwnd, $hrgn, $bredraw = True)
	Local $aresult = DllCall("user32.dll", "int", "SetWindowRgn", "hwnd", $hwnd, "handle", $hrgn, "bool", $bredraw)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowshookex($ihook, $pproc, $hdll, $ithreadid = 0)
	Local $aresult = DllCall("user32.dll", "handle", "SetWindowsHookEx", "int", $ihook, "ptr", $pproc, "handle", $hdll, "dword", $ithreadid)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_setwindowtext($hwnd, $stext)
	Local $aresult = DllCall("user32.dll", "bool", "SetWindowTextW", "hwnd", $hwnd, "wstr", $stext)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_showcursor($bshow)
	Local $aresult = DllCall("user32.dll", "int", "ShowCursor", "bool", $bshow)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_showerror($stext, $bexit = True)
	_winapi_msgbox($mb_systemmodal, "Error", $stext)
	If $bexit Then Exit
EndFunc

Func _winapi_showmsg($stext)
	_winapi_msgbox($mb_systemmodal, "Information", $stext)
EndFunc

Func _winapi_showwindow($hwnd, $icmdshow = 5)
	Local $aresult = DllCall("user32.dll", "bool", "ShowWindow", "hwnd", $hwnd, "int", $icmdshow)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_stringfromguid($tguid)
	Local $aresult = DllCall("ole32.dll", "int", "StringFromGUID2", "struct*", $tguid, "wstr", "", "int", 40)
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, "")
	Return SetExtended($aresult[0], $aresult[2])
EndFunc

Func _winapi_stringlena(Const ByRef $tstring)
	Local $aresult = DllCall("kernel32.dll", "int", "lstrlenA", "struct*", $tstring)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_stringlenw(Const ByRef $tstring)
	Local $aresult = DllCall("kernel32.dll", "int", "lstrlenW", "struct*", $tstring)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_sublangid($ilngid)
	Return BitShift($ilngid, 10)
EndFunc

Func _winapi_systemparametersinfo($iaction, $iparam = 0, $vparam = 0, $iwinini = 0)
	Local $aresult = DllCall("user32.dll", "bool", "SystemParametersInfoW", "uint", $iaction, "uint", $iparam, "struct*", $vparam, "uint", $iwinini)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_twipsperpixelx()
	Local $hdc, $itwipsperpixelx
	$hdc = _winapi_getdc(0)
	$itwipsperpixelx = 1440 / _winapi_getdevicecaps($hdc, $__winapiconstant_logpixelsx)
	_winapi_releasedc(0, $hdc)
	Return $itwipsperpixelx
EndFunc

Func _winapi_twipsperpixely()
	Local $hdc, $itwipsperpixely
	$hdc = _winapi_getdc(0)
	$itwipsperpixely = 1440 / _winapi_getdevicecaps($hdc, $__winapiconstant_logpixelsy)
	_winapi_releasedc(0, $hdc)
	Return $itwipsperpixely
EndFunc

Func _winapi_unhookwindowshookex($hhook)
	Local $aresult = DllCall("user32.dll", "bool", "UnhookWindowsHookEx", "handle", $hhook)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_updatelayeredwindow($hwnd, $hdestdc, $tptdest, $tsize, $hsrcdc, $tptsrce, $irgb, $tblend, $iflags)
	Local $aresult = DllCall("user32.dll", "bool", "UpdateLayeredWindow", "hwnd", $hwnd, "handle", $hdestdc, "struct*", $tptdest, "struct*", $tsize, "handle", $hsrcdc, "struct*", $tptsrce, "dword", $irgb, "struct*", $tblend, "dword", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_updatewindow($hwnd)
	Local $aresult = DllCall("user32.dll", "bool", "UpdateWindow", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_waitforinputidle($hprocess, $itimeout = -1)
	Local $aresult = DllCall("user32.dll", "dword", "WaitForInputIdle", "handle", $hprocess, "dword", $itimeout)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_waitformultipleobjects($icount, $pahandles, $bwaitall = False, $itimeout = -1)
	Local $aresult = DllCall("kernel32.dll", "INT", "WaitForMultipleObjects", "dword", $icount, "struct*", $pahandles, "bool", $bwaitall, "dword", $itimeout)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_waitforsingleobject($hhandle, $itimeout = -1)
	Local $aresult = DllCall("kernel32.dll", "INT", "WaitForSingleObject", "handle", $hhandle, "dword", $itimeout)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _winapi_widechartomultibyte($vunicode, $icodepage = 0, $bretstring = True)
	Local $sunicodetype = "wstr"
	If NOT IsString($vunicode) Then $sunicodetype = "struct*"
	Local $aresult = DllCall("kernel32.dll", "int", "WideCharToMultiByte", "uint", $icodepage, "dword", 0, $sunicodetype, $vunicode, "int", -1, "ptr", 0, "int", 0, "ptr", 0, "ptr", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 20, @extended, "")
	Local $tmultibyte = DllStructCreate("char[" & $aresult[0] & "]")
	$aresult = DllCall("kernel32.dll", "int", "WideCharToMultiByte", "uint", $icodepage, "dword", 0, $sunicodetype, $vunicode, "int", -1, "struct*", $tmultibyte, "int", $aresult[0], "ptr", 0, "ptr", 0)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, "")
	If $bretstring Then Return DllStructGetData($tmultibyte, 1)
	Return $tmultibyte
EndFunc

Func _winapi_windowfrompoint(ByRef $tpoint)
	Local $aresult = DllCall("user32.dll", "hwnd", "WindowFromPoint", "struct", $tpoint)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _winapi_writeconsole($hconsole, $stext)
	Local $aresult = DllCall("kernel32.dll", "bool", "WriteConsoleW", "handle", $hconsole, "wstr", $stext, "dword", StringLen($stext), "dword*", 0, "ptr", 0)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _winapi_writefile($hfile, $pbuffer, $itowrite, ByRef $iwritten, $toverlapped = 0)
	Local $aresult = DllCall("kernel32.dll", "bool", "WriteFile", "handle", $hfile, "struct*", $pbuffer, "dword", $itowrite, "dword*", 0, "struct*", $toverlapped)
	If @error Then Return SetError(@error, @extended, False)
	$iwritten = $aresult[4]
	Return $aresult[0]
EndFunc

Func _winapi_writeprocessmemory($hprocess, $pbaseaddress, $pbuffer, $isize, ByRef $iwritten, $sbuffer = "ptr")
	Local $aresult = DllCall("kernel32.dll", "bool", "WriteProcessMemory", "handle", $hprocess, "ptr", $pbaseaddress, $sbuffer, $pbuffer, "ulong_ptr", $isize, "ulong_ptr*", 0)
	If @error Then Return SetError(@error, @extended, False)
	$iwritten = $aresult[5]
	Return $aresult[0]
EndFunc

Global $__g_atimers_atimerids[1][3]

Func _timer_diff($itimestamp)
	Return 1000 * (__timer_queryperformancecounter() - $itimestamp) / __timer_queryperformancefrequency()
EndFunc

Func _timer_getidletime()
	Local $tstruct = DllStructCreate("uint;dword")
	DllStructSetData($tstruct, 1, DllStructGetSize($tstruct))
	Local $aresult = DllCall("user32.dll", "bool", "GetLastInputInfo", "struct*", $tstruct)
	If @error OR $aresult[0] = 0 Then Return SetError(@error, @extended, 0)
	Local $avticks = DllCall("kernel32.dll", "dword", "GetTickCount")
	If @error OR NOT $aresult[0] Then Return SetError(@error, @extended, 0)
	Local $idiff = $avticks[0] - DllStructGetData($tstruct, 2)
	If $idiff < 0 Then Return SetExtended(1, $avticks[0])
	Return $idiff
EndFunc

Func _timer_gettimerid($wparam)
	Local $_itimerid = Dec(Hex($wparam, 8)), $imax = UBound($__g_atimers_atimerids) - 1
	For $x = 1 To $imax
		If $_itimerid = $__g_atimers_atimerids[$x][1] Then Return $__g_atimers_atimerids[$x][0]
	Next
	Return 0
EndFunc

Func _timer_init()
	Return __timer_queryperformancecounter()
EndFunc

Func _timer_killalltimers($hwnd)
	Local $inumtimers = $__g_atimers_atimerids[0][0]
	If $inumtimers = 0 Then Return False
	Local $aresult, $hcallback = 0
	For $x = $inumtimers To 1 Step -1
		If IsHWnd($hwnd) Then
			$aresult = DllCall("user32.dll", "bool", "KillTimer", "hwnd", $hwnd, "uint_ptr", $__g_atimers_atimerids[$x][1])
		Else
			$aresult = DllCall("user32.dll", "bool", "KillTimer", "hwnd", $hwnd, "uint_ptr", $__g_atimers_atimerids[$x][0])
		EndIf
		If @error OR $aresult[0] = 0 Then Return SetError(@error, @extended, False)
		$hcallback = $__g_atimers_atimerids[$x][2]
		If $hcallback <> 0 Then DllCallbackFree($hcallback)
		$__g_atimers_atimerids[0][0] -= 1
	Next
	ReDim $__g_atimers_atimerids[1][3]
	Return True
EndFunc

Func _timer_killtimer($hwnd, $itimerid)
	Local $aresult[1] = [0], $hcallback = 0, $iubound = UBound($__g_atimers_atimerids) - 1
	For $x = 1 To $iubound
		If $__g_atimers_atimerids[$x][0] = $itimerid Then
			If IsHWnd($hwnd) Then
				$aresult = DllCall("user32.dll", "bool", "KillTimer", "hwnd", $hwnd, "uint_ptr", $__g_atimers_atimerids[$x][1])
			Else
				$aresult = DllCall("user32.dll", "bool", "KillTimer", "hwnd", $hwnd, "uint_ptr", $__g_atimers_atimerids[$x][0])
			EndIf
			If @error OR $aresult[0] = 0 Then Return SetError(@error, @extended, False)
			$hcallback = $__g_atimers_atimerids[$x][2]
			If $hcallback <> 0 Then DllCallbackFree($hcallback)
			For $i = $x To $iubound - 1
				$__g_atimers_atimerids[$i][0] = $__g_atimers_atimerids[$i + 1][0]
				$__g_atimers_atimerids[$i][1] = $__g_atimers_atimerids[$i + 1][1]
				$__g_atimers_atimerids[$i][2] = $__g_atimers_atimerids[$i + 1][2]
			Next
			ReDim $__g_atimers_atimerids[UBound($__g_atimers_atimerids - 1)][3]
			$__g_atimers_atimerids[0][0] -= 1
			ExitLoop
		EndIf
	Next
	Return $aresult[0] <> 0
EndFunc

Func __timer_queryperformancecounter()
	Local $aresult = DllCall("kernel32.dll", "bool", "QueryPerformanceCounter", "int64*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	Return SetExtended($aresult[0], $aresult[1])
EndFunc

Func __timer_queryperformancefrequency()
	Local $aresult = DllCall("kernel32.dll", "bool", "QueryPerformanceFrequency", "int64*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $aresult[1])
EndFunc

Func _timer_settimer($hwnd, $ielapse = 250, $stimerfunc = "", $itimerid = -1)
	Local $aresult[1] = [0], $ptimerfunc = 0, $hcallback = 0, $iindex = $__g_atimers_atimerids[0][0] + 1
	If $itimerid = -1 Then
		ReDim $__g_atimers_atimerids[$iindex + 1][3]
		$__g_atimers_atimerids[0][0] = $iindex
		$itimerid = $iindex + 1000
		For $x = 1 To $iindex
			If $__g_atimers_atimerids[$x][0] = $itimerid Then
				$itimerid = $itimerid + 1
				$x = 0
			EndIf
		Next
		If $stimerfunc <> "" Then
			$hcallback = DllCallbackRegister($stimerfunc, "none", "hwnd;uint;uint_ptr;dword")
			If $hcallback = 0 Then Return SetError(-1, -1, 0)
			$ptimerfunc = DllCallbackGetPtr($hcallback)
			If $ptimerfunc = 0 Then Return SetError(-1, -1, 0)
		EndIf
		$aresult = DllCall("user32.dll", "uint_ptr", "SetTimer", "hwnd", $hwnd, "uint_ptr", $itimerid, "uint", $ielapse, "ptr", $ptimerfunc)
		If @error OR $aresult[0] = 0 Then Return SetError(@error, @extended, 0)
		$__g_atimers_atimerids[$iindex][0] = $aresult[0]
		$__g_atimers_atimerids[$iindex][1] = $itimerid
		$__g_atimers_atimerids[$iindex][2] = $hcallback
	Else
		For $x = 1 To $iindex - 1
			If $__g_atimers_atimerids[$x][0] = $itimerid Then
				If IsHWnd($hwnd) Then $itimerid = $__g_atimers_atimerids[$x][1]
				$hcallback = $__g_atimers_atimerids[$x][2]
				If $hcallback <> 0 Then
					$ptimerfunc = DllCallbackGetPtr($hcallback)
					If $ptimerfunc = 0 Then Return SetError(-1, -1, 0)
				EndIf
				$aresult = DllCall("user32.dll", "uint_ptr", "SetTimer", "hwnd", $hwnd, "uint_ptr", $itimerid, "uint", $ielapse, "ptr", $ptimerfunc)
				If @error OR $aresult[0] = 0 Then Return SetError(@error, @extended, 0)
				ExitLoop
			EndIf
		Next
	EndIf
	Return $aresult[0]
EndFunc

Global Const $mf_unhilite = 0
Global Const $mf_enabled = 0
Global Const $mf_unchecked = 0
Global Const $mf_string = 0
Global Const $mf_grayed = 1
Global Const $mf_disabled = 2
Global Const $mf_bitmap = 4
Global Const $mf_checked = 8
Global Const $mf_popup = 16
Global Const $mf_menubarbreak = 32
Global Const $mf_menubreak = 64
Global Const $mf_hilite = 128
Global Const $mf_ownerdraw = 256
Global Const $mf_usecheckbitmaps = 512
Global Const $mf_byposition = 1024
Global Const $mf_separator = 2048
Global Const $mf_default = 4096
Global Const $mf_sysmenu = 8192
Global Const $mf_help = 16384
Global Const $mf_rightjustify = 16384
Global Const $mf_mouseselect = 32768
Global Const $mfs_grayed = 3
Global Const $mfs_disabled = $mfs_grayed
Global Const $mfs_checked = $mf_checked
Global Const $mfs_hilite = $mf_hilite
Global Const $mfs_enabled = $mf_enabled
Global Const $mfs_unchecked = $mf_unchecked
Global Const $mfs_unhilite = $mf_unhilite
Global Const $mfs_default = $mf_default
Global Const $mft_string = $mf_string
Global Const $mft_bitmap = $mf_bitmap
Global Const $mft_menubarbreak = $mf_menubarbreak
Global Const $mft_menubreak = $mf_menubreak
Global Const $mft_ownerdraw = $mf_ownerdraw
Global Const $mft_radiocheck = 512
Global Const $mft_separator = $mf_separator
Global Const $mft_rightorder = 8192
Global Const $mft_rightjustify = $mf_rightjustify
Global Const $miim_state = 1
Global Const $miim_id = 2
Global Const $miim_submenu = 4
Global Const $miim_checkmarks = 8
Global Const $miim_type = 16
Global Const $miim_data = 32
Global Const $miim_datamask = 63
Global Const $miim_string = 64
Global Const $miim_bitmap = 128
Global Const $miim_ftype = 256
Global Const $mim_maxheight = 1
Global Const $mim_background = 2
Global Const $mim_helpid = 4
Global Const $mim_menudata = 8
Global Const $mim_style = 16
Global Const $mim_applytosubmenus = -2147483648
Global Const $mns_checkorbmp = 67108864
Global Const $mns_notifybypos = 134217728
Global Const $mns_autodismiss = 268435456
Global Const $mns_dragdrop = 536870912
Global Const $mns_modeless = 1073741824
Global Const $mns_nocheck = -2147483648
Global Const $tpm_leftbutton = 0
Global Const $tpm_leftalign = 0
Global Const $tpm_topalign = 0
Global Const $tpm_horizontal = 0
Global Const $tpm_recurse = 1
Global Const $tpm_rightbutton = 2
Global Const $tpm_centeralign = 4
Global Const $tpm_rightalign = 8
Global Const $tpm_vcenteralign = 16
Global Const $tpm_bottomalign = 32
Global Const $tpm_vertical = 64
Global Const $tpm_nonotify = 128
Global Const $tpm_returncmd = 256
Global Const $tpm_horposanimation = 1024
Global Const $tpm_horneganimation = 2048
Global Const $tpm_verposanimation = 4096
Global Const $tpm_verneganimation = 8192
Global Const $tpm_noanimation = 16384
Global Const $tpm_layoutrtl = 32768
Global Const $tpm_workarea = 65536
Global Const $sc_size = 61440
Global Const $sc_move = 61456
Global Const $sc_minimize = 61472
Global Const $sc_maximize = 61488
Global Const $sc_nextwindow = 61504
Global Const $sc_prevwindow = 61520
Global Const $sc_close = 61536
Global Const $sc_vscroll = 61552
Global Const $sc_hscroll = 61568
Global Const $sc_mousemenu = 61584
Global Const $sc_keymenu = 61696
Global Const $sc_arrange = 61712
Global Const $sc_restore = 61728
Global Const $sc_tasklist = 61744
Global Const $sc_screensave = 61760
Global Const $sc_hotkey = 61776
Global Const $sc_default = 61792
Global Const $sc_monitorpower = 61808
Global Const $sc_contexthelp = 61824
Global Const $sc_separator = 61455
Global Const $objid_sysmenu = -1
Global Const $objid_menu = -3
Global Const $__menuconstant_objid_client = -4
Global Const $tagmenubarinfo = "dword Size;" & $tagrect & ";handle hMenu;handle hWndMenu;bool Focused"
Global Const $tagmdinextmenu = "handle hMenuIn;handle hMenuNext;hwnd hWndNext"
Global Const $tagmenugetobjectinfo = "dword Flags;uint Pos;handle hMenu;ptr RIID;ptr Obj"
Global Const $tagtpmparams = "uint Size;" & $tagrect

Func _guictrlmenu_addmenuitem($hmenu, $stext, $icmdid = 0, $hsubmenu = 0)
	Local $iindex = _guictrlmenu_getitemcount($hmenu)
	Local $tmenu = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tmenu, "Size", DllStructGetSize($tmenu))
	DllStructSetData($tmenu, "ID", $icmdid)
	DllStructSetData($tmenu, "SubMenu", $hsubmenu)
	If $stext = "" Then
		DllStructSetData($tmenu, "Mask", $miim_ftype)
		DllStructSetData($tmenu, "Type", $mft_separator)
	Else
		DllStructSetData($tmenu, "Mask", BitOR($miim_id, $miim_string, $miim_submenu))
		DllStructSetData($tmenu, "Type", $mft_string)
		Local $ttext = DllStructCreate("wchar Text[" & StringLen($stext) + 1 & "]")
		DllStructSetData($ttext, "Text", $stext)
		DllStructSetData($tmenu, "TypeData", DllStructGetPtr($ttext))
	EndIf
	Local $aresult = DllCall("user32.dll", "bool", "InsertMenuItemW", "handle", $hmenu, "uint", $iindex, "bool", True, "struct*", $tmenu)
	If @error Then Return SetError(@error, @extended, -1)
	Return SetExtended($aresult[0], $iindex)
EndFunc

Func _guictrlmenu_appendmenu($hmenu, $iflags, $inewitem, $vnewitem)
	Local $stype = "wstr"
	If BitAND($iflags, $mf_bitmap) Then $stype = "handle"
	If BitAND($iflags, $mf_ownerdraw) Then $stype = "ulong_ptr"
	Local $aresult = DllCall("user32.dll", "bool", "AppendMenuW", "handle", $hmenu, "uint", $iflags, "uint_ptr", $inewitem, $stype, $vnewitem)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] = 0 Then Return SetError(10, 0, False)
	_guictrlmenu_drawmenubar(_guictrlmenu_findparent($hmenu))
	Return True
EndFunc

Func _guictrlmenu_calculatepopupwindowposition($ix, $iy, $iwidth, $iheight, $iflags = 0, $texclude = 0)
	Local $tanchor = DllStructCreate($tagpoint)
	DllStructSetData($tanchor, 1, $ix)
	DllStructSetData($tanchor, 2, $iy)
	Local $tsize = DllStructCreate($tagsize)
	DllStructSetData($tsize, 1, $iwidth)
	DllStructSetData($tsize, 2, $iheight)
	Local $tpos = DllStructCreate($tagrect)
	Local $aret = DllCall("user32.dll", "bool", "CalculatePopupWindowPosition", "struct*", $tanchor, "struct*", $tsize, "uint", $iflags, "struct*", $texclude, "struct*", $tpos)
	If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
	Return $tpos
EndFunc

Func _guictrlmenu_checkmenuitem($hmenu, $iitem, $bcheck = True, $bbypos = True)
	Local $ibypos = 0
	If $bcheck Then $ibypos = BitOR($ibypos, $mf_checked)
	If $bbypos Then $ibypos = BitOR($ibypos, $mf_byposition)
	Local $aresult = DllCall("user32.dll", "dword", "CheckMenuItem", "handle", $hmenu, "uint", $iitem, "uint", $ibypos)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_checkradioitem($hmenu, $ifirst, $ilast, $icheck, $bbypos = True)
	Local $ibypos = 0
	If $bbypos Then $ibypos = $mf_byposition
	Local $aresult = DllCall("user32.dll", "bool", "CheckMenuRadioItem", "handle", $hmenu, "uint", $ifirst, "uint", $ilast, "uint", $icheck, "uint", $ibypos)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_createmenu($istyle = $mns_checkorbmp)
	Local $aresult = DllCall("user32.dll", "handle", "CreateMenu")
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] = 0 Then Return SetError(10, 0, 0)
	_guictrlmenu_setmenustyle($aresult[0], $istyle)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_createpopup($istyle = $mns_checkorbmp)
	Local $aresult = DllCall("user32.dll", "handle", "CreatePopupMenu")
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] = 0 Then Return SetError(10, 0, 0)
	_guictrlmenu_setmenustyle($aresult[0], $istyle)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_deletemenu($hmenu, $iitem, $bbypos = True)
	Local $ibypos = 0
	If $bbypos Then $ibypos = $mf_byposition
	Local $aresult = DllCall("user32.dll", "bool", "DeleteMenu", "handle", $hmenu, "uint", $iitem, "uint", $ibypos)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] = 0 Then Return SetError(10, 0, False)
	_guictrlmenu_drawmenubar(_guictrlmenu_findparent($hmenu))
	Return True
EndFunc

Func _guictrlmenu_destroymenu($hmenu)
	Local $aresult = DllCall("user32.dll", "bool", "DestroyMenu", "handle", $hmenu)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_drawmenubar($hwnd)
	Local $aresult = DllCall("user32.dll", "bool", "DrawMenuBar", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_enablemenuitem($hmenu, $iitem, $istate = 0, $bbypos = True)
	Local $ibypos = $istate
	If $bbypos Then $ibypos = BitOR($ibypos, $mf_byposition)
	Local $aresult = DllCall("user32.dll", "bool", "EnableMenuItem", "handle", $hmenu, "uint", $iitem, "uint", $ibypos)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] = 0 Then Return SetError(10, 0, False)
	_guictrlmenu_drawmenubar(_guictrlmenu_findparent($hmenu))
	Return True
EndFunc

Func _guictrlmenu_endmenu()
	Local $aresult = DllCall("user32.dll", "bool", "EndMenu")
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_finditem($hmenu, $stext, $binstr = False, $istart = 0)
	Local $smenu
	For $ii = $istart To _guictrlmenu_getitemcount($hmenu)
		$smenu = StringReplace(_guictrlmenu_getitemtext($hmenu, $ii), "&", "")
		Switch $binstr
			Case False
				If $smenu = $stext Then Return $ii
			Case True
				If StringInStr($smenu, $stext) Then Return $ii
		EndSwitch
	Next
	Return -1
EndFunc

Func _guictrlmenu_findparent($hmenu)
	Local $hlist = _winapi_enumwindowstop()
	For $ii = 1 To $hlist[0][0]
		If _guictrlmenu_getmenu($hlist[$ii][0]) = $hmenu Then Return $hlist[$ii][0]
	Next
EndFunc

Func _guictrlmenu_getitembmp($hmenu, $iitem, $bbypos = True)
	Local $tinfo = _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos)
	Return DllStructGetData($tinfo, "BmpItem")
EndFunc

Func _guictrlmenu_getitembmpchecked($hmenu, $iitem, $bbypos = True)
	Local $tinfo = _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos)
	Return DllStructGetData($tinfo, "BmpChecked")
EndFunc

Func _guictrlmenu_getitembmpunchecked($hmenu, $iitem, $bbypos = True)
	Local $tinfo = _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos)
	Return DllStructGetData($tinfo, "BmpUnchecked")
EndFunc

Func _guictrlmenu_getitemchecked($hmenu, $iitem, $bbypos = True)
	Return BitAND(_guictrlmenu_getitemstateex($hmenu, $iitem, $bbypos), $mf_checked) <> 0
EndFunc

Func _guictrlmenu_getitemcount($hmenu)
	Local $aresult = DllCall("user32.dll", "int", "GetMenuItemCount", "handle", $hmenu)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_getitemdata($hmenu, $iitem, $bbypos = True)
	Local $tinfo = _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos)
	Return DllStructGetData($tinfo, "ItemData")
EndFunc

Func _guictrlmenu_getitemdefault($hmenu, $iitem, $bbypos = True)
	Return BitAND(_guictrlmenu_getitemstateex($hmenu, $iitem, $bbypos), $mf_default) <> 0
EndFunc

Func _guictrlmenu_getitemdisabled($hmenu, $iitem, $bbypos = True)
	Return BitAND(_guictrlmenu_getitemstateex($hmenu, $iitem, $bbypos), $mf_disabled) <> 0
EndFunc

Func _guictrlmenu_getitemenabled($hmenu, $iitem, $bbypos = True)
	Return BitAND(_guictrlmenu_getitemstateex($hmenu, $iitem, $bbypos), $mf_disabled) = 0
EndFunc

Func _guictrlmenu_getitemgrayed($hmenu, $iitem, $bbypos = True)
	Return BitAND(_guictrlmenu_getitemstateex($hmenu, $iitem, $bbypos), $mf_grayed) <> 0
EndFunc

Func _guictrlmenu_getitemhighlighted($hmenu, $iitem, $bbypos = True)
	Return BitAND(_guictrlmenu_getitemstateex($hmenu, $iitem, $bbypos), $mf_hilite) <> 0
EndFunc

Func _guictrlmenu_getitemid($hmenu, $iitem, $bbypos = True)
	Local $tinfo = _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos)
	Return DllStructGetData($tinfo, "ID")
EndFunc

Func _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos = True)
	Local $tinfo = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	DllStructSetData($tinfo, "Mask", $miim_datamask)
	Local $aresult = DllCall("user32.dll", "bool", "GetMenuItemInfo", "handle", $hmenu, "uint", $iitem, "bool", $bbypos, "struct*", $tinfo)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $tinfo)
EndFunc

Func _guictrlmenu_getitemrect($hwnd, $hmenu, $iitem)
	Local $trect = _guictrlmenu_getitemrectex($hwnd, $hmenu, $iitem)
	Local $arect[4]
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrlmenu_getitemrectex($hwnd, $hmenu, $iitem)
	Local $trect = DllStructCreate($tagrect)
	Local $aresult = DllCall("user32.dll", "bool", "GetMenuItemRect", "hwnd", $hwnd, "handle", $hmenu, "uint", $iitem, "struct*", $trect)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $trect)
EndFunc

Func _guictrlmenu_getitemstate($hmenu, $iitem, $bbypos = True)
	Local $iret = 0
	Local $istate = _guictrlmenu_getitemstateex($hmenu, $iitem, $bbypos)
	If BitAND($istate, $mfs_checked) <> 0 Then $iret = BitOR($iret, 1)
	If BitAND($istate, $mfs_default) <> 0 Then $iret = BitOR($iret, 2)
	If BitAND($istate, $mfs_disabled) <> 0 Then $iret = BitOR($iret, 4)
	If BitAND($istate, $mfs_grayed) <> 0 Then $iret = BitOR($iret, 8)
	If BitAND($istate, $mfs_hilite) <> 0 Then $iret = BitOR($iret, 16)
	Return $iret
EndFunc

Func _guictrlmenu_getitemstateex($hmenu, $iitem, $bbypos = True)
	Local $tinfo = _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos)
	Return DllStructGetData($tinfo, "State")
EndFunc

Func _guictrlmenu_getitemsubmenu($hmenu, $iitem)
	Local $aresult = DllCall("user32.dll", "handle", "GetSubMenu", "handle", $hmenu, "int", $iitem)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_getitemtext($hmenu, $iitem, $bbypos = True)
	Local $ibypos = 0
	If $bbypos Then $ibypos = $mf_byposition
	Local $aresult = DllCall("user32.dll", "int", "GetMenuStringW", "handle", $hmenu, "uint", $iitem, "wstr", "", "int", 4096, "uint", $ibypos)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $aresult[3])
EndFunc

Func _guictrlmenu_getitemtype($hmenu, $iitem, $bbypos = True)
	Local $tinfo = _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos)
	Return DllStructGetData($tinfo, "Type")
EndFunc

Func _guictrlmenu_getmenu($hwnd)
	Local $aresult = DllCall("user32.dll", "handle", "GetMenu", "hwnd", $hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_getmenubackground($hmenu)
	Local $tinfo = _guictrlmenu_getmenuinfo($hmenu)
	Return DllStructGetData($tinfo, "hBack")
EndFunc

Func _guictrlmenu_getmenubarinfo($hwnd, $iitem = 0, $iobject = 1)
	Local $aobject[3] = [$__menuconstant_objid_client, $objid_menu, $objid_sysmenu]
	Local $tinfo = DllStructCreate($tagmenubarinfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	Local $aresult = DllCall("user32.dll", "bool", "GetMenuBarInfo", "hwnd", $hwnd, "long", $aobject[$iobject], "long", $iitem, "struct*", $tinfo)
	If @error Then Return SetError(@error, @extended, 0)
	Local $ainfo[8]
	$ainfo[0] = DllStructGetData($tinfo, "Left")
	$ainfo[1] = DllStructGetData($tinfo, "Top")
	$ainfo[2] = DllStructGetData($tinfo, "Right")
	$ainfo[3] = DllStructGetData($tinfo, "Bottom")
	$ainfo[4] = DllStructGetData($tinfo, "hMenu")
	$ainfo[5] = DllStructGetData($tinfo, "hWndMenu")
	$ainfo[6] = BitAND(DllStructGetData($tinfo, "Focused"), 1) <> 0
	$ainfo[7] = BitAND(DllStructGetData($tinfo, "Focused"), 2) <> 0
	Return SetExtended($aresult[0], $ainfo)
EndFunc

Func _guictrlmenu_getmenucontexthelpid($hmenu)
	Local $tinfo = _guictrlmenu_getmenuinfo($hmenu)
	Return DllStructGetData($tinfo, "ContextHelpID")
EndFunc

Func _guictrlmenu_getmenudata($hmenu)
	Local $tinfo = _guictrlmenu_getmenuinfo($hmenu)
	Return DllStructGetData($tinfo, "MenuData")
EndFunc

Func _guictrlmenu_getmenudefaultitem($hmenu, $bbypos = True, $iflags = 0)
	Local $aresult = DllCall("user32.dll", "INT", "GetMenuDefaultItem", "handle", $hmenu, "uint", $bbypos, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_getmenuheight($hmenu)
	Local $tinfo = _guictrlmenu_getmenuinfo($hmenu)
	Return DllStructGetData($tinfo, "YMax")
EndFunc

Func _guictrlmenu_getmenuinfo($hmenu)
	Local $tinfo = DllStructCreate($tagmenuinfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	DllStructSetData($tinfo, "Mask", BitOR($mim_background, $mim_helpid, $mim_maxheight, $mim_menudata, $mim_style))
	Local $aresult = DllCall("user32.dll", "bool", "GetMenuInfo", "handle", $hmenu, "struct*", $tinfo)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $tinfo)
EndFunc

Func _guictrlmenu_getmenustyle($hmenu)
	Local $tinfo = _guictrlmenu_getmenuinfo($hmenu)
	Return DllStructGetData($tinfo, "Style")
EndFunc

Func _guictrlmenu_getsystemmenu($hwnd, $brevert = False)
	Local $aresult = DllCall("user32.dll", "hwnd", "GetSystemMenu", "hwnd", $hwnd, "int", $brevert)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_insertmenuitem($hmenu, $iindex, $stext, $icmdid = 0, $hsubmenu = 0)
	Local $tmenu = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tmenu, "Size", DllStructGetSize($tmenu))
	DllStructSetData($tmenu, "ID", $icmdid)
	DllStructSetData($tmenu, "SubMenu", $hsubmenu)
	If $stext = "" Then
		DllStructSetData($tmenu, "Mask", $miim_ftype)
		DllStructSetData($tmenu, "Type", $mft_separator)
	Else
		DllStructSetData($tmenu, "Mask", BitOR($miim_id, $miim_string, $miim_submenu))
		DllStructSetData($tmenu, "Type", $mft_string)
		Local $ttext = DllStructCreate("wchar Text[" & StringLen($stext) + 1 & "]")
		DllStructSetData($ttext, "Text", $stext)
		DllStructSetData($tmenu, "TypeData", DllStructGetPtr($ttext))
	EndIf
	Local $aresult = DllCall("user32.dll", "bool", "InsertMenuItemW", "handle", $hmenu, "uint", $iindex, "bool", True, "struct*", $tmenu)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_insertmenuitemex($hmenu, $iindex, ByRef $tmenu, $bbypos = True)
	Local $aresult = DllCall("user32.dll", "bool", "InsertMenuItemW", "handle", $hmenu, "uint", $iindex, "bool", $bbypos, "struct*", $tmenu)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_ismenu($hmenu)
	Local $aresult = DllCall("user32.dll", "bool", "IsMenu", "handle", $hmenu)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_loadmenu($hinst, $smenuname)
	Local $aresult = DllCall("user32.dll", "handle", "LoadMenuW", "handle", $hinst, "wstr", $smenuname)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_mapaccelerator($hmenu, $saccelkey)
	Local $stext
	Local $icount = _guictrlmenu_getitemcount($hmenu)
	For $ii = 0 To $icount - 1
		$stext = _guictrlmenu_getitemtext($hmenu, $ii)
		If StringInStr($stext, "&" & $saccelkey) > 0 Then Return $ii
	Next
	Return -1
EndFunc

Func _guictrlmenu_menuitemfrompoint($hwnd, $hmenu, $ix = -1, $iy = -1)
	If $ix = -1 Then $ix = _winapi_getmouseposx()
	If $iy = -1 Then $iy = _winapi_getmouseposy()
	Local $aresult = DllCall("user32.dll", "int", "MenuItemFromPoint", "hwnd", $hwnd, "handle", $hmenu, "int", $ix, "int", $iy)
	If @error Then Return SetError(@error, @extended, -1)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_removemenu($hmenu, $iitem, $bbypos = True)
	Local $ibypos = 0
	If $bbypos Then $ibypos = $mf_byposition
	Local $aresult = DllCall("user32.dll", "bool", "RemoveMenu", "handle", $hmenu, "uint", $iitem, "uint", $ibypos)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] = 0 Then Return SetError(10, 0, False)
	_guictrlmenu_drawmenubar(_guictrlmenu_findparent($hmenu))
	Return True
EndFunc

Func _guictrlmenu_setitembitmaps($hmenu, $iitem, $hchecked, $hunchecked, $bbypos = True)
	Local $ibypos = 0
	If $bbypos Then $ibypos = $mf_byposition
	Local $aresult = DllCall("user32.dll", "bool", "SetMenuItemBitmaps", "handle", $hmenu, "uint", $iitem, "uint", $ibypos, "handle", $hunchecked, "handle", $hchecked)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_setitembmp($hmenu, $iitem, $hbitmap, $bbypos = True)
	Local $tinfo = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	DllStructSetData($tinfo, "Mask", $miim_bitmap)
	DllStructSetData($tinfo, "BmpItem", $hbitmap)
	Return _guictrlmenu_setiteminfo($hmenu, $iitem, $tinfo, $bbypos)
EndFunc

Func _guictrlmenu_setitembmpchecked($hmenu, $iitem, $hbitmap, $bbypos = True)
	Local $tinfo = _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos)
	DllStructSetData($tinfo, "Mask", $miim_checkmarks)
	DllStructSetData($tinfo, "BmpChecked", $hbitmap)
	Return _guictrlmenu_setiteminfo($hmenu, $iitem, $tinfo, $bbypos)
EndFunc

Func _guictrlmenu_setitembmpunchecked($hmenu, $iitem, $hbitmap, $bbypos = True)
	Local $tinfo = _guictrlmenu_getiteminfo($hmenu, $iitem, $bbypos)
	DllStructSetData($tinfo, "Mask", $miim_checkmarks)
	DllStructSetData($tinfo, "BmpUnchecked", $hbitmap)
	Return _guictrlmenu_setiteminfo($hmenu, $iitem, $tinfo, $bbypos)
EndFunc

Func _guictrlmenu_setitemchecked($hmenu, $iitem, $bstate = True, $bbypos = True)
	Return _guictrlmenu_setitemstate($hmenu, $iitem, $mfs_checked, $bstate, $bbypos)
EndFunc

Func _guictrlmenu_setitemdata($hmenu, $iitem, $idata, $bbypos = True)
	Local $tinfo = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	DllStructSetData($tinfo, "Mask", $miim_data)
	DllStructSetData($tinfo, "ItemData", $idata)
	Return _guictrlmenu_setiteminfo($hmenu, $iitem, $tinfo, $bbypos)
EndFunc

Func _guictrlmenu_setitemdefault($hmenu, $iitem, $bstate = True, $bbypos = True)
	Return _guictrlmenu_setitemstate($hmenu, $iitem, $mfs_default, $bstate, $bbypos)
EndFunc

Func _guictrlmenu_setitemdisabled($hmenu, $iitem, $bstate = True, $bbypos = True)
	Return _guictrlmenu_setitemstate($hmenu, $iitem, BitOR($mfs_disabled, $mfs_grayed), $bstate, $bbypos)
EndFunc

Func _guictrlmenu_setitemenabled($hmenu, $iitem, $bstate = True, $bbypos = True)
	Return _guictrlmenu_setitemstate($hmenu, $iitem, BitOR($mfs_disabled, $mfs_grayed), NOT $bstate, $bbypos)
EndFunc

Func _guictrlmenu_setitemgrayed($hmenu, $iitem, $bstate = True, $bbypos = True)
	Return _guictrlmenu_setitemstate($hmenu, $iitem, $mfs_grayed, $bstate, $bbypos)
EndFunc

Func _guictrlmenu_setitemhighlighted($hmenu, $iitem, $bstate = True, $bbypos = True)
	Return _guictrlmenu_setitemstate($hmenu, $iitem, $mfs_hilite, $bstate, $bbypos)
EndFunc

Func _guictrlmenu_setitemid($hmenu, $iitem, $iid, $bbypos = True)
	Local $tinfo = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	DllStructSetData($tinfo, "Mask", $miim_id)
	DllStructSetData($tinfo, "ID", $iid)
	Return _guictrlmenu_setiteminfo($hmenu, $iitem, $tinfo, $bbypos)
EndFunc

Func _guictrlmenu_setiteminfo($hmenu, $iitem, ByRef $tinfo, $bbypos = True)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	Local $aresult = DllCall("user32.dll", "bool", "SetMenuItemInfoW", "handle", $hmenu, "uint", $iitem, "bool", $bbypos, "struct*", $tinfo)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_setitemstate($hmenu, $iitem, $istate, $bstate = True, $bbypos = True)
	Local $iflag = _guictrlmenu_getitemstateex($hmenu, $iitem, $bbypos)
	If $bstate Then
		$istate = BitOR($iflag, $istate)
	Else
		$istate = BitAND($iflag, BitNOT($istate))
	EndIf
	Local $tinfo = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	DllStructSetData($tinfo, "Mask", $miim_state)
	DllStructSetData($tinfo, "State", $istate)
	Return _guictrlmenu_setiteminfo($hmenu, $iitem, $tinfo, $bbypos)
EndFunc

Func _guictrlmenu_setitemsubmenu($hmenu, $iitem, $hsubmenu, $bbypos = True)
	Local $tinfo = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	DllStructSetData($tinfo, "Mask", $miim_submenu)
	DllStructSetData($tinfo, "SubMenu", $hsubmenu)
	Return _guictrlmenu_setiteminfo($hmenu, $iitem, $tinfo, $bbypos)
EndFunc

Func _guictrlmenu_setitemtext($hmenu, $iitem, $stext, $bbypos = True)
	Local $tbuffer = DllStructCreate("wchar Text[" & StringLen($stext) + 1 & "]")
	DllStructSetData($tbuffer, "Text", $stext)
	Local $tinfo = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	DllStructSetData($tinfo, "Mask", $miim_string)
	DllStructSetData($tinfo, "TypeData", DllStructGetPtr($tbuffer))
	Return _guictrlmenu_setiteminfo($hmenu, $iitem, $tinfo, $bbypos)
EndFunc

Func _guictrlmenu_setitemtype($hmenu, $iitem, $itype, $bbypos = True)
	Local $tinfo = DllStructCreate($tagmenuiteminfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	DllStructSetData($tinfo, "Mask", $miim_ftype)
	DllStructSetData($tinfo, "Type", $itype)
	Return _guictrlmenu_setiteminfo($hmenu, $iitem, $tinfo, $bbypos)
EndFunc

Func _guictrlmenu_setmenu($hwnd, $hmenu)
	Local $aresult = DllCall("user32.dll", "bool", "SetMenu", "hwnd", $hwnd, "handle", $hmenu)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_setmenubackground($hmenu, $hbrush)
	Local $tinfo = DllStructCreate($tagmenuinfo)
	DllStructSetData($tinfo, "Mask", $mim_background)
	DllStructSetData($tinfo, "hBack", $hbrush)
	Return _guictrlmenu_setmenuinfo($hmenu, $tinfo)
EndFunc

Func _guictrlmenu_setmenucontexthelpid($hmenu, $ihelpid)
	Local $tinfo = DllStructCreate($tagmenuinfo)
	DllStructSetData($tinfo, "Mask", $mim_helpid)
	DllStructSetData($tinfo, "ContextHelpID", $ihelpid)
	Return _guictrlmenu_setmenuinfo($hmenu, $tinfo)
EndFunc

Func _guictrlmenu_setmenudata($hmenu, $idata)
	Local $tinfo = DllStructCreate($tagmenuinfo)
	DllStructSetData($tinfo, "Mask", $mim_menudata)
	DllStructSetData($tinfo, "MenuData", $idata)
	Return _guictrlmenu_setmenuinfo($hmenu, $tinfo)
EndFunc

Func _guictrlmenu_setmenudefaultitem($hmenu, $iitem, $bbypos = True)
	Local $aresult = DllCall("user32.dll", "bool", "SetMenuDefaultItem", "handle", $hmenu, "uint", $iitem, "uint", $bbypos)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_setmenuheight($hmenu, $iheight)
	Local $tinfo = DllStructCreate($tagmenuinfo)
	DllStructSetData($tinfo, "Mask", $mim_maxheight)
	DllStructSetData($tinfo, "YMax", $iheight)
	Return _guictrlmenu_setmenuinfo($hmenu, $tinfo)
EndFunc

Func _guictrlmenu_setmenuinfo($hmenu, ByRef $tinfo)
	DllStructSetData($tinfo, "Size", DllStructGetSize($tinfo))
	Local $aresult = DllCall("user32.dll", "bool", "SetMenuInfo", "handle", $hmenu, "struct*", $tinfo)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrlmenu_setmenustyle($hmenu, $istyle)
	Local $tinfo = DllStructCreate($tagmenuinfo)
	DllStructSetData($tinfo, "Mask", $mim_style)
	DllStructSetData($tinfo, "Style", $istyle)
	Return _guictrlmenu_setmenuinfo($hmenu, $tinfo)
EndFunc

Func _guictrlmenu_trackpopupmenu($hmenu, $hwnd, $ix = -1, $iy = -1, $ialignx = 1, $ialigny = 1, $inotify = 0, $ibuttons = 0)
	If $ix = -1 Then $ix = _winapi_getmouseposx()
	If $iy = -1 Then $iy = _winapi_getmouseposy()
	Local $iflags = 0
	Switch $ialignx
		Case 1
			$iflags = BitOR($iflags, $tpm_leftalign)
		Case 2
			$iflags = BitOR($iflags, $tpm_rightalign)
		Case Else
			$iflags = BitOR($iflags, $tpm_centeralign)
	EndSwitch
	Switch $ialigny
		Case 1
			$iflags = BitOR($iflags, $tpm_topalign)
		Case 2
			$iflags = BitOR($iflags, $tpm_vcenteralign)
		Case Else
			$iflags = BitOR($iflags, $tpm_bottomalign)
	EndSwitch
	If BitAND($inotify, 1) <> 0 Then $iflags = BitOR($iflags, $tpm_nonotify)
	If BitAND($inotify, 2) <> 0 Then $iflags = BitOR($iflags, $tpm_returncmd)
	Switch $ibuttons
		Case 1
			$iflags = BitOR($iflags, $tpm_rightbutton)
		Case Else
			$iflags = BitOR($iflags, $tpm_leftbutton)
	EndSwitch
	Local $aresult = DllCall("user32.dll", "bool", "TrackPopupMenu", "handle", $hmenu, "uint", $iflags, "int", $ix, "int", $iy, "int", 0, "hwnd", $hwnd, "ptr", 0)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Global Const $hdf_left = 0
Global Const $hdf_right = 1
Global Const $hdf_center = 2
Global Const $hdf_justifymask = 3
Global Const $hdf_bitmap_on_right = 4096
Global Const $hdf_bitmap = 8192
Global Const $hdf_string = 16384
Global Const $hdf_ownerdraw = 32768
Global Const $hdf_displaymask = 61440
Global Const $hdf_rtlreading = 4
Global Const $hdf_sortdown = 512
Global Const $hdf_image = 2048
Global Const $hdf_sortup = 1024
Global Const $hdf_flagmask = 3588
Global Const $hdi_width = 1
Global Const $hdi_text = 2
Global Const $hdi_format = 4
Global Const $hdi_param = 8
Global Const $hdi_bitmap = 16
Global Const $hdi_image = 32
Global Const $hdi_di_setitem = 64
Global Const $hdi_order = 128
Global Const $hdi_filter = 256
Global Const $hht_nowhere = 1
Global Const $hht_onheader = 2
Global Const $hht_ondivider = 4
Global Const $hht_ondivopen = 8
Global Const $hht_onfilter = 16
Global Const $hht_onfilterbutton = 32
Global Const $hht_above = 256
Global Const $hht_below = 512
Global Const $hht_toright = 1024
Global Const $hht_toleft = 2048
Global Const $hdm_first = 4608
Global Const $hdm_clearfilter = $hdm_first + 24
Global Const $hdm_createdragimage = $hdm_first + 16
Global Const $hdm_deleteitem = $hdm_first + 2
Global Const $hdm_editfilter = $hdm_first + 23
Global Const $hdm_getbitmapmargin = $hdm_first + 21
Global Const $hdm_getfocuseditem = $hdm_first + 27
Global Const $hdm_getimagelist = $hdm_first + 9
Global Const $hdm_getitema = $hdm_first + 3
Global Const $hdm_getitemw = $hdm_first + 11
Global Const $hdm_getitemcount = $hdm_first + 0
Global Const $hdm_getitemdropdownrect = $hdm_first + 25
Global Const $hdm_getitemrect = $hdm_first + 7
Global Const $hdm_getorderarray = $hdm_first + 17
Global Const $hdm_getoverflowrect = $hdm_first + 26
Global Const $hdm_getunicodeformat = 8192 + 6
Global Const $hdm_hittest = $hdm_first + 6
Global Const $hdm_insertitema = $hdm_first + 1
Global Const $hdm_insertitemw = $hdm_first + 10
Global Const $hdm_layout = $hdm_first + 5
Global Const $hdm_ordertoindex = $hdm_first + 15
Global Const $hdm_setbitmapmargin = $hdm_first + 20
Global Const $hdm_setfilterchangetimeout = $hdm_first + 22
Global Const $hdm_setfocuseditem = $hdm_first + 28
Global Const $hdm_sethotdivider = $hdm_first + 19
Global Const $hdm_setimagelist = $hdm_first + 8
Global Const $hdm_setitema = $hdm_first + 4
Global Const $hdm_setitemw = $hdm_first + 12
Global Const $hdm_setorderarray = $hdm_first + 18
Global Const $hdm_setunicodeformat = 8192 + 5
Global Const $hdn_first = -300
Global Const $hdn_begindrag = $hdn_first - 10
Global Const $hdn_begintrack = $hdn_first - 6
Global Const $hdn_dividerdblclick = $hdn_first - 5
Global Const $hdn_enddrag = $hdn_first - 11
Global Const $hdn_endtrack = $hdn_first - 7
Global Const $hdn_filterbtnclick = $hdn_first - 13
Global Const $hdn_filterchange = $hdn_first - 12
Global Const $hdn_getdispinfo = $hdn_first - 9
Global Const $hdn_itemchanged = $hdn_first - 1
Global Const $hdn_itemchanging = $hdn_first + 0
Global Const $hdn_itemclick = $hdn_first - 2
Global Const $hdn_itemdblclick = $hdn_first - 3
Global Const $hdn_track = $hdn_first - 8
Global Const $hdn_begintrackw = $hdn_first - 26
Global Const $hdn_dividerdblclickw = $hdn_first - 25
Global Const $hdn_endtrackw = $hdn_first - 27
Global Const $hdn_getdispinfow = $hdn_first - 29
Global Const $hdn_itemchangedw = $hdn_first - 21
Global Const $hdn_itemchangingw = $hdn_first - 20
Global Const $hdn_itemclickw = $hdn_first - 22
Global Const $hdn_itemdblclickw = $hdn_first - 23
Global Const $hdn_trackw = $hdn_first - 28
Global Const $hds_buttons = 2
Global Const $hds_checkboxes = 1024
Global Const $hds_dragdrop = 64
Global Const $hds_filterbar = 256
Global Const $hds_flat = 512
Global Const $hds_fulldrag = 128
Global Const $hds_hidden = 8
Global Const $hds_horz = 0
Global Const $hds_hottrack = 4
Global Const $hds_nosizing = 2048
Global Const $hds_overflow = 4096
Global Const $hds_default = 70
Global Const $gmem_fixed = 0
Global Const $gmem_moveable = 2
Global Const $gmem_nocompact = 16
Global Const $gmem_nodiscard = 32
Global Const $gmem_zeroinit = 64
Global Const $gmem_modify = 128
Global Const $gmem_discardable = 256
Global Const $gmem_not_banked = 4096
Global Const $gmem_share = 8192
Global Const $gmem_ddeshare = 8192
Global Const $gmem_notify = 16384
Global Const $gmem_lower = 4096
Global Const $gmem_valid_flags = 32626
Global Const $gmem_invalid_handle = 32768
Global Const $gptr = BitOR($gmem_fixed, $gmem_zeroinit)
Global Const $ghnd = BitOR($gmem_moveable, $gmem_zeroinit)
Global Const $mem_commit = 4096
Global Const $mem_reserve = 8192
Global Const $mem_top_down = 1048576
Global Const $mem_shared = 134217728
Global Const $page_noaccess = 1
Global Const $page_readonly = 2
Global Const $page_readwrite = 4
Global Const $page_execute = 16
Global Const $page_execute_read = 32
Global Const $page_execute_readwrite = 64
Global Const $page_execute_writecopy = 128
Global Const $page_guard = 256
Global Const $page_nocache = 512
Global Const $page_writecombine = 1024
Global Const $page_writecopy = 8
Global Const $mem_decommit = 16384
Global Const $mem_release = 32768
Global Const $tagmemmap = "handle hProc;ulong_ptr Size;ptr Mem"

Func _memfree(ByRef $tmemmap)
	Local $pmemory = DllStructGetData($tmemmap, "Mem")
	Local $hprocess = DllStructGetData($tmemmap, "hProc")
	Local $bresult = _memvirtualfreeex($hprocess, $pmemory, 0, $mem_release)
	DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hprocess)
	If @error Then Return SetError(@error, @extended, False)
	Return $bresult
EndFunc

Func _memglobalalloc($ibytes, $iflags = 0)
	Local $aresult = DllCall("kernel32.dll", "handle", "GlobalAlloc", "uint", $iflags, "ulong_ptr", $ibytes)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memglobalfree($hmemory)
	Local $aresult = DllCall("kernel32.dll", "ptr", "GlobalFree", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _memgloballock($hmemory)
	Local $aresult = DllCall("kernel32.dll", "ptr", "GlobalLock", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memglobalsize($hmemory)
	Local $aresult = DllCall("kernel32.dll", "ulong_ptr", "GlobalSize", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memglobalunlock($hmemory)
	Local $aresult = DllCall("kernel32.dll", "bool", "GlobalUnlock", "handle", $hmemory)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _meminit($hwnd, $isize, ByRef $tmemmap)
	Local $aresult = DllCall("user32.dll", "dword", "GetWindowThreadProcessId", "hwnd", $hwnd, "dword*", 0)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Local $iprocessid = $aresult[2]
	If $iprocessid = 0 Then Return SetError(1, 0, 0)
	Local $iaccess = BitOR($process_vm_operation, $process_vm_read, $process_vm_write)
	Local $hprocess = __mem_openprocess($iaccess, False, $iprocessid, True)
	Local $ialloc = BitOR($mem_reserve, $mem_commit)
	Local $pmemory = _memvirtualallocex($hprocess, 0, $isize, $ialloc, $page_readwrite)
	If $pmemory = 0 Then Return SetError(2, 0, 0)
	$tmemmap = DllStructCreate($tagmemmap)
	DllStructSetData($tmemmap, "hProc", $hprocess)
	DllStructSetData($tmemmap, "Size", $isize)
	DllStructSetData($tmemmap, "Mem", $pmemory)
	Return $pmemory
EndFunc

Func _memmovememory($psource, $pdest, $ilength)
	DllCall("kernel32.dll", "none", "RtlMoveMemory", "struct*", $pdest, "struct*", $psource, "ulong_ptr", $ilength)
	If @error Then Return SetError(@error, @extended)
EndFunc

Func _memread(ByRef $tmemmap, $psrce, $pdest, $isize)
	Local $aresult = DllCall("kernel32.dll", "bool", "ReadProcessMemory", "handle", DllStructGetData($tmemmap, "hProc"), "ptr", $psrce, "struct*", $pdest, "ulong_ptr", $isize, "ulong_ptr*", 0)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _memwrite(ByRef $tmemmap, $psrce, $pdest = 0, $isize = 0, $ssrce = "struct*")
	If $pdest = 0 Then $pdest = DllStructGetData($tmemmap, "Mem")
	If $isize = 0 Then $isize = DllStructGetData($tmemmap, "Size")
	Local $aresult = DllCall("kernel32.dll", "bool", "WriteProcessMemory", "handle", DllStructGetData($tmemmap, "hProc"), "ptr", $pdest, $ssrce, $psrce, "ulong_ptr", $isize, "ulong_ptr*", 0)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _memvirtualalloc($paddress, $isize, $iallocation, $iprotect)
	Local $aresult = DllCall("kernel32.dll", "ptr", "VirtualAlloc", "ptr", $paddress, "ulong_ptr", $isize, "dword", $iallocation, "dword", $iprotect)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memvirtualallocex($hprocess, $paddress, $isize, $iallocation, $iprotect)
	Local $aresult = DllCall("kernel32.dll", "ptr", "VirtualAllocEx", "handle", $hprocess, "ptr", $paddress, "ulong_ptr", $isize, "dword", $iallocation, "dword", $iprotect)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _memvirtualfree($paddress, $isize, $ifreetype)
	Local $aresult = DllCall("kernel32.dll", "bool", "VirtualFree", "ptr", $paddress, "ulong_ptr", $isize, "dword", $ifreetype)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _memvirtualfreeex($hprocess, $paddress, $isize, $ifreetype)
	Local $aresult = DllCall("kernel32.dll", "bool", "VirtualFreeEx", "handle", $hprocess, "ptr", $paddress, "ulong_ptr", $isize, "dword", $ifreetype)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func __mem_openprocess($iaccess, $binherit, $iprocessid, $bdebugpriv = False)
	Local $aresult = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", $iaccess, "bool", $binherit, "dword", $iprocessid)
	If @error Then Return SetError(@error + 10, @extended, 0)
	If $aresult[0] Then Return $aresult[0]
	If NOT $bdebugpriv Then Return 0
	Local $htoken = _security__openthreadtokenex(BitOR($token_adjust_privileges, $token_query))
	If @error Then Return SetError(@error + 20, @extended, 0)
	_security__setprivilege($htoken, "SeDebugPrivilege", True)
	Local $ierror = @error
	Local $ilasterror = @extended
	Local $iret = 0
	If NOT @error Then
		$aresult = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", $iaccess, "bool", $binherit, "dword", $iprocessid)
		$ierror = @error
		$ilasterror = @extended
		If $aresult[0] Then $iret = $aresult[0]
		_security__setprivilege($htoken, "SeDebugPrivilege", False)
		If @error Then
			$ierror = @error + 30
			$ilasterror = @extended
		EndIf
	Else
		$ierror = @error + 40
	EndIf
	DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $htoken)
	Return SetError($ierror, $ilasterror, $iret)
EndFunc

Global Const $_udf_globalids_offset = 2
Global Const $_udf_globalid_max_win = 16
Global Const $_udf_startid = 10000
Global Const $_udf_globalid_max_ids = 55535
Global Const $__udfguiconstant_ws_tabstop = 65536
Global Const $__udfguiconstant_ws_visible = 268435456
Global Const $__udfguiconstant_ws_child = 1073741824
Global $__g_audf_globalids_used[$_udf_globalid_max_win][$_udf_globalid_max_ids + $_udf_globalids_offset + 1]

Func __udf_getnextglobalid($hwnd)
	Local $nctrlid, $iusedindex = -1, $ballused = True
	If NOT WinExists($hwnd) Then Return SetError(-1, -1, 0)
	For $iindex = 0 To $_udf_globalid_max_win - 1
		If $__g_audf_globalids_used[$iindex][0] <> 0 Then
			If NOT WinExists($__g_audf_globalids_used[$iindex][0]) Then
				For $x = 0 To UBound($__g_audf_globalids_used, $ubound_columns) - 1
					$__g_audf_globalids_used[$iindex][$x] = 0
				Next
				$__g_audf_globalids_used[$iindex][1] = $_udf_startid
				$ballused = False
			EndIf
		EndIf
	Next
	For $iindex = 0 To $_udf_globalid_max_win - 1
		If $__g_audf_globalids_used[$iindex][0] = $hwnd Then
			$iusedindex = $iindex
			ExitLoop
		EndIf
	Next
	If $iusedindex = -1 Then
		For $iindex = 0 To $_udf_globalid_max_win - 1
			If $__g_audf_globalids_used[$iindex][0] = 0 Then
				$__g_audf_globalids_used[$iindex][0] = $hwnd
				$__g_audf_globalids_used[$iindex][1] = $_udf_startid
				$ballused = False
				$iusedindex = $iindex
				ExitLoop
			EndIf
		Next
	EndIf
	If $iusedindex = -1 AND $ballused Then Return SetError(16, 0, 0)
	If $__g_audf_globalids_used[$iusedindex][1] = $_udf_startid + $_udf_globalid_max_ids Then
		For $iidindex = $_udf_globalids_offset To UBound($__g_audf_globalids_used, $ubound_columns) - 1
			If $__g_audf_globalids_used[$iusedindex][$iidindex] = 0 Then
				$nctrlid = ($iidindex - $_udf_globalids_offset) + 10000
				$__g_audf_globalids_used[$iusedindex][$iidindex] = $nctrlid
				Return $nctrlid
			EndIf
		Next
		Return SetError(-1, $_udf_globalid_max_ids, 0)
	EndIf
	$nctrlid = $__g_audf_globalids_used[$iusedindex][1]
	$__g_audf_globalids_used[$iusedindex][1] += 1
	$__g_audf_globalids_used[$iusedindex][($nctrlid - 10000) + $_udf_globalids_offset] = $nctrlid
	Return $nctrlid
EndFunc

Func __udf_freeglobalid($hwnd, $iglobalid)
	If $iglobalid - $_udf_startid < 0 OR $iglobalid - $_udf_startid > $_udf_globalid_max_ids Then Return SetError(-1, 0, False)
	For $iindex = 0 To $_udf_globalid_max_win - 1
		If $__g_audf_globalids_used[$iindex][0] = $hwnd Then
			For $x = $_udf_globalids_offset To UBound($__g_audf_globalids_used, $ubound_columns) - 1
				If $__g_audf_globalids_used[$iindex][$x] = $iglobalid Then
					$__g_audf_globalids_used[$iindex][$x] = 0
					Return True
				EndIf
			Next
			Return SetError(-3, 0, False)
		EndIf
	Next
	Return SetError(-2, 0, False)
EndFunc

Global $__g_hhdrlastwnd
Global Const $__headerconstant_classname = "SysHeader32"
Global Const $__headerconstant_default_gui_font = 17
Global Const $__headerconstant_swp_showwindow = 64
Global Const $taghdhittestinfo = $tagpoint & ";uint Flags;int Item"
Global Const $taghdlayout = "ptr Rect;ptr WindowPos"
Global Const $taghdtextfilter = "ptr Text;int TextMax"

Func _guictrlheader_additem($hwnd, $stext, $iwidth = 50, $ialign = 0, $iimage = -1, $bonright = False)
	Return _guictrlheader_insertitem($hwnd, _guictrlheader_getitemcount($hwnd), $stext, $iwidth, $ialign, $iimage, $bonright)
EndFunc

Func _guictrlheader_clearfilter($hwnd, $iindex)
	Return _sendmessage($hwnd, $hdm_clearfilter, $iindex) <> 0
EndFunc

Func _guictrlheader_clearfilterall($hwnd)
	Return _sendmessage($hwnd, $hdm_clearfilter, -1) <> 0
EndFunc

Func _guictrlheader_create($hwnd, $istyle = 70)
	$istyle = BitOR($istyle, $__udfguiconstant_ws_child, $__udfguiconstant_ws_visible)
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $hheader = _winapi_createwindowex(0, $__headerconstant_classname, "", $istyle, 0, 0, 0, 0, $hwnd, $nctrlid)
	Local $trect = _winapi_getclientrect($hwnd)
	Local $twindowpos = _guictrlheader_layout($hheader, $trect)
	Local $iflags = BitOR(DllStructGetData($twindowpos, "Flags"), $__headerconstant_swp_showwindow)
	_winapi_setwindowpos($hheader, DllStructGetData($twindowpos, "InsertAfter"), DllStructGetData($twindowpos, "X"), DllStructGetData($twindowpos, "Y"), DllStructGetData($twindowpos, "CX"), DllStructGetData($twindowpos, "CY"), $iflags)
	_winapi_setfont($hheader, _winapi_getstockobject($__headerconstant_default_gui_font))
	Return $hheader
EndFunc

Func _guictrlheader_createdragimage($hwnd, $iindex)
	Return Ptr(_sendmessage($hwnd, $hdm_createdragimage, $iindex))
EndFunc

Func _guictrlheader_deleteitem($hwnd, $iindex)
	Return _sendmessage($hwnd, $hdm_deleteitem, $iindex) <> 0
EndFunc

Func _guictrlheader_destroy(ByRef $hwnd)
	If NOT _winapi_isclassname($hwnd, $__headerconstant_classname) Then Return SetError(2, 2, False)
	Local $idestroyed = 0
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
			Local $nctrlid = _winapi_getdlgctrlid($hwnd)
			Local $hparent = _winapi_getparent($hwnd)
			$idestroyed = _winapi_destroywindow($hwnd)
			Local $iret = __udf_freeglobalid($hparent, $nctrlid)
			If NOT $iret Then
			EndIf
		Else
			Return SetError(1, 1, False)
		EndIf
	Else
		$idestroyed = GUICtrlDelete($hwnd)
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func _guictrlheader_editfilter($hwnd, $iindex, $bdiscard = True)
	Return _sendmessage($hwnd, $hdm_editfilter, $iindex, $bdiscard) <> 0
EndFunc

Func _guictrlheader_getbitmapmargin($hwnd)
	Return _sendmessage($hwnd, $hdm_getbitmapmargin)
EndFunc

Func _guictrlheader_getimagelist($hwnd)
	Return Ptr(_sendmessage($hwnd, $hdm_getimagelist))
EndFunc

Func _guictrlheader_getitem($hwnd, $iindex, ByRef $titem)
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		$iret = _sendmessage($hwnd, $hdm_getitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem, $tmemmap)
		_memwrite($tmemmap, $titem)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $hdm_getitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $hdm_getitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memread($tmemmap, $pmemory, $titem, $iitem)
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrlheader_getitemalign($hwnd, $iindex)
	Switch BitAND(_guictrlheader_getitemformat($hwnd, $iindex), $hdf_justifymask)
		Case $hdf_left
			Return 0
		Case $hdf_right
			Return 1
		Case $hdf_center
			Return 2
		Case Else
			Return -1
	EndSwitch
EndFunc

Func _guictrlheader_getitembitmap($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_bitmap)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "hBmp")
EndFunc

Func _guictrlheader_getitemcount($hwnd)
	Return _sendmessage($hwnd, $hdm_getitemcount)
EndFunc

Func _guictrlheader_getitemdisplay($hwnd, $iindex)
	Local $iret = 0
	Local $iformat = _guictrlheader_getitemformat($hwnd, $iindex)
	If BitAND($iformat, $hdf_bitmap) <> 0 Then $iret = BitOR($iret, 1)
	If BitAND($iformat, $hdf_bitmap_on_right) <> 0 Then $iret = BitOR($iret, 2)
	If BitAND($iformat, $hdf_ownerdraw) <> 0 Then $iret = BitOR($iret, 4)
	If BitAND($iformat, $hdf_string) <> 0 Then $iret = BitOR($iret, 8)
	Return $iret
EndFunc

Func _guictrlheader_getitemflags($hwnd, $iindex)
	Local $iret = 0
	Local $iformat = _guictrlheader_getitemformat($hwnd, $iindex)
	If BitAND($iformat, $hdf_image) <> 0 Then $iret = BitOR($iret, 1)
	If BitAND($iformat, $hdf_rtlreading) <> 0 Then $iret = BitOR($iret, 2)
	If BitAND($iformat, $hdf_sortdown) <> 0 Then $iret = BitOR($iret, 4)
	If BitAND($iformat, $hdf_sortup) <> 0 Then $iret = BitOR($iret, 8)
	Return $iret
EndFunc

Func _guictrlheader_getitemformat($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_format)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "Fmt")
EndFunc

Func _guictrlheader_getitemimage($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_image)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "Image")
EndFunc

Func _guictrlheader_getitemorder($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_order)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "Order")
EndFunc

Func _guictrlheader_getitemparam($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_param)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "Param")
EndFunc

Func _guictrlheader_getitemrect($hwnd, $iindex)
	Local $arect[4]
	Local $trect = _guictrlheader_getitemrectex($hwnd, $iindex)
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrlheader_getitemrectex($hwnd, $iindex)
	Local $trect = DllStructCreate($tagrect)
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		_sendmessage($hwnd, $hdm_getitemrect, $iindex, $trect, 0, "wparam", "struct*")
	Else
		Local $irect = DllStructGetSize($trect)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
		_memwrite($tmemmap, $trect)
		_sendmessage($hwnd, $hdm_getitemrect, $iindex, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $trect, $irect)
		_memfree($tmemmap)
	EndIf
	Return $trect
EndFunc

Func _guictrlheader_getitemtext($hwnd, $iindex)
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_text)
	DllStructSetData($titem, "TextMax", 4096)
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		DllStructSetData($titem, "Text", DllStructGetPtr($tbuffer))
		_sendmessage($hwnd, $hdm_getitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem + DllStructGetSize($tbuffer), $tmemmap)
		Local $ptext = $pmemory + $iitem
		DllStructSetData($titem, "Text", $ptext)
		_memwrite($tmemmap, $titem, $pmemory, $iitem)
		If $bunicode Then
			_sendmessage($hwnd, $hdm_getitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			_sendmessage($hwnd, $hdm_getitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memread($tmemmap, $ptext, $tbuffer, DllStructGetSize($tbuffer))
		_memfree($tmemmap)
	EndIf
	Return DllStructGetData($tbuffer, "Text")
EndFunc

Func _guictrlheader_getitemwidth($hwnd, $iindex)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_width)
	_guictrlheader_getitem($hwnd, $iindex, $titem)
	Return DllStructGetData($titem, "XY")
EndFunc

Func _guictrlheader_getorderarray($hwnd)
	Local $iitems = _guictrlheader_getitemcount($hwnd)
	Local $tbuffer = DllStructCreate("int[" & $iitems & "]")
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		_sendmessage($hwnd, $hdm_getorderarray, $iitems, $tbuffer, 0, "wparam", "struct*")
	Else
		Local $ibuffer = DllStructGetSize($tbuffer)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		_sendmessage($hwnd, $hdm_getorderarray, $iitems, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
		_memfree($tmemmap)
	EndIf
	Local $abuffer[$iitems + 1]
	$abuffer[0] = $iitems
	For $ii = 1 To $iitems
		$abuffer[$ii] = DllStructGetData($tbuffer, 1, $ii)
	Next
	Return $abuffer
EndFunc

Func _guictrlheader_getunicodeformat($hwnd)
	Return _sendmessage($hwnd, $hdm_getunicodeformat) <> 0
EndFunc

Func _guictrlheader_hittest($hwnd, $ix, $iy)
	Local $ttest = DllStructCreate($taghdhittestinfo)
	DllStructSetData($ttest, "X", $ix)
	DllStructSetData($ttest, "Y", $iy)
	Local $atest[11]
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		$atest[0] = _sendmessage($hwnd, $hdm_hittest, 0, $ttest, 0, "wparam", "struct*")
	Else
		Local $itest = DllStructGetSize($ttest)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $itest, $tmemmap)
		_memwrite($tmemmap, $ttest)
		$atest[0] = _sendmessage($hwnd, $hdm_hittest, 0, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $ttest, $itest)
		_memfree($tmemmap)
	EndIf
	Local $iflags = DllStructGetData($ttest, "Flags")
	$atest[1] = BitAND($iflags, $hht_nowhere) <> 0
	$atest[2] = BitAND($iflags, $hht_onheader) <> 0
	$atest[3] = BitAND($iflags, $hht_ondivider) <> 0
	$atest[4] = BitAND($iflags, $hht_ondivopen) <> 0
	$atest[5] = BitAND($iflags, $hht_onfilter) <> 0
	$atest[6] = BitAND($iflags, $hht_onfilterbutton) <> 0
	$atest[7] = BitAND($iflags, $hht_above) <> 0
	$atest[8] = BitAND($iflags, $hht_below) <> 0
	$atest[9] = BitAND($iflags, $hht_toright) <> 0
	$atest[10] = BitAND($iflags, $hht_toleft) <> 0
	Return $atest
EndFunc

Func _guictrlheader_insertitem($hwnd, $iindex, $stext, $iwidth = 50, $ialign = 0, $iimage = -1, $bonright = False)
	Local $aalign[3] = [$hdf_left, $hdf_right, $hdf_center]
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $pbuffer, $ibuffer
	If $stext <> -1 Then
		$ibuffer = StringLen($stext) + 1
		Local $tbuffer
		If $bunicode Then
			$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
			$ibuffer *= 2
		Else
			$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
		EndIf
		DllStructSetData($tbuffer, "Text", $stext)
		$pbuffer = DllStructGetPtr($tbuffer)
	Else
		$ibuffer = 0
		$pbuffer = -1
	EndIf
	Local $titem = DllStructCreate($taghditem)
	Local $ifmt = $aalign[$ialign]
	Local $imask = BitOR($hdi_width, $hdi_format)
	If $stext <> "" Then
		$imask = BitOR($imask, $hdi_text)
		$ifmt = BitOR($ifmt, $hdf_string)
	EndIf
	If $iimage <> -1 Then
		$imask = BitOR($imask, $hdi_image)
		$ifmt = BitOR($ifmt, $hdf_image)
	EndIf
	If $bonright Then $ifmt = BitOR($ifmt, $hdf_bitmap_on_right)
	DllStructSetData($titem, "Mask", $imask)
	DllStructSetData($titem, "XY", $iwidth)
	DllStructSetData($titem, "Fmt", $ifmt)
	DllStructSetData($titem, "Image", $iimage)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		DllStructSetData($titem, "Text", $pbuffer)
		$iret = _sendmessage($hwnd, $hdm_insertitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
		If $stext <> -1 Then
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
		Else
			DllStructSetData($titem, "Text", -1)
		EndIf
		_memwrite($tmemmap, $titem, $pmemory, $iitem)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $hdm_insertitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $hdm_insertitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	Return $iret
EndFunc

Func _guictrlheader_layout($hwnd, ByRef $trect)
	Local $tlayout = DllStructCreate($taghdlayout)
	Local $twindowpos = DllStructCreate($tagwindowpos)
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		DllStructSetData($tlayout, "Rect", DllStructGetPtr($trect))
		DllStructSetData($tlayout, "WindowPos", DllStructGetPtr($twindowpos))
		_sendmessage($hwnd, $hdm_layout, 0, $tlayout, 0, "wparam", "struct*")
	Else
		Local $ilayout = DllStructGetSize($tlayout)
		Local $irect = DllStructGetSize($trect)
		Local $iwindowpos = DllStructGetSize($twindowpos)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ilayout + $irect + $iwindowpos, $tmemmap)
		DllStructSetData($tlayout, "Rect", $pmemory + $ilayout)
		DllStructSetData($tlayout, "WindowPos", $pmemory + $ilayout + $irect)
		_memwrite($tmemmap, $tlayout, $pmemory, $ilayout)
		_memwrite($tmemmap, $trect, $pmemory + $ilayout, $irect)
		_sendmessage($hwnd, $hdm_layout, 0, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory + $ilayout + $irect, $twindowpos, $iwindowpos)
		_memfree($tmemmap)
	EndIf
	Return $twindowpos
EndFunc

Func _guictrlheader_ordertoindex($hwnd, $iorder)
	Return _sendmessage($hwnd, $hdm_ordertoindex, $iorder)
EndFunc

Func _guictrlheader_setbitmapmargin($hwnd, $iwidth)
	Return _sendmessage($hwnd, $hdm_setbitmapmargin, $iwidth)
EndFunc

Func _guictrlheader_setfilterchangetimeout($hwnd, $itimeout)
	Return _sendmessage($hwnd, $hdm_setfilterchangetimeout, 0, $itimeout)
EndFunc

Func _guictrlheader_sethotdivider($hwnd, $iflag, $iinputvalue)
	Return _sendmessage($hwnd, $hdm_sethotdivider, $iflag, $iinputvalue)
EndFunc

Func _guictrlheader_setimagelist($hwnd, $himage)
	Return _sendmessage($hwnd, $hdm_setimagelist, 0, $himage, 0, "wparam", "handle", "handle")
EndFunc

Func _guictrlheader_setitem($hwnd, $iindex, ByRef $titem)
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		$iret = _sendmessage($hwnd, $hdm_setitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem, $tmemmap)
		_memwrite($tmemmap, $titem)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $hdm_setitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $hdm_setitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrlheader_setitemalign($hwnd, $iindex, $ialign)
	Local $aalign[3] = [$hdf_left, $hdf_right, $hdf_center]
	Local $iformat = _guictrlheader_getitemformat($hwnd, $iindex)
	$iformat = BitAND($iformat, BitNOT($hdf_justifymask))
	$iformat = BitOR($iformat, $aalign[$ialign])
	Return _guictrlheader_setitemformat($hwnd, $iindex, $iformat)
EndFunc

Func _guictrlheader_setitembitmap($hwnd, $iindex, $hbitmap)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", BitOR($hdi_format, $hdi_bitmap))
	DllStructSetData($titem, "Fmt", $hdf_bitmap)
	DllStructSetData($titem, "hBMP", $hbitmap)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemdisplay($hwnd, $iindex, $idisplay)
	Local $iformat = BitAND(_guictrlheader_getitemformat($hwnd, $iindex), NOT $hdf_displaymask)
	If BitAND($idisplay, 1) <> 0 Then $iformat = BitOR($iformat, $hdf_bitmap)
	If BitAND($idisplay, 2) <> 0 Then $iformat = BitOR($iformat, $hdf_bitmap_on_right)
	If BitAND($idisplay, 4) <> 0 Then $iformat = BitOR($iformat, $hdf_ownerdraw)
	If BitAND($idisplay, 8) <> 0 Then $iformat = BitOR($iformat, $hdf_string)
	Return _guictrlheader_setitemformat($hwnd, $iindex, $iformat)
EndFunc

Func _guictrlheader_setitemflags($hwnd, $iindex, $iflags)
	Local $iformat = _guictrlheader_getitemformat($hwnd, $iindex)
	$iformat = BitAND($iformat, BitNOT($hdf_flagmask))
	If BitAND($iflags, 1) <> 0 Then $iformat = BitOR($iformat, $hdf_image)
	If BitAND($iflags, 2) <> 0 Then $iformat = BitOR($iformat, $hdf_rtlreading)
	If BitAND($iflags, 4) <> 0 Then $iformat = BitOR($iformat, $hdf_sortdown)
	If BitAND($iflags, 8) <> 0 Then $iformat = BitOR($iformat, $hdf_sortup)
	Return _guictrlheader_setitemformat($hwnd, $iindex, $iformat)
EndFunc

Func _guictrlheader_setitemformat($hwnd, $iindex, $iformat)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_format)
	DllStructSetData($titem, "Fmt", $iformat)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemimage($hwnd, $iindex, $iimage)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_image)
	DllStructSetData($titem, "Image", $iimage)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemorder($hwnd, $iindex, $iorder)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_order)
	DllStructSetData($titem, "Order", $iorder)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemparam($hwnd, $iindex, $iparam)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_param)
	DllStructSetData($titem, "Param", $iparam)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setitemtext($hwnd, $iindex, $stext)
	Local $bunicode = _guictrlheader_getunicodeformat($hwnd)
	Local $ibuffer, $pbuffer
	If $stext <> -1 Then
		$ibuffer = StringLen($stext) + 1
		Local $tbuffer
		If $bunicode Then
			$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
			$ibuffer *= 2
		Else
			$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
		EndIf
		DllStructSetData($tbuffer, "Text", $stext)
		$pbuffer = DllStructGetPtr($tbuffer)
	Else
		$ibuffer = 0
		$pbuffer = -1
	EndIf
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_text)
	DllStructSetData($titem, "TextMax", $ibuffer)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		DllStructSetData($titem, "Text", $pbuffer)
		$iret = _sendmessage($hwnd, $hdm_setitemw, $iindex, $titem, 0, "wparam", "struct*")
	Else
		Local $iitem = DllStructGetSize($titem)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
		If $stext <> -1 Then
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
		Else
			DllStructSetData($titem, "Text", -1)
		EndIf
		_memwrite($tmemmap, $titem, $pmemory, $iitem)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $hdm_setitemw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $hdm_setitema, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrlheader_setitemwidth($hwnd, $iindex, $iwidth)
	Local $titem = DllStructCreate($taghditem)
	DllStructSetData($titem, "Mask", $hdi_width)
	DllStructSetData($titem, "XY", $iwidth)
	Return _guictrlheader_setitem($hwnd, $iindex, $titem)
EndFunc

Func _guictrlheader_setorderarray($hwnd, ByRef $aorder)
	Local $tbuffer = DllStructCreate("int[" & $aorder[0] & "]")
	For $ii = 1 To $aorder[0]
		DllStructSetData($tbuffer, 1, $aorder[$ii], $ii)
	Next
	Local $iret
	If _winapi_inprocess($hwnd, $__g_hhdrlastwnd) Then
		$iret = _sendmessage($hwnd, $hdm_setorderarray, $aorder[0], $tbuffer, 0, "wparam", "struct*")
	Else
		Local $ibuffer = DllStructGetSize($tbuffer)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		_memwrite($tmemmap, $tbuffer)
		$iret = _sendmessage($hwnd, $hdm_setorderarray, $aorder[0], $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrlheader_setunicodeformat($hwnd, $bunicode)
	Return _sendmessage($hwnd, $hdm_setunicodeformat, $bunicode)
EndFunc

Global Const $lvgs_normal = 0
Global Const $lvgs_collapsed = 1
Global Const $lvgs_hidden = 2
Global Const $lvgs_noheader = 4
Global Const $lvgs_collapsible = 8
Global Const $lvgs_focused = 16
Global Const $lvgs_selected = 32
Global Const $lvgs_subseted = 64
Global Const $lvgs_subsetlinkfocused = 128
Global Const $lvggr_group = 0
Global Const $lvggr_header = 1
Global Const $lvggr_label = 2
Global Const $lvggr_subsetlink = 3
Global Const $lv_err = -1
Global Const $lvbkif_source_none = 0
Global Const $lvbkif_source_hbitmap = 1
Global Const $lvbkif_source_url = 2
Global Const $lvbkif_source_mask = 3
Global Const $lvbkif_style_normal = 0
Global Const $lvbkif_style_tile = 16
Global Const $lvbkif_style_mask = 16
Global Const $lvbkif_flag_tileoffset = 256
Global Const $lvbkif_type_watermark = 268435456
Global Const $lv_view_details = 1
Global Const $lv_view_icon = 0
Global Const $lv_view_list = 3
Global Const $lv_view_smallicon = 2
Global Const $lv_view_tile = 4
Global Const $lva_alignleft = 1
Global Const $lva_aligntop = 2
Global Const $lva_default = 0
Global Const $lva_snaptogrid = 5
Global Const $lvcdi_item = 0
Global Const $lvcdi_group = 1
Global Const $lvcf_alldata = 63
Global Const $lvcf_fmt = 1
Global Const $lvcf_image = 16
Global Const $lvcfmt_justifymask = 3
Global Const $lvcf_text = 4
Global Const $lvcf_width = 2
Global Const $lvcfmt_bitmap_on_right = 4096
Global Const $lvcfmt_center = 2
Global Const $lvcfmt_col_has_images = 32768
Global Const $lvcfmt_image = 2048
Global Const $lvcfmt_left = 0
Global Const $lvcfmt_right = 1
Global Const $lvcfmt_line_break = 1048576
Global Const $lvcfmt_fill = 2097152
Global Const $lvcfmt_wrap = 4194304
Global Const $lvcfmt_no_title = 8388608
Global Const $lvcfmt_tile_placementmask = BitOR($lvcfmt_line_break, $lvcfmt_fill)
Global Const $lvfi_nearestxy = 64
Global Const $lvfi_param = 1
Global Const $lvfi_partial = 8
Global Const $lvfi_string = 2
Global Const $lvfi_substring = 4
Global Const $lvfi_wrap = 32
Global Const $lvga_footer_left = 8
Global Const $lvga_footer_center = 16
Global Const $lvga_footer_right = 32
Global Const $lvga_header_left = 1
Global Const $lvga_header_center = 2
Global Const $lvga_header_right = 4
Global Const $lvgf_align = 8
Global Const $lvgf_descriptiontop = 1024
Global Const $lvgf_descriptionbottom = 2048
Global Const $lvgf_extendedimage = 8192
Global Const $lvgf_footer = 2
Global Const $lvgf_groupid = 16
Global Const $lvgf_header = 1
Global Const $lvgf_items = 16384
Global Const $lvgf_none = 0
Global Const $lvgf_state = 4
Global Const $lvgf_subset = 32768
Global Const $lvgf_subsetitems = 65536
Global Const $lvgf_subtitle = 256
Global Const $lvgf_task = 512
Global Const $lvgf_titleimage = 4096
Global Const $lvht_above = 8
Global Const $lvht_below = 16
Global Const $lvht_nowhere = 1
Global Const $lvht_onitemicon = 2
Global Const $lvht_onitemlabel = 4
Global Const $lvht_onitemstateicon = 8
Global Const $lvht_toleft = 64
Global Const $lvht_toright = 32
Global Const $lvht_onitem = BitOR($lvht_onitemicon, $lvht_onitemlabel, $lvht_onitemstateicon)
Global Const $lvht_ex_group_header = 268435456
Global Const $lvht_ex_group_footer = 536870912
Global Const $lvht_ex_group_collapse = 1073741824
Global Const $lvht_ex_group_background = -2147483648
Global Const $lvht_ex_group_stateicon = 16777216
Global Const $lvht_ex_group_subsetlink = 33554432
Global Const $lvht_ex_group = BitOR($lvht_ex_group_background, $lvht_ex_group_collapse, $lvht_ex_group_footer, $lvht_ex_group_header, $lvht_ex_group_stateicon, $lvht_ex_group_subsetlink)
Global Const $lvht_ex_oncontents = 67108864
Global Const $lvht_ex_footer = 134217728
Global Const $lvif_colfmt = 65536
Global Const $lvif_columns = 512
Global Const $lvif_groupid = 256
Global Const $lvif_image = 2
Global Const $lvif_indent = 16
Global Const $lvif_norecompute = 2048
Global Const $lvif_param = 4
Global Const $lvif_state = 8
Global Const $lvif_text = 1
Global Const $lvim_after = 1
Global Const $lvir_bounds = 0
Global Const $lvir_icon = 1
Global Const $lvir_label = 2
Global Const $lvir_selectbounds = 3
Global Const $lvis_cut = 4
Global Const $lvis_drophilited = 8
Global Const $lvis_focused = 1
Global Const $lvis_overlaymask = 3840
Global Const $lvis_selected = 2
Global Const $lvis_stateimagemask = 61440
Global Const $lvs_alignleft = 2048
Global Const $lvs_alignmask = 3072
Global Const $lvs_aligntop = 0
Global Const $lvs_autoarrange = 256
Global Const $lvs_default = 13
Global Const $lvs_editlabels = 512
Global Const $lvs_icon = 0
Global Const $lvs_list = 3
Global Const $lvs_nocolumnheader = 16384
Global Const $lvs_nolabelwrap = 128
Global Const $lvs_noscroll = 8192
Global Const $lvs_nosortheader = 32768
Global Const $lvs_ownerdata = 4096
Global Const $lvs_ownerdrawfixed = 1024
Global Const $lvs_report = 1
Global Const $lvs_shareimagelists = 64
Global Const $lvs_showselalways = 8
Global Const $lvs_singlesel = 4
Global Const $lvs_smallicon = 2
Global Const $lvs_sortascending = 16
Global Const $lvs_sortdescending = 32
Global Const $lvs_typemask = 3
Global Const $lvs_typestylemask = 64512
Global Const $lvs_ex_autoautoarrange = 16777216
Global Const $lvs_ex_autocheckselect = 134217728
Global Const $lvs_ex_autosizecolumns = 268435456
Global Const $lvs_ex_borderselect = 32768
Global Const $lvs_ex_checkboxes = 4
Global Const $lvs_ex_columnoverflow = -2147483648
Global Const $lvs_ex_columnsnappoints = 1073741824
Global Const $lvs_ex_doublebuffer = 65536
Global Const $lvs_ex_flatsb = 256
Global Const $lvs_ex_fullrowselect = 32
Global Const $lvs_ex_gridlines = 1
Global Const $lvs_ex_headerdragdrop = 16
Global Const $lvs_ex_headerinallviews = 33554432
Global Const $lvs_ex_hidelabels = 131072
Global Const $lvs_ex_infotip = 1024
Global Const $lvs_ex_justifycolumns = 2097152
Global Const $lvs_ex_labeltip = 16384
Global Const $lvs_ex_multiworkareas = 8192
Global Const $lvs_ex_oneclickactivate = 64
Global Const $lvs_ex_regional = 512
Global Const $lvs_ex_simpleselect = 1048576
Global Const $lvs_ex_snaptogrid = 524288
Global Const $lvs_ex_subitemimages = 2
Global Const $lvs_ex_trackselect = 8
Global Const $lvs_ex_transparentbkgnd = 4194304
Global Const $lvs_ex_transparentshadowtext = 8388608
Global Const $lvs_ex_twoclickactivate = 128
Global Const $lvs_ex_underlinecold = 4096
Global Const $lvs_ex_underlinehot = 2048
Global Const $gui_ss_default_listview = BitOR($lvs_showselalways, $lvs_singlesel)
Global Const $lvm_first = 4096
Global Const $lvm_approximateviewrect = ($lvm_first + 64)
Global Const $lvm_arrange = ($lvm_first + 22)
Global Const $lvm_canceleditlabel = ($lvm_first + 179)
Global Const $lvm_createdragimage = ($lvm_first + 33)
Global Const $lvm_deleteallitems = ($lvm_first + 9)
Global Const $lvm_deletecolumn = ($lvm_first + 28)
Global Const $lvm_deleteitem = ($lvm_first + 8)
Global Const $lvm_editlabela = ($lvm_first + 23)
Global Const $lvm_editlabelw = ($lvm_first + 118)
Global Const $lvm_editlabel = $lvm_editlabela
Global Const $lvm_enablegroupview = ($lvm_first + 157)
Global Const $lvm_ensurevisible = ($lvm_first + 19)
Global Const $lvm_finditem = ($lvm_first + 13)
Global Const $lvm_getbkcolor = ($lvm_first + 0)
Global Const $lvm_getbkimagea = ($lvm_first + 69)
Global Const $lvm_getbkimagew = ($lvm_first + 139)
Global Const $lvm_getcallbackmask = ($lvm_first + 10)
Global Const $lvm_getcolumna = ($lvm_first + 25)
Global Const $lvm_getcolumnw = ($lvm_first + 95)
Global Const $lvm_getcolumnorderarray = ($lvm_first + 59)
Global Const $lvm_getcolumnwidth = ($lvm_first + 29)
Global Const $lvm_getcountperpage = ($lvm_first + 40)
Global Const $lvm_geteditcontrol = ($lvm_first + 24)
Global Const $lvm_getemptytext = ($lvm_first + 204)
Global Const $lvm_getextendedlistviewstyle = ($lvm_first + 55)
Global Const $lvm_getfocusedgroup = ($lvm_first + 93)
Global Const $lvm_getfooterinfo = ($lvm_first + 206)
Global Const $lvm_getfooteritem = ($lvm_first + 208)
Global Const $lvm_getfooteritemrect = ($lvm_first + 207)
Global Const $lvm_getfooterrect = ($lvm_first + 205)
Global Const $lvm_getgroupcount = ($lvm_first + 152)
Global Const $lvm_getgroupinfo = ($lvm_first + 149)
Global Const $lvm_getgroupinfobyindex = ($lvm_first + 153)
Global Const $lvm_getgroupmetrics = ($lvm_first + 156)
Global Const $lvm_getgrouprect = ($lvm_first + 98)
Global Const $lvm_getgroupstate = ($lvm_first + 92)
Global Const $lvm_getheader = ($lvm_first + 31)
Global Const $lvm_gethotcursor = ($lvm_first + 63)
Global Const $lvm_gethotitem = ($lvm_first + 61)
Global Const $lvm_gethovertime = ($lvm_first + 72)
Global Const $lvm_getimagelist = ($lvm_first + 2)
Global Const $lvm_getinsertmark = ($lvm_first + 167)
Global Const $lvm_getinsertmarkcolor = ($lvm_first + 171)
Global Const $lvm_getinsertmarkrect = ($lvm_first + 169)
Global Const $lvm_getisearchstringa = ($lvm_first + 52)
Global Const $lvm_getisearchstringw = ($lvm_first + 117)
Global Const $lvm_getitema = ($lvm_first + 5)
Global Const $lvm_getitemw = ($lvm_first + 75)
Global Const $lvm_getitemcount = ($lvm_first + 4)
Global Const $lvm_getitemindexrect = ($lvm_first + 209)
Global Const $lvm_getitemposition = ($lvm_first + 16)
Global Const $lvm_getitemrect = ($lvm_first + 14)
Global Const $lvm_getitemspacing = ($lvm_first + 51)
Global Const $lvm_getitemstate = ($lvm_first + 44)
Global Const $lvm_getitemtexta = ($lvm_first + 45)
Global Const $lvm_getitemtextw = ($lvm_first + 115)
Global Const $lvm_getnextitem = ($lvm_first + 12)
Global Const $lvm_getnextitemindex = ($lvm_first + 211)
Global Const $lvm_getnumberofworkareas = ($lvm_first + 73)
Global Const $lvm_getorigin = ($lvm_first + 41)
Global Const $lvm_getoutlinecolor = ($lvm_first + 176)
Global Const $lvm_getselectedcolumn = ($lvm_first + 174)
Global Const $lvm_getselectedcount = ($lvm_first + 50)
Global Const $lvm_getselectionmark = ($lvm_first + 66)
Global Const $lvm_getstringwidtha = ($lvm_first + 17)
Global Const $lvm_getstringwidthw = ($lvm_first + 87)
Global Const $lvm_getsubitemrect = ($lvm_first + 56)
Global Const $lvm_gettextbkcolor = ($lvm_first + 37)
Global Const $lvm_gettextcolor = ($lvm_first + 35)
Global Const $lvm_gettileinfo = ($lvm_first + 165)
Global Const $lvm_gettileviewinfo = ($lvm_first + 163)
Global Const $lvm_gettooltips = ($lvm_first + 78)
Global Const $lvm_gettopindex = ($lvm_first + 39)
Global Const $lvm_getunicodeformat = 8192 + 6
Global Const $lvm_getview = ($lvm_first + 143)
Global Const $lvm_getviewrect = ($lvm_first + 34)
Global Const $lvm_getworkareas = ($lvm_first + 70)
Global Const $lvm_hasgroup = ($lvm_first + 161)
Global Const $lvm_hittest = ($lvm_first + 18)
Global Const $lvm_insertcolumna = ($lvm_first + 27)
Global Const $lvm_insertcolumnw = ($lvm_first + 97)
Global Const $lvm_insertgroup = ($lvm_first + 145)
Global Const $lvm_insertgroupsorted = ($lvm_first + 159)
Global Const $lvm_insertitema = ($lvm_first + 7)
Global Const $lvm_insertitemw = ($lvm_first + 77)
Global Const $lvm_insertmarkhittest = ($lvm_first + 168)
Global Const $lvm_isgroupviewenabled = ($lvm_first + 175)
Global Const $lvm_isitemvisible = ($lvm_first + 182)
Global Const $lvm_mapidtoindex = ($lvm_first + 181)
Global Const $lvm_mapindextoid = ($lvm_first + 180)
Global Const $lvm_movegroup = ($lvm_first + 151)
Global Const $lvm_redrawitems = ($lvm_first + 21)
Global Const $lvm_removeallgroups = ($lvm_first + 160)
Global Const $lvm_removegroup = ($lvm_first + 150)
Global Const $lvm_scroll = ($lvm_first + 20)
Global Const $lvm_setbkcolor = ($lvm_first + 1)
Global Const $lvm_setbkimagea = ($lvm_first + 68)
Global Const $lvm_setbkimagew = ($lvm_first + 138)
Global Const $lvm_setcallbackmask = ($lvm_first + 11)
Global Const $lvm_setcolumna = ($lvm_first + 26)
Global Const $lvm_setcolumnw = ($lvm_first + 96)
Global Const $lvm_setcolumnorderarray = ($lvm_first + 58)
Global Const $lvm_setcolumnwidth = ($lvm_first + 30)
Global Const $lvm_setextendedlistviewstyle = ($lvm_first + 54)
Global Const $lvm_setgroupinfo = ($lvm_first + 147)
Global Const $lvm_setgroupmetrics = ($lvm_first + 155)
Global Const $lvm_sethotcursor = ($lvm_first + 62)
Global Const $lvm_sethotitem = ($lvm_first + 60)
Global Const $lvm_sethovertime = ($lvm_first + 71)
Global Const $lvm_seticonspacing = ($lvm_first + 53)
Global Const $lvm_setimagelist = ($lvm_first + 3)
Global Const $lvm_setinfotip = ($lvm_first + 173)
Global Const $lvm_setinsertmark = ($lvm_first + 166)
Global Const $lvm_setinsertmarkcolor = ($lvm_first + 170)
Global Const $lvm_setitema = ($lvm_first + 6)
Global Const $lvm_setitemw = ($lvm_first + 76)
Global Const $lvm_setitemcount = ($lvm_first + 47)
Global Const $lvm_setitemindexstate = ($lvm_first + 210)
Global Const $lvm_setitemposition = ($lvm_first + 15)
Global Const $lvm_setitemposition32 = ($lvm_first + 49)
Global Const $lvm_setitemstate = ($lvm_first + 43)
Global Const $lvm_setitemtexta = ($lvm_first + 46)
Global Const $lvm_setitemtextw = ($lvm_first + 116)
Global Const $lvm_setoutlinecolor = ($lvm_first + 177)
Global Const $lvm_setselectedcolumn = ($lvm_first + 140)
Global Const $lvm_setselectionmark = ($lvm_first + 67)
Global Const $lvm_settextbkcolor = ($lvm_first + 38)
Global Const $lvm_settextcolor = ($lvm_first + 36)
Global Const $lvm_settileinfo = ($lvm_first + 164)
Global Const $lvm_settileviewinfo = ($lvm_first + 162)
Global Const $lvm_settilewidth = ($lvm_first + 141)
Global Const $lvm_settooltips = ($lvm_first + 74)
Global Const $lvm_setunicodeformat = 8192 + 5
Global Const $lvm_setview = ($lvm_first + 142)
Global Const $lvm_setworkareas = ($lvm_first + 65)
Global Const $lvm_sortgroups = ($lvm_first + 158)
Global Const $lvm_sortitems = ($lvm_first + 48)
Global Const $lvm_sortitemsex = ($lvm_first + 81)
Global Const $lvm_subitemhittest = ($lvm_first + 57)
Global Const $lvm_update = ($lvm_first + 42)
Global Const $lvn_first = -100
Global Const $lvn_last = -199
Global Const $lvn_begindrag = ($lvn_first - 9)
Global Const $lvn_beginlabeledita = ($lvn_first - 5)
Global Const $lvn_beginlabeleditw = ($lvn_first - 75)
Global Const $lvn_beginrdrag = ($lvn_first - 11)
Global Const $lvn_beginscroll = ($lvn_first - 80)
Global Const $lvn_columnclick = ($lvn_first - 8)
Global Const $lvn_columndropdown = ($lvn_first - 64)
Global Const $lvn_columnoverflowclick = ($lvn_first - 66)
Global Const $lvn_deleteallitems = ($lvn_first - 4)
Global Const $lvn_deleteitem = ($lvn_first - 3)
Global Const $lvn_endlabeledita = ($lvn_first - 6)
Global Const $lvn_endlabeleditw = ($lvn_first - 76)
Global Const $lvn_endscroll = ($lvn_first - 81)
Global Const $lvn_getdispinfoa = ($lvn_first - 50)
Global Const $lvn_getdispinfow = ($lvn_first - 77)
Global Const $lvn_getdispinfo = $lvn_getdispinfoa
Global Const $lvn_getemptymarkup = ($lvn_first - 87)
Global Const $lvn_getinfotipa = ($lvn_first - 57)
Global Const $lvn_getinfotipw = ($lvn_first - 58)
Global Const $lvn_hottrack = ($lvn_first - 21)
Global Const $lvn_incrementalsearcha = ($lvn_first - 62)
Global Const $lvn_incrementalsearchw = ($lvn_first - 63)
Global Const $lvn_insertitem = ($lvn_first - 2)
Global Const $lvn_itemactivate = ($lvn_first - 14)
Global Const $lvn_itemchanged = ($lvn_first - 1)
Global Const $lvn_itemchanging = ($lvn_first + 0)
Global Const $lvn_keydown = ($lvn_first - 55)
Global Const $lvn_linkclick = ($lvn_first - 84)
Global Const $lvn_marqueebegin = ($lvn_first - 56)
Global Const $lvn_odcachehint = ($lvn_first - 13)
Global Const $lvn_odfinditema = ($lvn_first - 52)
Global Const $lvn_odfinditemw = ($lvn_first - 79)
Global Const $lvn_odfinditem = $lvn_odfinditema
Global Const $lvn_odstatechanged = ($lvn_first - 15)
Global Const $lvn_setdispinfoa = ($lvn_first - 51)
Global Const $lvn_setdispinfow = ($lvn_first - 78)
Global Const $lvni_above = 256
Global Const $lvni_below = 512
Global Const $lvni_toleft = 1024
Global Const $lvni_toright = 2048
Global Const $lvni_all = 0
Global Const $lvni_cut = 4
Global Const $lvni_drophilited = 8
Global Const $lvni_focused = 1
Global Const $lvni_selected = 2
Global Const $lvscw_autosize = -1
Global Const $lvscw_autosize_useheader = -2
Global Const $lvsicf_noinvalidateall = 1
Global Const $lvsicf_noscroll = 2
Global Const $lvsil_normal = 0
Global Const $lvsil_small = 1
Global Const $lvsil_state = 2
Global $__g_hlvlastwnd
Global $__g_illistviewsortinfosize = 11
Global $__g_alistviewsortinfo[1][$__g_illistviewsortinfosize]
Global Const $__listviewconstant_classname = "SysListView32"
Global Const $__listviewconstant_ws_maximizebox = 65536
Global Const $__listviewconstant_ws_minimizebox = 131072
Global Const $__listviewconstant_gui_rundefmsg = "GUI_RUNDEFMSG"
Global Const $__listviewconstant_wm_setredraw = 11
Global Const $__listviewconstant_wm_setfont = 48
Global Const $__listviewconstant_wm_notify = 78
Global Const $__listviewconstant_default_gui_font = 17
Global Const $__listviewconstant_ild_transparent = 1
Global Const $__listviewconstant_ild_blend25 = 2
Global Const $__listviewconstant_ild_blend50 = 4
Global Const $__listviewconstant_ild_mask = 16
Global Const $__listviewconstant_vk_down = 40
Global Const $__listviewconstant_vk_end = 35
Global Const $__listviewconstant_vk_home = 36
Global Const $__listviewconstant_vk_left = 37
Global Const $__listviewconstant_vk_next = 34
Global Const $__listviewconstant_vk_prior = 33
Global Const $__listviewconstant_vk_right = 39
Global Const $__listviewconstant_vk_up = 38
Global Const $taglvbkimage = "ulong Flags;hwnd hBmp;ptr Image;uint ImageMax;int XOffPercent;int YOffPercent"
Global Const $taglvcolumn = "uint Mask;int Fmt;int CX;ptr Text;int TextMax;int SubItem;int Image;int Order;int cxMin;int cxDefault;int cxIdeal"
Global Const $taglvgroup = "uint Size;uint Mask;ptr Header;int HeaderMax;ptr Footer;int FooterMax;int GroupID;uint StateMask;uint State;uint Align;" & "ptr  pszSubtitle;uint cchSubtitle;ptr pszTask;uint cchTask;ptr pszDescriptionTop;uint cchDescriptionTop;ptr pszDescriptionBottom;" & "uint cchDescriptionBottom;int iTitleImage;int iExtendedImage;int iFirstItem;uint cItems;ptr pszSubsetTitle;uint cchSubsetTitle"
Global Const $taglvinsertmark = "uint Size;dword Flags;int Item;dword Reserved"
Global Const $taglvsetinfotip = "uint Size;dword Flags;ptr Text;int Item;int SubItem"

Func _guictrllistview_addarray($hwnd, ByRef $aitems)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $titem = DllStructCreate($taglvitem)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	DllStructSetData($titem, "Mask", $lvif_text)
	DllStructSetData($titem, "Text", DllStructGetPtr($tbuffer))
	DllStructSetData($titem, "TextMax", 4096)
	Local $ilastitem = _guictrllistview_getitemcount($hwnd)
	_guictrllistview_beginupdate($hwnd)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			For $ii = 0 To UBound($aitems) - 1
				DllStructSetData($titem, "Item", $ii)
				DllStructSetData($titem, "SubItem", 0)
				DllStructSetData($tbuffer, "Text", $aitems[$ii][0])
				_sendmessage($hwnd, $lvm_insertitemw, 0, $titem, 0, "wparam", "struct*")
				For $ij = 1 To UBound($aitems, $ubound_columns) - 1
					DllStructSetData($titem, "SubItem", $ij)
					DllStructSetData($tbuffer, "Text", $aitems[$ii][$ij])
					_sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*")
				Next
			Next
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			For $ii = 0 To UBound($aitems) - 1
				DllStructSetData($titem, "Item", $ii + $ilastitem)
				DllStructSetData($titem, "SubItem", 0)
				DllStructSetData($tbuffer, "Text", $aitems[$ii][0])
				_memwrite($tmemmap, $titem, $pmemory, $iitem)
				_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
				If $bunicode Then
					_sendmessage($hwnd, $lvm_insertitemw, 0, $pmemory, 0, "wparam", "ptr")
				Else
					_sendmessage($hwnd, $lvm_insertitema, 0, $pmemory, 0, "wparam", "ptr")
				EndIf
				For $ij = 1 To UBound($aitems, $ubound_columns) - 1
					DllStructSetData($titem, "SubItem", $ij)
					DllStructSetData($tbuffer, "Text", $aitems[$ii][$ij])
					_memwrite($tmemmap, $titem, $pmemory, $iitem)
					_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
					If $bunicode Then
						_sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
					Else
						_sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
					EndIf
				Next
			Next
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		For $ii = 0 To UBound($aitems) - 1
			DllStructSetData($titem, "Item", $ii + $ilastitem)
			DllStructSetData($titem, "SubItem", 0)
			DllStructSetData($tbuffer, "Text", $aitems[$ii][0])
			If $bunicode Then
				GUICtrlSendMsg($hwnd, $lvm_insertitemw, 0, $pitem)
			Else
				GUICtrlSendMsg($hwnd, $lvm_insertitema, 0, $pitem)
			EndIf
			For $ij = 1 To UBound($aitems, $ubound_columns) - 1
				DllStructSetData($titem, "SubItem", $ij)
				DllStructSetData($tbuffer, "Text", $aitems[$ii][$ij])
				If $bunicode Then
					GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem)
				Else
					GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem)
				EndIf
			Next
		Next
	EndIf
	_guictrllistview_endupdate($hwnd)
EndFunc

Func _guictrllistview_addcolumn($hwnd, $stext, $iwidth = 50, $ialign = -1, $iimage = -1, $bonright = False)
	Return _guictrllistview_insertcolumn($hwnd, _guictrllistview_getcolumncount($hwnd), $stext, $iwidth, $ialign, $iimage, $bonright)
EndFunc

Func _guictrllistview_additem($hwnd, $stext, $iimage = -1, $iparam = 0)
	Return _guictrllistview_insertitem($hwnd, $stext, -1, $iimage, $iparam)
EndFunc

Func _guictrllistview_addsubitem($hwnd, $iindex, $stext, $isubitem, $iimage = -1)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $titem = DllStructCreate($taglvitem)
	Local $imask = $lvif_text
	If $iimage <> -1 Then $imask = BitOR($imask, $lvif_image)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($titem, "Mask", $imask)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "Image", $iimage)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($titem, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		DllStructSetData($titem, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_approximateviewheight($hwnd, $icount = -1, $icx = -1, $icy = -1)
	If IsHWnd($hwnd) Then
		Return BitShift((_sendmessage($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))), 16)
	Else
		Return BitShift((GUICtrlSendMsg($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))), 16)
	EndIf
EndFunc

Func _guictrllistview_approximateviewrect($hwnd, $icount = -1, $icx = -1, $icy = -1)
	Local $iview
	If IsHWnd($hwnd) Then
		$iview = _sendmessage($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))
	Else
		$iview = GUICtrlSendMsg($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))
	EndIf
	Local $aview[2]
	$aview[0] = BitAND($iview, 65535)
	$aview[1] = BitShift($iview, 16)
	Return $aview
EndFunc

Func _guictrllistview_approximateviewwidth($hwnd, $icount = -1, $icx = -1, $icy = -1)
	If IsHWnd($hwnd) Then
		Return BitAND((_sendmessage($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))), 65535)
	Else
		Return BitAND((GUICtrlSendMsg($hwnd, $lvm_approximateviewrect, $icount, _winapi_makelong($icx, $icy))), 65535)
	EndIf
EndFunc

Func _guictrllistview_arrange($hwnd, $iarrange = 0)
	Local $aarrange[4] = [$lva_default, $lva_alignleft, $lva_aligntop, $lva_snaptogrid]
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_arrange, $aarrange[$iarrange]) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_arrange, $aarrange[$iarrange], 0) <> 0
	EndIf
EndFunc

Func __guictrllistview_arraydelete(ByRef $avarray, $ielement)
	If NOT IsArray($avarray) Then Return SetError(1, 0, "")
	Local $iupper = UBound($avarray)
	If $iupper = 1 Then
		SetError(2)
		Return ""
	EndIf
	Local $avnewarray[$iupper - 1][$__g_illistviewsortinfosize]
	$avnewarray[0][0] = $avarray[0][0]
	If $ielement < 0 Then
		$ielement = 0
	EndIf
	If $ielement > ($iupper - 1) Then
		$ielement = ($iupper - 1)
	EndIf
	If $ielement > 0 Then
		For $icntr = 0 To $ielement - 1
			For $x = 1 To $__g_illistviewsortinfosize - 1
				$avnewarray[$icntr][$x] = $avarray[$icntr][$x]
			Next
		Next
	EndIf
	If $ielement < ($iupper - 1) Then
		For $icntr = ($ielement + 1) To ($iupper - 1)
			For $x = 1 To $__g_illistviewsortinfosize - 1
				$avnewarray[$icntr - 1][$x] = $avarray[$icntr][$x]
			Next
		Next
	EndIf
	$avarray = $avnewarray
	SetError(0)
	Return 1
EndFunc

Func _guictrllistview_beginupdate($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $__listviewconstant_wm_setredraw, False) = 0
EndFunc

Func _guictrllistview_canceleditlabel($hwnd)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lvm_canceleditlabel)
	Else
		GUICtrlSendMsg($hwnd, $lvm_canceleditlabel, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_clickitem($hwnd, $iindex, $sbutton = "left", $bmove = False, $iclicks = 1, $ispeed = 1)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	_guictrllistview_ensurevisible($hwnd, $iindex, False)
	Local $trect = _guictrllistview_getitemrectex($hwnd, $iindex, $lvir_label)
	Local $tpoint = _winapi_pointfromrect($trect, True)
	$tpoint = _winapi_clienttoscreen($hwnd, $tpoint)
	Local $ix, $iy
	_winapi_getxyfrompoint($tpoint, $ix, $iy)
	Local $imode = Opt("MouseCoordMode", 1)
	If NOT $bmove Then
		Local $apos = MouseGetPos()
		_winapi_showcursor(False)
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
		MouseMove($apos[0], $apos[1], 0)
		_winapi_showcursor(True)
	Else
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
	EndIf
	Opt("MouseCoordMode", $imode)
EndFunc

Func _guictrllistview_copyitems($hwnd_source, $hwnd_destination, $bdelflag = False)
	Local $a_indices, $titem = DllStructCreate($taglvitem), $iindex
	Local $icols = _guictrllistview_getcolumncount($hwnd_source)
	Local $iitems = _guictrllistview_getitemcount($hwnd_source)
	_guictrllistview_beginupdate($hwnd_source)
	_guictrllistview_beginupdate($hwnd_destination)
	If BitAND(_guictrllistview_getextendedlistviewstyle($hwnd_source), $lvs_ex_checkboxes) == $lvs_ex_checkboxes Then
		For $i = 0 To $iitems - 1
			If (_guictrllistview_getitemchecked($hwnd_source, $i)) Then
				If IsArray($a_indices) Then
					ReDim $a_indices[UBound($a_indices) + 1]
				Else
					Local $a_indices[2]
				EndIf
				$a_indices[0] = $a_indices[0] + 1
				$a_indices[UBound($a_indices) - 1] = $i
			EndIf
		Next
		If (IsArray($a_indices)) Then
			For $i = 1 To $a_indices[0]
				DllStructSetData($titem, "Mask", BitOR($lvif_groupid, $lvif_image, $lvif_indent, $lvif_param, $lvif_state))
				DllStructSetData($titem, "Item", $a_indices[$i])
				DllStructSetData($titem, "SubItem", 0)
				DllStructSetData($titem, "StateMask", -1)
				_guictrllistview_getitemex($hwnd_source, $titem)
				$iindex = _guictrllistview_additem($hwnd_destination, _guictrllistview_getitemtext($hwnd_source, $a_indices[$i], 0), DllStructGetData($titem, "Image"))
				_guictrllistview_setitemchecked($hwnd_destination, $iindex)
				For $x = 1 To $icols - 1
					DllStructSetData($titem, "Item", $a_indices[$i])
					DllStructSetData($titem, "SubItem", $x)
					_guictrllistview_getitemex($hwnd_source, $titem)
					_guictrllistview_addsubitem($hwnd_destination, $iindex, _guictrllistview_getitemtext($hwnd_source, $a_indices[$i], $x), $x, DllStructGetData($titem, "Image"))
				Next
			Next
			If $bdelflag Then
				For $i = $a_indices[0] To 1 Step -1
					_guictrllistview_deleteitem($hwnd_source, $a_indices[$i])
				Next
			EndIf
		EndIf
	EndIf
	If (_guictrllistview_getselectedcount($hwnd_source)) Then
		$a_indices = _guictrllistview_getselectedindices($hwnd_source, 1)
		For $i = 1 To $a_indices[0]
			DllStructSetData($titem, "Mask", BitOR($lvif_groupid, $lvif_image, $lvif_indent, $lvif_param, $lvif_state))
			DllStructSetData($titem, "Item", $a_indices[$i])
			DllStructSetData($titem, "SubItem", 0)
			DllStructSetData($titem, "StateMask", -1)
			_guictrllistview_getitemex($hwnd_source, $titem)
			$iindex = _guictrllistview_additem($hwnd_destination, _guictrllistview_getitemtext($hwnd_source, $a_indices[$i], 0), DllStructGetData($titem, "Image"))
			For $x = 1 To $icols - 1
				DllStructSetData($titem, "Item", $a_indices[$i])
				DllStructSetData($titem, "SubItem", $x)
				_guictrllistview_getitemex($hwnd_source, $titem)
				_guictrllistview_addsubitem($hwnd_destination, $iindex, _guictrllistview_getitemtext($hwnd_source, $a_indices[$i], $x), $x, DllStructGetData($titem, "Image"))
			Next
		Next
		_guictrllistview_setitemselected($hwnd_source, -1, False)
		If $bdelflag Then
			For $i = $a_indices[0] To 1 Step -1
				_guictrllistview_deleteitem($hwnd_source, $a_indices[$i])
			Next
		EndIf
	EndIf
	_guictrllistview_endupdate($hwnd_source)
	_guictrllistview_endupdate($hwnd_destination)
EndFunc

Func _guictrllistview_create($hwnd, $sheadertext, $ix, $iy, $iwidth = 150, $iheight = 150, $istyle = 13, $iexstyle = 0, $bcoinit = False)
	If NOT IsHWnd($hwnd) Then Return SetError(1, 0, 0)
	If NOT IsString($sheadertext) Then Return SetError(2, 0, 0)
	If $iwidth = -1 Then $iwidth = 150
	If $iheight = -1 Then $iheight = 150
	If $istyle = -1 Then $istyle = $lvs_default
	If $iexstyle = -1 Then $iexstyle = 0
	Local Const $s_ok = 0
	Local Const $s_false = 1
	Local Const $rpc_e_changed_mode = -2147417850
	Local Const $e_invalidarg = -2147024809
	Local Const $e_outofmemory = -2147024882
	Local Const $e_unexpected = -2147418113
	Local $sseparatorchar = Opt("GUIDataSeparatorChar")
	Local Const $coinit_apartmentthreaded = 2
	Local $istr_len = StringLen($sheadertext)
	If $istr_len Then $sheadertext = StringSplit($sheadertext, $sseparatorchar)
	$istyle = BitOR($__udfguiconstant_ws_child, $__udfguiconstant_ws_visible, $istyle)
	If $bcoinit Then
		Local $aresult = DllCall("ole32.dll", "long", "CoInitializeEx", "ptr", 0, "dword", $coinit_apartmentthreaded)
		If @error Then Return SetError(@error, @extended, 0)
		Switch $aresult[0]
			Case $s_ok
			Case $s_false
			Case $rpc_e_changed_mode
			Case $e_invalidarg
			Case $e_outofmemory
			Case $e_unexpected
		EndSwitch
	EndIf
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $hlist = _winapi_createwindowex($iexstyle, $__listviewconstant_classname, "", $istyle, $ix, $iy, $iwidth, $iheight, $hwnd, $nctrlid)
	_sendmessage($hlist, $__listviewconstant_wm_setfont, _winapi_getstockobject($__listviewconstant_default_gui_font), True)
	If $istr_len Then
		For $x = 1 To $sheadertext[0]
			_guictrllistview_insertcolumn($hlist, $x - 1, $sheadertext[$x], 75)
		Next
	EndIf
	Return $hlist
EndFunc

Func _guictrllistview_createdragimage($hwnd, $iindex)
	Local $adrag[3]
	Local $tpoint = DllStructCreate($tagpoint)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$adrag[0] = _sendmessage($hwnd, $lvm_createdragimage, $iindex, $tpoint, 0, "wparam", "struct*", "handle")
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ipoint, $tmemmap)
			$adrag[0] = _sendmessage($hwnd, $lvm_createdragimage, $iindex, $pmemory, 0, "wparam", "ptr", "handle")
			_memread($tmemmap, $pmemory, $tpoint, $ipoint)
			_memfree($tmemmap)
		EndIf
	Else
		$adrag[0] = Ptr(GUICtrlSendMsg($hwnd, $lvm_createdragimage, $iindex, DllStructGetPtr($tpoint)))
	EndIf
	$adrag[1] = DllStructGetData($tpoint, "X")
	$adrag[2] = DllStructGetData($tpoint, "Y")
	Return $adrag
EndFunc

Func _guictrllistview_createsolidbitmap($hwnd, $icolor, $iwidth, $iheight)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _winapi_createsolidbitmap($hwnd, $icolor, $iwidth, $iheight)
EndFunc

Func _guictrllistview_deleteallitems($hwnd)
	If _guictrllistview_getitemcount($hwnd) = 0 Then Return True
	Local $vcid = 0
	If IsHWnd($hwnd) Then
		$vcid = _winapi_getdlgctrlid($hwnd)
	Else
		$vcid = $hwnd
		$hwnd = GUICtrlGetHandle($hwnd)
	EndIf
	If $vcid < $_udf_startid Then
		Local $iparam = 0
		For $iindex = _guictrllistview_getitemcount($hwnd) - 1 To 0 Step -1
			$iparam = _guictrllistview_getitemparam($hwnd, $iindex)
			If GUICtrlGetState($iparam) > 0 AND GUICtrlGetHandle($iparam) = 0 Then
				GUICtrlDelete($iparam)
			EndIf
		Next
		If _guictrllistview_getitemcount($hwnd) = 0 Then Return True
	EndIf
	Return _sendmessage($hwnd, $lvm_deleteallitems) <> 0
EndFunc

Func _guictrllistview_deletecolumn($hwnd, $icol)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_deletecolumn, $icol) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_deletecolumn, $icol, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_deleteitem($hwnd, $iindex)
	Local $vcid = 0
	If IsHWnd($hwnd) Then
		$vcid = _winapi_getdlgctrlid($hwnd)
	Else
		$vcid = $hwnd
		$hwnd = GUICtrlGetHandle($hwnd)
	EndIf
	If $vcid < $_udf_startid Then
		Local $iparam = _guictrllistview_getitemparam($hwnd, $iindex)
		If GUICtrlGetState($iparam) > 0 AND GUICtrlGetHandle($iparam) = 0 Then
			If GUICtrlDelete($iparam) Then
				Return True
			EndIf
		EndIf
	EndIf
	Return _sendmessage($hwnd, $lvm_deleteitem, $iindex) <> 0
EndFunc

Func _guictrllistview_deleteitemsselected($hwnd)
	Local $iitemcount = _guictrllistview_getitemcount($hwnd)
	If _guictrllistview_getselectedcount($hwnd) = $iitemcount Then
		Return _guictrllistview_deleteallitems($hwnd)
	Else
		Local $aselected = _guictrllistview_getselectedindices($hwnd, True)
		If NOT IsArray($aselected) Then Return SetError($lv_err, $lv_err, 0)
		_guictrllistview_setitemselected($hwnd, -1, False)
		Local $vcid = 0, $inative_delete, $iudf_delete
		If IsHWnd($hwnd) Then
			$vcid = _winapi_getdlgctrlid($hwnd)
		Else
			$vcid = $hwnd
			$hwnd = GUICtrlGetHandle($hwnd)
		EndIf
		For $iindex = $aselected[0] To 1 Step -1
			If $vcid < $_udf_startid Then
				Local $iparam = _guictrllistview_getitemparam($hwnd, $aselected[$iindex])
				If GUICtrlGetState($iparam) > 0 AND GUICtrlGetHandle($iparam) = 0 Then
					$inative_delete = GUICtrlDelete($iparam)
					If $inative_delete Then ContinueLoop
				EndIf
			EndIf
			$iudf_delete = _sendmessage($hwnd, $lvm_deleteitem, $aselected[$iindex])
			If $inative_delete + $iudf_delete = 0 Then
				ExitLoop
			EndIf
		Next
		Return NOT $iindex
	EndIf
EndFunc

Func _guictrllistview_destroy(ByRef $hwnd)
	If NOT _winapi_isclassname($hwnd, $__listviewconstant_classname) Then Return SetError(2, 2, False)
	Local $idestroyed = 0
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			Local $nctrlid = _winapi_getdlgctrlid($hwnd)
			Local $hparent = _winapi_getparent($hwnd)
			$idestroyed = _winapi_destroywindow($hwnd)
			Local $iret = __udf_freeglobalid($hparent, $nctrlid)
			If NOT $iret Then
			EndIf
		Else
			Return SetError(1, 1, False)
		EndIf
	Else
		$idestroyed = GUICtrlDelete($hwnd)
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func __guictrllistview_draw($hwnd, $iindex, $hdc, $ix, $iy, $istyle = 0)
	Local $iflags = 0
	If BitAND($istyle, 1) <> 0 Then $iflags = BitOR($iflags, $__listviewconstant_ild_transparent)
	If BitAND($istyle, 2) <> 0 Then $iflags = BitOR($iflags, $__listviewconstant_ild_blend25)
	If BitAND($istyle, 4) <> 0 Then $iflags = BitOR($iflags, $__listviewconstant_ild_blend50)
	If BitAND($istyle, 8) <> 0 Then $iflags = BitOR($iflags, $__listviewconstant_ild_mask)
	Local $aresult = DllCall("comctl32.dll", "bool", "ImageList_Draw", "handle", $hwnd, "int", $iindex, "handle", $hdc, "int", $ix, "int", $iy, "uint", $iflags)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _guictrllistview_drawdragimage(ByRef $hwnd, ByRef $adrag)
	Local $hdc = _winapi_getwindowdc($hwnd)
	Local $tpoint = _winapi_getmousepos(True, $hwnd)
	_winapi_invalidaterect($hwnd)
	__guictrllistview_draw($adrag[0], 0, $hdc, DllStructGetData($tpoint, "X"), DllStructGetData($tpoint, "Y"))
	_winapi_releasedc($hwnd, $hdc)
EndFunc

Func _guictrllistview_editlabel($hwnd, $iindex)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $aresult
	If IsHWnd($hwnd) Then
		$aresult = DllCall("user32.dll", "hwnd", "SetFocus", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult = 0 Then Return 0
		If $bunicode Then
			Return _sendmessage($hwnd, $lvm_editlabelw, $iindex, 0, 0, "wparam", "lparam", "hwnd")
		Else
			Return _sendmessage($hwnd, $lvm_editlabel, $iindex, 0, 0, "wparam", "lparam", "hwnd")
		EndIf
	Else
		$aresult = DllCall("user32.dll", "hwnd", "SetFocus", "hwnd", GUICtrlGetHandle($hwnd))
		If @error Then Return SetError(@error, @extended, 0)
		If $aresult = 0 Then Return 0
		If $bunicode Then
			Return HWnd(GUICtrlSendMsg($hwnd, $lvm_editlabelw, $iindex, 0))
		Else
			Return HWnd(GUICtrlSendMsg($hwnd, $lvm_editlabel, $iindex, 0))
		EndIf
	EndIf
EndFunc

Func _guictrllistview_enablegroupview($hwnd, $benable = True)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_enablegroupview, $benable)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_enablegroupview, $benable, 0)
	EndIf
EndFunc

Func _guictrllistview_endupdate($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $__listviewconstant_wm_setredraw, True) = 0
EndFunc

Func _guictrllistview_ensurevisible($hwnd, $iindex, $bpartialok = False)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_ensurevisible, $iindex, $bpartialok)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_ensurevisible, $iindex, $bpartialok)
	EndIf
EndFunc

Func _guictrllistview_findintext($hwnd, $stext, $istart = -1, $bwrapok = True, $breverse = False)
	Local $icount = _guictrllistview_getitemcount($hwnd)
	Local $icolumns = _guictrllistview_getcolumncount($hwnd)
	If $icolumns = 0 Then $icolumns = 1
	If $breverse AND $istart = -1 Then Return -1
	Local $slist
	If $breverse Then
		For $ii = $istart - 1 To 0 Step -1
			For $ij = 0 To $icolumns - 1
				$slist = _guictrllistview_getitemtext($hwnd, $ii, $ij)
				If StringInStr($slist, $stext) Then Return $ii
			Next
		Next
	Else
		For $ii = $istart + 1 To $icount - 1
			For $ij = 0 To $icolumns - 1
				$slist = _guictrllistview_getitemtext($hwnd, $ii, $ij)
				If StringInStr($slist, $stext) Then Return $ii
			Next
		Next
	EndIf
	If (($istart = -1) OR NOT $bwrapok) AND NOT $breverse Then Return -1
	If $breverse AND $bwrapok Then
		For $ii = $icount - 1 To $istart + 1 Step -1
			For $ij = 0 To $icolumns - 1
				$slist = _guictrllistview_getitemtext($hwnd, $ii, $ij)
				If StringInStr($slist, $stext) Then Return $ii
			Next
		Next
	Else
		For $ii = 0 To $istart - 1
			For $ij = 0 To $icolumns - 1
				$slist = _guictrllistview_getitemtext($hwnd, $ii, $ij)
				If StringInStr($slist, $stext) Then Return $ii
			Next
		Next
	EndIf
	Return -1
EndFunc

Func _guictrllistview_finditem($hwnd, $istart, ByRef $tfindinfo, $stext = "")
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	Local $pbuffer = DllStructGetPtr($tbuffer)
	DllStructSetData($tbuffer, "Text", $stext)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tfindinfo, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_finditem, $istart, $tfindinfo, 0, "wparam", "struct*")
		Else
			Local $ifindinfo = DllStructGetSize($tfindinfo)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ifindinfo + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $ifindinfo
			DllStructSetData($tfindinfo, "Text", $ptext)
			_memwrite($tmemmap, $tfindinfo, $pmemory, $ifindinfo)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			$iret = _sendmessage($hwnd, $lvm_finditem, $istart, $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		DllStructSetData($tfindinfo, "Text", $pbuffer)
		$iret = GUICtrlSendMsg($hwnd, $lvm_finditem, $istart, DllStructGetPtr($tfindinfo))
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_findnearest($hwnd, $ix, $iy, $idir = 0, $istart = -1, $bwrapok = True)
	Local $adir[8] = [$__listviewconstant_vk_left, $__listviewconstant_vk_right, $__listviewconstant_vk_up, $__listviewconstant_vk_down, $__listviewconstant_vk_home, $__listviewconstant_vk_end, $__listviewconstant_vk_prior, $__listviewconstant_vk_next]
	Local $tfindinfo = DllStructCreate($taglvfindinfo)
	Local $iflags = $lvfi_nearestxy
	If $bwrapok Then $iflags = BitOR($iflags, $lvfi_wrap)
	DllStructSetData($tfindinfo, "Flags", $iflags)
	DllStructSetData($tfindinfo, "X", $ix)
	DllStructSetData($tfindinfo, "Y", $iy)
	DllStructSetData($tfindinfo, "Direction", $adir[$idir])
	Return _guictrllistview_finditem($hwnd, $istart, $tfindinfo)
EndFunc

Func _guictrllistview_findparam($hwnd, $iparam, $istart = -1)
	Local $tfindinfo = DllStructCreate($taglvfindinfo)
	DllStructSetData($tfindinfo, "Flags", $lvfi_param)
	DllStructSetData($tfindinfo, "Param", $iparam)
	Return _guictrllistview_finditem($hwnd, $istart, $tfindinfo)
EndFunc

Func _guictrllistview_findtext($hwnd, $stext, $istart = -1, $bpartialok = True, $bwrapok = True)
	Local $tfindinfo = DllStructCreate($taglvfindinfo)
	Local $iflags = $lvfi_string
	If $bpartialok Then $iflags = BitOR($iflags, $lvfi_partial)
	If $bwrapok Then $iflags = BitOR($iflags, $lvfi_wrap)
	DllStructSetData($tfindinfo, "Flags", $iflags)
	Return _guictrllistview_finditem($hwnd, $istart, $tfindinfo, $stext)
EndFunc

Func _guictrllistview_getbkcolor($hwnd)
	Local $i_color
	If IsHWnd($hwnd) Then
		$i_color = _sendmessage($hwnd, $lvm_getbkcolor)
	Else
		$i_color = GUICtrlSendMsg($hwnd, $lvm_getbkcolor, 0, 0)
	EndIf
	Return __guictrllistview_reversecolororder($i_color)
EndFunc

Func _guictrllistview_getbkimage($hwnd)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $timage = DllStructCreate($taglvbkimage)
	DllStructSetData($timage, "ImageMax", 4096)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($timage, "Image", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_getbkimagew, 0, $timage, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $iimage = DllStructGetSize($timage)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iimage + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iimage
			DllStructSetData($timage, "Image", $ptext)
			_memwrite($tmemmap, $timage, $pmemory, $iimage)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_getbkimagew, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_getbkimagea, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $pmemory, $timage, $iimage)
			_memread($tmemmap, $ptext, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pimage = DllStructGetPtr($timage)
		DllStructSetData($timage, "Image", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getbkimagew, 0, $pimage)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getbkimagea, 0, $pimage)
		EndIf
	EndIf
	Local $aimage[4]
	Switch BitAND(DllStructGetData($timage, "Flags"), $lvbkif_source_mask)
		Case $lvbkif_source_hbitmap
			$aimage[0] = 1
		Case $lvbkif_source_url
			$aimage[0] = 2
	EndSwitch
	$aimage[1] = DllStructGetData($tbuffer, "Text")
	$aimage[2] = DllStructGetData($timage, "XOffPercent")
	$aimage[3] = DllStructGetData($timage, "YOffPercent")
	Return SetError($iret <> 0, 0, $aimage)
EndFunc

Func _guictrllistview_getcallbackmask($hwnd)
	Local $iflags = 0
	Local $imask = _sendmessage($hwnd, $lvm_getcallbackmask)
	If BitAND($imask, $lvis_cut) <> 0 Then $iflags = BitOR($iflags, 1)
	If BitAND($imask, $lvis_drophilited) <> 0 Then $iflags = BitOR($iflags, 2)
	If BitAND($imask, $lvis_focused) <> 0 Then $iflags = BitOR($iflags, 4)
	If BitAND($imask, $lvis_selected) <> 0 Then $iflags = BitOR($iflags, 8)
	If BitAND($imask, $lvis_overlaymask) <> 0 Then $iflags = BitOR($iflags, 16)
	If BitAND($imask, $lvis_stateimagemask) <> 0 Then $iflags = BitOR($iflags, 32)
	Return $iflags
EndFunc

Func _guictrllistview_getcolumn($hwnd, $iindex)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $tcolumn = DllStructCreate($taglvcolumn)
	DllStructSetData($tcolumn, "Mask", $lvcf_alldata)
	DllStructSetData($tcolumn, "TextMax", 4096)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tcolumn, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_getcolumnw, $iindex, $tcolumn, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $icolumn = DllStructGetSize($tcolumn)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $icolumn + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $icolumn
			DllStructSetData($tcolumn, "Text", $ptext)
			_memwrite($tmemmap, $tcolumn, $pmemory, $icolumn)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_getcolumnw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_getcolumna, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $pmemory, $tcolumn, $icolumn)
			_memread($tmemmap, $ptext, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pcolumn = DllStructGetPtr($tcolumn)
		DllStructSetData($tcolumn, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getcolumnw, $iindex, $pcolumn)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getcolumna, $iindex, $pcolumn)
		EndIf
	EndIf
	Local $acolumn[9]
	Switch BitAND(DllStructGetData($tcolumn, "Fmt"), $lvcfmt_justifymask)
		Case $lvcfmt_right
			$acolumn[0] = 1
		Case $lvcfmt_center
			$acolumn[0] = 2
		Case Else
			$acolumn[0] = 0
	EndSwitch
	$acolumn[1] = BitAND(DllStructGetData($tcolumn, "Fmt"), $lvcfmt_image) <> 0
	$acolumn[2] = BitAND(DllStructGetData($tcolumn, "Fmt"), $lvcfmt_bitmap_on_right) <> 0
	$acolumn[3] = BitAND(DllStructGetData($tcolumn, "Fmt"), $lvcfmt_col_has_images) <> 0
	$acolumn[4] = DllStructGetData($tcolumn, "CX")
	$acolumn[5] = DllStructGetData($tbuffer, "Text")
	$acolumn[6] = DllStructGetData($tcolumn, "SubItem")
	$acolumn[7] = DllStructGetData($tcolumn, "Image")
	$acolumn[8] = DllStructGetData($tcolumn, "Order")
	Return SetError($iret = 0, 0, $acolumn)
EndFunc

Func _guictrllistview_getcolumncount($hwnd)
	Return _sendmessage(_guictrllistview_getheader($hwnd), 4608)
EndFunc

Func _guictrllistview_getcolumnorder($hwnd)
	Local $a_cols = _guictrllistview_getcolumnorderarray($hwnd), $s_cols = ""
	Local $sseparatorchar = Opt("GUIDataSeparatorChar")
	For $i = 1 To $a_cols[0]
		$s_cols &= $a_cols[$i] & $sseparatorchar
	Next
	$s_cols = StringTrimRight($s_cols, 1)
	Return $s_cols
EndFunc

Func _guictrllistview_getcolumnorderarray($hwnd)
	Local $icolumns = _guictrllistview_getcolumncount($hwnd)
	Local $tbuffer = DllStructCreate("int[" & $icolumns & "]")
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getcolumnorderarray, $icolumns, $tbuffer, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			_sendmessage($hwnd, $lvm_getcolumnorderarray, $icolumns, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getcolumnorderarray, $icolumns, DllStructGetPtr($tbuffer))
	EndIf
	Local $abuffer[$icolumns + 1]
	$abuffer[0] = $icolumns
	For $ii = 1 To $icolumns
		$abuffer[$ii] = DllStructGetData($tbuffer, 1, $ii)
	Next
	Return $abuffer
EndFunc

Func _guictrllistview_getcolumnwidth($hwnd, $icol)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getcolumnwidth, $icol)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getcolumnwidth, $icol, 0)
	EndIf
EndFunc

Func _guictrllistview_getcounterpage($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getcountperpage)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getcountperpage, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_geteditcontrol($hwnd)
	If IsHWnd($hwnd) Then
		Return HWnd(_sendmessage($hwnd, $lvm_geteditcontrol))
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $lvm_geteditcontrol, 0, 0))
	EndIf
EndFunc

Func _guictrllistview_getemptytext($hwnd)
	Local $ttext = DllStructCreate("char[4096]")
	Local $iret
	If IsHWnd($hwnd) Then
		Local $itext = DllStructGetSize($ttext)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $itext + 4096, $tmemmap)
		Local $ptext = $pmemory + $itext
		DllStructSetData($ttext, "Text", $ptext)
		_memwrite($tmemmap, $ptext, $pmemory, $itext)
		$iret = _sendmessage($hwnd, $lvm_getemptytext, 4096, $pmemory)
		_memread($tmemmap, $ptext, $ttext, 4096)
		_memfree($tmemmap)
		If $iret = 0 Then Return SetError(-1, 0, "")
		Return DllStructGetData($ttext, 1)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getemptytext, 4096, DllStructGetPtr($ttext))
		If $iret = 0 Then Return SetError(-1, 0, "")
		Return DllStructGetData($ttext, 1)
	EndIf
EndFunc

Func _guictrllistview_getextendedlistviewstyle($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getextendedlistviewstyle)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getextendedlistviewstyle, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getfocusedgroup($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getfocusedgroup)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getfocusedgroup, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getgroupcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getgroupcount)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getgroupcount, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getgroupinfo($hwnd, $igroupid)
	Local $tgroup = __guictrllistview_getgroupinfoex($hwnd, $igroupid, BitOR($lvgf_header, $lvgf_align))
	Local $ierr = @error
	Local $agroup[2]
	$agroup[0] = _winapi_widechartomultibyte(DllStructGetData($tgroup, "Header"))
	Select
		Case BitAND(DllStructGetData($tgroup, "Align"), $lvga_header_center) <> 0
			$agroup[1] = 1
		Case BitAND(DllStructGetData($tgroup, "Align"), $lvga_header_right) <> 0
			$agroup[1] = 2
		Case Else
			$agroup[1] = 0
	EndSelect
	Return SetError($ierr, 0, $agroup)
EndFunc

Func __guictrllistview_getgroupinfoex($hwnd, $igroupid, $imask)
	Local $tgroup = DllStructCreate($taglvgroup)
	Local $igroup = DllStructGetSize($tgroup)
	DllStructSetData($tgroup, "Size", $igroup)
	DllStructSetData($tgroup, "Mask", $imask)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getgroupinfo, $igroupid, $tgroup, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup, $tmemmap)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			$iret = _sendmessage($hwnd, $lvm_getgroupinfo, $igroupid, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tgroup, $igroup)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getgroupinfo, $igroupid, DllStructGetPtr($tgroup))
	EndIf
	Return SetError($iret <> $igroupid, 0, $tgroup)
EndFunc

Func _guictrllistview_getgroupinfobyindex($hwnd, $iindex)
	Local $tgroup = DllStructCreate($taglvgroup)
	Local $igroup = DllStructGetSize($tgroup)
	DllStructSetData($tgroup, "Size", $igroup)
	DllStructSetData($tgroup, "Mask", BitOR($lvgf_header, $lvgf_align, $lvgf_groupid))
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getgroupinfobyindex, $iindex, $tgroup, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup, $tmemmap)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			$iret = _sendmessage($hwnd, $lvm_getgroupinfobyindex, $iindex, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tgroup, $igroup)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getgroupinfobyindex, $iindex, DllStructGetPtr($tgroup))
	EndIf
	Local $agroup[3]
	$agroup[0] = _winapi_widechartomultibyte(DllStructGetData($tgroup, "Header"))
	Select
		Case BitAND(DllStructGetData($tgroup, "Align"), $lvga_header_center) <> 0
			$agroup[1] = 1
		Case BitAND(DllStructGetData($tgroup, "Align"), $lvga_header_right) <> 0
			$agroup[1] = 2
		Case Else
			$agroup[1] = 0
	EndSelect
	$agroup[2] = DllStructGetData($tgroup, "GroupID")
	Return SetError($iret = 0, 0, $agroup)
EndFunc

Func _guictrllistview_getgrouprect($hwnd, $igroupid, $iget = $lvggr_group)
	Local $tgroup = DllStructCreate($tagrect)
	DllStructSetData($tgroup, "Top", $iget)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getgrouprect, $igroupid, $tgroup, 0, "wparam", "struct*")
		Else
			Local $igroup = DllStructGetSize($tgroup)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup, $tmemmap)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			$iret = _sendmessage($hwnd, $lvm_getgrouprect, $igroupid, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tgroup, $igroup)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getgrouprect, $igroupid, DllStructGetPtr($tgroup))
	EndIf
	Local $agroup[4]
	For $x = 0 To 3
		$agroup[$x] = DllStructGetData($tgroup, $x + 1)
	Next
	Return SetError($iret = 0, 0, $agroup)
EndFunc

Func _guictrllistview_getgroupstate($hwnd, $igroupid, $imask)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getgroupstate, $igroupid, $imask)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getgroupstate, $igroupid, $imask)
	EndIf
EndFunc

Func _guictrllistview_getgroupviewenabled($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_isgroupviewenabled) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_isgroupviewenabled, 0, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_getheader($hwnd)
	If IsHWnd($hwnd) Then
		Return HWnd(_sendmessage($hwnd, $lvm_getheader))
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $lvm_getheader, 0, 0))
	EndIf
EndFunc

Func _guictrllistview_gethotcursor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gethotcursor, 0, 0, 0, "wparam", "lparam", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $lvm_gethotcursor, 0, 0))
	EndIf
EndFunc

Func _guictrllistview_gethotitem($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gethotitem)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gethotitem, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_gethovertime($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gethovertime)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gethovertime, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getimagelist($hwnd, $iimagelist)
	Local $aimagelist[3] = [$lvsil_normal, $lvsil_small, $lvsil_state]
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getimagelist, $aimagelist[$iimagelist], 0, 0, "wparam", "lparam", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $lvm_getimagelist, $aimagelist[$iimagelist], 0))
	EndIf
EndFunc

Func _guictrllistview_getinsertmark($hwnd)
	Local $tmark = DllStructCreate($taglvinsertmark)
	Local $imark = DllStructGetSize($tmark)
	DllStructSetData($tmark, "Size", $imark)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getinsertmark, 0, $tmark, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $imark, $tmemmap)
			_memwrite($tmemmap, $tmark)
			$iret = _sendmessage($hwnd, $lvm_getinsertmark, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tmark, $imark)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getinsertmark, 0, DllStructGetPtr($tmark))
	EndIf
	Local $amark[2]
	$amark[0] = DllStructGetData($tmark, "Flags") = $lvim_after
	$amark[1] = DllStructGetData($tmark, "Item")
	Return SetError($iret = 0, 0, $amark)
EndFunc

Func _guictrllistview_getinsertmarkcolor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getinsertmarkcolor, $lvsil_state)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getinsertmarkcolor, $lvsil_state, 0)
	EndIf
EndFunc

Func _guictrllistview_getinsertmarkrect($hwnd)
	Local $arect[5]
	Local $trect = DllStructCreate($tagrect)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$arect[0] = _sendmessage($hwnd, $lvm_getinsertmarkrect, 0, $trect, 0, "wparam", "struct*") <> 0
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			$arect[0] = _sendmessage($hwnd, $lvm_getinsertmarkrect, 0, $pmemory, 0, "wparam", "ptr") <> 0
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		$arect[0] = GUICtrlSendMsg($hwnd, $lvm_getinsertmarkrect, 0, DllStructGetPtr($trect)) <> 0
	EndIf
	$arect[1] = DllStructGetData($trect, "Left")
	$arect[2] = DllStructGetData($trect, "Top")
	$arect[3] = DllStructGetData($trect, "Right")
	$arect[4] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrllistview_getisearchstring($hwnd)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer
	If IsHWnd($hwnd) Then
		If $bunicode Then
			$ibuffer = _sendmessage($hwnd, $lvm_getisearchstringw) + 1
		Else
			$ibuffer = _sendmessage($hwnd, $lvm_getisearchstringa) + 1
		EndIf
	Else
		If $bunicode Then
			$ibuffer = GUICtrlSendMsg($hwnd, $lvm_getisearchstringw, 0, 0) + 1
		Else
			$ibuffer = GUICtrlSendMsg($hwnd, $lvm_getisearchstringa, 0, 0) + 1
		EndIf
	EndIf
	If $ibuffer = 1 Then Return ""
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getisearchstringw, 0, $tbuffer, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			If $bunicode Then
				_sendmessage($hwnd, $lvm_getisearchstringw, 0, $pmemory)
			Else
				_sendmessage($hwnd, $lvm_getisearchstringa, 0, $pmemory)
			EndIf
			_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pbuffer = DllStructGetPtr($tbuffer)
		If $bunicode Then
			GUICtrlSendMsg($hwnd, $lvm_getisearchstringw, 0, $pbuffer)
		Else
			GUICtrlSendMsg($hwnd, $lvm_getisearchstringa, 0, $pbuffer)
		EndIf
	EndIf
	Return DllStructGetData($tbuffer, "Text")
EndFunc

Func _guictrllistview_getitem($hwnd, $iindex, $isubitem = 0)
	Local $aitem[8]
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", BitOR($lvif_groupid, $lvif_image, $lvif_indent, $lvif_param, $lvif_state))
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "StateMask", -1)
	_guictrllistview_getitemex($hwnd, $titem)
	Local $istate = DllStructGetData($titem, "State")
	If BitAND($istate, $lvis_cut) <> 0 Then $aitem[0] = BitOR($aitem[0], 1)
	If BitAND($istate, $lvis_drophilited) <> 0 Then $aitem[0] = BitOR($aitem[0], 2)
	If BitAND($istate, $lvis_focused) <> 0 Then $aitem[0] = BitOR($aitem[0], 4)
	If BitAND($istate, $lvis_selected) <> 0 Then $aitem[0] = BitOR($aitem[0], 8)
	$aitem[1] = __guictrllistview_overlayimagemasktoindex($istate)
	$aitem[2] = __guictrllistview_stateimagemasktoindex($istate)
	$aitem[3] = _guictrllistview_getitemtext($hwnd, $iindex, $isubitem)
	$aitem[4] = DllStructGetData($titem, "Image")
	$aitem[5] = DllStructGetData($titem, "Param")
	$aitem[6] = DllStructGetData($titem, "Indent")
	$aitem[7] = DllStructGetData($titem, "GroupID")
	Return $aitem
EndFunc

Func _guictrllistview_getitemchecked($hwnd, $iindex)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tlvitem = DllStructCreate($taglvitem)
	Local $isize = DllStructGetSize($tlvitem)
	If @error Then Return SetError($lv_err, $lv_err, False)
	DllStructSetData($tlvitem, "Mask", $lvif_state)
	DllStructSetData($tlvitem, "Item", $iindex)
	DllStructSetData($tlvitem, "StateMask", 65535)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getitemw, 0, $tlvitem, 0, "wparam", "struct*") <> 0
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $isize, $tmemmap)
			_memwrite($tmemmap, $tlvitem)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_getitemw, 0, $pmemory, 0, "wparam", "ptr") <> 0
			Else
				$iret = _sendmessage($hwnd, $lvm_getitema, 0, $pmemory, 0, "wparam", "ptr") <> 0
			EndIf
			_memread($tmemmap, $pmemory, $tlvitem, $isize)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($tlvitem)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitemw, 0, $pitem) <> 0
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitema, 0, $pitem) <> 0
		EndIf
	EndIf
	If NOT $iret Then Return SetError($lv_err, $lv_err, False)
	Return BitAND(DllStructGetData($tlvitem, "State"), 8192) <> 0
EndFunc

Func _guictrllistview_getitemcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getitemcount)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getitemcount, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getitemcut($hwnd, $iindex)
	Return _guictrllistview_getitemstate($hwnd, $iindex, $lvis_cut) <> 0
EndFunc

Func _guictrllistview_getitemdrophilited($hwnd, $iindex)
	Return _guictrllistview_getitemstate($hwnd, $iindex, $lvis_drophilited) <> 0
EndFunc

Func _guictrllistview_getitemex($hwnd, ByRef $titem)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getitemw, 0, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem, $tmemmap)
			_memwrite($tmemmap, $titem)
			If $bunicode Then
				_sendmessage($hwnd, $lvm_getitemw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				_sendmessage($hwnd, $lvm_getitema, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $pmemory, $titem, $iitem)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_getitemfocused($hwnd, $iindex)
	Return _guictrllistview_getitemstate($hwnd, $iindex, $lvis_focused) <> 0
EndFunc

Func _guictrllistview_getitemgroupid($hwnd, $iindex)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_groupid)
	DllStructSetData($titem, "Item", $iindex)
	_guictrllistview_getitemex($hwnd, $titem)
	Return DllStructGetData($titem, "GroupID")
EndFunc

Func _guictrllistview_getitemimage($hwnd, $iindex, $isubitem = 0)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_image)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	_guictrllistview_getitemex($hwnd, $titem)
	Return DllStructGetData($titem, "Image")
EndFunc

Func _guictrllistview_getitemindent($hwnd, $iindex)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_indent)
	DllStructSetData($titem, "Item", $iindex)
	_guictrllistview_getitemex($hwnd, $titem)
	Return DllStructGetData($titem, "Indent")
EndFunc

Func __guictrllistview_getitemoverlayimage($hwnd, $iindex)
	Return BitShift(_guictrllistview_getitemstate($hwnd, $iindex, $lvis_overlaymask), 8)
EndFunc

Func _guictrllistview_getitemparam($hwnd, $iindex)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_param)
	DllStructSetData($titem, "Item", $iindex)
	_guictrllistview_getitemex($hwnd, $titem)
	Return DllStructGetData($titem, "Param")
EndFunc

Func _guictrllistview_getitemposition($hwnd, $iindex)
	Local $apoint[2], $iret
	Local $tpoint = DllStructCreate($tagpoint)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			If NOT _sendmessage($hwnd, $lvm_getitemposition, $iindex, $tpoint, 0, "wparam", "struct*") Then Return $apoint
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ipoint, $tmemmap)
			If NOT _sendmessage($hwnd, $lvm_getitemposition, $iindex, $pmemory, 0, "wparam", "ptr") Then Return $apoint
			_memread($tmemmap, $pmemory, $tpoint, $ipoint)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getitemposition, $iindex, DllStructGetPtr($tpoint))
		If NOT $iret Then Return $apoint
	EndIf
	$apoint[0] = DllStructGetData($tpoint, "X")
	$apoint[1] = DllStructGetData($tpoint, "Y")
	Return $apoint
EndFunc

Func _guictrllistview_getitempositionx($hwnd, $iindex)
	Local $apoint = _guictrllistview_getitemposition($hwnd, $iindex)
	Return $apoint[0]
EndFunc

Func _guictrllistview_getitempositiony($hwnd, $iindex)
	Local $apoint = _guictrllistview_getitemposition($hwnd, $iindex)
	Return $apoint[1]
EndFunc

Func _guictrllistview_getitemrect($hwnd, $iindex, $ipart = 3)
	Local $trect = _guictrllistview_getitemrectex($hwnd, $iindex, $ipart)
	Local $arect[4]
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrllistview_getitemrectex($hwnd, $iindex, $ipart = 3)
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, "Left", $ipart)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getitemrect, $iindex, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_memwrite($tmemmap, $trect, $pmemory, $irect)
			_sendmessage($hwnd, $lvm_getitemrect, $iindex, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getitemrect, $iindex, DllStructGetPtr($trect))
	EndIf
	Return $trect
EndFunc

Func _guictrllistview_getitemselected($hwnd, $iindex)
	Return _guictrllistview_getitemstate($hwnd, $iindex, $lvis_selected) <> 0
EndFunc

Func _guictrllistview_getitemspacing($hwnd, $bsmall = False)
	Local $ispace
	If IsHWnd($hwnd) Then
		$ispace = _sendmessage($hwnd, $lvm_getitemspacing, $bsmall)
	Else
		$ispace = GUICtrlSendMsg($hwnd, $lvm_getitemspacing, $bsmall, 0)
	EndIf
	Local $aspace[2]
	$aspace[0] = BitAND($ispace, 65535)
	$aspace[1] = BitShift($ispace, 16)
	Return $aspace
EndFunc

Func _guictrllistview_getitemspacingx($hwnd, $bsmall = False)
	If IsHWnd($hwnd) Then
		Return BitAND(_sendmessage($hwnd, $lvm_getitemspacing, $bsmall, 0), 65535)
	Else
		Return BitAND(GUICtrlSendMsg($hwnd, $lvm_getitemspacing, $bsmall, 0), 65535)
	EndIf
EndFunc

Func _guictrllistview_getitemspacingy($hwnd, $bsmall = False)
	If IsHWnd($hwnd) Then
		Return BitShift(_sendmessage($hwnd, $lvm_getitemspacing, $bsmall, 0), 16)
	Else
		Return BitShift(GUICtrlSendMsg($hwnd, $lvm_getitemspacing, $bsmall, 0), 16)
	EndIf
EndFunc

Func _guictrllistview_getitemstate($hwnd, $iindex, $imask)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getitemstate, $iindex, $imask)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getitemstate, $iindex, $imask)
	EndIf
EndFunc

Func _guictrllistview_getitemstateimage($hwnd, $iindex)
	Return BitShift(_guictrllistview_getitemstate($hwnd, $iindex, $lvis_stateimagemask), 12)
EndFunc

Func _guictrllistview_getitemtext($hwnd, $iindex, $isubitem = 0)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[4096]")
	Else
		$tbuffer = DllStructCreate("char Text[4096]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "TextMax", 4096)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($titem, "Text", $pbuffer)
			_sendmessage($hwnd, $lvm_getitemtextw, $iindex, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + 4096, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			If $bunicode Then
				_sendmessage($hwnd, $lvm_getitemtextw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				_sendmessage($hwnd, $lvm_getitemtexta, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $ptext, $tbuffer, 4096)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		DllStructSetData($titem, "Text", $pbuffer)
		If $bunicode Then
			GUICtrlSendMsg($hwnd, $lvm_getitemtextw, $iindex, $pitem)
		Else
			GUICtrlSendMsg($hwnd, $lvm_getitemtexta, $iindex, $pitem)
		EndIf
	EndIf
	Return DllStructGetData($tbuffer, "Text")
EndFunc

Func _guictrllistview_getitemtextarray($hwnd, $iitem = -1)
	Local $sitems = _guictrllistview_getitemtextstring($hwnd, $iitem)
	If $sitems = "" Then
		Local $aitems[1] = [0]
		Return SetError($lv_err, $lv_err, $aitems)
	EndIf
	Return StringSplit($sitems, Opt("GUIDataSeparatorChar"))
EndFunc

Func _guictrllistview_getitemtextstring($hwnd, $iitem = -1)
	Local $srow = "", $sseparatorchar = Opt("GUIDataSeparatorChar"), $iselected
	If $iitem = -1 Then
		$iselected = _guictrllistview_getnextitem($hwnd)
	Else
		$iselected = $iitem
	EndIf
	For $x = 0 To _guictrllistview_getcolumncount($hwnd) - 1
		$srow &= _guictrllistview_getitemtext($hwnd, $iselected, $x) & $sseparatorchar
	Next
	Return StringTrimRight($srow, 1)
EndFunc

Func _guictrllistview_getnextitem($hwnd, $istart = -1, $isearch = 0, $istate = 8)
	Local $asearch[5] = [$lvni_all, $lvni_above, $lvni_below, $lvni_toleft, $lvni_toright]
	Local $iflags = $asearch[$isearch]
	If BitAND($istate, 1) <> 0 Then $iflags = BitOR($iflags, $lvni_cut)
	If BitAND($istate, 2) <> 0 Then $iflags = BitOR($iflags, $lvni_drophilited)
	If BitAND($istate, 4) <> 0 Then $iflags = BitOR($iflags, $lvni_focused)
	If BitAND($istate, 8) <> 0 Then $iflags = BitOR($iflags, $lvni_selected)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getnextitem, $istart, $iflags)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getnextitem, $istart, $iflags)
	EndIf
EndFunc

Func _guictrllistview_getnumberofworkareas($hwnd)
	Local $tbuffer = DllStructCreate("int Data")
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getnumberofworkareas, 0, $tbuffer, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			_sendmessage($hwnd, $lvm_getnumberofworkareas, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getnumberofworkareas, 0, DllStructGetPtr($tbuffer))
	EndIf
	Return DllStructGetData($tbuffer, "Data")
EndFunc

Func _guictrllistview_getorigin($hwnd)
	Local $tpoint = DllStructCreate($tagpoint)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getorigin, 0, $tpoint, 0, "wparam", "struct*")
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ipoint, $tmemmap)
			$iret = _sendmessage($hwnd, $lvm_getorigin, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $tpoint, $ipoint)
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_getorigin, 0, DllStructGetPtr($tpoint))
	EndIf
	Local $aorigin[2]
	$aorigin[0] = DllStructGetData($tpoint, "X")
	$aorigin[1] = DllStructGetData($tpoint, "Y")
	Return SetError(@error, $iret = 1, $aorigin)
EndFunc

Func _guictrllistview_getoriginx($hwnd)
	Local $aorigin = _guictrllistview_getorigin($hwnd)
	Return $aorigin[0]
EndFunc

Func _guictrllistview_getoriginy($hwnd)
	Local $aorigin = _guictrllistview_getorigin($hwnd)
	Return $aorigin[1]
EndFunc

Func _guictrllistview_getoutlinecolor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getoutlinecolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getoutlinecolor, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getselectedcolumn($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getselectedcolumn)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getselectedcolumn, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getselectedcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getselectedcount)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getselectedcount, 0, 0)
	EndIf
EndFunc

Func __guictrllistview_getcheckedindices($hwnd)
	Local $icount = _guictrllistview_getitemcount($hwnd)
	Local $aselected[$icount + 1] = [0]
	For $i = 0 To $icount - 1
		If _guictrllistview_getitemchecked($hwnd, $i) Then
			$aselected[0] += 1
			$aselected[$aselected[0]] = $i
		EndIf
	Next
	ReDim $aselected[$aselected[0] + 1]
	Return $aselected
EndFunc

Func _guictrllistview_getselectedindices($hwnd, $barray = False)
	Local $sindices, $aindices[1] = [0]
	Local $iret, $icount = _guictrllistview_getitemcount($hwnd)
	For $iitem = 0 To $icount
		If IsHWnd($hwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getitemstate, $iitem, $lvis_selected)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getitemstate, $iitem, $lvis_selected)
		EndIf
		If $iret Then
			If (NOT $barray) Then
				If StringLen($sindices) Then
					$sindices &= "|" & $iitem
				Else
					$sindices = $iitem
				EndIf
			Else
				ReDim $aindices[UBound($aindices) + 1]
				$aindices[0] = UBound($aindices) - 1
				$aindices[UBound($aindices) - 1] = $iitem
			EndIf
		EndIf
	Next
	If (NOT $barray) Then
		Return String($sindices)
	Else
		Return $aindices
	EndIf
EndFunc

Func _guictrllistview_getselectionmark($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getselectionmark)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getselectionmark, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getstringwidth($hwnd, $sstring)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($sstring) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	DllStructSetData($tbuffer, "Text", $sstring)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_getstringwidthw, 0, $tbuffer, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			_memwrite($tmemmap, $tbuffer, $pmemory, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_getstringwidthw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_getstringwidtha, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
			_memfree($tmemmap)
		EndIf
	Else
		Local $pbuffer = DllStructGetPtr($tbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_getstringwidthw, 0, $pbuffer)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_getstringwidtha, 0, $pbuffer)
		EndIf
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_getsubitemrect($hwnd, $iindex, $isubitem, $ipart = 0)
	Local $apart[2] = [$lvir_bounds, $lvir_icon]
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, "Top", $isubitem)
	DllStructSetData($trect, "Left", $apart[$ipart])
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getsubitemrect, $iindex, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_memwrite($tmemmap, $trect, $pmemory, $irect)
			_sendmessage($hwnd, $lvm_getsubitemrect, $iindex, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getsubitemrect, $iindex, DllStructGetPtr($trect))
	EndIf
	Local $arect[4]
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrllistview_gettextbkcolor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gettextbkcolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gettextbkcolor, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_gettextcolor($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gettextcolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gettextcolor, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_gettooltips($hwnd)
	If IsHWnd($hwnd) Then
		Return HWnd(_sendmessage($hwnd, $lvm_gettooltips))
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $lvm_gettooltips, 0, 0))
	EndIf
EndFunc

Func _guictrllistview_gettopindex($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_gettopindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_gettopindex, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_getunicodeformat($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_getunicodeformat) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_getunicodeformat, 0, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_getview($hwnd)
	Local $iview
	If IsHWnd($hwnd) Then
		$iview = _sendmessage($hwnd, $lvm_getview)
	Else
		$iview = GUICtrlSendMsg($hwnd, $lvm_getview, 0, 0)
	EndIf
	Switch $iview
		Case $lv_view_icon
			Return Int($lv_view_icon)
		Case $lv_view_details
			Return Int($lv_view_details)
		Case $lv_view_list
			Return Int($lv_view_list)
		Case $lv_view_smallicon
			Return Int($lv_view_smallicon)
		Case $lv_view_tile
			Return Int($lv_view_tile)
		Case Else
			Return -1
	EndSwitch
EndFunc

Func _guictrllistview_getviewdetails($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_details
EndFunc

Func _guictrllistview_getviewlarge($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_icon
EndFunc

Func _guictrllistview_getviewlist($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_list
EndFunc

Func _guictrllistview_getviewsmall($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_smallicon
EndFunc

Func _guictrllistview_getviewtile($hwnd)
	Return _guictrllistview_getview($hwnd) = $lv_view_tile
EndFunc

Func _guictrllistview_getviewrect($hwnd)
	Local $arect[4] = [0, 0, 0, 0]
	Local $iview = _guictrllistview_getview($hwnd)
	If ($iview <> 1) AND ($iview <> 3) Then Return $arect
	Local $trect = DllStructCreate($tagrect)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_getviewrect, 0, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_sendmessage($hwnd, $lvm_getviewrect, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_getviewrect, 0, DllStructGetPtr($trect))
	EndIf
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrllistview_hidecolumn($hwnd, $icol)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setcolumnwidth, $icol) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setcolumnwidth, $icol, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_hittest($hwnd, $ix = -1, $iy = -1)
	Local $atest[10]
	Local $imode = Opt("MouseCoordMode", 1)
	Local $apos = MouseGetPos()
	Opt("MouseCoordMode", $imode)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $apos[0])
	DllStructSetData($tpoint, "Y", $apos[1])
	Local $aresult = DllCall("user32.dll", "bool", "ScreenToClient", "hwnd", $hwnd, "struct*", $tpoint)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] = 0 Then Return 0
	If $ix = -1 Then $ix = DllStructGetData($tpoint, "X")
	If $iy = -1 Then $iy = DllStructGetData($tpoint, "Y")
	Local $ttest = DllStructCreate($taglvhittestinfo)
	DllStructSetData($ttest, "X", $ix)
	DllStructSetData($ttest, "Y", $iy)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$atest[0] = _sendmessage($hwnd, $lvm_hittest, 0, $ttest, 0, "wparam", "struct*")
		Else
			Local $itest = DllStructGetSize($ttest)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $itest, $tmemmap)
			_memwrite($tmemmap, $ttest, $pmemory, $itest)
			$atest[0] = _sendmessage($hwnd, $lvm_hittest, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $ttest, $itest)
			_memfree($tmemmap)
		EndIf
	Else
		$atest[0] = GUICtrlSendMsg($hwnd, $lvm_hittest, 0, DllStructGetPtr($ttest))
	EndIf
	Local $iflags = DllStructGetData($ttest, "Flags")
	$atest[1] = BitAND($iflags, $lvht_nowhere) <> 0
	$atest[2] = BitAND($iflags, $lvht_onitemicon) <> 0
	$atest[3] = BitAND($iflags, $lvht_onitemlabel) <> 0
	$atest[4] = BitAND($iflags, $lvht_onitemstateicon) <> 0
	$atest[5] = BitAND($iflags, $lvht_onitem) <> 0
	$atest[6] = BitAND($iflags, $lvht_above) <> 0
	$atest[7] = BitAND($iflags, $lvht_below) <> 0
	$atest[8] = BitAND($iflags, $lvht_toleft) <> 0
	$atest[9] = BitAND($iflags, $lvht_toright) <> 0
	Return $atest
EndFunc

Func __guictrllistview_indextooverlayimagemask($iindex)
	Return BitShift($iindex, -8)
EndFunc

Func __guictrllistview_indextostateimagemask($iindex)
	Return BitShift($iindex, -12)
EndFunc

Func _guictrllistview_insertcolumn($hwnd, $iindex, $stext, $iwidth = 50, $ialign = -1, $iimage = -1, $bonright = False)
	Local $aalign[3] = [$lvcfmt_left, $lvcfmt_right, $lvcfmt_center]
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $tcolumn = DllStructCreate($taglvcolumn)
	Local $imask = BitOR($lvcf_fmt, $lvcf_width, $lvcf_text)
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	Local $ifmt = $aalign[$ialign]
	If $iimage <> -1 Then
		$imask = BitOR($imask, $lvcf_image)
		$ifmt = BitOR($ifmt, $lvcfmt_col_has_images, $lvcfmt_image)
	EndIf
	If $bonright Then $ifmt = BitOR($ifmt, $lvcfmt_bitmap_on_right)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($tcolumn, "Mask", $imask)
	DllStructSetData($tcolumn, "Fmt", $ifmt)
	DllStructSetData($tcolumn, "CX", $iwidth)
	DllStructSetData($tcolumn, "TextMax", $ibuffer)
	DllStructSetData($tcolumn, "Image", $iimage)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tcolumn, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_insertcolumnw, $iindex, $tcolumn, 0, "wparam", "struct*")
		Else
			Local $icolumn = DllStructGetSize($tcolumn)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $icolumn + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $icolumn
			DllStructSetData($tcolumn, "Text", $ptext)
			_memwrite($tmemmap, $tcolumn, $pmemory, $icolumn)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_insertcolumnw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_insertcolumna, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pcolumn = DllStructGetPtr($tcolumn)
		DllStructSetData($tcolumn, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_insertcolumnw, $iindex, $pcolumn)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_insertcolumna, $iindex, $pcolumn)
		EndIf
	EndIf
	If $ialign > 0 Then _guictrllistview_setcolumn($hwnd, $iret, $stext, $iwidth, $ialign, $iimage, $bonright)
	Return $iret
EndFunc

Func _guictrllistview_insertgroup($hwnd, $iindex, $igroupid, $sheader, $ialign = 0)
	Local $aalign[3] = [$lvga_header_left, $lvga_header_center, $lvga_header_right]
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	Local $theader = _winapi_multibytetowidechar($sheader)
	Local $pheader = DllStructGetPtr($theader)
	Local $iheader = StringLen($sheader)
	Local $tgroup = DllStructCreate($taglvgroup)
	Local $igroup = DllStructGetSize($tgroup)
	Local $imask = BitOR($lvgf_header, $lvgf_align, $lvgf_groupid)
	DllStructSetData($tgroup, "Size", $igroup)
	DllStructSetData($tgroup, "Mask", $imask)
	DllStructSetData($tgroup, "HeaderMax", $iheader)
	DllStructSetData($tgroup, "GroupID", $igroupid)
	DllStructSetData($tgroup, "Align", $aalign[$ialign])
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tgroup, "Header", $pheader)
			$iret = _sendmessage($hwnd, $lvm_insertgroup, $iindex, $tgroup, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup + $iheader, $tmemmap)
			Local $ptext = $pmemory + $igroup
			DllStructSetData($tgroup, "Header", $ptext)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			_memwrite($tmemmap, $theader, $ptext, $iheader)
			$iret = _sendmessage($hwnd, $lvm_insertgroup, $iindex, $tgroup, 0, "wparam", "struct*")
			_memfree($tmemmap)
		EndIf
	Else
		DllStructSetData($tgroup, "Header", $pheader)
		$iret = GUICtrlSendMsg($hwnd, $lvm_insertgroup, $iindex, DllStructGetPtr($tgroup))
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_insertitem($hwnd, $stext, $iindex = -1, $iimage = -1, $iparam = 0)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $ibuffer, $tbuffer, $iret
	If $iindex = -1 Then $iindex = 999999999
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Param", $iparam)
	$ibuffer = StringLen($stext) + 1
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($titem, "Text", DllStructGetPtr($tbuffer))
	DllStructSetData($titem, "TextMax", $ibuffer)
	Local $imask = BitOR($lvif_text, $lvif_param)
	If $iimage >= 0 Then $imask = BitOR($imask, $lvif_image)
	DllStructSetData($titem, "Mask", $imask)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "Image", $iimage)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) OR ($stext = -1) Then
			$iret = _sendmessage($hwnd, $lvm_insertitemw, 0, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_insertitemw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_insertitema, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_insertitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_insertitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_insertmarkhittest($hwnd, $ix = -1, $iy = -1)
	Local $imode = Opt("MouseCoordMode", 1)
	Local $apos = MouseGetPos()
	Opt("MouseCoordMode", $imode)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $apos[0])
	DllStructSetData($tpoint, "Y", $apos[1])
	Local $aresult = DllCall("user32.dll", "bool", "ScreenToClient", "hwnd", $hwnd, "struct*", $tpoint)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] = 0 Then Return 0
	If $ix = -1 Then $ix = DllStructGetData($tpoint, "X")
	If $iy = -1 Then $iy = DllStructGetData($tpoint, "Y")
	Local $tmark = DllStructCreate($taglvinsertmark)
	Local $imark = DllStructGetSize($tmark)
	DllStructSetData($tpoint, "X", $ix)
	DllStructSetData($tpoint, "Y", $iy)
	DllStructSetData($tmark, "Size", $imark)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_insertmarkhittest, $tpoint, $tmark, 0, "struct*", "struct*")
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemm = _meminit($hwnd, $ipoint + $imark, $tmemmap)
			Local $pmemp = $pmemm + $ipoint
			_memwrite($tmemmap, $tmark, $pmemm, $imark)
			_memwrite($tmemmap, $tpoint, $pmemp, $ipoint)
			_sendmessage($hwnd, $lvm_insertmarkhittest, $pmemp, $pmemm, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemm, $tmark, $imark)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_insertmarkhittest, DllStructGetPtr($tpoint), DllStructGetPtr($tmark))
	EndIf
	Local $atest[2]
	$atest[0] = DllStructGetData($tmark, "Flags") = $lvim_after
	$atest[1] = DllStructGetData($tmark, "Item")
	Return $atest
EndFunc

Func _guictrllistview_isitemvisible($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_isitemvisible, $iindex) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_isitemvisible, $iindex, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_justifycolumn($hwnd, $iindex, $ialign = -1)
	Local $aalign[3] = [$lvcfmt_left, $lvcfmt_right, $lvcfmt_center]
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $tcolumn = DllStructCreate($taglvcolumn)
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	Local $imask = $lvcf_fmt
	Local $ifmt = $aalign[$ialign]
	DllStructSetData($tcolumn, "Mask", $imask)
	DllStructSetData($tcolumn, "Fmt", $ifmt)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_setcolumnw, $iindex, $tcolumn, 0, "wparam", "struct*")
		Else
			Local $icolumn = DllStructGetSize($tcolumn)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $icolumn, $tmemmap)
			_memwrite($tmemmap, $tcolumn, $pmemory, $icolumn)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setcolumnw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setcolumna, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pcolumn = DllStructGetPtr($tcolumn)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumnw, $iindex, $pcolumn)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumna, $iindex, $pcolumn)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_mapidtoindex($hwnd, $iid)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_mapidtoindex, $iid)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_mapidtoindex, $iid, 0)
	EndIf
EndFunc

Func _guictrllistview_mapindextoid($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_mapindextoid, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_mapindextoid, $iindex, 0)
	EndIf
EndFunc

Func _guictrllistview_movegroup($hwnd, $igroupid, $iindex = -1)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_movegroup, $igroupid, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_movegroup, $igroupid, $iindex)
	EndIf
EndFunc

Func __guictrllistview_overlayimagemasktoindex($imask)
	Return BitShift(BitAND($lvis_overlaymask, $imask), 8)
EndFunc

Func _guictrllistview_redrawitems($hwnd, $ifirst, $ilast)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_redrawitems, $ifirst, $ilast) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_redrawitems, $ifirst, $ilast) <> 0
	EndIf
EndFunc

Func _guictrllistview_registersortcallback($hwnd, $bnumbers = True, $barrows = True)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $hheader = _guictrllistview_getheader($hwnd)
	ReDim $__g_alistviewsortinfo[UBound($__g_alistviewsortinfo) + 1][$__g_illistviewsortinfosize]
	$__g_alistviewsortinfo[0][0] = UBound($__g_alistviewsortinfo) - 1
	Local $iindex = $__g_alistviewsortinfo[0][0]
	$__g_alistviewsortinfo[$iindex][1] = $hwnd
	$__g_alistviewsortinfo[$iindex][2] = DllCallbackRegister("__GUICtrlListView_Sort", "int", "int;int;hwnd")
	$__g_alistviewsortinfo[$iindex][3] = -1
	$__g_alistviewsortinfo[$iindex][4] = -1
	$__g_alistviewsortinfo[$iindex][5] = 1
	$__g_alistviewsortinfo[$iindex][6] = -1
	$__g_alistviewsortinfo[$iindex][7] = 0
	$__g_alistviewsortinfo[$iindex][8] = $bnumbers
	$__g_alistviewsortinfo[$iindex][9] = $barrows
	$__g_alistviewsortinfo[$iindex][10] = $hheader
	Return $__g_alistviewsortinfo[$iindex][2] <> 0
EndFunc

Func _guictrllistview_removeallgroups($hwnd)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lvm_removeallgroups)
	Else
		GUICtrlSendMsg($hwnd, $lvm_removeallgroups, 0, 0)
	EndIf
EndFunc

Func _guictrllistview_removegroup($hwnd, $igroupid)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_removegroup, $igroupid)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_removegroup, $igroupid, 0)
	EndIf
EndFunc

Func __guictrllistview_reversecolororder($icolor)
	Local $sh = Hex(String($icolor), 6)
	Return "0x" & StringMid($sh, 5, 2) & StringMid($sh, 3, 2) & StringMid($sh, 1, 2)
EndFunc

Func _guictrllistview_scroll($hwnd, $idx, $idy)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_scroll, $idx, $idy) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_scroll, $idx, $idy) <> 0
	EndIf
EndFunc

Func _guictrllistview_setbkcolor($hwnd, $icolor)
	Local $iret
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lvm_setbkcolor, 0, $icolor)
		_winapi_invalidaterect($hwnd)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setbkcolor, 0, $icolor)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setbkimage($hwnd, $surl = "", $istyle = 0, $ixoffset = 0, $iyoffset = 0)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	If NOT IsHWnd($hwnd) Then Return SetError($lv_err, $lv_err, False)
	Local $astyle[2] = [$lvbkif_style_normal, $lvbkif_style_tile]
	Local $ibuffer = StringLen($surl) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	If @error Then Return SetError($lv_err, $lv_err, $lv_err)
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $timage = DllStructCreate($taglvbkimage)
	Local $iret = 0
	If $surl <> "" Then $iret = $lvbkif_source_url
	$iret = BitOR($iret, $astyle[$istyle])
	DllStructSetData($tbuffer, "Text", $surl)
	DllStructSetData($timage, "Flags", $iret)
	DllStructSetData($timage, "XOffPercent", $ixoffset)
	DllStructSetData($timage, "YOffPercent", $iyoffset)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($timage, "Image", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setbkimagew, 0, $timage, 0, "wparam", "struct*")
		Else
			Local $iimage = DllStructGetSize($timage)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iimage + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iimage
			DllStructSetData($timage, "Image", $ptext)
			_memwrite($tmemmap, $timage, $pmemory, $iimage)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setbkimagew, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setbkimagea, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pimage = DllStructGetPtr($timage)
		DllStructSetData($timage, "Image", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setbkimagew, 0, $pimage)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setbkimagea, 0, $pimage)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setcallbackmask($hwnd, $imask)
	Local $iflags = 0
	If BitAND($imask, 1) <> 0 Then $iflags = BitOR($iflags, $lvis_cut)
	If BitAND($imask, 2) <> 0 Then $iflags = BitOR($iflags, $lvis_drophilited)
	If BitAND($imask, 4) <> 0 Then $iflags = BitOR($iflags, $lvis_focused)
	If BitAND($imask, 8) <> 0 Then $iflags = BitOR($iflags, $lvis_selected)
	If BitAND($imask, 16) <> 0 Then $iflags = BitOR($iflags, $lvis_overlaymask)
	If BitAND($imask, 32) <> 0 Then $iflags = BitOR($iflags, $lvis_stateimagemask)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setcallbackmask, $iflags) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setcallbackmask, $iflags, 0) <> 0
	EndIf
EndFunc

Func _guictrllistview_setcolumn($hwnd, $iindex, $stext, $iwidth = -1, $ialign = -1, $iimage = -1, $bonright = False)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $aalign[3] = [$lvcfmt_left, $lvcfmt_right, $lvcfmt_center]
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $tcolumn = DllStructCreate($taglvcolumn)
	Local $imask = $lvcf_text
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	$imask = BitOR($imask, $lvcf_fmt)
	Local $ifmt = $aalign[$ialign]
	If $iwidth <> -1 Then $imask = BitOR($imask, $lvcf_width)
	If $iimage <> -1 Then
		$imask = BitOR($imask, $lvcf_image)
		$ifmt = BitOR($ifmt, $lvcfmt_col_has_images, $lvcfmt_image)
	Else
		$iimage = 0
	EndIf
	If $bonright Then $ifmt = BitOR($ifmt, $lvcfmt_bitmap_on_right)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($tcolumn, "Mask", $imask)
	DllStructSetData($tcolumn, "Fmt", $ifmt)
	DllStructSetData($tcolumn, "CX", $iwidth)
	DllStructSetData($tcolumn, "TextMax", $ibuffer)
	DllStructSetData($tcolumn, "Image", $iimage)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tcolumn, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setcolumnw, $iindex, $tcolumn, 0, "wparam", "struct*")
		Else
			Local $icolumn = DllStructGetSize($tcolumn)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $icolumn + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $icolumn
			DllStructSetData($tcolumn, "Text", $ptext)
			_memwrite($tmemmap, $tcolumn, $pmemory, $icolumn)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setcolumnw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setcolumna, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pcolumn = DllStructGetPtr($tcolumn)
		DllStructSetData($tcolumn, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumnw, $iindex, $pcolumn)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumna, $iindex, $pcolumn)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setcolumnorder($hwnd, $sorder)
	Local $sseparatorchar = Opt("GUIDataSeparatorChar")
	Return _guictrllistview_setcolumnorderarray($hwnd, StringSplit($sorder, $sseparatorchar))
EndFunc

Func _guictrllistview_setcolumnorderarray($hwnd, $aorder)
	Local $tbuffer = DllStructCreate("int[" & $aorder[0] & "]")
	For $ii = 1 To $aorder[0]
		DllStructSetData($tbuffer, 1, $aorder[$ii], $ii)
	Next
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_setcolumnorderarray, $aorder[0], $tbuffer, 0, "wparam", "struct*")
		Else
			Local $ibuffer = DllStructGetSize($tbuffer)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
			_memwrite($tmemmap, $tbuffer, $pmemory, $ibuffer)
			$iret = _sendmessage($hwnd, $lvm_setcolumnorderarray, $aorder[0], $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setcolumnorderarray, $aorder[0], DllStructGetPtr($tbuffer))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setcolumnwidth($hwnd, $icol, $iwidth)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setcolumnwidth, $icol, $iwidth)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setcolumnwidth, $icol, $iwidth)
	EndIf
EndFunc

Func _guictrllistview_setextendedlistviewstyle($hwnd, $iexstyle, $iexmask = 0)
	Local $iret
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lvm_setextendedlistviewstyle, $iexmask, $iexstyle)
		_winapi_invalidaterect($hwnd)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setextendedlistviewstyle, $iexmask, $iexstyle)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	Return $iret
EndFunc

Func _guictrllistview_setgroupinfo($hwnd, $igroupid, $sheader, $ialign = 0, $istate = $lvgs_normal)
	Local $tgroup = 0
	If BitAND($istate, $lvgs_selected) Then
		$tgroup = __guictrllistview_getgroupinfoex($hwnd, $igroupid, BitOR($lvgf_groupid, $lvgf_items))
		If DllStructGetData($tgroup, "GroupId") <> $igroupid OR DllStructGetData($tgroup, "cItems") = 0 Then Return False
	EndIf
	Local $aalign[3] = [$lvga_header_left, $lvga_header_center, $lvga_header_right]
	If $ialign < 0 OR $ialign > 2 Then $ialign = 0
	Local $theader = _winapi_multibytetowidechar($sheader)
	Local $pheader = DllStructGetPtr($theader)
	Local $iheader = StringLen($sheader)
	$tgroup = DllStructCreate($taglvgroup)
	Local $pgroup = DllStructGetPtr($tgroup)
	Local $igroup = DllStructGetSize($tgroup)
	Local $imask = BitOR($lvgf_header, $lvgf_align, $lvgf_state)
	DllStructSetData($tgroup, "Size", $igroup)
	DllStructSetData($tgroup, "Mask", $imask)
	DllStructSetData($tgroup, "HeaderMax", $iheader)
	DllStructSetData($tgroup, "Align", $aalign[$ialign])
	DllStructSetData($tgroup, "State", $istate)
	DllStructSetData($tgroup, "StateMask", $istate)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tgroup, "Header", $pheader)
			$iret = _sendmessage($hwnd, $lvm_setgroupinfo, $igroupid, $pgroup)
			DllStructSetData($tgroup, "Mask", $lvgf_groupid)
			DllStructSetData($tgroup, "GroupID", $igroupid)
			_sendmessage($hwnd, $lvm_setgroupinfo, 0, $pgroup)
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $igroup + $iheader, $tmemmap)
			Local $ptext = $pmemory + $igroup
			DllStructSetData($tgroup, "Header", $ptext)
			_memwrite($tmemmap, $tgroup, $pmemory, $igroup)
			_memwrite($tmemmap, $theader, $ptext, $iheader)
			$iret = _sendmessage($hwnd, $lvm_setgroupinfo, $igroupid, $pmemory)
			DllStructSetData($tgroup, "Mask", $lvgf_groupid)
			DllStructSetData($tgroup, "GroupID", $igroupid)
			_sendmessage($hwnd, $lvm_setgroupinfo, 0, $pmemory)
			_memfree($tmemmap)
		EndIf
		_winapi_invalidaterect($hwnd)
	Else
		DllStructSetData($tgroup, "Header", $pheader)
		$iret = GUICtrlSendMsg($hwnd, $lvm_setgroupinfo, $igroupid, $pgroup)
		DllStructSetData($tgroup, "Mask", $lvgf_groupid)
		DllStructSetData($tgroup, "GroupID", $igroupid)
		GUICtrlSendMsg($hwnd, $lvm_setgroupinfo, 0, $pgroup)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_sethotcursor($hwnd, $hcursor)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_sethotcursor, 0, $hcursor, 0, "wparam", "handle", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $lvm_sethotcursor, 0, $hcursor))
	EndIf
EndFunc

Func _guictrllistview_sethotitem($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_sethotitem, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_sethotitem, $iindex, 0)
	EndIf
EndFunc

Func _guictrllistview_sethovertime($hwnd, $itime)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_sethovertime, 0, $itime)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_sethovertime, 0, $itime)
	EndIf
EndFunc

Func _guictrllistview_seticonspacing($hwnd, $icx, $icy)
	Local $iret, $apadding[2]
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lvm_seticonspacing, 0, _winapi_makelong($icx, $icy))
		_winapi_invalidaterect($hwnd)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_seticonspacing, 0, _winapi_makelong($icx, $icy))
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	$apadding[0] = BitAND($iret, 65535)
	$apadding[1] = BitShift($iret, 16)
	Return $apadding
EndFunc

Func _guictrllistview_setimagelist($hwnd, $hhandle, $itype = 0)
	Local $atype[3] = [$lvsil_normal, $lvsil_small, $lvsil_state]
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setimagelist, $atype[$itype], $hhandle, 0, "wparam", "handle", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $lvm_setimagelist, $atype[$itype], $hhandle))
	EndIf
EndFunc

Func _guictrllistview_setinfotip($hwnd, $iindex, $stext, $isubitem = 0)
	Local $tbuffer = _winapi_multibytetowidechar($stext)
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $ibuffer = StringLen($stext)
	Local $tinfo = DllStructCreate($taglvsetinfotip)
	Local $iinfo = DllStructGetSize($tinfo)
	DllStructSetData($tinfo, "Size", $iinfo)
	DllStructSetData($tinfo, "Item", $iindex)
	DllStructSetData($tinfo, "SubItem", $isubitem)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($tinfo, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setinfotip, 0, $tinfo, 0, "wparam", "struct*")
		Else
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iinfo + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iinfo
			DllStructSetData($tinfo, "Text", $ptext)
			_memwrite($tmemmap, $tinfo, $pmemory, $iinfo)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			$iret = _sendmessage($hwnd, $lvm_setinfotip, 0, $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		DllStructSetData($tinfo, "Text", $pbuffer)
		$iret = GUICtrlSendMsg($hwnd, $lvm_setinfotip, 0, DllStructGetPtr($tinfo))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setinsertmark($hwnd, $iindex, $bafter = False)
	Local $tmark = DllStructCreate($taglvinsertmark)
	Local $imark = DllStructGetSize($tmark)
	DllStructSetData($tmark, "Size", $imark)
	If $bafter Then DllStructSetData($tmark, "Flags", $lvim_after)
	DllStructSetData($tmark, "Item", $iindex)
	DllStructSetData($tmark, "Reserved", 0)
	Local $iret
	If IsHWnd($hwnd) Then
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $imark, $tmemmap)
		_memwrite($tmemmap, $tmark, $pmemory, $imark)
		$iret = _sendmessage($hwnd, $lvm_setinsertmark, 0, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setinsertmark, 0, DllStructGetPtr($tmark))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setinsertmarkcolor($hwnd, $icolor)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setinsertmarkcolor, 0, $icolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setinsertmarkcolor, 0, $icolor)
	EndIf
EndFunc

Func _guictrllistview_setitem($hwnd, $stext, $iindex = 0, $isubitem = 0, $iimage = -1, $iparam = -1, $iindent = -1)
	Local $pbuffer, $ibuffer
	If $stext <> -1 Then
		$ibuffer = StringLen($stext) + 1
		Local $tbuffer
		If _guictrllistview_getunicodeformat($hwnd) Then
			$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		Else
			$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
		EndIf
		$pbuffer = DllStructGetPtr($tbuffer)
		DllStructSetData($tbuffer, "Text", $stext)
	Else
		$ibuffer = 0
		$pbuffer = -1
	EndIf
	Local $titem = DllStructCreate($taglvitem)
	Local $imask = $lvif_text
	If $iimage <> -1 Then $imask = BitOR($imask, $lvif_image)
	If $iparam <> -1 Then $imask = BitOR($imask, $lvif_param)
	If $iindent <> -1 Then $imask = BitOR($imask, $lvif_indent)
	DllStructSetData($titem, "Mask", $imask)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "Text", $pbuffer)
	DllStructSetData($titem, "TextMax", $ibuffer)
	DllStructSetData($titem, "Image", $iimage)
	DllStructSetData($titem, "Param", $iparam)
	DllStructSetData($titem, "Indent", $iindent)
	Return _guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func _guictrllistview_setitemchecked($hwnd, $iindex, $bcheck = True)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $pmemory, $tmemmap, $iret
	Local $titem = DllStructCreate($taglvitem)
	Local $pitem = DllStructGetPtr($titem)
	Local $iitem = DllStructGetSize($titem)
	If @error Then Return SetError($lv_err, $lv_err, $lv_err)
	If $iindex <> -1 Then
		DllStructSetData($titem, "Mask", $lvif_state)
		DllStructSetData($titem, "Item", $iindex)
		If ($bcheck) Then
			DllStructSetData($titem, "State", 8192)
		Else
			DllStructSetData($titem, "State", 4096)
		EndIf
		DllStructSetData($titem, "StateMask", 61440)
		If IsHWnd($hwnd) Then
			If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
				Return _sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*") <> 0
			Else
				$pmemory = _meminit($hwnd, $iitem, $tmemmap)
				_memwrite($tmemmap, $titem)
				If $bunicode Then
					$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
				Else
					$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
				EndIf
				_memfree($tmemmap)
				Return $iret <> 0
			EndIf
		Else
			If $bunicode Then
				Return GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem) <> 0
			Else
				Return GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem) <> 0
			EndIf
		EndIf
	Else
		For $x = 0 To _guictrllistview_getitemcount($hwnd) - 1
			DllStructSetData($titem, "Mask", $lvif_state)
			DllStructSetData($titem, "Item", $x)
			If ($bcheck) Then
				DllStructSetData($titem, "State", 8192)
			Else
				DllStructSetData($titem, "State", 4096)
			EndIf
			DllStructSetData($titem, "StateMask", 61440)
			If IsHWnd($hwnd) Then
				If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
					If NOT _sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*") <> 0 Then Return SetError($lv_err, $lv_err, $lv_err)
				Else
					$pmemory = _meminit($hwnd, $iitem, $tmemmap)
					_memwrite($tmemmap, $titem)
					If $bunicode Then
						$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
					Else
						$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
					EndIf
					_memfree($tmemmap)
					If NOT $iret <> 0 Then Return SetError($lv_err, $lv_err, $lv_err)
				EndIf
			Else
				If $bunicode Then
					If NOT GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem) <> 0 Then Return SetError($lv_err, $lv_err, $lv_err)
				Else
					If NOT GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem) <> 0 Then Return SetError($lv_err, $lv_err, $lv_err)
				EndIf
			EndIf
		Next
		Return True
	EndIf
	Return False
EndFunc

Func _guictrllistview_setitemcount($hwnd, $iitems)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setitemcount, $iitems, BitOR($lvsicf_noinvalidateall, $lvsicf_noscroll)) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setitemcount, $iitems, BitOR($lvsicf_noinvalidateall, $lvsicf_noscroll)) <> 0
	EndIf
EndFunc

Func _guictrllistview_setitemcut($hwnd, $iindex, $benabled = True)
	Local $istate = 0
	If $benabled Then $istate = $lvis_cut
	Return _guictrllistview_setitemstate($hwnd, $iindex, $istate, $lvis_cut)
EndFunc

Func _guictrllistview_setitemdrophilited($hwnd, $iindex, $benabled = True)
	Local $istate = 0
	If $benabled Then $istate = $lvis_drophilited
	Return _guictrllistview_setitemstate($hwnd, $iindex, $istate, $lvis_drophilited)
EndFunc

Func _guictrllistview_setitemex($hwnd, ByRef $titem)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $iret
	If IsHWnd($hwnd) Then
		Local $iitem = DllStructGetSize($titem)
		Local $ibuffer = DllStructGetData($titem, "TextMax")
		Local $pbuffer = DllStructGetData($titem, "Text")
		If $bunicode Then $ibuffer *= 2
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
		Local $ptext = $pmemory + $iitem
		DllStructSetData($titem, "Text", $ptext)
		_memwrite($tmemmap, $titem, $pmemory, $iitem)
		If $pbuffer <> 0 Then _memwrite($tmemmap, $pbuffer, $ptext, $ibuffer)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	Else
		Local $pitem = DllStructGetPtr($titem)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setitemfocused($hwnd, $iindex, $benabled = True)
	Local $istate = 0
	If $benabled Then $istate = $lvis_focused
	Return _guictrllistview_setitemstate($hwnd, $iindex, $istate, $lvis_focused)
EndFunc

Func _guictrllistview_setitemgroupid($hwnd, $iindex, $igroupid)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_groupid)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "GroupID", $igroupid)
	_guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func _guictrllistview_setitemimage($hwnd, $iindex, $iimage, $isubitem = 0)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_image)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	DllStructSetData($titem, "Image", $iimage)
	Return _guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func _guictrllistview_setitemindent($hwnd, $iindex, $iindent)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_indent)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "Indent", $iindent)
	Return _guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func __guictrllistview_setitemoverlayimage($hwnd, $iindex, $iimage)
	Return _guictrllistview_setitemstate($hwnd, $iindex, __guictrllistview_indextooverlayimagemask($iimage), $lvis_overlaymask)
EndFunc

Func _guictrllistview_setitemparam($hwnd, $iindex, $iparam)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_param)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "Param", $iparam)
	Return _guictrllistview_setitemex($hwnd, $titem)
EndFunc

Func _guictrllistview_setitemposition($hwnd, $iindex, $icx, $icy)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setitemposition, $iindex, _winapi_makelong($icx, $icy)) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setitemposition, $iindex, _winapi_makelong($icx, $icy)) <> 0
	EndIf
EndFunc

Func _guictrllistview_setitemposition32($hwnd, $iindex, $icx, $icy)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $icx)
	DllStructSetData($tpoint, "Y", $icy)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			$iret = _sendmessage($hwnd, $lvm_setitemposition32, $iindex, $tpoint, 0, "wparam", "struct*")
		Else
			Local $ipoint = DllStructGetSize($tpoint)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ipoint, $tmemmap)
			_memwrite($tmemmap, $tpoint)
			$iret = _sendmessage($hwnd, $lvm_setitemposition32, $iindex, $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setitemposition32, $iindex, DllStructGetPtr($tpoint))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setitemselected($hwnd, $iindex, $bselected = True, $bfocused = False)
	Local $tstruct = DllStructCreate($taglvitem)
	Local $iret, $iselected = 0, $ifocused = 0, $isize, $tmemmap, $pmemory
	If ($bselected = True) Then $iselected = $lvis_selected
	If ($bfocused = True AND $iindex <> -1) Then $ifocused = $lvis_focused
	DllStructSetData($tstruct, "Mask", $lvif_state)
	DllStructSetData($tstruct, "Item", $iindex)
	DllStructSetData($tstruct, "State", BitOR($iselected, $ifocused))
	DllStructSetData($tstruct, "StateMask", BitOR($lvis_selected, $ifocused))
	$isize = DllStructGetSize($tstruct)
	If IsHWnd($hwnd) Then
		$pmemory = _meminit($hwnd, $isize, $tmemmap)
		_memwrite($tmemmap, $tstruct, $pmemory, $isize)
		$iret = _sendmessage($hwnd, $lvm_setitemstate, $iindex, $pmemory)
		_memfree($tmemmap)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_setitemstate, $iindex, DllStructGetPtr($tstruct))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setitemstate($hwnd, $iindex, $istate, $istatemask)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($titem, "Mask", $lvif_state)
	DllStructSetData($titem, "Item", $iindex)
	DllStructSetData($titem, "State", $istate)
	DllStructSetData($titem, "StateMask", $istatemask)
	Return _guictrllistview_setitemex($hwnd, $titem) <> 0
EndFunc

Func _guictrllistview_setitemstateimage($hwnd, $iindex, $iimage)
	Return _guictrllistview_setitemstate($hwnd, $iindex, BitShift($iimage, -12), $lvis_stateimagemask)
EndFunc

Func _guictrllistview_setitemtext($hwnd, $iindex, $stext, $isubitem = 0)
	Local $bunicode = _guictrllistview_getunicodeformat($hwnd)
	Local $iret
	If $isubitem = -1 Then
		Local $sseparatorchar = Opt("GUIDataSeparatorChar")
		Local $i_cols = _guictrllistview_getcolumncount($hwnd)
		Local $a_text = StringSplit($stext, $sseparatorchar)
		If $i_cols > $a_text[0] Then $i_cols = $a_text[0]
		For $i = 1 To $i_cols
			$iret = _guictrllistview_setitemtext($hwnd, $iindex, $a_text[$i], $i - 1)
			If NOT $iret Then ExitLoop
		Next
		Return $iret
	EndIf
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $titem = DllStructCreate($taglvitem)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($titem, "Mask", $lvif_text)
	DllStructSetData($titem, "item", $iindex)
	DllStructSetData($titem, "SubItem", $isubitem)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			DllStructSetData($titem, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $lvm_setitemw, 0, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $lvm_setitema, 0, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		DllStructSetData($titem, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitemw, 0, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $lvm_setitema, 0, $pitem)
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_setoutlinecolor($hwnd, $icolor)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setoutlinecolor, 0, $icolor)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setoutlinecolor, 0, $icolor)
	EndIf
EndFunc

Func _guictrllistview_setselectedcolumn($hwnd, $icol)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lvm_setselectedcolumn, $icol)
		_winapi_invalidaterect($hwnd)
	Else
		GUICtrlSendMsg($hwnd, $lvm_setselectedcolumn, $icol, 0)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
EndFunc

Func _guictrllistview_setselectionmark($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setselectionmark, 0, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setselectionmark, 0, $iindex)
	EndIf
EndFunc

Func _guictrllistview_settextbkcolor($hwnd, $icolor)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_settextbkcolor, 0, $icolor) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_settextbkcolor, 0, $icolor) <> 0
	EndIf
EndFunc

Func _guictrllistview_settextcolor($hwnd, $icolor)
	Local $iret
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lvm_settextcolor, 0, $icolor)
		_winapi_invalidaterect($hwnd)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lvm_settextcolor, 0, $icolor)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrllistview_settooltips($hwnd, $htooltip)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_settooltips, 0, $htooltip, 0, "wparam", "hwnd", "hwnd")
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $lvm_settooltips, 0, $htooltip))
	EndIf
EndFunc

Func _guictrllistview_setunicodeformat($hwnd, $bunicode)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setunicodeformat, $bunicode)
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setunicodeformat, $bunicode, 0)
	EndIf
EndFunc

Func _guictrllistview_setview($hwnd, $iview)
	Local $aview[5] = [$lv_view_icon, $lv_view_details, $lv_view_list, $lv_view_smallicon, $lv_view_tile]
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lvm_setview, $aview[$iview]) <> -1
	Else
		Return GUICtrlSendMsg($hwnd, $lvm_setview, $aview[$iview], 0) <> -1
	EndIf
EndFunc

Func _guictrllistview_setworkareas($hwnd, $ileft, $itop, $iright, $ibottom)
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, "Left", $ileft)
	DllStructSetData($trect, "Top", $itop)
	DllStructSetData($trect, "Right", $iright)
	DllStructSetData($trect, "Bottom", $ibottom)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_setworkareas, 1, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_memwrite($tmemmap, $trect, $pmemory, $irect)
			_sendmessage($hwnd, $lvm_setworkareas, 1, $pmemory, 0, "wparam", "ptr")
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_setworkareas, 1, DllStructGetPtr($trect))
	EndIf
EndFunc

Func _guictrllistview_simplesort($hwnd, ByRef $vsortsense, $icol, $btogglesense = True)
	Local $iitemcount = _guictrllistview_getitemcount($hwnd)
	If $iitemcount Then
		Local $idescending = 0
		If UBound($vsortsense) Then
			$idescending = $vsortsense[$icol]
		Else
			$idescending = $vsortsense
		EndIf
		Local $vseparatorchar = Opt("GUIDataSeparatorChar")
		Local $icolumncount = _guictrllistview_getcolumncount($hwnd)
		Local Enum $iindexvalue = $icolumncount, $iitemparam
		Local $alistviewitems[$iitemcount][$icolumncount + 2]
		Local $aselecteditems = StringSplit(_guictrllistview_getselectedindices($hwnd), $vseparatorchar)
		Local $acheckeditems = __guictrllistview_getcheckedindices($hwnd)
		Local $sitemtext, $ifocused = -1
		For $i = 0 To $iitemcount - 1
			If $ifocused = -1 Then
				If _guictrllistview_getitemfocused($hwnd, $i) Then $ifocused = $i
			EndIf
			_guictrllistview_setitemselected($hwnd, $i, False)
			_guictrllistview_setitemchecked($hwnd, $i, False)
			For $j = 0 To $icolumncount - 1
				$sitemtext = StringStripWS(_guictrllistview_getitemtext($hwnd, $i, $j), $str_striptrailing)
				If (StringIsFloat($sitemtext) OR StringIsInt($sitemtext)) Then
					$alistviewitems[$i][$j] = Number($sitemtext)
				Else
					$alistviewitems[$i][$j] = $sitemtext
				EndIf
			Next
			$alistviewitems[$i][$iindexvalue] = $i
			$alistviewitems[$i][$iitemparam] = _guictrllistview_getitemparam($hwnd, $i)
		Next
		_arraysort($alistviewitems, $idescending, 0, 0, $icol)
		For $i = 0 To $iitemcount - 1
			For $j = 0 To $icolumncount - 1
				_guictrllistview_setitemtext($hwnd, $i, $alistviewitems[$i][$j], $j)
			Next
			_guictrllistview_setitemparam($hwnd, $i, $alistviewitems[$i][$iitemparam])
			For $j = 1 To $aselecteditems[0]
				If $alistviewitems[$i][$iindexvalue] = $aselecteditems[$j] Then
					If $alistviewitems[$i][$iindexvalue] = $ifocused Then
						_guictrllistview_setitemselected($hwnd, $i, True, True)
					Else
						_guictrllistview_setitemselected($hwnd, $i, True)
					EndIf
					ExitLoop
				EndIf
			Next
			For $j = 1 To $acheckeditems[0]
				If $alistviewitems[$i][$iindexvalue] = $acheckeditems[$j] Then
					_guictrllistview_setitemchecked($hwnd, $i, True)
					ExitLoop
				EndIf
			Next
		Next
		If $btogglesense Then
			If UBound($vsortsense) Then
				$vsortsense[$icol] = NOT $idescending
			Else
				$vsortsense = NOT $idescending
			EndIf
		EndIf
	EndIf
EndFunc

Func __guictrllistview_sort($nitem1, $nitem2, $hwnd)
	Local $iindex, $sval1, $sval2, $nresult
	For $x = 1 To $__g_alistviewsortinfo[0][0]
		If $hwnd = $__g_alistviewsortinfo[$x][1] Then
			$iindex = $x
			ExitLoop
		EndIf
	Next
	If $__g_alistviewsortinfo[$iindex][3] = $__g_alistviewsortinfo[$iindex][4] Then
		If NOT $__g_alistviewsortinfo[$iindex][7] Then
			$__g_alistviewsortinfo[$iindex][5] *= -1
			$__g_alistviewsortinfo[$iindex][7] = 1
		EndIf
	Else
		$__g_alistviewsortinfo[$iindex][7] = 1
	EndIf
	$__g_alistviewsortinfo[$iindex][6] = $__g_alistviewsortinfo[$iindex][3]
	$sval1 = _guictrllistview_getitemtext($hwnd, $nitem1, $__g_alistviewsortinfo[$iindex][3])
	$sval2 = _guictrllistview_getitemtext($hwnd, $nitem2, $__g_alistviewsortinfo[$iindex][3])
	If $__g_alistviewsortinfo[$iindex][8] Then
		If (StringIsFloat($sval1) OR StringIsInt($sval1)) Then $sval1 = Number($sval1)
		If (StringIsFloat($sval2) OR StringIsInt($sval2)) Then $sval2 = Number($sval2)
	EndIf
	$nresult = 0
	If $sval1 < $sval2 Then
		$nresult = -1
	ElseIf $sval1 > $sval2 Then
		$nresult = 1
	EndIf
	$nresult = $nresult * $__g_alistviewsortinfo[$iindex][5]
	Return $nresult
EndFunc

Func _guictrllistview_sortitems($hwnd, $icol)
	Local $iret, $iindex, $pfunction, $hheader, $iformat
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	For $x = 1 To $__g_alistviewsortinfo[0][0]
		If $hwnd = $__g_alistviewsortinfo[$x][1] Then
			$iindex = $x
			ExitLoop
		EndIf
	Next
	$pfunction = DllCallbackGetPtr($__g_alistviewsortinfo[$iindex][2])
	$__g_alistviewsortinfo[$iindex][3] = $icol
	$__g_alistviewsortinfo[$iindex][7] = 0
	$__g_alistviewsortinfo[$iindex][4] = $__g_alistviewsortinfo[$iindex][6]
	$iret = _sendmessage($hwnd, $lvm_sortitemsex, $hwnd, $pfunction, 0, "hwnd", "ptr")
	If $iret <> 0 Then
		If $__g_alistviewsortinfo[$iindex][9] Then
			$hheader = $__g_alistviewsortinfo[$iindex][10]
			For $x = 0 To _guictrlheader_getitemcount($hheader) - 1
				$iformat = _guictrlheader_getitemformat($hheader, $x)
				If BitAND($iformat, $hdf_sortdown) Then
					_guictrlheader_setitemformat($hheader, $x, BitXOR($iformat, $hdf_sortdown))
				ElseIf BitAND($iformat, $hdf_sortup) Then
					_guictrlheader_setitemformat($hheader, $x, BitXOR($iformat, $hdf_sortup))
				EndIf
			Next
			$iformat = _guictrlheader_getitemformat($hheader, $icol)
			If $__g_alistviewsortinfo[$iindex][5] = 1 Then
				_guictrlheader_setitemformat($hheader, $icol, BitOR($iformat, $hdf_sortup))
			Else
				_guictrlheader_setitemformat($hheader, $icol, BitOR($iformat, $hdf_sortdown))
			EndIf
		EndIf
	EndIf
	Return $iret <> 0
EndFunc

Func __guictrllistview_stateimagemasktoindex($imask)
	Return BitShift(BitAND($imask, $lvis_stateimagemask), 12)
EndFunc

Func _guictrllistview_subitemhittest($hwnd, $ix = -1, $iy = -1)
	Local $itest, $ttest, $pmemory, $tmemmap, $iflags, $atest[11]
	If $ix = -1 Then $ix = _winapi_getmouseposx(True, $hwnd)
	If $iy = -1 Then $iy = _winapi_getmouseposy(True, $hwnd)
	$ttest = DllStructCreate($taglvhittestinfo)
	DllStructSetData($ttest, "X", $ix)
	DllStructSetData($ttest, "Y", $iy)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlvlastwnd) Then
			_sendmessage($hwnd, $lvm_subitemhittest, 0, $ttest, 0, "wparam", "struct*")
		Else
			$itest = DllStructGetSize($ttest)
			$pmemory = _meminit($hwnd, $itest, $tmemmap)
			_memwrite($tmemmap, $ttest)
			_sendmessage($hwnd, $lvm_subitemhittest, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $ttest, $itest)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $lvm_subitemhittest, 0, DllStructGetPtr($ttest))
	EndIf
	$iflags = DllStructGetData($ttest, "Flags")
	$atest[0] = DllStructGetData($ttest, "Item")
	$atest[1] = DllStructGetData($ttest, "SubItem")
	$atest[2] = BitAND($iflags, $lvht_nowhere) <> 0
	$atest[3] = BitAND($iflags, $lvht_onitemicon) <> 0
	$atest[4] = BitAND($iflags, $lvht_onitemlabel) <> 0
	$atest[5] = BitAND($iflags, $lvht_onitemstateicon) <> 0
	$atest[6] = BitAND($iflags, $lvht_onitem) <> 0
	$atest[7] = BitAND($iflags, $lvht_above) <> 0
	$atest[8] = BitAND($iflags, $lvht_below) <> 0
	$atest[9] = BitAND($iflags, $lvht_toleft) <> 0
	$atest[10] = BitAND($iflags, $lvht_toright) <> 0
	Return $atest
EndFunc

Func _guictrllistview_unregistersortcallback($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	For $x = 1 To $__g_alistviewsortinfo[0][0]
		If $hwnd = $__g_alistviewsortinfo[$x][1] Then
			DllCallbackFree($__g_alistviewsortinfo[$x][2])
			__guictrllistview_arraydelete($__g_alistviewsortinfo, $x)
			$__g_alistviewsortinfo[0][0] -= 1
			ExitLoop
		EndIf
	Next
EndFunc

Global Const $gdip_dashcapflat = 0
Global Const $gdip_dashcapround = 2
Global Const $gdip_dashcaptriangle = 3
Global Const $gdip_dashstylesolid = 0
Global Const $gdip_dashstyledash = 1
Global Const $gdip_dashstyledot = 2
Global Const $gdip_dashstyledashdot = 3
Global Const $gdip_dashstyledashdotdot = 4
Global Const $gdip_dashstylecustom = 5
Global Const $gdip_epgchrominancetable = "{F2E455DC-09B3-4316-8260-676ADA32481C}"
Global Const $gdip_epgcolordepth = "{66087055-AD66-4C7C-9A18-38A2310B8337}"
Global Const $gdip_epgcompression = "{E09D739D-CCD4-44EE-8EBA-3FBF8BE4FC58}"
Global Const $gdip_epgluminancetable = "{EDB33BCE-0266-4A77-B904-27216099E717}"
Global Const $gdip_epgquality = "{1D5BE4B5-FA4A-452D-9CDD-5DB35105E7EB}"
Global Const $gdip_epgrendermethod = "{6D42C53A-229A-4825-8BB7-5C99E2B9A8B8}"
Global Const $gdip_epgsaveflag = "{292266FC-AC40-47BF-8CFC-A85B89A655DE}"
Global Const $gdip_epgscanmethod = "{3A4E2661-3109-4E56-8536-42C156E7DCFA}"
Global Const $gdip_epgtransformation = "{8D0EB2D1-A58E-4EA8-AA14-108074B7B6F9}"
Global Const $gdip_epgversion = "{24D18C76-814A-41A4-BF53-1C219CCCF797}"
Global Const $gdip_eptbyte = 1
Global Const $gdip_eptascii = 2
Global Const $gdip_eptshort = 3
Global Const $gdip_eptlong = 4
Global Const $gdip_eptrational = 5
Global Const $gdip_eptlongrange = 6
Global Const $gdip_eptundefined = 7
Global Const $gdip_eptrationalrange = 8
Global Const $gdip_errok = 0
Global Const $gdip_errgenericerror = 1
Global Const $gdip_errinvalidparameter = 2
Global Const $gdip_erroutofmemory = 3
Global Const $gdip_errobjectbusy = 4
Global Const $gdip_errinsufficientbuffer = 5
Global Const $gdip_errnotimplemented = 6
Global Const $gdip_errwin32error = 7
Global Const $gdip_errwrongstate = 8
Global Const $gdip_erraborted = 9
Global Const $gdip_errfilenotfound = 10
Global Const $gdip_errvalueoverflow = 11
Global Const $gdip_erraccessdenied = 12
Global Const $gdip_errunknownimageformat = 13
Global Const $gdip_errfontfamilynotfound = 14
Global Const $gdip_errfontstylenotfound = 15
Global Const $gdip_errnottruetypefont = 16
Global Const $gdip_errunsupportedgdiversion = 17
Global Const $gdip_errgdiplusnotinitialized = 18
Global Const $gdip_errpropertynotfound = 19
Global Const $gdip_errpropertynotsupported = 20
Global Const $gdip_evtcompressionlzw = 2
Global Const $gdip_evtcompressionccitt3 = 3
Global Const $gdip_evtcompressionccitt4 = 4
Global Const $gdip_evtcompressionrle = 5
Global Const $gdip_evtcompressionnone = 6
Global Const $gdip_evttransformrotate90 = 13
Global Const $gdip_evttransformrotate180 = 14
Global Const $gdip_evttransformrotate270 = 15
Global Const $gdip_evttransformfliphorizontal = 16
Global Const $gdip_evttransformflipvertical = 17
Global Const $gdip_evtmultiframe = 18
Global Const $gdip_evtlastframe = 19
Global Const $gdip_evtflush = 20
Global Const $gdip_evtframedimensionpage = 23
Global Const $gdip_icfencoder = 1
Global Const $gdip_icfdecoder = 2
Global Const $gdip_icfsupportbitmap = 4
Global Const $gdip_icfsupportvector = 8
Global Const $gdip_icfseekableencode = 16
Global Const $gdip_icfblockingdecode = 32
Global Const $gdip_icfbuiltin = 65536
Global Const $gdip_icfsystem = 131072
Global Const $gdip_icfuser = 262144
Global Const $gdip_ilmread = 1
Global Const $gdip_ilmwrite = 2
Global Const $gdip_ilmuserinputbuf = 4
Global Const $gdip_linecapflat = 0
Global Const $gdip_linecapsquare = 1
Global Const $gdip_linecapround = 2
Global Const $gdip_linecaptriangle = 3
Global Const $gdip_linecapnoanchor = 16
Global Const $gdip_linecapsquareanchor = 17
Global Const $gdip_linecaproundanchor = 18
Global Const $gdip_linecapdiamondanchor = 19
Global Const $gdip_linecaparrowanchor = 20
Global Const $gdip_linecapcustom = 255
Global Const $gdip_pxf01indexed = 196865
Global Const $gdip_pxf04indexed = 197634
Global Const $gdip_pxf08indexed = 198659
Global Const $gdip_pxf16grayscale = 1052676
Global Const $gdip_pxf16rgb555 = 135173
Global Const $gdip_pxf16rgb565 = 135174
Global Const $gdip_pxf16argb1555 = 397319
Global Const $gdip_pxf24rgb = 137224
Global Const $gdip_pxf32rgb = 139273
Global Const $gdip_pxf32argb = 2498570
Global Const $gdip_pxf32pargb = 925707
Global Const $gdip_pxf48rgb = 1060876
Global Const $gdip_pxf64argb = 3424269
Global Const $gdip_pxf64pargb = 1720334
Global Const $gdip_imageformat_undefined = "{B96B3CA9-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_memorybmp = "{B96B3CAA-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_bmp = "{B96B3CAB-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_emf = "{B96B3CAC-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_wmf = "{B96B3CAD-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_jpeg = "{B96B3CAE-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_png = "{B96B3CAF-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_gif = "{B96B3CB0-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_tiff = "{B96B3CB1-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_exif = "{B96B3CB2-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imageformat_icon = "{B96B3CB5-0728-11D3-9D7B-0000F81EF32E}"
Global Const $gdip_imagetype_unknown = 0
Global Const $gdip_imagetype_bitmap = 1
Global Const $gdip_imagetype_metafile = 2
Global Const $gdip_imageflags_none = 0
Global Const $gdip_imageflags_scalable = 1
Global Const $gdip_imageflags_hasalpha = 2
Global Const $gdip_imageflags_hastranslucent = 4
Global Const $gdip_imageflags_partiallyscalable = 8
Global Const $gdip_imageflags_colorspace_rgb = 16
Global Const $gdip_imageflags_colorspace_cmyk = 32
Global Const $gdip_imageflags_colorspace_gray = 64
Global Const $gdip_imageflags_colorspace_ycbcr = 128
Global Const $gdip_imageflags_colorspace_ycck = 256
Global Const $gdip_imageflags_hasrealdpi = 4096
Global Const $gdip_imageflags_hasrealpixelsize = 8192
Global Const $gdip_imageflags_readonly = 65536
Global Const $gdip_imageflags_caching = 131072
Global Const $gdip_smoothingmode_invalid = -1
Global Const $gdip_smoothingmode_default = 0
Global Const $gdip_smoothingmode_highspeed = 1
Global Const $gdip_smoothingmode_highquality = 2
Global Const $gdip_smoothingmode_none = 3
Global Const $gdip_smoothingmode_antialias8x4 = 4
Global Const $gdip_smoothingmode_antialias = $gdip_smoothingmode_antialias8x4
Global Const $gdip_smoothingmode_antialias8x8 = 5
Global Const $gdip_rlum = 0.3086
Global Const $gdip_glum = 0.6094
Global Const $gdip_blum = 0.082
Global Const $gdip_interpolationmode_invalid = -1
Global Const $gdip_interpolationmode_default = 0
Global Const $gdip_interpolationmode_lowquality = 1
Global Const $gdip_interpolationmode_highquality = 2
Global Const $gdip_interpolationmode_bilinear = 3
Global Const $gdip_interpolationmode_bicubic = 4
Global Const $gdip_interpolationmode_nearestneighbor = 5
Global Const $gdip_interpolationmode_highqualitybilinear = 6
Global Const $gdip_interpolationmode_highqualitybicubic = 7
Global Const $gdip_textrenderinghint_systemdefault = 0
Global Const $gdip_textrenderinghint_singlebitperpixelgridfit = 1
Global Const $gdip_textrenderinghint_singlebitperpixel = 2
Global Const $gdip_textrenderinghint_antialiasgridfit = 3
Global Const $gdip_textrenderinghint_antialias = 4
Global Const $gdip_textrenderinghint_cleartypegridfit = 5
Global Const $gdip_pixeloffsetmode_invalid = -1
Global Const $gdip_pixeloffsetmode_default = 0
Global Const $gdip_pixeloffsetmode_highspeed = 1
Global Const $gdip_pixeloffsetmode_highquality = 2
Global Const $gdip_pixeloffsetmode_none = 3
Global Const $gdip_pixeloffsetmode_half = 4
Global Const $gdip_pensetlinejoin_miter = 0
Global Const $gdip_pensetlinejoin_bevel = 1
Global Const $gdip_pensetlinejoin_round = 2
Global Const $gdip_pensetlinejoin_miterclipped = 3
Global Const $gdip_fillmodealternate = 0
Global Const $gdip_fillmodewinding = 1
Global Const $gdip_qualitymodeinvalid = -1
Global Const $gdip_qualitymodedefault = 0
Global Const $gdip_qualitymodelow = 1
Global Const $gdip_qualitymodehigh = 2
Global Const $gdip_compositingmodesourceover = 0
Global Const $gdip_compositingmodesourcecopy = 1
Global Const $gdip_compositingqualityinvalid = $gdip_qualitymodeinvalid
Global Const $gdip_compositingqualitydefault = $gdip_qualitymodedefault
Global Const $gdip_compositingqualityhighspeed = $gdip_qualitymodelow
Global Const $gdip_compositingqualityhighquality = $gdip_qualitymodehigh
Global Const $gdip_compositingqualitygammacorrected = 3
Global Const $gdip_compositingqualityassumelinear = 4
Global Const $gdip_hatchstyle_horizontal = 0
Global Const $gdip_hatchstyle_vertical = 1
Global Const $gdip_hatchstyle_forwarddiagonal = 2
Global Const $gdip_hatchstyle_backwarddiagonal = 3
Global Const $gdip_hatchstyle_cross = 4
Global Const $gdip_hatchstyle_diagonalcross = 5
Global Const $gdip_hatchstyle_05percent = 6
Global Const $gdip_hatchstyle_10percent = 7
Global Const $gdip_hatchstyle_20percent = 8
Global Const $gdip_hatchstyle_25percent = 9
Global Const $gdip_hatchstyle_30percent = 10
Global Const $gdip_hatchstyle_40percent = 11
Global Const $gdip_hatchstyle_50percent = 12
Global Const $gdip_hatchstyle_60percent = 13
Global Const $gdip_hatchstyle_70percent = 14
Global Const $gdip_hatchstyle_75percent = 15
Global Const $gdip_hatchstyle_80percent = 16
Global Const $gdip_hatchstyle_90percent = 17
Global Const $gdip_hatchstyle_lightdownwarddiagonal = 18
Global Const $gdip_hatchstyle_lightupwarddiagonal = 19
Global Const $gdip_hatchstyle_darkdownwarddiagonal = 20
Global Const $gdip_hatchstyle_darkupwarddiagonal = 21
Global Const $gdip_hatchstyle_widedownwarddiagonal = 22
Global Const $gdip_hatchstyle_wideupwarddiagonal = 23
Global Const $gdip_hatchstyle_lightvertical = 24
Global Const $gdip_hatchstyle_lighthorizontal = 25
Global Const $gdip_hatchstyle_narrowvertical = 26
Global Const $gdip_hatchstyle_narrowhorizontal = 27
Global Const $gdip_hatchstyle_darkvertical = 28
Global Const $gdip_hatchstyle_darkhorizontal = 29
Global Const $gdip_hatchstyle_dasheddownwarddiagonal = 30
Global Const $gdip_hatchstyle_dashedupwarddiagonal = 31
Global Const $gdip_hatchstyle_dashedhorizontal = 32
Global Const $gdip_hatchstyle_dashedvertical = 33
Global Const $gdip_hatchstyle_smallconfetti = 34
Global Const $gdip_hatchstyle_largeconfetti = 35
Global Const $gdip_hatchstyle_zigzag = 36
Global Const $gdip_hatchstyle_wave = 37
Global Const $gdip_hatchstyle_diagonalbrick = 38
Global Const $gdip_hatchstyle_horizontalbrick = 39
Global Const $gdip_hatchstyle_weave = 40
Global Const $gdip_hatchstyle_plaid = 41
Global Const $gdip_hatchstyle_divot = 42
Global Const $gdip_hatchstyle_dottedgrid = 43
Global Const $gdip_hatchstyle_dotteddiamond = 44
Global Const $gdip_hatchstyle_shingle = 45
Global Const $gdip_hatchstyle_trellis = 46
Global Const $gdip_hatchstyle_sphere = 47
Global Const $gdip_hatchstyle_smallgrid = 48
Global Const $gdip_hatchstyle_smallcheckerboard = 49
Global Const $gdip_hatchstyle_largecheckerboard = 50
Global Const $gdip_hatchstyle_outlineddiamond = 51
Global Const $gdip_hatchstyle_soliddiamond = 52
Global Const $gdip_hatchstyle_total = 53
Global Const $gdip_hatchstyle_largegrid = $gdip_hatchstyle_cross
Global Const $gdip_hatchstyle_min = $gdip_hatchstyle_horizontal
Global Const $gdip_hatchstyle_max = $gdip_hatchstyle_total - 1
Global Const $gdip_blureffectguid = "{633C80A4-1843-482b-9EF2-BE2834C5FDD4}"
Global Const $gdip_sharpeneffectguid = "{63CBF3EE-C526-402c-8F71-62C540BF5142}"
Global Const $gdip_colormatrixeffectguid = "{718F2615-7933-40e3-A511-5F68FE14DD74}"
Global Const $gdip_colorluteffectguid = "{A7CE72A9-0F7F-40d7-B3CC-D0C02D5C3212}"
Global Const $gdip_brightnesscontrasteffectguid = "{D3A1DBE1-8EC4-4c17-9F4C-EA97AD1C343D}"
Global Const $gdip_huesaturationlightnesseffectguid = "{8B2DD6C3-EB07-4d87-A5F0-7108E26A9C5F}"
Global Const $gdip_levelseffectguid = "{99C354EC-2A31-4f3a-8C34-17A803B33A25}"
Global Const $gdip_tinteffectguid = "{1077AF00-2848-4441-9489-44AD4C2D7A2C}"
Global Const $gdip_colorbalanceeffectguid = "{537E597D-251E-48da-9664-29CA496B70F8}"
Global Const $gdip_redeyecorrectioneffectguid = "{74D29D05-69A4-4266-9549-3CC52836B632}"
Global Const $gdip_colorcurveeffectguid = "{DD6A0022-58E4-4a67-9D9B-D48EB881A53D}"
Global Const $gdip_adjustexposure = 0
Global Const $gdip_adjustdensity = 1
Global Const $gdip_adjustcontrast = 2
Global Const $gdip_adjusthighlight = 3
Global Const $gdip_adjustshadow = 4
Global Const $gdip_adjustmidtone = 5
Global Const $gdip_adjustwhitesaturation = 6
Global Const $gdip_adjustblacksaturation = 7
Global Const $gdip_curvechannelall = 0
Global Const $gdip_curvechannelred = 1
Global Const $gdip_curvechannelgreen = 2
Global Const $gdip_curvechannelblue = 3
Global Const $gdip_palettetypecustom = 0
Global Const $gdip_palettetypeoptimal = 1
Global Const $gdip_palettetypefixedbw = 2
Global Const $gdip_palettetypefixedhalftone8 = 3
Global Const $gdip_palettetypefixedhalftone27 = 4
Global Const $gdip_palettetypefixedhalftone64 = 5
Global Const $gdip_palettetypefixedhalftone125 = 6
Global Const $gdip_palettetypefixedhalftone216 = 7
Global Const $gdip_palettetypefixedhalftone252 = 8
Global Const $gdip_palettetypefixedhalftone256 = 9
Global Const $gdip_paletteflagshasalpha = 1
Global Const $gdip_paletteflagsgrayscale = 2
Global Const $gdip_paletteflagshalftone = 4
Global Const $gdip_dithertypenone = 0
Global Const $gdip_dithertypesolid = 1
Global Const $gdip_dithertypeordered4x4 = 2
Global Const $gdip_dithertypeordered8x8 = 3
Global Const $gdip_dithertypeordered16x16 = 4
Global Const $gdip_dithertypeordered91x91 = 5
Global Const $gdip_dithertypespiral4x4 = 6
Global Const $gdip_dithertypespiral8x8 = 7
Global Const $gdip_dithertypedualspiral4x4 = 8
Global Const $gdip_dithertypedualspiral8x8 = 9
Global Const $gdip_dithertypeerrordiffusion = 10
Global Const $gdip_dithertypemax = 10
Global Const $gdip_histogramformatargb = 0
Global Const $gdip_histogramformatpargb = 1
Global Const $gdip_histogramformatrgb = 2
Global Const $gdip_histogramformatgray = 3
Global Const $gdip_histogramformatb = 4
Global Const $gdip_histogramformatg = 5
Global Const $gdip_histogramformatr = 6
Global Const $gdip_histogramformata = 7
Global Const $gdip_textrenderinghintsystemdefault = 0
Global Const $gdip_textrenderinghintsinglebitperpixelgridfit = 1
Global Const $gdip_textrenderinghintsinglebitperpixel = 2
Global Const $gdip_textrenderinghintantialiasgridfit = 3
Global Const $gdip_textrenderinghintantialias = 4
Global Const $gdip_textrenderinghintcleartypegridfit = 5
Global Const $gdip_rotatenoneflipnone = 0
Global Const $gdip_rotate90flipnone = 1
Global Const $gdip_rotate180flipnone = 2
Global Const $gdip_rotate270flipnone = 3
Global Const $gdip_rotatenoneflipx = 4
Global Const $gdip_rotate90flipx = 5
Global Const $gdip_rotate180flipx = 6
Global Const $gdip_rotate270flipx = 7
Global Const $gdip_rotatenoneflipy = $gdip_rotate180flipx
Global Const $gdip_rotate90flipy = $gdip_rotate270flipx
Global Const $gdip_rotate180flipy = $gdip_rotatenoneflipx
Global Const $gdip_rotate270flipy = $gdip_rotate90flipx
Global Const $gdip_rotatenoneflipxy = $gdip_rotate180flipnone
Global Const $gdip_rotate90flipxy = $gdip_rotate270flipnone
Global Const $gdip_rotate270flipxy = $gdip_rotate90flipnone
Global Const $fr_private = 16
Global Const $fr_not_enum = 32
Global Const $compression_bitmap_png = 0
Global Const $compression_bitmap_jpeg = 1
Global Const $bs_dibpattern = 5
Global Const $bs_dibpattern8x8 = 8
Global Const $bs_dibpatternpt = 6
Global Const $bs_hatched = 2
Global Const $bs_hollow = 1
Global Const $bs_null = 1
Global Const $bs_pattern = 3
Global Const $bs_pattern8x8 = 7
Global Const $bs_solid = 0
Global Const $hs_bdiagonal = 3
Global Const $hs_cross = 4
Global Const $hs_diagcross = 5
Global Const $hs_fdiagonal = 2
Global Const $hs_horizontal = 0
Global Const $hs_vertical = 1
Global Const $dib_pal_colors = 1
Global Const $dib_rgb_colors = 0
Global Const $ca_negative = 1
Global Const $ca_log_filter = 2
Global Const $illuminant_device_default = 0
Global Const $illuminant_a = 1
Global Const $illuminant_b = 2
Global Const $illuminant_c = 3
Global Const $illuminant_d50 = 4
Global Const $illuminant_d55 = 5
Global Const $illuminant_d65 = 6
Global Const $illuminant_d75 = 7
Global Const $illuminant_f2 = 8
Global Const $illuminant_tungsten = $illuminant_a
Global Const $illuminant_daylight = $illuminant_c
Global Const $illuminant_fluorescent = $illuminant_f2
Global Const $illuminant_ntsc = $illuminant_c
Global Const $bi_rgb = 0
Global Const $bi_rle8 = 1
Global Const $bi_rle4 = 2
Global Const $bi_bitfields = 3
Global Const $bi_jpeg = 4
Global Const $bi_png = 5
Global Const $alternate = 1
Global Const $winding = 2
Global Const $dwmwa_ncrendering_enabled = 1
Global Const $dwmwa_ncrendering_policy = 2
Global Const $dwmwa_transitions_forcedisabled = 3
Global Const $dwmwa_allow_ncpaint = 4
Global Const $dwmwa_caption_button_bounds = 5
Global Const $dwmwa_nonclient_rtl_layout = 6
Global Const $dwmwa_force_iconic_representation = 7
Global Const $dwmwa_flip3d_policy = 8
Global Const $dwmwa_extended_frame_bounds = 9
Global Const $dwmwa_has_iconic_bitmap = 10
Global Const $dwmwa_disallow_peek = 11
Global Const $dwmwa_excluded_from_peek = 12
Global Const $dwmncrp_usewindowstyle = 0
Global Const $dwmncrp_disabled = 1
Global Const $dwmncrp_enabled = 2
Global Const $dwmflip3d_default = 0
Global Const $dwmflip3d_excludebelow = 1
Global Const $dwmflip3d_excludeabove = 2
Global Const $dm_bitsperpel = 262144
Global Const $dm_collate = 32768
Global Const $dm_color = 2048
Global Const $dm_copies = 256
Global Const $dm_defaultsource = 512
Global Const $dm_displayfixedoutput = 536870912
Global Const $dm_displayflags = 2097152
Global Const $dm_displayfrequency = 4194304
Global Const $dm_displayorientation = 128
Global Const $dm_dithertype = 67108864
Global Const $dm_duplex = 4096
Global Const $dm_formname = 65536
Global Const $dm_icmintent = 16777216
Global Const $dm_icmmethod = 8388608
Global Const $dm_logpixels = 131072
Global Const $dm_mediatype = 33554432
Global Const $dm_nup = 64
Global Const $dm_orientation = 1
Global Const $dm_panningheight = 268435456
Global Const $dm_panningwidth = 134217728
Global Const $dm_paperlength = 4
Global Const $dm_papersize = 2
Global Const $dm_paperwidth = 8
Global Const $dm_pelsheight = 1048576
Global Const $dm_pelswidth = 524288
Global Const $dm_position = 32
Global Const $dm_printquality = 1024
Global Const $dm_scale = 16
Global Const $dm_ttoption = 16384
Global Const $dm_yresolution = 8192
Global Const $dmpaper_letter = 1
Global Const $dmpaper_lettersmall = 2
Global Const $dmpaper_tabloid = 3
Global Const $dmpaper_ledger = 4
Global Const $dmpaper_legal = 5
Global Const $dmpaper_statement = 6
Global Const $dmpaper_executive = 7
Global Const $dmpaper_a3 = 8
Global Const $dmpaper_a4 = 9
Global Const $dmpaper_a4small = 10
Global Const $dmpaper_a5 = 11
Global Const $dmpaper_b4 = 12
Global Const $dmpaper_b5 = 13
Global Const $dmpaper_folio = 14
Global Const $dmpaper_quarto = 15
Global Const $dmpaper_10x14 = 16
Global Const $dmpaper_11x17 = 17
Global Const $dmpaper_note = 18
Global Const $dmpaper_env_9 = 19
Global Const $dmpaper_env_10 = 20
Global Const $dmpaper_env_11 = 21
Global Const $dmpaper_env_12 = 22
Global Const $dmpaper_env_14 = 23
Global Const $dmpaper_csheet = 24
Global Const $dmpaper_dsheet = 25
Global Const $dmpaper_esheet = 26
Global Const $dmpaper_env_dl = 27
Global Const $dmpaper_env_c5 = 28
Global Const $dmpaper_env_c3 = 29
Global Const $dmpaper_env_c4 = 30
Global Const $dmpaper_env_c6 = 31
Global Const $dmpaper_env_c65 = 32
Global Const $dmpaper_env_b4 = 33
Global Const $dmpaper_env_b5 = 34
Global Const $dmpaper_env_b6 = 35
Global Const $dmpaper_env_italy = 36
Global Const $dmpaper_env_monarch = 37
Global Const $dmpaper_env_personal = 38
Global Const $dmpaper_fanfold_us = 39
Global Const $dmpaper_fanfold_std_german = 40
Global Const $dmpaper_fanfold_lgl_german = 41
Global Const $dmpaper_iso_b4 = 42
Global Const $dmpaper_japanese_postcard = 43
Global Const $dmpaper_9x11 = 44
Global Const $dmpaper_10x11 = 45
Global Const $dmpaper_15x11 = 46
Global Const $dmpaper_env_invite = 47
Global Const $dmpaper_reserved_48 = 48
Global Const $dmpaper_reserved_49 = 49
Global Const $dmpaper_letter_extra = 50
Global Const $dmpaper_legal_extra = 51
Global Const $dmpaper_tabloid_extra = 52
Global Const $dmpaper_a4_extra = 53
Global Const $dmpaper_letter_transverse = 54
Global Const $dmpaper_a4_transverse = 55
Global Const $dmpaper_letter_extra_transverse = 56
Global Const $dmpaper_a_plus = 57
Global Const $dmpaper_b_plus = 58
Global Const $dmpaper_letter_plus = 59
Global Const $dmpaper_a4_plus = 60
Global Const $dmpaper_a5_transverse = 61
Global Const $dmpaper_b5_transverse = 62
Global Const $dmpaper_a3_extra = 63
Global Const $dmpaper_a5_extra = 64
Global Const $dmpaper_b5_extra = 65
Global Const $dmpaper_a2 = 66
Global Const $dmpaper_a3_transverse = 67
Global Const $dmpaper_a3_extra_transverse = 68
Global Const $dmpaper_dbl_japanese_postcard = 69
Global Const $dmpaper_a6 = 70
Global Const $dmpaper_jenv_kaku2 = 71
Global Const $dmpaper_jenv_kaku3 = 72
Global Const $dmpaper_jenv_chou3 = 73
Global Const $dmpaper_jenv_chou4 = 74
Global Const $dmpaper_letter_rotated = 75
Global Const $dmpaper_a3_rotated = 76
Global Const $dmpaper_a4_rotated = 77
Global Const $dmpaper_a5_rotated = 78
Global Const $dmpaper_b4_jis_rotated = 79
Global Const $dmpaper_b5_jis_rotated = 80
Global Const $dmpaper_japanese_postcard_rotated = 81
Global Const $dmpaper_dbl_japanese_postcard_rotated = 82
Global Const $dmpaper_a6_rotated = 83
Global Const $dmpaper_jenv_kaku2_rotated = 84
Global Const $dmpaper_jenv_kaku3_rotated = 85
Global Const $dmpaper_jenv_chou3_rotated = 86
Global Const $dmpaper_jenv_chou4_rotated = 87
Global Const $dmpaper_b6_jis = 88
Global Const $dmpaper_b6_jis_rotated = 89
Global Const $dmpaper_12x11 = 90
Global Const $dmpaper_jenv_you4 = 91
Global Const $dmpaper_jenv_you4_rotated = 92
Global Const $dmpaper_p16k = 93
Global Const $dmpaper_p32k = 94
Global Const $dmpaper_p32kbig = 95
Global Const $dmpaper_penv_1 = 96
Global Const $dmpaper_penv_2 = 97
Global Const $dmpaper_penv_3 = 98
Global Const $dmpaper_penv_4 = 99
Global Const $dmpaper_penv_5 = 100
Global Const $dmpaper_penv_6 = 101
Global Const $dmpaper_penv_7 = 102
Global Const $dmpaper_penv_8 = 103
Global Const $dmpaper_penv_9 = 104
Global Const $dmpaper_penv_10 = 105
Global Const $dmpaper_p16k_rotated = 106
Global Const $dmpaper_p32k_rotated = 107
Global Const $dmpaper_p32kbig_rotated = 108
Global Const $dmpaper_penv_1_rotated = 109
Global Const $dmpaper_penv_2_rotated = 110
Global Const $dmpaper_penv_3_rotated = 111
Global Const $dmpaper_penv_4_rotated = 112
Global Const $dmpaper_penv_5_rotated = 113
Global Const $dmpaper_penv_6_rotated = 114
Global Const $dmpaper_penv_7_rotated = 115
Global Const $dmpaper_penv_8_rotated = 116
Global Const $dmpaper_penv_9_rotated = 117
Global Const $dmpaper_penv_10_rotated = 118
Global Const $dmpaper_user = 256
Global Const $dmbin_upper = 1
Global Const $dmbin_lower = 2
Global Const $dmbin_middle = 3
Global Const $dmbin_manual = 4
Global Const $dmbin_envelope = 5
Global Const $dmbin_envmanual = 6
Global Const $dmbin_auto = 7
Global Const $dmbin_tractor = 8
Global Const $dmbin_smallfmt = 9
Global Const $dmbin_largefmt = 10
Global Const $dmbin_largecapacity = 11
Global Const $dmbin_cassette = 14
Global Const $dmbin_formsource = 15
Global Const $dmbin_user = 256
Global Const $dmres_draft = -1
Global Const $dmres_low = -2
Global Const $dmres_medium = -3
Global Const $dmres_high = -4
Global Const $dmdo_default = 0
Global Const $dmdo_90 = 1
Global Const $dmdo_180 = 2
Global Const $dmdo_270 = 3
Global Const $dmdfo_default = 0
Global Const $dmdfo_stretch = 1
Global Const $dmdfo_center = 2
Global Const $dmcolor_monochrome = 1
Global Const $dmcolor_color = 2
Global Const $dmdup_simplex = 1
Global Const $dmdup_vertical = 2
Global Const $dmdup_horizontal = 3
Global Const $dmtt_bitmap = 1
Global Const $dmtt_download = 2
Global Const $dmtt_subdev = 3
Global Const $dmtt_download_outline = 4
Global Const $dmcollate_false = 0
Global Const $dmcollate_true = 1
Global Const $dm_grayscale = 1
Global Const $dm_interlaced = 2
Global Const $dmnup_system = 1
Global Const $dmnup_oneup = 2
Global Const $dmicmmethod_none = 1
Global Const $dmicmmethod_system = 2
Global Const $dmicmmethod_driver = 3
Global Const $dmicmmethod_device = 4
Global Const $dmicmmethod_user = 256
Global Const $dmicm_saturate = 1
Global Const $dmicm_contrast = 2
Global Const $dmicm_colorimetric = 3
Global Const $dmicm_abs_colorimetric = 4
Global Const $dmicm_user = 256
Global Const $dmmedia_standard = 1
Global Const $dmmedia_transparency = 2
Global Const $dmmedia_glossy = 3
Global Const $dmmedia_user = 256
Global Const $dmdither_none = 1
Global Const $dmdither_coarse = 2
Global Const $dmdither_fine = 3
Global Const $dmdither_lineart = 4
Global Const $dmdither_errordiffusion = 5
Global Const $dmdither_reserved6 = 6
Global Const $dmdither_reserved7 = 7
Global Const $dmdither_reserved8 = 8
Global Const $dmdither_reserved9 = 9
Global Const $dmdither_grayscale = 10
Global Const $dmdither_user = 256
Global Const $enum_current_settings = -1
Global Const $enum_registry_settings = -2
Global Const $device_fonttype = 2
Global Const $raster_fonttype = 1
Global Const $truetype_fonttype = 4
Global Const $ntm_bold = 32
Global Const $ntm_dsig = 2097152
Global Const $ntm_italic = 1
Global Const $ntm_multiplemaster = 524288
Global Const $ntm_nonnegative_ac = 65536
Global Const $ntm_ps_opentype = 131072
Global Const $ntm_regular = 64
Global Const $ntm_tt_opentype = 262144
Global Const $ntm_type1 = 1048576
Global Const $floodfillborder = 0
Global Const $floodfillsurface = 1
Global Const $ad_counterclockwise = 1
Global Const $ad_clockwise = 2
Global Const $dcb_accumulate = 2
Global Const $dcb_disable = 8
Global Const $dcb_enable = 4
Global Const $dcb_reset = 1
Global Const $dcb_set = BitOR($dcb_reset, $dcb_accumulate)
Global Const $obj_bitmap = 7
Global Const $obj_brush = 2
Global Const $obj_colorspace = 14
Global Const $obj_dc = 3
Global Const $obj_enhmetadc = 12
Global Const $obj_enhmetafile = 13
Global Const $obj_extpen = 11
Global Const $obj_font = 6
Global Const $obj_memdc = 10
Global Const $obj_metadc = 4
Global Const $obj_metafile = 9
Global Const $obj_pal = 5
Global Const $obj_pen = 1
Global Const $obj_region = 8
Global Const $dcx_window = 1
Global Const $dcx_cache = 2
Global Const $dcx_parentclip = 32
Global Const $dcx_clipsiblings = 16
Global Const $dcx_clipchildren = 8
Global Const $dcx_noresetattrs = 4
Global Const $dcx_lockwindowupdate = 1024
Global Const $dcx_excludergn = 64
Global Const $dcx_intersectrgn = 128
Global Const $dcx_intersectupdate = 512
Global Const $dcx_validate = 2097152
Global Const $ggo_bezier = 3
Global Const $ggo_bitmap = 1
Global Const $ggo_glyph_index = 128
Global Const $ggo_gray2_bitmap = 4
Global Const $ggo_gray4_bitmap = 5
Global Const $ggo_gray8_bitmap = 6
Global Const $ggo_metrics = 0
Global Const $ggo_native = 2
Global Const $ggo_unhinted = 256
Global Const $gm_compatible = 1
Global Const $gm_advanced = 2
Global Const $mm_anisotropic = 8
Global Const $mm_hienglish = 5
Global Const $mm_himetric = 3
Global Const $mm_isotropic = 7
Global Const $mm_loenglish = 4
Global Const $mm_lometric = 2
Global Const $mm_text = 1
Global Const $mm_twips = 6
Global Const $r2_black = 1
Global Const $r2_copypen = 13
Global Const $r2_last = 16
Global Const $r2_masknotpen = 3
Global Const $r2_maskpen = 9
Global Const $r2_maskpennot = 5
Global Const $r2_mergenotpen = 12
Global Const $r2_mergepen = 15
Global Const $r2_mergepennot = 14
Global Const $r2_nop = 11
Global Const $r2_not = 6
Global Const $r2_notcopypen = 4
Global Const $r2_notmaskpen = 8
Global Const $r2_notmergepen = 2
Global Const $r2_notxorpen = 10
Global Const $r2_white = 16
Global Const $r2_xorpen = 7
Global Const $blackonwhite = 1
Global Const $coloroncolor = 3
Global Const $halftone = 4
Global Const $whiteonblack = 2
Global Const $stretch_andscans = $blackonwhite
Global Const $stretch_deletescans = $coloroncolor
Global Const $stretch_halftone = $halftone
Global Const $stretch_orscans = $whiteonblack
Global Const $ta_baseline = 24
Global Const $ta_bottom = 8
Global Const $ta_top = 0
Global Const $ta_center = 6
Global Const $ta_left = 0
Global Const $ta_right = 2
Global Const $ta_noupdatecp = 0
Global Const $ta_rtlreading = 256
Global Const $ta_updatecp = 1
Global Const $vta_baseline = $ta_baseline
Global Const $vta_bottom = $ta_right
Global Const $vta_top = $ta_left
Global Const $vta_center = $ta_center
Global Const $vta_left = $ta_bottom
Global Const $vta_right = $ta_top
Global Const $udf_bgr = 1
Global Const $udf_rgb = 0
Global Const $mwt_identity = 1
Global Const $mwt_leftmultiply = 2
Global Const $mwt_rightmultiply = 3
Global Const $mwt_set = 4
Global Const $monitor_defaulttonearest = 2
Global Const $monitor_defaulttonull = 0
Global Const $monitor_defaulttoprimary = 1
Global Const $pt_bezierto = 4
Global Const $pt_lineto = 2
Global Const $pt_moveto = 6
Global Const $pt_closefigure = 1
Global Const $coinit_apartmentthreaded = 2
Global Const $coinit_disable_ole1dde = 4
Global Const $coinit_multithreaded = 0
Global Const $coinit_speed_over_memory = 8
#Region Global Variables and Constants
	Global $__g_venum, $__g_vext = 0
	Global $__g_hheap = 0, $__g_irgbmode = 1
	Global Const $tagosversioninfo = "struct;dword OSVersionInfoSize;dword MajorVersion;dword MinorVersion;dword BuildNumber;dword PlatformId;wchar CSDVersion[128];endstruct"
	Global Const $__winver = __winver()
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_arraytostruct(Const ByRef $adata, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($adata, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "wchar[" & (StringLen($adata[$i]) + 1) & "];"
		Next
		Local $tdata = DllStructCreate($tagstruct & "wchar[1]")
		Local $icount = 1
		For $i = $istart To $iend
			DllStructSetData($tdata, $icount, $adata[$i])
			$icount += 1
		Next
		DllStructSetData($tdata, $icount, ChrW(0))
		Return $tdata
	EndFunc

	Func _winapi_createmargins($ileftwidth, $irightwidth, $itopheight, $ibottomheight)
		Local $tmargins = DllStructCreate($tagmargins)
		DllStructSetData($tmargins, 1, $ileftwidth)
		DllStructSetData($tmargins, 2, $irightwidth)
		DllStructSetData($tmargins, 3, $itopheight)
		DllStructSetData($tmargins, 4, $ibottomheight)
		Return $tmargins
	EndFunc

	Func _winapi_createpoint($ix, $iy)
		Local $tpoint = DllStructCreate($tagpoint)
		DllStructSetData($tpoint, 1, $ix)
		DllStructSetData($tpoint, 2, $iy)
		Return $tpoint
	EndFunc

	Func _winapi_createrect($ileft, $itop, $iright, $ibottom)
		Local $trect = DllStructCreate($tagrect)
		DllStructSetData($trect, 1, $ileft)
		DllStructSetData($trect, 2, $itop)
		DllStructSetData($trect, 3, $iright)
		DllStructSetData($trect, 4, $ibottom)
		Return $trect
	EndFunc

	Func _winapi_createrectex($ix, $iy, $iwidth, $iheight)
		Local $trect = DllStructCreate($tagrect)
		DllStructSetData($trect, 1, $ix)
		DllStructSetData($trect, 2, $iy)
		DllStructSetData($trect, 3, $ix + $iwidth)
		DllStructSetData($trect, 4, $iy + $iheight)
		Return $trect
	EndFunc

	Func _winapi_createsize($iwidth, $iheight)
		Local $tsize = DllStructCreate($tagsize)
		DllStructSetData($tsize, 1, $iwidth)
		DllStructSetData($tsize, 2, $iheight)
		Return $tsize
	EndFunc

	Func _winapi_fatalexit($icode)
		DllCall("kernel32.dll", "none", "FatalExit", "int", $icode)
		If @error Then Return SetError(@error, @extended)
	EndFunc

	Func _winapi_getbitmapdimension($hbitmap)
		Local Const $tagbitmap = "struct;long bmType;long bmWidth;long bmHeight;long bmWidthBytes;ushort bmPlanes;ushort bmBitsPixel;ptr bmBits;endstruct"
		Local $tobj = DllStructCreate($tagbitmap)
		Local $aret = DllCall("gdi32.dll", "int", "GetObject", "handle", $hbitmap, "int", DllStructGetSize($tobj), "struct*", $tobj)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return _winapi_createsize(DllStructGetData($tobj, "bmWidth"), DllStructGetData($tobj, "bmHeight"))
	EndFunc

	Func _winapi_getstring($pstring, $bunicode = True)
		Local $ilength = _winapi_strlen($pstring, $bunicode)
		If @error OR NOT $ilength Then Return SetError(@error + 10, @extended, "")
		Local $tstring = DllStructCreate(__iif($bunicode, "wchar", "char") & "[" & ($ilength + 1) & "]", $pstring)
		If @error Then Return SetError(@error, @extended, "")
		Return SetExtended($ilength, DllStructGetData($tstring, 1))
	EndFunc

	Func _winapi_isbadreadptr($paddress, $ilength)
		Local $aret = DllCall("kernel32.dll", "bool", "IsBadReadPtr", "struct*", $paddress, "uint_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isbadwriteptr($paddress, $ilength)
		Local $aret = DllCall("kernel32.dll", "bool", "IsBadWritePtr", "struct*", $paddress, "uint_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_iswow64process($ipid = 0)
		If NOT $ipid Then $ipid = @AutoItPID
		Local $hprocess = DllCall("kernel32.dll", "handle", "OpenProcess", "dword", __iif($__winver < 1536, 1024, 4096), "bool", 0, "dword", $ipid)
		If @error OR NOT $hprocess[0] Then Return SetError(@error + 20, @extended, False)
		Local $aret = DllCall("kernel32.dll", "bool", "IsWow64Process", "handle", $hprocess[0], "bool*", 0)
		If __checkerrorclosehandle($aret, $hprocess[0]) Then Return SetError(@error, @extended, False)
		Return $aret[2]
	EndFunc

	Func _winapi_movememory($pdestination, $psource, $ilength)
		If _winapi_isbadreadptr($psource, $ilength) Then Return SetError(10, @extended, 0)
		If _winapi_isbadwriteptr($pdestination, $ilength) Then Return SetError(11, @extended, 0)
		DllCall("ntdll.dll", "none", "RtlMoveMemory", "struct*", $pdestination, "struct*", $psource, "ulong_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_pathisdirectory($sfilepath)
		Local $aret = DllCall("shlwapi.dll", "bool", "PathIsDirectoryW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_strlen($pstring, $bunicode = True)
		Local $w = ""
		If $bunicode Then $w = "W"
		Local $aret = DllCall("kernel32.dll", "int", "lstrlen" & $w, "struct*", $pstring)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_structtoarray(ByRef $tstruct, $iitems = 0)
		Local $isize = 2 * Floor(DllStructGetSize($tstruct) / 2)
		Local $pstruct = DllStructGetPtr($tstruct)
		If NOT $isize OR NOT $pstruct Then Return SetError(1, 0, 0)
		Local $tdata, $ilength, $ioffset = 0
		Local $aresult[101] = [0]
		While 1
			$ilength = _winapi_strlen($pstruct + $ioffset)
			If NOT $ilength Then
				ExitLoop
			EndIf
			If 2 * (1 + $ilength) + $ioffset > $isize Then Return SetError(3, 0, 0)
			$tdata = DllStructCreate("wchar[" & (1 + $ilength) & "]", $pstruct + $ioffset)
			If @error Then Return SetError(@error + 10, 0, 0)
			__inc($aresult)
			$aresult[$aresult[0]] = DllStructGetData($tdata, 1)
			If $aresult[0] = $iitems Then
				ExitLoop
			EndIf
			$ioffset += 2 * (1 + $ilength)
			If $ioffset >= $isize Then Return SetError(3, 0, 0)
		WEnd
		If NOT $aresult[0] Then Return SetError(2, 0, 0)
		__inc($aresult, -1)
		Return $aresult
	EndFunc

	Func _winapi_swapdword($ivalue)
		Local $tstruct1 = DllStructCreate("dword;dword")
		Local $tstruct2 = DllStructCreate("byte[4];byte[4]", DllStructGetPtr($tstruct1))
		DllStructSetData($tstruct1, 1, $ivalue)
		For $i = 1 To 4
			DllStructSetData($tstruct2, 2, DllStructGetData($tstruct2, 1, 5 - $i), $i)
		Next
		Return DllStructGetData($tstruct1, 2)
	EndFunc

	Func _winapi_swapqword($ivalue)
		Local $tstruct1 = DllStructCreate("int64;int64")
		Local $tstruct2 = DllStructCreate("byte[8];byte[8]", DllStructGetPtr($tstruct1))
		DllStructSetData($tstruct1, 1, $ivalue)
		For $i = 1 To 8
			DllStructSetData($tstruct2, 2, DllStructGetData($tstruct2, 1, 9 - $i), $i)
		Next
		Return DllStructGetData($tstruct1, 2)
	EndFunc

	Func _winapi_swapword($ivalue)
		Local $tstruct1 = DllStructCreate("word;word")
		Local $tstruct2 = DllStructCreate("byte[2];byte[2]", DllStructGetPtr($tstruct1))
		DllStructSetData($tstruct1, 1, $ivalue)
		For $i = 1 To 2
			DllStructSetData($tstruct2, 2, DllStructGetData($tstruct2, 1, 3 - $i), $i)
		Next
		Return DllStructGetData($tstruct1, 2)
	EndFunc

	Func _winapi_switchcolor($icolor)
		If $icolor = -1 Then Return $icolor
		Return BitOR(BitAND($icolor, 65280), BitShift(BitAND($icolor, 255), -16), BitShift(BitAND($icolor, 16711680), 16))
	EndFunc

	Func _winapi_zeromemory($pmemory, $ilength)
		If _winapi_isbadwriteptr($pmemory, $ilength) Then Return SetError(11, @extended, 0)
		DllCall("ntdll.dll", "none", "RtlZeroMemory", "struct*", $pmemory, "ulong_ptr", $ilength)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

#EndRegion Public Functions
#Region Internal Functions

	Func __checkerrorarraybounds(Const ByRef $adata, ByRef $istart, ByRef $iend, $ndim = 1, $idim = $ubound_dimensions)
		If NOT IsArray($adata) Then Return SetError(1, 0, 1)
		If UBound($adata, $idim) <> $ndim Then Return SetError(2, 0, 1)
		If $istart < 0 Then $istart = 0
		Local $iubound = UBound($adata) - 1
		If $iend < 1 OR $iend > $iubound Then $iend = $iubound
		If $istart > $iend Then Return SetError(4, 0, 1)
		Return 0
	EndFunc

	Func __checkerrorclosehandle($aret, $hfile, $blasterror = 0, $icurerr = @error, $icurext = @extended)
		If NOT $icurerr AND NOT $aret[0] Then $icurerr = 10
		Local $ilasterror = _winapi_getlasterror()
		DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hfile)
		If $icurerr Then _winapi_setlasterror($ilasterror)
		If $blasterror Then $icurext = $ilasterror
		Return SetError($icurerr, $icurext, $icurerr)
	EndFunc

	Func __dll($spath, $bpin = False)
		Local $aret = DllCall("kernel32.dll", "bool", "GetModuleHandleExW", "dword", __iif($bpin, 1, 2), "wstr", $spath, "ptr*", 0)
		If NOT $aret[3] Then
			Local $aresult = DllCall("kernel32.dll", "handle", "LoadLibraryW", "wstr", $spath)
			If NOT $aresult[0] Then Return 0
		EndIf
		Return 1
	EndFunc

	Func __enumwindowsproc($hwnd, $bvisible)
		Local $aresult
		If $bvisible Then
			$aresult = DllCall("user32.dll", "bool", "IsWindowVisible", "hwnd", $hwnd)
			If NOT $aresult[0] Then
				Return 1
			EndIf
		EndIf
		__inc($__g_venum)
		$__g_venum[$__g_venum[0][0]][0] = $hwnd
		$aresult = DllCall("user32.dll", "int", "GetClassNameW", "hwnd", $hwnd, "wstr", "", "int", 4096)
		$__g_venum[$__g_venum[0][0]][1] = $aresult[2]
		Return 1
	EndFunc

	Func __fatalexit($icode, $stext = "")
		If $stext Then MsgBox($mb_systemmodal, "AutoIt", $stext)
		_winapi_fatalexit($icode)
	EndFunc

	Func __heapalloc($isize, $babort = False)
		Local $aret
		If NOT $__g_hheap Then
			$aret = DllCall("kernel32.dll", "handle", "HeapCreate", "dword", 0, "ulong_ptr", 0, "ulong_ptr", 0)
			If @error OR NOT $aret[0] Then __fatalexit(1, "Error allocating memory.")
			$__g_hheap = $aret[0]
		EndIf
		$aret = DllCall("kernel32.dll", "ptr", "HeapAlloc", "handle", $__g_hheap, "dword", 8, "ulong_ptr", $isize)
		If @error OR NOT $aret[0] Then
			If $babort Then __fatalexit(1, "Error allocating memory.")
			Return SetError(@error + 30, @extended, 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func __heapfree(ByRef $pmemory, $bcheck = False, $icurerr = @error, $icurext = @extended)
		If $bcheck AND (NOT __heapvalidate($pmemory)) Then Return SetError(@error, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "int", "HeapFree", "handle", $__g_hheap, "dword", 0, "ptr", $pmemory)
		If @error OR NOT $aret[0] Then Return SetError(@error + 40, @extended, 0)
		$pmemory = 0
		Return SetError($icurerr, $icurext, 1)
	EndFunc

	Func __heaprealloc($pmemory, $isize, $bamount = False, $babort = False)
		Local $aret, $pret
		If __heapvalidate($pmemory) Then
			If $bamount AND (__heapsize($pmemory) >= $isize) Then Return SetExtended(1, Ptr($pmemory))
			$aret = DllCall("kernel32.dll", "ptr", "HeapReAlloc", "handle", $__g_hheap, "dword", 8, "ptr", $pmemory, "ulong_ptr", $isize)
			If @error OR NOT $aret[0] Then
				If $babort Then __fatalexit(1, "Error allocating memory.")
				Return SetError(@error + 20, @extended, Ptr($pmemory))
			EndIf
			$pret = $aret[0]
		Else
			$pret = __heapalloc($isize, $babort)
			If @error Then Return SetError(@error, @extended, 0)
		EndIf
		Return $pret
	EndFunc

	Func __heapsize($pmemory, $bcheck = False)
		If $bcheck AND (NOT __heapvalidate($pmemory)) Then Return SetError(@error, @extended, 0)
		Local $aret = DllCall("kernel32.dll", "ulong_ptr", "HeapSize", "handle", $__g_hheap, "dword", 0, "ptr", $pmemory)
		If @error OR ($aret[0] = Ptr(-1)) Then Return SetError(@error + 50, @extended, 0)
		Return $aret[0]
	EndFunc

	Func __heapvalidate($pmemory)
		If (NOT $__g_hheap) OR (NOT Ptr($pmemory)) Then Return SetError(9, 0, False)
		Local $aret = DllCall("kernel32.dll", "int", "HeapValidate", "handle", $__g_hheap, "dword", 0, "ptr", $pmemory)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func __inc(ByRef $adata, $iincrement = 100)
		Select
			Case UBound($adata, $ubound_columns)
				If $iincrement < 0 Then
					ReDim $adata[$adata[0][0] + 1][UBound($adata, $ubound_columns)]
				Else
					$adata[0][0] += 1
					If $adata[0][0] > UBound($adata) - 1 Then
						ReDim $adata[$adata[0][0] + $iincrement][UBound($adata, $ubound_columns)]
					EndIf
				EndIf
			Case UBound($adata, $ubound_rows)
				If $iincrement < 0 Then
					ReDim $adata[$adata[0] + 1]
				Else
					$adata[0] += 1
					If $adata[0] > UBound($adata) - 1 Then
						ReDim $adata[$adata[0] + $iincrement]
					EndIf
				EndIf
			Case Else
				Return 0
		EndSelect
		Return 1
	EndFunc

	Func __iif($btest, $vtrue, $vfalse)
		Return $btest ? $vtrue : $vfalse
	EndFunc

	Func __init($ddata)
		Local $ilength = BinaryLen($ddata)
		Local $aret = DllCall("kernel32.dll", "ptr", "VirtualAlloc", "ptr", 0, "ulong_ptr", $ilength, "dword", 4096, "dword", 64)
		If @error OR NOT $aret[0] Then __fatalexit(1, "Error allocating memory.")
		Local $tdata = DllStructCreate("byte[" & $ilength & "]", $aret[0])
		DllStructSetData($tdata, 1, $ddata)
		Return $aret[0]
	EndFunc

	Func __rgb($icolor)
		If $__g_irgbmode Then
			$icolor = _winapi_switchcolor($icolor)
		EndIf
		Return $icolor
	EndFunc

	Func __winver()
		Local $tosvi = DllStructCreate($tagosversioninfo)
		DllStructSetData($tosvi, 1, DllStructGetSize($tosvi))
		Local $aret = DllCall("kernel32.dll", "bool", "GetVersionExW", "struct*", $tosvi)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return BitOR(BitShift(DllStructGetData($tosvi, 2), -8), DllStructGetData($tosvi, 3))
	EndFunc

#EndRegion Internal Functions
#Region Global Variables and Constants
	Global Const $__tagwinapicom_guid = "struct;ulong Data1;ushort Data2;ushort Data3;byte Data4[8];endstruct"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_clsidfromprogid($sprogid)
		Local $tguid = DllStructCreate($__tagwinapicom_guid)
		Local $areturn = DllCall("ole32.dll", "long", "CLSIDFromProgID", "wstr", $sprogid, "struct*", $tguid)
		If @error Then Return SetError(@error, @extended, "")
		If $areturn[0] Then Return SetError(10, $areturn[0], "")
		$areturn = DllCall("ole32.dll", "int", "StringFromGUID2", "struct*", $tguid, "wstr", "", "int", 39)
		If @error OR NOT $areturn[0] Then Return SetError(@error + 20, @extended, "")
		Return $areturn[2]
	EndFunc

	Func _winapi_coinitialize($iflags = 0)
		Local $areturn = DllCall("ole32.dll", "long", "CoInitializeEx", "ptr", 0, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		If $areturn[0] Then Return SetError(10, $areturn[0], 0)
		Return 1
	EndFunc

	Func _winapi_cotaskmemalloc($isize)
		Local $areturn = DllCall("ole32.dll", "ptr", "CoTaskMemAlloc", "uint_ptr", $isize)
		If @error Then Return SetError(@error, @extended, 0)
		Return $areturn[0]
	EndFunc

	Func _winapi_cotaskmemfree($pmemory)
		DllCall("ole32.dll", "none", "CoTaskMemFree", "ptr", $pmemory)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_cotaskmemrealloc($pmemory, $isize)
		Local $areturn = DllCall("ole32.dll", "ptr", "CoTaskMemRealloc", "ptr", $pmemory, "ulong_ptr", $isize)
		If @error Then Return SetError(@error, @extended, 0)
		Return $areturn[0]
	EndFunc

	Func _winapi_couninitialize()
		DllCall("ole32.dll", "none", "CoUninitialize")
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_createguid()
		Local $tguid = DllStructCreate($__tagwinapicom_guid)
		Local $areturn = DllCall("ole32.dll", "long", "CoCreateGuid", "struct*", $tguid)
		If @error Then Return SetError(@error, @extended, "")
		If $areturn[0] Then Return SetError(10, $areturn[0], "")
		$areturn = DllCall("ole32.dll", "int", "StringFromGUID2", "struct*", $tguid, "wstr", "", "int", 65536)
		If @error OR NOT $areturn[0] Then Return SetError(@error + 20, @extended, "")
		Return $areturn[2]
	EndFunc

	Func _winapi_createstreamonhglobal($hglobal = 0, $bdeleteonrelease = True)
		Local $areturn = DllCall("ole32.dll", "long", "CreateStreamOnHGlobal", "handle", $hglobal, "bool", $bdeleteonrelease, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $areturn[0] Then Return SetError(10, $areturn[0], 0)
		Return $areturn[3]
	EndFunc

	Func _winapi_gethglobalfromstream($pstream)
		Local $areturn = DllCall("ole32.dll", "uint", "GetHGlobalFromStream", "ptr", $pstream, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $areturn[0] Then Return SetError(10, $areturn[0], 0)
		Return $areturn[2]
	EndFunc

	Func _winapi_progidfromclsid($sclsid)
		Local $tguid = DllStructCreate($__tagwinapicom_guid)
		Local $areturn = DllCall("ole32.dll", "uint", "CLSIDFromString", "wstr", $sclsid, "struct*", $tguid)
		If @error OR $areturn[0] Then Return SetError(@error + 20, @extended, "")
		$areturn = DllCall("ole32.dll", "uint", "ProgIDFromCLSID", "struct*", $tguid, "ptr*", 0)
		If @error Then Return SetError(@error, @extended, "")
		If $areturn[0] Then Return SetError(10, $areturn[0], "")
		Local $sid = _winapi_getstring($areturn[2])
		_winapi_cotaskmemfree($areturn[2])
		Return $sid
	EndFunc

	Func _winapi_releasestream($pstream)
		Local $areturn = DllCall("oleaut32.dll", "long", "DispCallFunc", "ptr", $pstream, "ulong_ptr", 8 * (1 + @AutoItX64), "uint", 4, "ushort", 23, "uint", 0, "ptr", 0, "ptr", 0, "str", "")
		If @error Then Return SetError(@error, @extended, 0)
		If $areturn[0] Then Return SetError(10, $areturn[0], 0)
		Return 1
	EndFunc

#EndRegion Public Functions
#Region Global Variables and Constants
	Global Const $tagbitmap = "struct;long bmType;long bmWidth;long bmHeight;long bmWidthBytes;ushort bmPlanes;ushort bmBitsPixel;ptr bmBits;endstruct"
	Global Const $tagbitmapv4header = "struct;dword bV4Size;long bV4Width;long bV4Height;ushort bV4Planes;ushort bV4BitCount;dword bV4Compression;dword bV4SizeImage;long bV4XPelsPerMeter;long bV4YPelsPerMeter;dword bV4ClrUsed;dword bV4ClrImportant;dword bV4RedMask;dword bV4GreenMask;dword bV4BlueMask;dword bV4AlphaMask;dword bV4CSType;int bV4Endpoints[9];dword bV4GammaRed;dword bV4GammaGreen;dword bV4GammaBlue;endstruct"
	Global Const $tagbitmapv5header = "struct;dword bV5Size;long bV5Width;long bV5Height;ushort bV5Planes;ushort bV5BitCount;dword bV5Compression;dword bV5SizeImage;long bV5XPelsPerMeter;long bV5YPelsPerMeter;dword bV5ClrUsed;dword bV5ClrImportant;dword bV5RedMask;dword bV5GreenMask;dword bV5BlueMask;dword bV5AlphaMask;dword bV5CSType;int bV5Endpoints[9];dword bV5GammaRed;dword bV5GammaGreen;dword bV5GammaBlue;dword bV5Intent;dword bV5ProfileData;dword bV5ProfileSize;dword bV5Reserved;endstruct"
	Global Const $tagcoloradjustment = "ushort Size;ushort Flags;ushort IlluminantIndex;ushort RedGamma;ushort GreenGamma;ushort BlueGamma;ushort ReferenceBlack;ushort ReferenceWhite;short Contrast;short Brightness;short Colorfulness;short RedGreenTint"
	Global Const $tagdevmode_display = "wchar DeviceName[32];ushort SpecVersion;ushort DriverVersion;ushort Size;ushort DriverExtra;dword Fields;" & $tagpoint & ";dword DisplayOrientation;dword DisplayFixedOutput;short Unused1[5];wchar Unused2[32];ushort LogPixels;dword BitsPerPel;dword PelsWidth;dword PelsHeight;dword DisplayFlags;dword DisplayFrequency"
	Global Const $tagdibsection = $tagbitmap & ";" & $tagbitmapinfoheader & ";dword dsBitfields[3];ptr dshSection;dword dsOffset"
	Global Const $tagdwm_colorization_parameters = "dword Color;dword AfterGlow;uint ColorBalance;uint AfterGlowBalance;uint BlurBalance;uint GlassReflectionIntensity; uint OpaqueBlend"
	Global Const $tagenhmetaheader = "struct;dword Type;dword Size;long rcBounds[4];long rcFrame[4];dword Signature;dword Version;dword Bytes;dword Records;ushort Handles;ushort Reserved;dword Description;dword OffDescription;dword PalEntries;long Device[2];long Millimeters[2];dword PixelFormat;dword OffPixelFormat;dword OpenGL;long Micrometers[2];endstruct"
	Global Const $tagextlogpen = "dword PenStyle;dword Width;uint BrushStyle;dword Color;ulong_ptr Hatch;dword NumEntries"
	Global Const $tagfontsignature = "dword fsUsb[4];dword fsCsb[2]"
	Global Const $tagglyphmetrics = "uint BlackBoxX;uint BlackBoxY;" & $tagpoint & ";short CellIncX;short CellIncY"
	Global Const $taglogbrush = "uint Style;dword Color;ulong_ptr Hatch"
	Global Const $taglogpen = "uint Style;dword Width;dword Color"
	Global Const $tagmat2 = "short eM11[2];short eM12[2];short eM21[2];short eM22[2]"
	Global Const $tagnewtextmetric = $tagtextmetric & ";dword ntmFlags;uint ntmSizeEM;uint ntmCellHeight;uint ntmAvgWidth"
	Global Const $tagnewtextmetricex = $tagnewtextmetric & ";" & $tagfontsignature
	Global Const $tagpanose = "struct;byte bFamilyType;byte bSerifStyle;byte bWeight;byte bProportion;byte bContrast;byte bStrokeVariation;byte bArmStyle;byte bLetterform;byte bMidline;byte bXHeight;endstruct"
	Global Const $tagoutlinetextmetric = "struct;uint otmSize;" & $tagtextmetric & ";byte otmFiller;" & $tagpanose & ";byte bugFiller[3];uint otmSelection;uint otmType;int otmCharSlopeRise;int otmCharSlopeRun;int otmItalicAngle;uint otmEMSquare;int otmAscent;int otmDescent;uint otmLineGap;uint otmCapEmHeight;uint otmXHeight;long otmFontBox[4];int otmMacAscent;int otmMacDescent;uint otmMacLineGap;uint otmMinimumPPEM;long otmSubscriptSize[2];long otmSubscriptOffset[2];long otmSuperscriptSize[2];long otmSuperscriptOffse[2];uint otmStrikeoutSize;int otmStrikeoutPosition;int otmUnderscoreSize;int otmUnderscorePosition;uint_ptr otmFamilyName;uint_ptr otmFaceName;uint_ptr otmStyleName;uint_ptr otmFullName;endstruct"
	Global Const $tagpaintstruct = "hwnd hDC;int fErase;dword rPaint[4];int fRestore;int fIncUpdate;byte rgbReserved[32]"
	Global Const $tagrgndataheader = "struct;dword Size;dword Type;dword Count;dword RgnSize;" & $tagrect & ";endstruct"
	Global Const $tagxform = "float eM11;float eM12;float eM21;float eM22;float eDx;float eDy"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_abortpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "AbortPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_addfontmemresourceex($pdata, $isize)
		Local $aret = DllCall("gdi32.dll", "handle", "AddFontMemResourceEx", "ptr", $pdata, "dword", $isize, "ptr", 0, "dword*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		Return SetExtended($aret[4], $aret[0])
	EndFunc

	Func _winapi_addfontresourceex($sfont, $iflag = 0, $bnotify = False)
		Local $aret = DllCall("gdi32.dll", "int", "AddFontResourceExW", "wstr", $sfont, "dword", $iflag, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		If $bnotify Then
			Local Const $wm_fontchange = 29
			Local Const $hwnd_broadcast = 65535
			DllCall("user32.dll", "lresult", "SendMessage", "hwnd", $hwnd_broadcast, "uint", $wm_fontchange, "wparam", 0, "lparam", 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_addiconoverlay($hicon, $hoverlay)
		Local $aret, $hresult = 0, $ierror = 0
		Local $ahdev[2] = [0, 0]
		Local $tsize = _winapi_geticondimension($hicon)
		Local $hil = DllCall("comctl32.dll", "handle", "ImageList_Create", "int", DllStructGetData($tsize, 1), "int", DllStructGetData($tsize, 2), "uint", 33, "int", 2, "int", 2)
		If @error OR NOT $hil[0] Then Return SetError(@error + 10, @extended, 0)
		Do
			$ahdev[0] = _winapi_create32bithicon($hicon)
			If @error Then
				$ierror = @error + 100
				ExitLoop
			EndIf
			$aret = DllCall("comctl32.dll", "int", "ImageList_ReplaceIcon", "handle", $hil[0], "int", -1, "handle", $ahdev[0])
			If @error OR ($aret[0] = -1) Then
				$ierror = @error + 200
				ExitLoop
			EndIf
			$ahdev[1] = _winapi_create32bithicon($hoverlay)
			If @error Then
				$ierror = @error + 300
				ExitLoop
			EndIf
			$aret = DllCall("comctl32.dll", "int", "ImageList_ReplaceIcon", "handle", $hil[0], "int", -1, "handle", $ahdev[1])
			If @error OR ($aret[0] = -1) Then
				$ierror = @error + 400
				ExitLoop
			EndIf
			$aret = DllCall("comctl32.dll", "bool", "ImageList_SetOverlayImage", "handle", $hil[0], "int", 1, "int", 1)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 500
				ExitLoop
			EndIf
			$aret = DllCall("comctl32.dll", "handle", "ImageList_GetIcon", "handle", $hil[0], "int", 0, "uint", 256)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 600
				ExitLoop
			EndIf
			$hresult = $aret[0]
		Until 1
		DllCall("comctl32.dll", "bool", "ImageList_Destroy", "handle", $hil[0])
		For $i = 0 To 1
			If $ahdev[$i] Then
				_winapi_destroyicon($ahdev[$i])
			EndIf
		Next
		If NOT $hresult Then Return SetError($ierror, 0, 0)
		Return $hresult
	EndFunc

	Func _winapi_adjustbitmap($hbitmap, $iwidth, $iheight, $imode = 3, $tadjustment = 0)
		Local $tobj = DllStructCreate($tagbitmap)
		Local $aret = DllCall("gdi32.dll", "int", "GetObject", "handle", $hbitmap, "int", DllStructGetSize($tobj), "struct*", $tobj)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		If $iwidth = -1 Then
			$iwidth = DllStructGetData($tobj, "bmWidth")
		EndIf
		If $iheight = -1 Then
			$iheight = DllStructGetData($tobj, "bmHeight")
		EndIf
		$aret = DllCall("user32.dll", "handle", "GetDC", "hwnd", 0)
		Local $hdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
		Local $hdestdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleBitmap", "handle", $hdc, "int", $iwidth, "int", $iheight)
		Local $hbmp = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hbmp)
		Local $hdestsv = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
		Local $hsrcdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hsrcdc, "handle", $hbitmap)
		Local $hsrcsv = $aret[0]
		If _winapi_setstretchbltmode($hdestdc, $imode) Then
			Switch $imode
				Case 4
					If IsDllStruct($tadjustment) Then
						If NOT _winapi_setcoloradjustment($hdestdc, $tadjustment) Then
						EndIf
					EndIf
				Case Else
			EndSwitch
		EndIf
		$aret = _winapi_stretchblt($hdestdc, 0, 0, $iwidth, $iheight, $hsrcdc, 0, 0, DllStructGetData($tobj, "bmWidth"), DllStructGetData($tobj, "bmHeight"), 13369376)
		DllCall("user32.dll", "int", "ReleaseDC", "hwnd", 0, "handle", $hdc)
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hdestsv)
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hsrcdc, "handle", $hsrcsv)
		DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hdestdc)
		DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hsrcdc)
		If NOT $aret Then Return SetError(10, 0, 0)
		Return $hbmp
	EndFunc

	Func _winapi_alphablend($hdestdc, $ixdest, $iydest, $iwidthdest, $iheightdest, $hsrcdc, $ixsrc, $iysrc, $iwidthsrc, $iheightsrc, $ialpha, $balpha = False)
		Local $iblend = BitOR(BitShift(NOT ($balpha = False), -24), BitShift(BitAND($ialpha, 255), -16))
		Local $aret = DllCall("gdi32.dll", "bool", "GdiAlphaBlend", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidthdest, "int", $iheightdest, "handle", $hsrcdc, "int", $ixsrc, "int", $iysrc, "int", $iwidthsrc, "int", $iheightsrc, "dword", $iblend)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_anglearc($hdc, $ix, $iy, $iradius, $nstartangle, $nsweepangle)
		Local $aret = DllCall("gdi32.dll", "bool", "AngleArc", "handle", $hdc, "int", $ix, "int", $iy, "dword", $iradius, "float", $nstartangle, "float", $nsweepangle)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_arc($hdc, $trect, $ixstartarc, $iystartarc, $ixendarc, $iyendarc)
		Local $aret = DllCall("gdi32.dll", "bool", "Arc", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4), "int", $ixstartarc, "int", $iystartarc, "int", $ixendarc, "int", $iyendarc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_arcto($hdc, $trect, $ixradial1, $iyradial1, $ixradial2, $iyradial2)
		Local $aret = DllCall("gdi32.dll", "bool", "ArcTo", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4), "int", $ixradial1, "int", $iyradial1, "int", $ixradial2, "int", $iyradial2)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_beginpaint($hwnd, ByRef $tpaintstruct)
		$tpaintstruct = DllStructCreate($tagpaintstruct)
		Local $aret = DllCall("user32.dll", "handle", "BeginPaint", "hwnd", $hwnd, "struct*", $tpaintstruct)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_beginpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "BeginPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_closeenhmetafile($hdc)
		Local $aret = DllCall("gdi32.dll", "handle", "CloseEnhMetaFile", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_closefigure($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "CloseFigure", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_coloradjustluma($irgb, $ipercent, $bscale = True)
		If $irgb = -1 Then Return SetError(10, 0, -1)
		If $bscale Then
			$ipercent = Floor($ipercent * 10)
		EndIf
		Local $aret = DllCall("shlwapi.dll", "dword", "ColorAdjustLuma", "dword", __rgb($irgb), "int", $ipercent, "bool", $bscale)
		If @error Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_colorhlstorgb($ihue, $iluminance, $isaturation)
		If NOT $isaturation Then $ihue = 160
		Local $aret = DllCall("shlwapi.dll", "dword", "ColorHLSToRGB", "word", $ihue, "word", $iluminance, "word", $isaturation)
		If @error Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_colorrgbtohls($irgb, ByRef $ihue, ByRef $iluminance, ByRef $isaturation)
		Local $aret = DllCall("shlwapi.dll", "none", "ColorRGBToHLS", "dword", __rgb($irgb), "word*", 0, "word*", 0, "word*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		$ihue = $aret[2]
		$iluminance = $aret[3]
		$isaturation = $aret[4]
		Return 1
	EndFunc

	Func _winapi_combinetransform($txform1, $txform2)
		Local $txform = DllStructCreate($tagxform)
		Local $aret = DllCall("gdi32.dll", "bool", "CombineTransform", "struct*", $txform, "struct*", $txform1, "struct*", $txform2)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $txform
	EndFunc

	Func _winapi_compressbitmapbits($hbitmap, ByRef $pbuffer, $icompression = 0, $iquality = 100)
		If NOT __dll("gdiplus.dll") Then Return SetError(103, 0, 0)
		Local $asize[2], $icount, $iformat, $ilength, $smime, $aret, $hdc, $hsv, $hmem, $tbits, $tdata, $pdata, $ierror = 1
		Local $hsource = 0, $himage = 0, $htoken = 0, $pstream = 0, $tparam = 0
		Local $tdib = DllStructCreate($tagdibsection)
		Do
			Switch $icompression
				Case 0
					$smime = "image/png"
				Case 1
					$smime = "image/jpeg"
				Case Else
					$ierror = 10
					ExitLoop
			EndSwitch
			While $hbitmap
				If NOT _winapi_getobject($hbitmap, DllStructGetSize($tdib), $tdib) Then
					$ierror = 11
					ExitLoop 2
				EndIf
				If (DllStructGetData($tdib, "bmBitsPixel") = 32) AND (NOT DllStructGetData($tdib, "biCompression")) Then
					$ierror = 12
					ExitLoop
				EndIf
				If $hsource Then
					$ierror = 13
					ExitLoop 2
				EndIf
				$hsource = _winapi_createdib(DllStructGetData($tdib, "bmWidth"), DllStructGetData($tdib, "bmHeight"))
				If NOT $hsource Then
					$ierror = @error + 100
					ExitLoop 2
				EndIf
				$hdc = _winapi_createcompatibledc(0)
				$hsv = _winapi_selectobject($hdc, $hsource)
				If _winapi_drawbitmap($hdc, 0, 0, $hbitmap) Then
					$hbitmap = $hsource
				Else
					$ierror = @error + 200
					$hbitmap = 0
				EndIf
				_winapi_selectobject($hdc, $hsv)
				_winapi_deletedc($hdc)
			WEnd
			If NOT $hbitmap Then
				ExitLoop
			EndIf
			For $i = 0 To 1
				$asize[$i] = DllStructGetData($tdib, $i + 2)
			Next
			$tbits = DllStructCreate("byte[" & ($asize[0] * $asize[1] * 4) & "]")
			If NOT _winapi_getbitmapbits($hbitmap, DllStructGetSize($tbits), $tbits) Then
				$ierror = @error + 300
				ExitLoop
			EndIf
			$tdata = DllStructCreate($taggdipstartupinput)
			DllStructSetData($tdata, "Version", 1)
			$aret = DllCall("gdiplus.dll", "int", "GdiplusStartup", "ulong_ptr*", 0, "struct*", $tdata, "ptr", 0)
			If @error OR $aret[0] Then
				$ierror = @error + 400
				ExitLoop
			EndIf
			If _winapi_isalphabitmap($hbitmap) Then
				$iformat = 2498570
			Else
				$iformat = 139273
			EndIf
			$htoken = $aret[1]
			$aret = DllCall("gdiplus.dll", "int", "GdipCreateBitmapFromScan0", "int", $asize[0], "int", $asize[1], "uint", $asize[0] * 4, "int", $iformat, "struct*", $tbits, "ptr*", 0)
			If @error OR $aret[0] Then
				$ierror = @error + 500
				ExitLoop
			EndIf
			$himage = $aret[6]
			$aret = DllCall("gdiplus.dll", "int", "GdipGetImageEncodersSize", "uint*", 0, "uint*", 0)
			If @error OR $aret[0] Then
				$ierror = @error + 600
				ExitLoop
			EndIf
			$icount = $aret[1]
			$tdata = DllStructCreate("byte[" & $aret[2] & "]")
			If @error Then
				$ierror = @error + 700
				ExitLoop
			EndIf
			$pdata = DllStructGetPtr($tdata)
			$aret = DllCall("gdiplus.dll", "int", "GdipGetImageEncoders", "uint", $icount, "uint", $aret[2], "struct*", $tdata)
			If @error OR $aret[0] Then
				$ierror = @error + 800
				ExitLoop
			EndIf
			Local $tcodec, $pencoder = 0
			For $i = 1 To $icount
				$tcodec = DllStructCreate($taggdipimagecodecinfo, $pdata)
				If NOT StringInStr(_winapi_widechartomultibyte(DllStructGetData($tcodec, "MimeType")), $smime) Then
					$pdata += DllStructGetSize($taggdipimagecodecinfo)
				Else
					$pencoder = $pdata
					$ierror = 0
					ExitLoop
				EndIf
			Next
			If NOT $pencoder Then
				$ierror = 15
				ExitLoop
			EndIf
			Switch $icompression
				Case 0
				Case 1
					Local Const $tagencoderparameter = "byte[16] GUID;ulong NumberOfValues;dword Type;ptr pValue"
					$tparam = DllStructCreate("dword Count;" & $tagencoderparameter & ";ulong Quality")
					DllStructSetData($tparam, "Count", 1)
					DllStructSetData($tparam, "NumberOfValues", 1)
					DllStructSetData($tparam, "Type", 4)
					DllStructSetData($tparam, "pValue", DllStructGetPtr($tparam, "Quality"))
					DllStructSetData($tparam, "Quality", $iquality)
					$aret = DllCall("ole32.dll", "long", "CLSIDFromString", "wstr", "{1D5BE4B5-FA4A-452D-9CDD-5DB35105E7EB}", "ptr", DllStructGetPtr($tparam, 2))
					If @error OR $aret[0] Then
						$tparam = 0
					EndIf
			EndSwitch
			$pstream = _winapi_createstreamonhglobal()
			$aret = DllCall("gdiplus.dll", "int", "GdipSaveImageToStream", "handle", $himage, "ptr", $pstream, "ptr", $pencoder, "struct*", $tparam)
			If @error OR $aret[0] Then
				$ierror = @error + 900
				ExitLoop
			EndIf
			$hmem = _winapi_gethglobalfromstream($pstream)
			$aret = DllCall("kernel32.dll", "ulong_ptr", "GlobalSize", "handle", $hmem)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 1000
				ExitLoop
			EndIf
			$ilength = $aret[0]
			$aret = DllCall("kernel32.dll", "ptr", "GlobalLock", "handle", $hmem)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 1100
				ExitLoop
			EndIf
			$pbuffer = __heaprealloc($pbuffer, $ilength, 1)
			If NOT @error Then
				_winapi_movememory($pbuffer, $aret[0], $ilength)
			Else
				$ierror = @error + 1300
			EndIf
		Until 1
		If $pstream Then
			_winapi_releasestream($pstream)
		EndIf
		If $himage Then
			DllCall("gdiplus.dll", "int", "GdipDisposeImage", "handle", $himage)
		EndIf
		If $htoken Then
			DllCall("gdiplus.dll", "none", "GdiplusShutdown", "ulong_ptr", $htoken)
		EndIf
		If $hsource Then
			_winapi_deleteobject($hsource)
		EndIf
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $ilength
	EndFunc

	Func _winapi_copybitmap($hbitmap)
		$hbitmap = _winapi_copyimage($hbitmap, 0, 0, 0, 8192)
		Return SetError(@error, @extended, $hbitmap)
	EndFunc

	Func _winapi_copyenhmetafile($hemf, $sfilepath = "")
		Local $stypeoffile = "wstr"
		If NOT StringStripWS($sfilepath, $str_stripleading + $str_striptrailing) Then
			$stypeoffile = "ptr"
			$sfilepath = 0
		EndIf
		Local $aret = DllCall("gdi32.dll", "handle", "CopyEnhMetaFileW", "handle", $hemf, $stypeoffile, $sfilepath)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_copyimage($himage, $itype = 0, $ixdesiredpixels = 0, $iydesiredpixels = 0, $iflags = 0)
		Local $aret = DllCall("user32.dll", "handle", "CopyImage", "handle", $himage, "uint", $itype, "int", $ixdesiredpixels, "int", $iydesiredpixels, "uint", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_copyrect($trect)
		Local $tdata = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "CopyRect", "struct*", $tdata, "struct*", $trect)
		If @error OR NOT $aret[0] Then SetError(@error + 10, @extended, 0)
		Return $tdata
	EndFunc

	Func _winapi_create32bithbitmap($hicon, $bdib = False, $bdelete = False)
		Local $hbitmap = 0
		Local $adib[2] = [0, 0]
		Local $htemp = _winapi_create32bithicon($hicon)
		If @error Then Return SetError(@error, @extended, 0)
		Local $ierror = 0
		Do
			Local $ticoninfo = DllStructCreate($tagiconinfo)
			Local $aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $htemp, "struct*", $ticoninfo)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 10
				ExitLoop
			EndIf
			For $i = 0 To 1
				$adib[$i] = DllStructGetData($ticoninfo, $i + 4)
			Next
			Local $tbitmap = DllStructCreate($tagbitmap)
			If NOT _winapi_getobject($adib[0], DllStructGetSize($tbitmap), $tbitmap) Then
				$ierror = @error + 20
				ExitLoop
			EndIf
			If $bdib Then
				$hbitmap = _winapi_createdib(DllStructGetData($tbitmap, "bmWidth"), DllStructGetData($tbitmap, "bmHeight"))
				Local $hdc = _winapi_createcompatibledc(0)
				Local $hsv = _winapi_selectobject($hdc, $hbitmap)
				_winapi_drawiconex($hdc, 0, 0, $htemp)
				_winapi_selectobject($hdc, $hsv)
				_winapi_deletedc($hdc)
			Else
				$hbitmap = $adib[1]
				$adib[1] = 0
			EndIf
		Until 1
		For $i = 0 To 1
			If $adib[$i] Then
				_winapi_deleteobject($adib[$i])
			EndIf
		Next
		_winapi_destroyicon($htemp)
		If $ierror Then Return SetError($ierror, 0, 0)
		If NOT $hbitmap Then Return SetError(12, 0, 0)
		If $bdelete Then
			_winapi_destroyicon($hicon)
		EndIf
		Return $hbitmap
	EndFunc

	Func _winapi_create32bithicon($hicon, $bdelete = False)
		Local $ahbitmap[2], $hresult = 0
		Local $adib[2][2] = [[0, 0], [0, 0]]
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		Local $aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $hicon, "struct*", $ticoninfo)
		If @error Then Return SetError(@error, @extended, 0)
		If NOT $aret[0] Then Return SetError(10, 0, 0)
		For $i = 0 To 1
			$ahbitmap[$i] = DllStructGetData($ticoninfo, $i + 4)
		Next
		If _winapi_isalphabitmap($ahbitmap[1]) Then
			$adib[0][0] = _winapi_createandbitmap($ahbitmap[1])
			If NOT @error Then
				$hresult = _winapi_createiconindirect($ahbitmap[1], $adib[0][0])
			EndIf
		Else
			Local $tsize = _winapi_getbitmapdimension($ahbitmap[1])
			Local $asize[2]
			For $i = 0 To 1
				$asize[$i] = DllStructGetData($tsize, $i + 1)
			Next
			Local $hsrcdc = _winapi_createcompatibledc(0)
			Local $hdstdc = _winapi_createcompatibledc(0)
			Local $hsrcsv, $hdstsv
			For $i = 0 To 1
				$adib[$i][0] = _winapi_createdib($asize[0], $asize[1])
				$adib[$i][1] = $__g_vext
				$hsrcsv = _winapi_selectobject($hsrcdc, $ahbitmap[$i])
				$hdstsv = _winapi_selectobject($hdstdc, $adib[$i][0])
				_winapi_bitblt($hdstdc, 0, 0, $asize[0], $asize[1], $hsrcdc, 0, 0, 12583114)
				_winapi_selectobject($hsrcdc, $hsrcsv)
				_winapi_selectobject($hdstdc, $hdstsv)
			Next
			_winapi_deletedc($hsrcdc)
			_winapi_deletedc($hdstdc)
			$aret = DllCall("user32.dll", "lresult", "CallWindowProc", "ptr", __xorproc(), "ptr", 0, "uint", $asize[0] * $asize[1] * 4, "wparam", $adib[0][1], "lparam", $adib[1][1])
			If NOT @error AND $aret[0] Then
				$hresult = _winapi_createiconindirect($adib[1][0], $ahbitmap[0])
			EndIf
		EndIf
		For $i = 0 To 1
			_winapi_deleteobject($ahbitmap[$i])
			If $adib[$i][0] Then
				_winapi_deleteobject($adib[$i][0])
			EndIf
		Next
		If NOT $hresult Then Return SetError(11, 0, 0)
		If $bdelete Then
			_winapi_destroyicon($hicon)
		EndIf
		Return $hresult
	EndFunc

	Func _winapi_createandbitmap($hbitmap)
		Local $ierror = 0, $hdib = 0
		$hbitmap = _winapi_copybitmap($hbitmap)
		If NOT $hbitmap Then Return SetError(@error + 20, @extended, 0)
		Do
			Local $atdib[2]
			$atdib[0] = DllStructCreate($tagdibsection)
			If (NOT _winapi_getobject($hbitmap, DllStructGetSize($atdib[0]), $atdib[0])) OR (DllStructGetData($atdib[0], "bmBitsPixel") <> 32) OR (DllStructGetData($atdib[0], "biCompression")) Then
				$ierror = 10
				ExitLoop
			EndIf
			$atdib[1] = DllStructCreate($tagbitmap)
			$hdib = _winapi_createdib(DllStructGetData($atdib[0], "bmWidth"), DllStructGetData($atdib[0], "bmHeight"), 1)
			If NOT _winapi_getobject($hdib, DllStructGetSize($atdib[1]), $atdib[1]) Then
				$ierror = 11
				ExitLoop
			EndIf
			Local $aret = DllCall("user32.dll", "lresult", "CallWindowProc", "ptr", __andproc(), "ptr", 0, "uint", 0, "wparam", DllStructGetPtr($atdib[0]), "lparam", DllStructGetPtr($atdib[1]))
			If @error Then
				$ierror = @error
				ExitLoop
			EndIf
			If NOT $aret[0] Then
				$ierror = 12
				ExitLoop
			EndIf
			$ierror = 0
		Until 1
		_winapi_deleteobject($hbitmap)
		If $ierror Then
			If $hdib Then
				_winapi_deleteobject($hdib)
			EndIf
			$hdib = 0
		EndIf
		Return SetError($ierror, 0, $hdib)
	EndFunc

	Func _winapi_createbitmapindirect(ByRef $tbitmap)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateBitmapIndirect", "struct*", $tbitmap)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createbrushindirect($istyle, $irgb, $ihatch = 0)
		Local $tlogbrush = DllStructCreate($taglogbrush)
		DllStructSetData($tlogbrush, 1, $istyle)
		DllStructSetData($tlogbrush, 2, __rgb($irgb))
		DllStructSetData($tlogbrush, 3, $ihatch)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateBrushIndirect", "struct*", $tlogbrush)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createcoloradjustment($iflags = 0, $iilluminant = 0, $igammar = 10000, $igammag = 10000, $igammab = 10000, $iblack = 0, $iwhite = 10000, $icontrast = 0, $ibrightness = 0, $icolorfulness = 0, $itint = 0)
		Local $tca = DllStructCreate($tagcoloradjustment)
		DllStructSetData($tca, 1, DllStructGetSize($tca))
		DllStructSetData($tca, 2, $iflags)
		DllStructSetData($tca, 3, $iilluminant)
		DllStructSetData($tca, 4, $igammar)
		DllStructSetData($tca, 5, $igammag)
		DllStructSetData($tca, 6, $igammab)
		DllStructSetData($tca, 7, $iblack)
		DllStructSetData($tca, 8, $iwhite)
		DllStructSetData($tca, 9, $icontrast)
		DllStructSetData($tca, 10, $ibrightness)
		DllStructSetData($tca, 11, $icolorfulness)
		DllStructSetData($tca, 12, $itint)
		Return $tca
	EndFunc

	Func _winapi_createcompatiblebitmapex($hdc, $iwidth, $iheight, $irgb)
		Local $hbrush = _winapi_createbrushindirect(0, $irgb)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
		Local $hdestdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleBitmap", "handle", $hdc, "int", $iwidth, "int", $iheight)
		Local $hbmp = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hbmp)
		Local $hdestsv = $aret[0]
		Local $trect = _winapi_createrectex(0, 0, $iwidth, $iheight)
		Local $ierror = 0
		$aret = DllCall("user32.dll", "int", "FillRect", "handle", $hdestdc, "struct*", $trect, "handle", $hbrush)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 10
			_winapi_deleteobject($hbmp)
		EndIf
		_winapi_deleteobject($hbrush)
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hdestsv)
		DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hdestdc)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $hbmp
	EndFunc

	Func _winapi_createdib($iwidth, $iheight, $ibitsperpel = 32, $tcolortable = 0, $icolorcount = 0)
		Local $argbq[2], $icolors, $tagrgbq
		Switch $ibitsperpel
			Case 1
				$icolors = 2
			Case 4
				$icolors = 16
			Case 8
				$icolors = 256
			Case Else
				$icolors = 0
		EndSwitch
		If $icolors Then
			If NOT IsDllStruct($tcolortable) Then
				Switch $ibitsperpel
					Case 1
						$argbq[0] = 0
						$argbq[1] = 16777215
						$tcolortable = _winapi_createdibcolortable($argbq)
					Case Else
				EndSwitch
			Else
				If $icolors > $icolorcount Then
					$icolors = $icolorcount
				EndIf
				If (NOT $icolors) OR ((4 * $icolors) > DllStructGetSize($tcolortable)) Then
					Return SetError(20, 0, 0)
				EndIf
			EndIf
			$tagrgbq = ";dword aRGBQuad[" & $icolors & "]"
		Else
			$tagrgbq = ""
		EndIf
		Local $tbitmapinfo = DllStructCreate($tagbitmapinfoheader & $tagrgbq)
		DllStructSetData($tbitmapinfo, "biSize", 40)
		DllStructSetData($tbitmapinfo, "biWidth", $iwidth)
		DllStructSetData($tbitmapinfo, "biHeight", $iheight)
		DllStructSetData($tbitmapinfo, "biPlanes", 1)
		DllStructSetData($tbitmapinfo, "biBitCount", $ibitsperpel)
		DllStructSetData($tbitmapinfo, "biCompression", 0)
		DllStructSetData($tbitmapinfo, "biSizeImage", 0)
		DllStructSetData($tbitmapinfo, "biXPelsPerMeter", 0)
		DllStructSetData($tbitmapinfo, "biYPelsPerMeter", 0)
		DllStructSetData($tbitmapinfo, "biClrUsed", $icolors)
		DllStructSetData($tbitmapinfo, "biClrImportant", 0)
		If $icolors Then
			If IsDllStruct($tcolortable) Then
				_winapi_movememory(DllStructGetPtr($tbitmapinfo, "aRGBQuad"), $tcolortable, 4 * $icolors)
			Else
				_winapi_zeromemory(DllStructGetPtr($tbitmapinfo, "aRGBQuad"), 4 * $icolors)
			EndIf
		EndIf
		Local $hbitmap = _winapi_createdibsection(0, $tbitmapinfo, 0, $__g_vext)
		If NOT $hbitmap Then Return SetError(@error, @extended, 0)
		Return $hbitmap
	EndFunc

	Func _winapi_createdibcolortable(Const ByRef $acolortable, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($acolortable, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
		Local $tcolortable = DllStructCreate("dword[" & ($iend - $istart + 1) & "]")
		Local $icount = 1
		For $i = $istart To $iend
			DllStructSetData($tcolortable, 1, _winapi_switchcolor(__rgb($acolortable[$i])), $icount)
			$icount += 1
		Next
		Return $tcolortable
	EndFunc

	Func _winapi_createdibitmap($hdc, ByRef $tbitmapinfo, $iusage, $pbits = 0)
		Local $iinit = 0
		If $pbits Then
			$iinit = 4
		EndIf
		Local $aret = DllCall("gdi32.dll", "handle", "CreateDIBitmap", "handle", $hdc, "struct*", $tbitmapinfo, "dword", $iinit, "struct*", $pbits, "struct*", $tbitmapinfo, "uint", $iusage)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createdibsection($hdc, $tbitmapinfo, $iusage, ByRef $pbits, $hsection = 0, $ioffset = 0)
		$pbits = 0
		Local $aret = DllCall("gdi32.dll", "handle", "CreateDIBSection", "handle", $hdc, "struct*", $tbitmapinfo, "uint", $iusage, "ptr*", 0, "handle", $hsection, "dword", $ioffset)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		$pbits = $aret[4]
		Return $aret[0]
	EndFunc

	Func _winapi_createellipticrgn($trect)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateEllipticRgnIndirect", "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_createemptyicon($iwidth, $iheight, $ibitsperpel = 32)
		Local $hxor = _winapi_createdib($iwidth, $iheight, $ibitsperpel)
		Local $hand = _winapi_createdib($iwidth, $iheight, 1)
		Local $hdc = _winapi_createcompatibledc(0)
		Local $hsv = _winapi_selectobject($hdc, $hand)
		Local $hbrush = _winapi_createsolidbrush(16777215)
		Local $trect = _winapi_createrect(0, 0, $iwidth, $iheight)
		_winapi_fillrect($hdc, $trect, $hbrush)
		_winapi_deleteobject($hbrush)
		_winapi_selectobject($hdc, $hsv)
		_winapi_deletedc($hdc)
		Local $hicon = _winapi_createiconindirect($hxor, $hand)
		Local $ierror = @error
		If $hxor Then
			_winapi_deleteobject($hxor)
		EndIf
		If $hand Then
			_winapi_deleteobject($hand)
		EndIf
		If NOT $hicon Then Return SetError($ierror + 10, 0, 0)
		Return $hicon
	EndFunc

	Func _winapi_createenhmetafile($hdc = 0, $trect = 0, $bpixels = False, $sfilepath = "", $sdescription = "")
		Local $stypeoffile = "wstr"
		If NOT StringStripWS($sfilepath, $str_stripleading + $str_striptrailing) Then
			$stypeoffile = "ptr"
			$sfilepath = 0
		EndIf
		Local $tdata = 0, $adata = StringSplit($sdescription, "|", $str_nocount)
		If UBound($adata) < 2 Then
			ReDim $adata[2]
			$adata[1] = ""
		EndIf
		For $i = 0 To 1
			$adata[$i] = StringStripWS($adata[$i], $str_stripleading + $str_striptrailing)
		Next
		If ($adata[0]) OR ($adata[1]) Then
			$tdata = _winapi_arraytostruct($adata)
		EndIf
		Local $ixp, $iyp, $ixm, $iym, $href = 0
		If $bpixels AND (IsDllStruct($trect)) Then
			If NOT $hdc Then
				$href = _winapi_getdc(0)
			EndIf
			$ixp = _winapi_getdevicecaps($href, 8)
			$iyp = _winapi_getdevicecaps($href, 10)
			$ixm = _winapi_getdevicecaps($href, 4)
			$iym = _winapi_getdevicecaps($href, 6)
			If $href Then
				_winapi_releasedc(0, $href)
			EndIf
			For $i = 1 To 3 Step 2
				DllStructSetData($trect, $i, Round(DllStructGetData($trect, $i) * $ixm / $ixp * 100))
			Next
			For $i = 2 To 4 Step 2
				DllStructSetData($trect, $i, Round(DllStructGetData($trect, $i) * $iym / $iyp * 100))
			Next
		EndIf
		Local $aret = DllCall("gdi32.dll", "handle", "CreateEnhMetaFileW", "handle", $hdc, $stypeoffile, $sfilepath, "struct*", $trect, "struct*", $tdata)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createfontex($iheight, $iwidth = 0, $iescapement = 0, $iorientation = 0, $iweight = 400, $bitalic = False, $bunderline = False, $bstrikeout = False, $icharset = 1, $ioutprecision = 0, $iclipprecision = 0, $iquality = 0, $ipitchandfamily = 0, $sfacename = "", $istyle = 0)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateFontW", "int", $iheight, "int", $iwidth, "int", $iescapement, "int", $iorientation, "int", $iweight, "dword", $bitalic, "dword", $bunderline, "dword", $bstrikeout, "dword", $icharset, "dword", $ioutprecision, "dword", $iclipprecision, "dword", $iquality, "dword", $ipitchandfamily, "wstr", _winapi_getfontname($sfacename, $istyle, $icharset))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createiconindirect($hbitmap, $hmask, $ixhotspot = 0, $iyhotspot = 0, $bicon = True)
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		DllStructSetData($ticoninfo, 1, $bicon)
		DllStructSetData($ticoninfo, 2, $ixhotspot)
		DllStructSetData($ticoninfo, 3, $iyhotspot)
		DllStructSetData($ticoninfo, 4, $hmask)
		DllStructSetData($ticoninfo, 5, $hbitmap)
		Local $aret = DllCall("user32.dll", "handle", "CreateIconIndirect", "struct*", $ticoninfo)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createnullrgn()
		Local $aret = DllCall("gdi32.dll", "handle", "CreateRectRgn", "int", 0, "int", 0, "int", 0, "int", 0)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createpolygonrgn(Const ByRef $apoint, $istart = 0, $iend = -1, $imode = 1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2, 2) Then Return SetError(@error + 10, @extended, 0)
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "int[2];"
		Next
		Local $tdata = DllStructCreate($tagstruct)
		Local $icount = 1
		For $i = $istart To $iend
			For $j = 0 To 1
				DllStructSetData($tdata, $icount, $apoint[$i][$j], $j + 1)
			Next
			$icount += 1
		Next
		Local $aret = DllCall("gdi32.dll", "handle", "CreatePolygonRgn", "struct*", $tdata, "int", $icount - 1, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createrectrgnindirect($trect)
		Local $aret = DllCall("gdi32.dll", "handle", "CreateRectRgnIndirect", "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createtransform($nm11 = 1, $nm12 = 0, $nm21 = 0, $nm22 = 1, $ndx = 0, $ndy = 0)
		Local $txform = DllStructCreate($tagxform)
		DllStructSetData($txform, 1, $nm11)
		DllStructSetData($txform, 2, $nm12)
		DllStructSetData($txform, 3, $nm21)
		DllStructSetData($txform, 4, $nm22)
		DllStructSetData($txform, 5, $ndx)
		DllStructSetData($txform, 6, $ndy)
		Return $txform
	EndFunc

	Func _winapi_deleteenhmetafile($hemf)
		Local $aret = DllCall("gdi32.dll", "bool", "DeleteEnhMetaFile", "handle", $hemf)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_dptolp($hdc, ByRef $tpoint, $icount = 1)
		Local $aret = DllCall("gdi32.dll", "bool", "DPtoLP", "handle", $hdc, "struct*", $tpoint, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_drawanimatedrects($hwnd, $trectfrom, $trectto)
		Local $aret = DllCall("user32.dll", "bool", "DrawAnimatedRects", "hwnd", $hwnd, "int", 3, "struct*", $trectfrom, "struct*", $trectto)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_drawbitmap($hdc, $ix, $iy, $hbitmap, $irop = 13369376)
		Local $tobj = DllStructCreate($tagbitmap)
		Local $aret = DllCall("gdi32.dll", "int", "GetObject", "handle", $hbitmap, "int", DllStructGetSize($tobj), "struct*", $tobj)
		If @error OR NOT $aret[0] Then Return SetError(@error + 20, @extended, 0)
		$aret = DllCall("user32.dll", "handle", "GetDC", "hwnd", 0)
		Local $_hdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $_hdc)
		Local $hsrcdc = $aret[0]
		$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hsrcdc, "handle", $hbitmap)
		Local $hsrcsv = $aret[0]
		Local $ierror = 0
		$aret = DllCall("gdi32.dll", "int", "BitBlt", "hwnd", $hdc, "int", $ix, "int", $iy, "int", DllStructGetData($tobj, "bmWidth"), "int", DllStructGetData($tobj, "bmHeight"), "hwnd", $hsrcdc, "int", 0, "int", 0, "int", $irop)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 1
		EndIf
		DllCall("user32.dll", "int", "ReleaseDC", "hwnd", 0, "handle", $_hdc)
		DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hsrcdc, "handle", $hsrcsv)
		DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hsrcdc)
		If $ierror Then Return SetError(10, 0, 0)
		Return 1
	EndFunc

	Func _winapi_drawfocusrect($hdc, $trect)
		Local $aret = DllCall("user32.dll", "bool", "DrawFocusRect", "handle", $hdc, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_drawshadowtext($hdc, $stext, $irgbtext, $irgbshadow, $ixoffset = 0, $iyoffset = 0, $trect = 0, $iflags = 0)
		Local $aret
		If NOT IsDllStruct($trect) Then
			$trect = DllStructCreate($tagrect)
			$aret = DllCall("user32.dll", "bool", "GetClientRect", "hwnd", _winapi_windowfromdc($hdc), "struct*", $trect)
			If @error Then Return SetError(@error + 10, @extended, 0)
			If NOT $aret[0] Then Return SetError(10, 0, 0)
		EndIf
		$aret = DllCall("comctl32.dll", "int", "DrawShadowText", "handle", $hdc, "wstr", $stext, "uint", -1, "struct*", $trect, "dword", $iflags, "int", __rgb($irgbtext), "int", __rgb($irgbshadow), "int", $ixoffset, "int", $iyoffset)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_dwmdefwindowproc($hwnd, $imsg, $wparam, $lparam)
		Local $aret = DllCall("dwmapi.dll", "bool", "DwmDefWindowProc", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam, "lresult*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $aret[5]
	EndFunc

	Func _winapi_dwmenableblurbehindwindow($hwnd, $benable = True, $btransition = False, $hrgn = 0)
		Local $tblurbehind = DllStructCreate("dword;bool;handle;bool")
		Local $iflags = 0
		If $hrgn Then
			$iflags += 2
			DllStructSetData($tblurbehind, 3, $hrgn)
		EndIf
		DllStructSetData($tblurbehind, 1, BitOR($iflags, 5))
		DllStructSetData($tblurbehind, 2, $benable)
		DllStructSetData($tblurbehind, 4, $btransition)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmEnableBlurBehindWindow", "hwnd", $hwnd, "struct*", $tblurbehind)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmenablecomposition($benable)
		If $benable Then $benable = 1
		Local $aret = DllCall("dwmapi.dll", "long", "DwmEnableComposition", "uint", $benable)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmextendframeintoclientarea($hwnd, $tmargins = 0)
		If NOT IsDllStruct($tmargins) Then
			$tmargins = _winapi_createmargins(-1, -1, -1, -1)
		EndIf
		Local $aret = DllCall("dwmapi.dll", "long", "DwmExtendFrameIntoClientArea", "hwnd", $hwnd, "struct*", $tmargins)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmgetcolorizationcolor()
		Local $aret = DllCall("dwmapi.dll", "long", "DwmGetColorizationColor", "dword*", 0, "bool*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return SetExtended($aret[2], $aret[1])
	EndFunc

	Func _winapi_dwmgetcolorizationparameters()
		Local $tdwmcp = DllStructCreate($tagdwm_colorization_parameters)
		Local $aret = DllCall("dwmapi.dll", "uint", 127, "struct*", $tdwmcp)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tdwmcp
	EndFunc

	Func _winapi_dwmgetwindowattribute($hwnd, $iattribute)
		Local $tagstruct
		Switch $iattribute
			Case 5, 9
				$tagstruct = $tagrect
			Case 1
				$tagstruct = "uint"
			Case Else
				Return SetError(11, 0, 0)
		EndSwitch
		Local $tdata = DllStructCreate($tagstruct)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmGetWindowAttribute", "hwnd", $hwnd, "dword", $iattribute, "struct*", $tdata, "dword", DllStructGetSize($tdata))
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Switch $iattribute
			Case 1
				Return DllStructGetData($tdata, 1)
			Case Else
				Return $tdata
		EndSwitch
	EndFunc

	Func _winapi_dwminvalidateiconicbitmaps($hwnd)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmInvalidateIconicBitmaps", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmiscompositionenabled()
		Local $aret = DllCall("dwmapi.dll", "long", "DwmIsCompositionEnabled", "bool*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[1]
	EndFunc

	Func _winapi_dwmquerythumbnailsourcesize($hthumbnail)
		Local $tsize = DllStructCreate($tagsize)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmQueryThumbnailSourceSize", "handle", $hthumbnail, "struct*", $tsize)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tsize
	EndFunc

	Func _winapi_dwmregisterthumbnail($hdestination, $hsource)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmRegisterThumbnail", "hwnd", $hdestination, "hwnd", $hsource, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[3]
	EndFunc

	Func _winapi_dwmsetcolorizationparameters($tdwmcp)
		Local $aret = DllCall("dwmapi.dll", "uint", 131, "struct*", $tdwmcp, "uint", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmseticoniclivepreviewbitmap($hwnd, $hbitmap, $bframe = False, $tclient = 0)
		Local $iflags
		If $bframe Then
			$iflags = 1
		Else
			$iflags = 0
		EndIf
		Local $aret = DllCall("dwmapi.dll", "uint", "DwmSetIconicLivePreviewBitmap", "hwnd", $hwnd, "handle", $hbitmap, "struct*", $tclient, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmseticonicthumbnail($hwnd, $hbitmap, $bframe = False)
		Local $iflags
		If $bframe Then
			$iflags = 1
		Else
			$iflags = 0
		EndIf
		Local $aret = DllCall("dwmapi.dll", "long", "DwmSetIconicThumbnail", "hwnd", $hwnd, "handle", $hbitmap, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmsetwindowattribute($hwnd, $iattribute, $idata)
		Switch $iattribute
			Case 2, 3, 4, 6, 7, 8, 10, 11, 12
			Case Else
				Return SetError(1, 0, 0)
		EndSwitch
		Local $aret = DllCall("dwmapi.dll", "long", "DwmSetWindowAttribute", "hwnd", $hwnd, "dword", $iattribute, "dword*", $idata, "dword", 4)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmunregisterthumbnail($hthumbnail)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmUnregisterThumbnail", "handle", $hthumbnail)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_dwmupdatethumbnailproperties($hthumbnail, $bvisible = True, $bclientareaonly = False, $iopacity = 255, $trectdest = 0, $trectsrc = 0)
		Local Const $tagdwm_thumbnail_properties = "struct;dword dwFlags;int rcDestination[4];int rcSource[4];byte opacity;bool opacity;bool fSourceClientAreaOnly;endstruct"
		Local $tthumbnailproperties = DllStructCreate($tagdwm_thumbnail_properties)
		Local $tsize, $iflags = 0
		If NOT IsDllStruct($trectdest) Then
			$tsize = _winapi_dwmquerythumbnailsourcesize($hthumbnail)
			If @error Then
				Return SetError(@error + 10, @extended, 0)
			EndIf
			$trectdest = _winapi_createrectex(0, 0, DllStructGetData($tsize, 1), DllStructGetData($tsize, 2))
		EndIf
		For $i = 1 To 4
			DllStructSetData($tthumbnailproperties, 2, DllStructGetData($trectdest, $i), $i)
		Next
		If IsDllStruct($trectsrc) Then
			$iflags += 2
			For $i = 1 To 4
				DllStructSetData($tthumbnailproperties, 3, DllStructGetData($trectsrc, $i), $i)
			Next
		EndIf
		DllStructSetData($tthumbnailproperties, 1, BitOR($iflags, 29))
		DllStructSetData($tthumbnailproperties, 4, $iopacity)
		DllStructSetData($tthumbnailproperties, 5, $bvisible)
		DllStructSetData($tthumbnailproperties, 6, $bclientareaonly)
		Local $aret = DllCall("dwmapi.dll", "long", "DwmUpdateThumbnailProperties", "handle", $hthumbnail, "struct*", $tthumbnailproperties)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_ellipse($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "Ellipse", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_endpaint($hwnd, ByRef $tpaintstruct)
		Local $aret = DllCall("user32.dll", "bool", "EndPaint", "hwnd", $hwnd, "struct*", $tpaintstruct)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_endpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "EndPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_enumdisplaymonitors($hdc = 0, $trect = 0)
		Local $henumproc = DllCallbackRegister("__EnumDisplayMonitorsProc", "bool", "handle;handle;ptr;lparam")
		Dim $__g_venum[101][2] = [[0]]
		Local $aret = DllCall("user32.dll", "bool", "EnumDisplayMonitors", "handle", $hdc, "struct*", $trect, "ptr", DllCallbackGetPtr($henumproc), "lparam", 0)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0][0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumdisplaysettings($sdevice, $imode)
		Local $stypeofdevice = "wstr"
		If NOT StringStripWS($sdevice, $str_stripleading + $str_striptrailing) Then
			$stypeofdevice = "ptr"
			$sdevice = 0
		EndIf
		Local $tdevmode = DllStructCreate($tagdevmode_display)
		DllStructSetData($tdevmode, "Size", DllStructGetSize($tdevmode))
		DllStructSetData($tdevmode, "DriverExtra", 0)
		Local $aret = DllCall("user32.dll", "bool", "EnumDisplaySettingsW", $stypeofdevice, $sdevice, "dword", $imode, "struct*", $tdevmode)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $aresult[5]
		$aresult[0] = DllStructGetData($tdevmode, "PelsWidth")
		$aresult[1] = DllStructGetData($tdevmode, "PelsHeight")
		$aresult[2] = DllStructGetData($tdevmode, "BitsPerPel")
		$aresult[3] = DllStructGetData($tdevmode, "DisplayFrequency")
		$aresult[4] = DllStructGetData($tdevmode, "DisplayFlags")
		Return $aresult
	EndFunc

	Func _winapi_enumfontfamilies($hdc = 0, $sfacename = "", $icharset = 1, $ifonttype = 7, $spattern = "", $bexclude = False)
		Local $tlogfont = DllStructCreate($taglogfont)
		Local $tpattern = DllStructCreate("uint;uint;ptr;wchar[" & (StringLen($spattern) + 1) & "]")
		DllStructSetData($tpattern, 1, $ifonttype)
		If NOT $spattern Then
			DllStructSetData($tpattern, 2, 0)
			DllStructSetData($tpattern, 3, 0)
		Else
			DllStructSetData($tpattern, 2, $bexclude)
			DllStructSetData($tpattern, 3, DllStructGetPtr($tpattern, 4))
			DllStructSetData($tpattern, 4, $spattern)
		EndIf
		DllStructSetData($tlogfont, 9, $icharset)
		DllStructSetData($tlogfont, 13, 0)
		DllStructSetData($tlogfont, 14, StringLeft($sfacename, 31))
		Local $hcdc
		If NOT $hdc Then
			$hcdc = _winapi_createcompatibledc(0)
		Else
			$hcdc = $hdc
		EndIf
		Dim $__g_venum[101][8] = [[0]]
		Local $henumproc = DllCallbackRegister("__EnumFontFamiliesProc", "int", "ptr;ptr;dword;PTR")
		Local $aret = DllCall("gdi32.dll", "int", "EnumFontFamiliesExW", "handle", $hcdc, "struct*", $tlogfont, "ptr", DllCallbackGetPtr($henumproc), "struct*", $tpattern, "dword", 0)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0][0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If NOT $hdc Then
			_winapi_deletedc($hcdc)
		EndIf
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_equalrect($trect1, $trect2)
		Local $aret = DllCall("user32.dll", "bool", "EqualRect", "struct*", $trect1, "struct*", $trect2)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_equalrgn($hrgn1, $hrgn2)
		Local $aret = DllCall("gdi32.dll", "bool", "EqualRgn", "handle", $hrgn1, "handle", $hrgn2)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_excludecliprect($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "int", "ExcludeClipRect", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_extcreatepen($ipenstyle, $iwidth, $ibrushstyle, $irgb, $ihatch = 0, $auserstyle = 0, $istart = 0, $iend = -1)
		Local $icount = 0, $tstyle = 0
		If BitAND($ipenstyle, 255) = 7 Then
			If __checkerrorarraybounds($auserstyle, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			$tstyle = DllStructCreate("dword[" & ($iend - $istart + 1) & "]")
			For $i = $istart To $iend
				DllStructSetData($tstyle, 1, $auserstyle[$i], $icount + 1)
				$icount += 1
			Next
		EndIf
		Local $tlogbrush = DllStructCreate($taglogbrush)
		DllStructSetData($tlogbrush, 1, $ibrushstyle)
		DllStructSetData($tlogbrush, 2, __rgb($irgb))
		DllStructSetData($tlogbrush, 3, $ihatch)
		Local $aret = DllCall("gdi32.dll", "handle", "ExtCreatePen", "dword", $ipenstyle, "dword", $iwidth, "struct*", $tlogbrush, "dword", $icount, "struct*", $tstyle)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_extcreateregion($trgndata, $txform = 0)
		Local $aret = DllCall("gdi32.dll", "handle", "ExtCreateRegion", "struct*", $txform, "dword", DllStructGetSize($trgndata), "struct*", $trgndata)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_extfloodfill($hdc, $ix, $iy, $irgb, $itype = 0)
		Local $aret = DllCall("gdi32.dll", "bool", "ExtFloodFill", "handle", $hdc, "int", $ix, "int", $iy, "dword", __rgb($irgb), "uint", $itype)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_extselectcliprgn($hdc, $hrgn, $imode = 5)
		Local $aret = DllCall("gdi32.dll", "int", "ExtSelectClipRgn", "handle", $hdc, "handle", $hrgn, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_fillpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "FillPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_fillrgn($hdc, $hrgn, $hbrush)
		Local $aret = DllCall("gdi32.dll", "bool", "FillRgn", "handle", $hdc, "handle", $hrgn, "handle", $hbrush)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_flattenpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "FlattenPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_framergn($hdc, $hrgn, $hbrush, $iwidth, $iheight)
		Local $aret = DllCall("gdi32.dll", "bool", "FrameRgn", "handle", $hdc, "handle", $hrgn, "handle", $hbrush, "int", $iwidth, "int", $iheight)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_gdicomment($hdc, $pbuffer, $isize)
		Local $aret = DllCall("gdi32.dll", "bool", "GdiComment", "handle", $hdc, "uint", $isize, "struct*", $pbuffer)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_getarcdirection($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetArcDirection", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		If ($aret[0] < 1) OR ($aret[0] > 2) Then Return SetError(10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getbitmapbits($hbitmap, $isize, $pbits)
		Local $aret = DllCall("gdi32.dll", "long", "GetBitmapBits", "handle", $hbitmap, "long", $isize, "struct*", $pbits)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getbitmapdimensionex($hbitmap)
		Local $tsize = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "GetBitmapDimensionEx", "handle", $hbitmap, "struct*", $tsize)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tsize
	EndFunc

	Func _winapi_getbkcolor($hdc)
		Local $aret = DllCall("gdi32.dll", "dword", "GetBkColor", "handle", $hdc)
		If @error OR ($aret[0] = -1) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_getboundsrect($hdc, $iflags = 0)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("gdi32.dll", "uint", "GetBoundsRect", "handle", $hdc, "struct*", $trect, "uint", $iflags)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return SetExtended($aret[0], $trect)
	EndFunc

	Func _winapi_getbrushorg($hdc)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "GetBrushOrgEx", "handle", $hdc, "struct*", $tpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tpoint
	EndFunc

	Func _winapi_getbvalue($irgb)
		Return BitShift(BitAND(__rgb($irgb), 16711680), 16)
	EndFunc

	Func _winapi_getclipbox($hdc, ByRef $trect)
		$trect = DllStructCreate($tagrect)
		Local $aret = DllCall("gdi32.dll", "int", "GetClipBox", "handle", $hdc, "struct*", $trect)
		If @error OR NOT $aret[0] Then
			$trect = 0
			Return SetError(@error, @extended, 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_getcliprgn($hdc)
		Local $hrgn = _winapi_createrectrgn(0, 0, 0, 0)
		Local $ierror = 0
		Local $aret = DllCall("gdi32.dll", "int", "GetClipRgn", "handle", $hdc, "handle", $hrgn)
		If @error OR ($aret[0] = -1) Then $ierror = @error + 10
		If $ierror OR NOT $aret[0] Then
			_winapi_deleteobject($hrgn)
			$hrgn = 0
		EndIf
		Return SetError($ierror, 0, $hrgn)
	EndFunc

	Func _winapi_getcoloradjustment($hdc)
		Local $tadjustment = DllStructCreate($tagcoloradjustment)
		Local $aret = DllCall("gdi32.dll", "bool", "GetColorAdjustment", "handle", $hdc, "struct*", $tadjustment)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tadjustment
	EndFunc

	Func _winapi_getcurrentobject($hdc, $itype)
		Local $aret = DllCall("gdi32.dll", "handle", "GetCurrentObject", "handle", $hdc, "uint", $itype)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getcurrentposition($hdc)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "int", "GetCurrentPositionEx", "handle", $hdc, "struct*", $tpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tpoint
	EndFunc

	Func _winapi_getdcex($hwnd, $hrgn, $iflags)
		Local $aret = DllCall("user32.dll", "handle", "GetDCEx", "hwnd", $hwnd, "handle", $hrgn, "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getdevicegammaramp($hdc, ByRef $aramp)
		$aramp = 0
		Local $tdata = DllStructCreate("word[256];word[256];word[256]")
		Local $aret = DllCall("gdi32.dll", "bool", "GetDeviceGammaRamp", "handle", $hdc, "struct*", $tdata)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Dim $aramp[256][3]
		For $i = 0 To 2
			For $j = 0 To 255
				$aramp[$j][$i] = DllStructGetData($tdata, $i + 1, $j + 1)
			Next
		Next
		Return 1
	EndFunc

	Func _winapi_getdibcolortable($hbitmap)
		Local $hdc = _winapi_createcompatibledc(0)
		Local $hsv = _winapi_selectobject($hdc, $hbitmap)
		Local $tpeak = DllStructCreate("dword[256]")
		Local $ierror = 0
		Local $aret = DllCall("gdi32.dll", "uint", "GetDIBColorTable", "handle", $hdc, "uint", 0, "uint", 256, "struct*", $tpeak)
		If @error OR NOT $aret[0] Then $ierror = @error + 10
		_winapi_selectobject($hdc, $hsv)
		_winapi_deletedc($hdc)
		If $ierror Then Return SetError($ierror, 0, 0)
		Local $tdata = DllStructCreate("dword[" & $aret[0] & "]")
		If @error Then Return SetError(@error + 20, @extended, 0)
		_winapi_movememory($tdata, $aret[4], 4 * $aret[0])
		Return SetExtended($aret[0], $tdata)
	EndFunc

	Func _winapi_getenhmetafile($sfilepath)
		Local $aret = DllCall("gdi32.dll", "handle", "GetEnhMetaFileW", "wstr", $sfilepath)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getenhmetafilebits($hemf, ByRef $pbuffer)
		Local $aret = DllCall("gdi32.dll", "uint", "GetEnhMetaFileBits", "handle", $hemf, "uint", 0, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 50, @extended, 0)
		$pbuffer = __heaprealloc($pbuffer, $aret[0], 1)
		If @error Then Return SetError(@error, @extended, 0)
		$aret = DllCall("gdi32.dll", "uint", "GetEnhMetaFileBits", "handle", $hemf, "uint", $aret[0], "ptr", $pbuffer)
		If NOT $aret[0] Then Return SetError(60, 0, 0)
		Return $aret[2]
	EndFunc

	Func _winapi_getenhmetafiledescription($hemf)
		Local $tdata = DllStructCreate("wchar[4096]")
		Local $aret = DllCall("gdi32.dll", "uint", "GetEnhMetaFileDescriptionW", "handle", $hemf, "uint", 4096, "struct*", $tdata)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error + 20, $aret[0], 0)
		If NOT $aret[0] Then Return 0
		Local $adata = _winapi_structtoarray($tdata)
		If @error Then Return SetError(@error, @extended, 0)
		Local $aresult[2]
		For $i = 0 To 1
			If $adata[0] > $i Then
				$aresult[$i] = $adata[$i + 1]
			Else
				$aresult[$i] = ""
			EndIf
		Next
		Return $aresult
	EndFunc

	Func _winapi_getenhmetafiledimension($hemf)
		Local $tenhmetaheader = _winapi_getenhmetafileheader($hemf)
		If @error Then Return SetError(@error, @extended, 0)
		Local $tsize = DllStructCreate($tagsize)
		DllStructSetData($tsize, 1, Round((DllStructGetData($tenhmetaheader, "rcFrame", 3) - DllStructGetData($tenhmetaheader, "rcFrame", 1)) * DllStructGetData($tenhmetaheader, "Device", 1) / DllStructGetData($tenhmetaheader, "Millimeters", 1) / 100))
		DllStructSetData($tsize, 2, Round((DllStructGetData($tenhmetaheader, "rcFrame", 4) - DllStructGetData($tenhmetaheader, "rcFrame", 2)) * DllStructGetData($tenhmetaheader, "Device", 2) / DllStructGetData($tenhmetaheader, "Millimeters", 2) / 100))
		Return $tsize
	EndFunc

	Func _winapi_getenhmetafileheader($hemf)
		Local $tenhmetaheader = DllStructCreate($tagenhmetaheader)
		Local $aret = DllCall("gdi32.dll", "uint", "GetEnhMetaFileHeader", "handle", $hemf, "uint", DllStructGetSize($tenhmetaheader), "struct*", $tenhmetaheader)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return SetExtended($aret[0], $tenhmetaheader)
	EndFunc

	Func _winapi_getfontname($sfacename, $istyle = 0, $icharset = 1)
		If NOT $sfacename Then Return SetError(1, 0, "")
		Local $iflags = 0
		If BitAND($istyle, 1) Then
			$iflags += 32
		EndIf
		If BitAND($istyle, 2) Then
			$iflags += 1
		EndIf
		If NOT $iflags Then
			$iflags = 64
		EndIf
		Local $tlogfont = DllStructCreate($taglogfont)
		DllStructSetData($tlogfont, 9, $icharset)
		DllStructSetData($tlogfont, 13, 0)
		DllStructSetData($tlogfont, 14, StringLeft($sfacename, 31))
		Local $tfn = DllStructCreate("dword;wchar[64]")
		DllStructSetData($tfn, 1, $iflags)
		DllStructSetData($tfn, 2, "")
		Local $hdc = _winapi_createcompatibledc(0)
		Local $henumproc = DllCallbackRegister("__EnumFontStylesProc", "int", "ptr;ptr;dword;lparam")
		Local $sret = ""
		Local $aret = DllCall("gdi32.dll", "int", "EnumFontFamiliesExW", "handle", $hdc, "struct*", $tlogfont, "ptr", DllCallbackGetPtr($henumproc), "struct*", $tfn, "dword", 0)
		If NOT @error AND NOT $aret[0] Then $sret = DllStructGetData($tfn, 2)
		DllCallbackFree($henumproc)
		_winapi_deletedc($hdc)
		If NOT $sret Then Return SetError(2, 0, "")
		Return $sret
	EndFunc

	Func _winapi_getfontresourceinfo($sfont, $bforce = False, $iflag = Default)
		If $iflag = Default Then
			If $bforce Then
				If NOT _winapi_addfontresourceex($sfont, $fr_not_enum) Then Return SetError(@error + 20, @extended, "")
			EndIf
			Local $ierror = 0
			Local $aret = DllCall("gdi32.dll", "bool", "GetFontResourceInfoW", "wstr", $sfont, "dword*", 4096, "wstr", "", "dword", 1)
			If @error OR NOT $aret[0] Then $ierror = @error + 10
			If $bforce Then
				_winapi_removefontresourceex($sfont, $fr_not_enum)
			EndIf
			If $ierror Then Return SetError($ierror, 0, "")
			Return $aret[3]
		Else
			If NOT FileExists($sfont) Then
				$sfont = RegRead("HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", "Fonts") & "\" & $sfont
				If NOT FileExists($sfont) Then Return SetError(31, 0, "")
			EndIf
			Local Const $hfile = _winapi_createfile($sfont, 2, 2, 2)
			If NOT $hfile Then Return SetError(32, _winapi_getlasterror(), "")
			Local Const $ifile = FileGetSize($sfont)
			Local Const $tbuffer = DllStructCreate("byte[" & $ifile + 1 & "]")
			Local Const $pfile = DllStructGetPtr($tbuffer)
			Local $iread
			_winapi_readfile($hfile, $pfile, $ifile, $iread)
			_winapi_closehandle($hfile)
			Local $sttfname = _winapi_getfontmemoryresourceinfo($pfile, $iflag)
			If @error Then
				If @error = 1 AND $iflag = 4 Then
					$sttfname = _winapi_getfontresourceinfo($sfont, True)
					Return SetError(@error, @extended, $sttfname)
				EndIf
				Return SetError(33, @error, "")
			EndIf
			Return $sttfname
		EndIf
	EndFunc

	Func _winapi_getfontmemoryresourceinfo($pmemory, $iflag = 1)
		Local Const $tagtt_offset_table = "USHORT uMajorVersion;USHORT uMinorVersion;USHORT uNumOfTables;USHORT uSearchRange;USHORT uEntrySelector;USHORT uRangeShift"
		Local Const $tagtt_table_directory = "char szTag[4];ULONG uCheckSum;ULONG uOffset;ULONG uLength"
		Local Const $tagtt_name_table_header = "USHORT uFSelector;USHORT uNRCount;USHORT uStorageOffset"
		Local Const $tagtt_name_record = "USHORT uPlatformID;USHORT uEncodingID;USHORT uLanguageID;USHORT uNameID;USHORT uStringLength;USHORT uStringOffset"
		Local $tttoffsettable = DllStructCreate($tagtt_offset_table, $pmemory)
		Local $inumoftables = _winapi_swapword(DllStructGetData($tttoffsettable, "uNumOfTables"))
		If NOT (_winapi_swapword(DllStructGetData($tttoffsettable, "uMajorVersion")) = 1 AND _winapi_swapword(DllStructGetData($tttoffsettable, "uMinorVersion")) = 0) Then Return SetError(1, 0, "")
		Local $itbldirsize = DllStructGetSize(DllStructCreate($tagtt_table_directory))
		Local $bfound = False, $ioffset, $ttbldir
		For $i = 0 To $inumoftables - 1
			$ttbldir = DllStructCreate($tagtt_table_directory, $pmemory + DllStructGetSize($tttoffsettable) + $i * $itbldirsize)
			If StringLeft(DllStructGetData($ttbldir, "szTag"), 4) = "name" Then
				$bfound = True
				$ioffset = _winapi_swapdword(DllStructGetData($ttbldir, "uOffset"))
				ExitLoop
			EndIf
		Next
		If NOT $bfound Then Return SetError(2, 0, "")
		Local $tntheader = DllStructCreate($tagtt_name_table_header, $pmemory + $ioffset)
		Local $intheadersize = DllStructGetSize($tntheader)
		Local $inrcount = _winapi_swapword(DllStructGetData($tntheader, "uNRCount"))
		Local $istorageoffset = _winapi_swapword(DllStructGetData($tntheader, "uStorageOffset"))
		Local $ittrecordsize = DllStructGetSize(DllStructCreate($tagtt_name_record))
		Local $tresult, $sresult, $istringlength, $istringoffset, $iencodingid, $tttrecord
		For $i = 0 To $inrcount - 1
			$tttrecord = DllStructCreate($tagtt_name_record, $pmemory + $ioffset + $intheadersize + $i * $ittrecordsize)
			If _winapi_swapword($tttrecord.unameid) = $iflag Then
				$istringlength = _winapi_swapword(DllStructGetData($tttrecord, "uStringLength"))
				$istringoffset = _winapi_swapword(DllStructGetData($tttrecord, "uStringOffset"))
				$iencodingid = _winapi_swapword(DllStructGetData($tttrecord, "uEncodingID"))
				Local $swchar = "char"
				If $iencodingid = 1 Then
					$swchar = "word"
					$istringlength = $istringlength / 2
				EndIf
				$tresult = DllStructCreate($swchar & " szTTFName[" & $istringlength & "]", $pmemory + $ioffset + $istringoffset + $istorageoffset)
				If $iencodingid = 1 Then
					$sresult = ""
					For $j = 1 To $istringlength
						$sresult &= ChrW(_winapi_swapword(DllStructGetData($tresult, 1, $j)))
					Next
				Else
					$sresult = $tresult.szttfname
				EndIf
				If StringLen($sresult) > 0 Then ExitLoop
			EndIf
		Next
		Return $sresult
	EndFunc

	Func _winapi_getglyphoutline($hdc, $schar, $iformat, ByRef $pbuffer, $tmat2 = 0)
		Local $tgm = DllStructCreate($tagglyphmetrics)
		Local $aret, $ilength = 0
		If NOT IsDllStruct($tmat2) Then
			$tmat2 = DllStructCreate("short[8]")
			DllStructSetData($tmat2, 1, 1, 2)
			DllStructSetData($tmat2, 1, 1, 8)
		EndIf
		If $iformat Then
			$aret = DllCall("gdi32.dll", "dword", "GetGlyphOutlineW", "handle", $hdc, "uint", AscW($schar), "uint", $iformat, "struct*", $tgm, "dword", 0, "ptr", 0, "struct*", $tmat2)
			If @error OR ($aret[0] = 4294967295) Then Return SetError(@error + 10, @extended, 0)
			$ilength = $aret[0]
			$pbuffer = __heaprealloc($pbuffer, $ilength, 1)
			If @error Then Return SetError(@error + 20, @extended, 0)
		EndIf
		$aret = DllCall("gdi32.dll", "dword", "GetGlyphOutlineW", "handle", $hdc, "uint", AscW($schar), "uint", $iformat, "struct*", $tgm, "dword", $ilength, "ptr", $pbuffer, "struct*", $tmat2)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] = 4294967295 Then Return SetError(10, -1, 0)
		Return SetExtended($ilength, $tgm)
	EndFunc

	Func _winapi_getgraphicsmode($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetGraphicsMode", "handle", $hdc)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getgvalue($irgb)
		Return BitShift(BitAND(__rgb($irgb), 65280), 8)
	EndFunc

	Func _winapi_geticondimension($hicon)
		Local $ticoninfo = DllStructCreate($tagiconinfo)
		Local $aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $hicon, "struct*", $ticoninfo)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $tsize = _winapi_getbitmapdimension(DllStructGetData($ticoninfo, 5))
		For $i = 4 To 5
			_winapi_deleteobject(DllStructGetData($ticoninfo, $i))
		Next
		If NOT IsDllStruct($tsize) Then Return SetError(20, 0, 0)
		Return $tsize
	EndFunc

	Func _winapi_getmapmode($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetMapMode", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getobjecttype($hobject)
		Local $aret = DllCall("gdi32.dll", "dword", "GetObjectType", "handle", $hobject)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getoutlinetextmetrics($hdc)
		Local $aret = DllCall("gdi32.dll", "uint", "GetOutlineTextMetricsW", "handle", $hdc, "uint", 0, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Local $tdata = DllStructCreate("byte[" & $aret[0] & "]")
		Local $toltm = DllStructCreate($tagoutlinetextmetric, DllStructGetPtr($tdata))
		$aret = DllCall("gdi32.dll", "uint", "GetOutlineTextMetricsW", "handle", $hdc, "uint", $aret[0], "struct*", $tdata)
		If NOT $aret[0] Then Return SetError(20, 0, 0)
		Return $toltm
	EndFunc

	Func _winapi_getpixel($hdc, $ix, $iy)
		Local $aret = DllCall("gdi32.dll", "dword", "GetPixel", "handle", $hdc, "int", $ix, "int", $iy)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_getpolyfillmode($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetPolyFillMode", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getposfromrect($trect)
		Local $aresult[4]
		For $i = 0 To 3
			$aresult[$i] = DllStructGetData($trect, $i + 1)
			If @error Then Return SetError(@error, @extended, 0)
		Next
		For $i = 2 To 3
			$aresult[$i] -= $aresult[$i - 2]
		Next
		Return $aresult
	EndFunc

	Func _winapi_getregiondata($hrgn, ByRef $trgndata)
		Local $aret = DllCall("gdi32.dll", "dword", "GetRegionData", "handle", $hrgn, "dword", 0, "ptr", 0)
		If @error OR NOT $aret[0] Then
			$trgndata = 0
			Return SetError(@error, @extended, False)
		EndIf
		$trgndata = DllStructCreate($tagrgndataheader)
		Local $irectsize = $aret[0] - DllStructGetSize($trgndata)
		If $irectsize > 0 Then $trgndata = DllStructCreate($tagrgndataheader & ";byte[" & $irectsize & "]")
		$aret = DllCall("gdi32.dll", "dword", "GetRegionData", "handle", $hrgn, "dword", $aret[0], "struct*", $trgndata)
		If NOT $aret[0] Then $trgndata = 0
		Return $aret[0]
	EndFunc

	Func _winapi_getrgnbox($hrgn, ByRef $trect)
		$trect = DllStructCreate($tagrect)
		Local $aret = DllCall("gdi32.dll", "int", "GetRgnBox", "handle", $hrgn, "struct*", $trect)
		If @error OR NOT $aret[0] Then
			$trect = 0
			Return SetError(@error, @extended, 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_getrop2($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetROP2", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getrvalue($irgb)
		Return BitAND(__rgb($irgb), 255)
	EndFunc

	Func _winapi_getstretchbltmode($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetStretchBltMode", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_gettabbedtextextent($hdc, $stext, $atab = 0, $istart = 0, $iend = -1)
		Local $itab, $icount
		If NOT IsArray($atab) Then
			If $atab Then
				$itab = $atab
				Dim $atab[1] = [$itab]
				$istart = 0
				$iend = 0
				$icount = 1
			Else
				$icount = 0
			EndIf
		Else
			$icount = 1
		EndIf
		Local $ttab = 0
		If $icount Then
			If __checkerrorarraybounds($atab, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			$icount = $iend - $istart + 1
			$ttab = DllStructCreate("uint[" & $icount & "]")
			$itab = 1
			For $i = $istart To $iend
				DllStructSetData($ttab, 1, $atab[$i], $itab)
				$itab += 1
			Next
		EndIf
		Local $aret = DllCall("user32.dll", "dword", "GetTabbedTextExtentW", "handle", $hdc, "wstr", $stext, "int", StringLen($stext), "int", $icount, "struct*", $ttab)
		If @error OR NOT $aret[0] Then Return SetError(@error + 20, @extended, 0)
		Return _winapi_createsize(_winapi_loword($aret[0]), _winapi_hiword($aret[0]))
	EndFunc

	Func _winapi_gettextalign($hdc)
		Local $aret = DllCall("gdi32.dll", "uint", "GetTextAlign", "handle", $hdc)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_gettextcharacterextra($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetTextCharacterExtra", "handle", $hdc)
		If @error OR ($aret[0] = 134217728) Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_gettextcolor($hdc)
		Local $aret = DllCall("gdi32.dll", "dword", "GetTextColor", "handle", $hdc)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_gettextface($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "GetTextFaceW", "handle", $hdc, "int", 2048, "wstr", "")
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[3]
	EndFunc

	Func _winapi_getudfcolormode()
		Return Number($__g_irgbmode)
	EndFunc

	Func _winapi_getupdaterect($hwnd, $berase = True)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "GetUpdateRect", "hwnd", $hwnd, "struct*", $trect, "bool", $berase)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $trect
	EndFunc

	Func _winapi_getupdatergn($hwnd, $hrgn, $berase = True)
		Local $aret = DllCall("user32.dll", "int", "GetUpdateRgn", "hwnd", $hwnd, "handle", $hrgn, "bool", $berase)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getwindowext($hdc)
		Local $tsize = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "GetWindowExtEx", "handle", $hdc, "struct*", $tsize)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tsize
	EndFunc

	Func _winapi_getwindoworg($hdc)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "GetWindowOrgEx", "handle", $hdc, "struct*", $tpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tpoint
	EndFunc

	Func _winapi_getwindowrgnbox($hwnd, ByRef $trect)
		$trect = DllStructCreate($tagrect)
		Local $aret = DllCall("gdi32.dll", "int", "GetWindowRgnBox", "hwnd", $hwnd, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getworldtransform($hdc)
		Local $txform = DllStructCreate($tagxform)
		Local $aret = DllCall("gdi32.dll", "bool", "GetWorldTransform", "handle", $hdc, "struct*", $txform)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $txform
	EndFunc

	Func _winapi_gradientfill($hdc, Const ByRef $avertex, $istart = 0, $iend = -1, $brotate = False)
		If __checkerrorarraybounds($avertex, $istart, $iend, 2) Then Return SetError(@error + 10, @extended, 0)
		If UBound($avertex, $ubound_columns) < 3 Then Return SetError(13, 0, 0)
		Local $ipoint = $iend - $istart + 1
		If $ipoint > 3 Then
			$iend = $istart + 2
			$ipoint = 3
		EndIf
		Local $imode
		Switch $ipoint
			Case 2
				$imode = Number(NOT $brotate)
			Case 3
				$imode = 2
			Case Else
				Return SetError(15, 0, 0)
		EndSwitch
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "ushort[8];"
		Next
		Local $tvertex = DllStructCreate($tagstruct)
		Local $icount = 1
		Local $tgradient = DllStructCreate("ulong[" & $ipoint & "]")
		For $i = $istart To $iend
			DllStructSetData($tgradient, 1, $icount - 1, $icount)
			DllStructSetData($tvertex, $icount, _winapi_loword($avertex[$i][0]), 1)
			DllStructSetData($tvertex, $icount, _winapi_hiword($avertex[$i][0]), 2)
			DllStructSetData($tvertex, $icount, _winapi_loword($avertex[$i][1]), 3)
			DllStructSetData($tvertex, $icount, _winapi_hiword($avertex[$i][1]), 4)
			DllStructSetData($tvertex, $icount, BitShift(_winapi_getrvalue($avertex[$i][2]), -8), 5)
			DllStructSetData($tvertex, $icount, BitShift(_winapi_getgvalue($avertex[$i][2]), -8), 6)
			DllStructSetData($tvertex, $icount, BitShift(_winapi_getbvalue($avertex[$i][2]), -8), 7)
			DllStructSetData($tvertex, $icount, 0, 8)
			$icount += 1
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "GdiGradientFill", "handle", $hdc, "struct*", $tvertex, "ulong", $ipoint, "struct*", $tgradient, "ulong", 1, "ulong", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_inflaterect(ByRef $trect, $idx, $idy)
		Local $aret = DllCall("user32.dll", "bool", "InflateRect", "struct*", $trect, "int", $idx, "int", $idy)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_intersectcliprect($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "int", "IntersectClipRect", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_intersectrect($trect1, $trect2)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "IntersectRect", "struct*", $trect, "struct*", $trect1, "struct*", $trect2)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $trect
	EndFunc

	Func _winapi_invalidatergn($hwnd, $hrgn = 0, $berase = True)
		Local $aret = DllCall("user32.dll", "bool", "InvalidateRgn", "hwnd", $hwnd, "handle", $hrgn, "bool", $berase)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_invertandbitmap($hbitmap, $bdelete = False)
		Local $tbitmap = DllStructCreate($tagbitmap)
		If NOT _winapi_getobject($hbitmap, DllStructGetSize($tbitmap), $tbitmap) OR (DllStructGetData($tbitmap, "bmBitsPixel") <> 1) Then
			Return SetError(@error + 10, @extended, 0)
		EndIf
		Local $hresult = _winapi_createdib(DllStructGetData($tbitmap, "bmWidth"), DllStructGetData($tbitmap, "bmHeight"), 1)
		If NOT $hresult Then Return SetError(@error, @extended, 0)
		Local $hsrcdc = _winapi_createcompatibledc(0)
		Local $hsrcsv = _winapi_selectobject($hsrcdc, $hbitmap)
		Local $hdstdc = _winapi_createcompatibledc(0)
		Local $hdstsv = _winapi_selectobject($hdstdc, $hresult)
		_winapi_bitblt($hdstdc, 0, 0, DllStructGetData($tbitmap, "bmWidth"), DllStructGetData($tbitmap, "bmHeight"), $hsrcdc, 0, 0, 3342344)
		_winapi_selectobject($hsrcdc, $hsrcsv)
		_winapi_deletedc($hsrcdc)
		_winapi_selectobject($hdstdc, $hdstsv)
		_winapi_deletedc($hdstdc)
		If $bdelete Then
			_winapi_deleteobject($hbitmap)
		EndIf
		Return $hresult
	EndFunc

	Func _winapi_invertcolor($icolor)
		If $icolor = -1 Then Return 0
		Return 16777215 - BitAND($icolor, 16777215)
	EndFunc

	Func _winapi_invertrect($hdc, ByRef $trect)
		Local $aret = DllCall("user32.dll", "bool", "InvertRect", "handle", $hdc, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_invertrgn($hdc, $hrgn)
		Local $aret = DllCall("gdi32.dll", "bool", "InvertRgn", "handle", $hdc, "handle", $hrgn)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isalphabitmap($hbitmap)
		$hbitmap = _winapi_copybitmap($hbitmap)
		If NOT $hbitmap Then Return SetError(@error + 20, @extended, 0)
		Local $aret, $ierror = 0
		Do
			Local $tdib = DllStructCreate($tagdibsection)
			If (NOT _winapi_getobject($hbitmap, DllStructGetSize($tdib), $tdib)) OR (DllStructGetData($tdib, "bmBitsPixel") <> 32) OR (DllStructGetData($tdib, "biCompression")) Then
				$ierror = 1
				ExitLoop
			EndIf
			$aret = DllCall("user32.dll", "int", "CallWindowProc", "ptr", __alphaproc(), "ptr", 0, "uint", 0, "struct*", $tdib, "ptr", 0)
			If @error OR ($aret[0] = -1) Then
				$ierror = @error + 10
				ExitLoop
			EndIf
		Until 1
		_winapi_deleteobject($hbitmap)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_isrectempty(ByRef $trect)
		Local $aret = DllCall("user32.dll", "bool", "IsRectEmpty", "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_linedda($ix1, $iy1, $ix2, $iy2, $plineproc, $pdata = 0)
		Local $aret = DllCall("gdi32.dll", "bool", "LineDDA", "int", $ix1, "int", $iy1, "int", $ix2, "int", $iy2, "ptr", $plineproc, "lparam", $pdata)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_lockwindowupdate($hwnd)
		Local $aret = DllCall("user32.dll", "bool", "LockWindowUpdate", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_lptodp($hdc, ByRef $tpoint, $icount = 1)
		Local $aret = DllCall("gdi32.dll", "bool", "LPtoDP", "handle", $hdc, "struct*", $tpoint, "int", $icount)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_maskblt($hdestdc, $ixdest, $iydest, $iwidth, $iheight, $hsrcdc, $ixsrc, $iysrc, $hmask, $ixmask, $iymask, $irop)
		Local $aret = DllCall("gdi32.dll", "bool", "MaskBlt", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidth, "int", $iheight, "hwnd", $hsrcdc, "int", $ixsrc, "int", $iysrc, "handle", $hmask, "int", $ixmask, "int", $iymask, "dword", $irop)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_modifyworldtransform($hdc, ByRef $txform, $imode)
		Local $aret = DllCall("gdi32.dll", "bool", "ModifyWorldTransform", "handle", $hdc, "struct*", $txform, "dword", $imode)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_monitorfrompoint(ByRef $tpoint, $iflag = 1)
		If DllStructGetSize($tpoint) <> 8 Then Return SetError(@error + 10, @extended, 0)
		Local $aret = DllCall("user32.dll", "handle", "MonitorFromPoint", "struct", $tpoint, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_monitorfromrect(ByRef $trect, $iflag = 1)
		Local $aret = DllCall("user32.dll", "ptr", "MonitorFromRect", "struct*", $trect, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_monitorfromwindow($hwnd, $iflag = 1)
		Local $aret = DllCall("user32.dll", "handle", "MonitorFromWindow", "hwnd", $hwnd, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_movetoex($hdc, $ix, $iy)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "MoveToEx", "handle", $hdc, "int", $ix, "int", $iy, "struct*", $tpoint)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $tpoint
	EndFunc

	Func _winapi_offsetcliprgn($hdc, $ixoffset, $iyoffset)
		Local $aret = DllCall("gdi32.dll", "int", "OffsetClipRgn", "handle", $hdc, "int", $ixoffset, "int", $iyoffset)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_offsetpoints(ByRef $apoint, $ixoffset, $iyoffset, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2) Then Return SetError(@error + 10, @extended, 0)
		If UBound($apoint, $ubound_columns) < 2 Then Return SetError(13, 0, 0)
		For $i = $istart To $iend
			$apoint[$i][0] += $ixoffset
			$apoint[$i][1] += $iyoffset
		Next
		Return 1
	EndFunc

	Func _winapi_offsetrect(ByRef $trect, $idx, $idy)
		Local $aret = DllCall("user32.dll", "bool", "OffsetRect", "struct*", $trect, "int", $idx, "int", $idy)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_offsetrgn($hrgn, $ixoffset, $iyoffset)
		Local $aret = DllCall("gdi32.dll", "int", "OffsetRgn", "handle", $hrgn, "int", $ixoffset, "int", $iyoffset)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_offsetwindoworg($hdc, $ixoffset, $iyoffset)
		$__g_vext = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "OffsetWindowOrgEx", "handle", $hdc, "int", $ixoffset, "int", $iyoffset, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_paintdesktop($hdc)
		Local $aret = DllCall("user32.dll", "bool", "PaintDesktop", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_paintrgn($hdc, $hrgn)
		Local $aret = DllCall("gdi32.dll", "bool", "PaintRgn", "handle", $hdc, "handle", $hrgn)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_patblt($hdc, $ix, $iy, $iwidth, $iheight, $irop)
		Local $aret = DllCall("gdi32.dll", "bool", "PatBlt", "handle", $hdc, "int", $ix, "int", $iy, "int", $iwidth, "int", $iheight, "dword", $irop)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_pathtoregion($hdc)
		Local $aret = DllCall("gdi32.dll", "handle", "PathToRegion", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_playenhmetafile($hdc, $hemf, ByRef $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "PlayEnhMetaFile", "handle", $hdc, "handle", $hemf, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_plgblt($hdestdc, Const ByRef $apoint, $hsrcdc, $ixsrc, $iysrc, $iwidth, $iheight, $hmask = 0, $ixmask = 0, $iymask = 0)
		If (UBound($apoint) < 3) OR (UBound($apoint, $ubound_columns) < 2) Then Return SetError(12, 0, False)
		Local $tpoints = DllStructCreate("long[2];long[2];long[2]")
		For $i = 0 To 2
			For $j = 0 To 1
				DllStructSetData($tpoints, $i + 1, $apoint[$i][$j], $j + 1)
			Next
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "PlgBlt", "handle", $hdestdc, "struct*", $tpoints, "handle", $hsrcdc, "int", $ixsrc, "int", $iysrc, "int", $iwidth, "int", $iheight, "handle", $hmask, "int", $ixmask, "int", $iymask)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_polybezier($hdc, Const ByRef $apoint, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2, 2) Then Return SetError(@error + 10, @extended, False)
		Local $ipoint = 1 + 3 * Floor(($iend - $istart) / 3)
		If $ipoint < 1 Then Return SetError(15, 0, False)
		$iend = $istart + $ipoint - 1
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "long[2];"
		Next
		Local $tpoint = DllStructCreate($tagstruct)
		Local $icount = 0
		For $i = $istart To $iend
			$icount += 1
			For $j = 0 To 1
				DllStructSetData($tpoint, $icount, $apoint[$i][$j], $j + 1)
			Next
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "PolyBezier", "handle", $hdc, "struct*", $tpoint, "dword", $ipoint)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_polybezierto($hdc, Const ByRef $apoint, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2, 2) Then Return SetError(@error + 10, @extended, False)
		Local $ipoint = 3 * Floor(($iend - $istart + 1) / 3)
		If $ipoint < 3 Then Return SetError(15, 0, False)
		$iend = $istart + $ipoint - 1
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "long[2];"
		Next
		Local $tpoint = DllStructCreate($tagstruct)
		Local $icount = 0
		For $i = $istart To $iend
			$icount += 1
			For $j = 0 To 1
				DllStructSetData($tpoint, $icount, $apoint[$i][$j], $j + 1)
			Next
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "PolyBezierTo", "handle", $hdc, "struct*", $tpoint, "dword", $ipoint)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_polydraw($hdc, Const ByRef $apoint, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2) Then Return SetError(@error + 10, @extended, 0)
		If UBound($apoint, $ubound_columns) < 3 Then Return SetError(13, 0, False)
		Local $ipoint = $iend - $istart + 1
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "long[2];"
		Next
		Local $tpoint = DllStructCreate($tagstruct)
		Local $ttypes = DllStructCreate("byte[" & $ipoint & "]")
		Local $icount = 0
		For $i = $istart To $iend
			$icount += 1
			For $j = 0 To 1
				DllStructSetData($tpoint, $icount, $apoint[$i][$j], $j + 1)
			Next
			DllStructSetData($ttypes, 1, $apoint[$i][2], $icount)
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "PolyDraw", "handle", $hdc, "struct*", $tpoint, "struct*", $ttypes, "dword", $ipoint)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_polygon($hdc, Const ByRef $apoint, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2, 2) Then Return SetError(@error + 10, @extended, False)
		Local $tagstruct = ""
		For $i = $istart To $iend
			$tagstruct &= "int[2];"
		Next
		Local $tdata = DllStructCreate($tagstruct)
		Local $icount = 1
		For $i = $istart To $iend
			For $j = 0 To 1
				DllStructSetData($tdata, $icount, $apoint[$i][$j], $j + 1)
			Next
			$icount += 1
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "Polygon", "handle", $hdc, "struct*", $tdata, "int", $icount - 1)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_printwindow($hwnd, $hdc, $bclient = False)
		Local $aret = DllCall("user32.dll", "bool", "PrintWindow", "hwnd", $hwnd, "handle", $hdc, "uint", $bclient)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_ptinrectex($ix, $iy, $ileft, $itop, $iright, $ibottom)
		Local $trect = _winapi_createrect($ileft, $itop, $iright, $ibottom)
		Local $tpoint = _winapi_createpoint($ix, $iy)
		Local $aret = DllCall("user32.dll", "bool", "PtInRect", "struct*", $trect, "struct", $tpoint)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_ptinregion($hrgn, $ix, $iy)
		Local $aret = DllCall("gdi32.dll", "bool", "PtInRegion", "handle", $hrgn, "int", $ix, "int", $iy)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_ptvisible($hdc, $ix, $iy)
		Local $aret = DllCall("gdi32.dll", "bool", "PtVisible", "handle", $hdc, "int", $ix, "int", $iy)
		If @error Then Return SetError(@error + 10, @extended, 0)
		If $aret[0] = -1 Then Return SetError(10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_radialgradientfill($hdc, $ix, $iy, $iradius, $irgb1, $irgb2, $fanglestart = 0, $fangleend = 360, $fstep = 5)
		If Abs($fanglestart) > 360 Then
			$fanglestart = Mod($fanglestart, 360)
		EndIf
		If Abs($fangleend) > 360 Then
			$fangleend = Mod($fangleend, 360)
		EndIf
		If ($fanglestart < 0) OR ($fangleend < 0) Then
			$fanglestart += 360
			$fangleend += 360
		EndIf
		If $fanglestart > $fangleend Then
			Local $fval = $fanglestart
			$fanglestart = $fangleend
			$fangleend = $fval
		EndIf
		If $fstep < 1 Then
			$fstep = 1
		EndIf
		Local $fki = ATan(1) / 45
		Local $ixp = Round($ix + $iradius * Cos($fki * $fanglestart))
		Local $iyp = Round($iy + $iradius * Sin($fki * $fanglestart))
		Local $ixn, $iyn, $fan = $fanglestart
		Local $avertex[3][3]
		While $fan < $fangleend
			$fan += $fstep
			If $fan > $fangleend Then
				$fan = $fangleend
			EndIf
			$ixn = Round($ix + $iradius * Cos($fki * $fan))
			$iyn = Round($iy + $iradius * Sin($fki * $fan))
			$avertex[0][0] = $ix
			$avertex[0][1] = $iy
			$avertex[0][2] = $irgb1
			$avertex[1][0] = $ixp
			$avertex[1][1] = $iyp
			$avertex[1][2] = $irgb2
			$avertex[2][0] = $ixn
			$avertex[2][1] = $iyn
			$avertex[2][2] = $irgb2
			If NOT _winapi_gradientfill($hdc, $avertex, 0, 2) Then
				Return SetError(@error, @extended, 0)
			EndIf
			$ixp = $ixn
			$iyp = $iyn
		WEnd
		Return 1
	EndFunc

	Func _winapi_rectangle($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "Rectangle", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_rectinregion($hrgn, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "RectInRegion", "handle", $hrgn, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_rectvisible($hdc, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "RectVisible", "handle", $hdc, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Switch $aret[0]
			Case 0, 1, 2
			Case Else
				Return SetError(10, $aret[0], 0)
		EndSwitch
		Return $aret[0]
	EndFunc

	Func _winapi_removefontmemresourceex($hfont)
		Local $aret = DllCall("gdi32.dll", "bool", "RemoveFontMemResourceEx", "handle", $hfont)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_removefontresourceex($sfont, $iflag = 0, $bnotify = False)
		Local $aret = DllCall("gdi32.dll", "bool", "RemoveFontResourceExW", "wstr", $sfont, "dword", $iflag, "ptr", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, False)
		If $bnotify Then
			Local Const $wm_fontchange = 29
			Local Const $hwnd_broadcast = 65535
			DllCall("user32.dll", "none", "SendMessage", "hwnd", $hwnd_broadcast, "uint", $wm_fontchange, "wparam", 0, "lparam", 0)
		EndIf
		Return $aret[0]
	EndFunc

	Func _winapi_restoredc($hdc, $iid)
		Local $aret = DllCall("gdi32.dll", "bool", "RestoreDC", "handle", $hdc, "int", $iid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_rgb($ired, $igreen, $iblue)
		Return __rgb(BitOR(BitShift($iblue, -16), BitShift($igreen, -8), $ired))
	EndFunc

	Func _winapi_rotatepoints(ByRef $apoint, $ixc, $iyc, $fangle, $istart = 0, $iend = -1)
		If __checkerrorarraybounds($apoint, $istart, $iend, 2) Then Return SetError(@error + 10, @extended, 0)
		If UBound($apoint, $ubound_columns) < 2 Then Return SetError(13, 0, 0)
		Local $fcos = Cos(ATan(1) / 45 * $fangle)
		Local $fsin = Sin(ATan(1) / 45 * $fangle)
		Local $ixn, $iyn
		For $i = $istart To $iend
			$ixn = $apoint[$i][0] - $ixc
			$iyn = $apoint[$i][1] - $iyc
			$apoint[$i][0] = $ixc + Round($ixn * $fcos - $iyn * $fsin)
			$apoint[$i][1] = $iyc + Round($ixn * $fsin + $iyn * $fcos)
		Next
		Return 1
	EndFunc

	Func _winapi_roundrect($hdc, $trect, $iwidth, $iheight)
		Local $aret = DllCall("gdi32.dll", "bool", "RoundRect", "handle", $hdc, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4), "int", $iwidth, "int", $iheight)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_savedc($hdc)
		Local $aret = DllCall("gdi32.dll", "int", "SaveDC", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_savehbitmaptofile($sfilepath, $hbitmap, $ixpelspermeter = Default, $iypelspermeter = Default)
		Local $tbmp = DllStructCreate("align 1;ushort bfType;dword bfSize;ushort bfReserved1;ushort bfReserved2;dword bfOffset")
		Local $tdib = DllStructCreate($tagdibsection)
		Local $hdc, $hsv, $hsource = 0
		While $hbitmap
			If (NOT _winapi_getobject($hbitmap, DllStructGetSize($tdib), $tdib)) OR (DllStructGetData($tdib, "biCompression")) Then
				$hbitmap = 0
			Else
				Switch DllStructGetData($tdib, "bmBitsPixel")
					Case 32
						If NOT _winapi_isalphabitmap($hbitmap) Then
							If NOT $hsource Then
								$hsource = _winapi_createdib(DllStructGetData($tdib, "bmWidth"), DllStructGetData($tdib, "bmHeight"), 24)
								If NOT $hsource Then
									$hbitmap = 0
								EndIf
								$hdc = _winapi_createcompatibledc(0)
								$hsv = _winapi_selectobject($hdc, $hsource)
								If _winapi_drawbitmap($hdc, 0, 0, $hbitmap) Then
									$hbitmap = $hsource
								Else
									$hbitmap = 0
								EndIf
								_winapi_selectobject($hdc, $hsv)
								_winapi_deletedc($hdc)
							Else
								$hbitmap = 0
							EndIf
							ContinueLoop
						EndIf
					Case Else
				EndSwitch
				If (NOT DllStructGetData($tdib, "bmBits")) OR (NOT DllStructGetData($tdib, "biSizeImage")) Then
					If NOT $hsource Then
						$hbitmap = _winapi_copybitmap($hbitmap)
						$hsource = $hbitmap
					Else
						$hbitmap = 0
					EndIf
				Else
					ExitLoop
				EndIf
			EndIf
		WEnd
		Local $hfile = 0, $ierror = 0, $iresult = 0
		Do
			If NOT $hbitmap Then
				$ierror = 1
				ExitLoop
			EndIf
			Local $adata[4][2]
			$adata[0][0] = DllStructGetPtr($tbmp)
			$adata[0][1] = DllStructGetSize($tbmp)
			$adata[1][0] = DllStructGetPtr($tdib, "biSize")
			$adata[1][1] = 40
			$adata[2][1] = DllStructGetData($tdib, "biClrUsed") * 4
			Local $ttable = 0
			If $adata[2][1] Then
				$ttable = _winapi_getdibcolortable($hbitmap)
				If @error OR (@extended <> $adata[2][1] / 4) Then
					$ierror = @error + 10
					ExitLoop
				EndIf
			EndIf
			$adata[2][0] = DllStructGetPtr($ttable)
			$adata[3][0] = DllStructGetData($tdib, "bmBits")
			$adata[3][1] = DllStructGetData($tdib, "biSizeImage")
			DllStructSetData($tbmp, "bfType", 19778)
			DllStructSetData($tbmp, "bfSize", $adata[0][1] + $adata[1][1] + $adata[2][1] + $adata[3][1])
			DllStructSetData($tbmp, "bfReserved1", 0)
			DllStructSetData($tbmp, "bfReserved2", 0)
			DllStructSetData($tbmp, "bfOffset", $adata[0][1] + $adata[1][1] + $adata[2][1])
			$hdc = _winapi_getdc(0)
			If $ixpelspermeter = Default Then
				If NOT DllStructGetData($tdib, "biXPelsPerMeter") Then
					DllStructSetData($tdib, "biXPelsPerMeter", _winapi_getdevicecaps($hdc, 8) / _winapi_getdevicecaps($hdc, 4) * 1000)
				EndIf
			Else
				DllStructSetData($tdib, "biXPelsPerMeter", $ixpelspermeter)
			EndIf
			If $iypelspermeter = Default Then
				If NOT DllStructGetData($tdib, "biYPelsPerMeter") Then
					DllStructSetData($tdib, "biYPelsPerMeter", _winapi_getdevicecaps($hdc, 10) / _winapi_getdevicecaps($hdc, 6) * 1000)
				EndIf
			Else
				DllStructSetData($tdib, "biYPelsPerMeter", $iypelspermeter)
			EndIf
			_winapi_releasedc(0, $hdc)
			$hfile = _winapi_createfile($sfilepath, 1, 4)
			If @error Then
				$ierror = @error + 20
				ExitLoop
			EndIf
			Local $ibytes
			For $i = 0 To 3
				If $adata[$i][1] Then
					If NOT _winapi_writefile($hfile, $adata[$i][0], $adata[$i][1], $ibytes) Then
						$ierror = @error + 30
						ExitLoop 2
					EndIf
				EndIf
			Next
			$iresult = 1
		Until 1
		If $hsource Then
			_winapi_deleteobject($hsource)
		EndIf
		_winapi_closehandle($hfile)
		If NOT $iresult Then
			FileDelete($sfilepath)
		EndIf
		Return SetError($ierror, 0, $iresult)
	EndFunc

	Func _winapi_savehicontofile($sfilepath, Const ByRef $vicon, $bcompress = 0, $istart = 0, $iend = -1)
		Local $aicon, $atemp, $icount = 1
		If NOT IsArray($vicon) Then
			Dim $aicon[1] = [$vicon]
			Dim $atemp[1] = [0]
		Else
			If __checkerrorarraybounds($vicon, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			$icount = $iend - $istart + 1
			If $icount Then
				Dim $aicon[$icount]
				Dim $atemp[$icount]
				For $i = 0 To $icount - 1
					$aicon[$i] = $vicon[$istart + $i]
					$atemp[$i] = 0
				Next
			EndIf
		EndIf
		Local $hfile = _winapi_createfile($sfilepath, 1, 4)
		If @error Then Return SetError(@error + 20, @extended, 0)
		Local $tico = DllStructCreate("align 1;ushort Reserved;ushort Type;ushort Count;byte Data[" & (16 * $icount) & "]")
		Local $ilength = DllStructGetSize($tico)
		Local $tbi = DllStructCreate($tagbitmapinfoheader)
		Local $tii = DllStructCreate($tagiconinfo)
		Local $tdib = DllStructCreate($tagdibsection)
		Local $idib = DllStructGetSize($tdib)
		Local $pdib = DllStructGetPtr($tdib)
		Local $ioffset = $ilength
		DllStructSetData($tbi, "biSize", 40)
		DllStructSetData($tbi, "biPlanes", 1)
		DllStructSetData($tbi, "biXPelsPerMeter", 0)
		DllStructSetData($tbi, "biYPelsPerMeter", 0)
		DllStructSetData($tbi, "biClrUsed", 0)
		DllStructSetData($tbi, "biClrImportant", 0)
		DllStructSetData($tico, "Reserved", 0)
		DllStructSetData($tico, "Type", 1)
		DllStructSetData($tico, "Count", $icount)
		Local $iresult = 0, $ierror = 0
		Do
			Local $ibytes
			If NOT _winapi_writefile($hfile, $tico, $ilength, $ibytes) Then
				$ierror = @error + 30
				ExitLoop
			EndIf
			Local $ainfo[8], $aret, $pdata = 0, $iindex = 0
			While $icount > $iindex
				$aret = DllCall("user32.dll", "bool", "GetIconInfo", "handle", $aicon[$iindex], "struct*", $tii)
				If @error OR NOT $aret[0] Then
					$ierror = @error + 40
					ExitLoop 2
				EndIf
				For $i = 4 To 5
					$ainfo[$i] = _winapi_copyimage(DllStructGetData($tii, $i), 0, 0, 0, 8200)
					If _winapi_getobject($ainfo[$i], $idib, $pdib) Then
						$ainfo[$i - 4] = DllStructGetData($tdib, "biSizeImage")
						$ainfo[$i - 2] = DllStructGetData($tdib, "bmBits")
					Else
						$ierror = @error + 50
					EndIf
				Next
				$ainfo[6] = 40
				$ainfo[7] = DllStructGetData($tdib, "bmBitsPixel")
				Switch $ainfo[7]
					Case 16, 24
					Case 32
						If NOT _winapi_isalphabitmap($ainfo[5]) Then
							If NOT $atemp[$iindex] Then
								$aicon[$iindex] = _winapi_create32bithicon($aicon[$iindex])
								$atemp[$iindex] = $aicon[$iindex]
								If NOT @error Then
									ContinueLoop
								Else
									ContinueCase
								EndIf
							EndIf
						Else
							If ($ainfo[1] >= 256 * 256 * 4) AND ($bcompress) Then
								$ibytes = _winapi_compressbitmapbits($ainfo[5], $pdata)
								If NOT @error Then
									$ainfo[0] = 0
									$ainfo[1] = $ibytes
									$ainfo[2] = 0
									$ainfo[3] = $pdata
									$ainfo[6] = 0
								EndIf
							EndIf
						EndIf
					Case Else
						$ierror = 60
				EndSwitch
				If $ierror Then
				Else
					Local $asize[2]
					Local $tdata = DllStructCreate("byte Width;byte Height;byte ColorCount;byte Reserved;ushort Planes;ushort BitCount;long Size;long Offset", DllStructGetPtr($tico) + 6 + 16 * $iindex)
					DllStructSetData($tdata, "ColorCount", 0)
					DllStructSetData($tdata, "Reserved", 0)
					DllStructSetData($tdata, "Planes", 1)
					DllStructSetData($tdata, "BitCount", $ainfo[7])
					DllStructSetData($tdata, "Size", $ainfo[0] + $ainfo[1] + $ainfo[6])
					DllStructSetData($tdata, "Offset", $ioffset)
					For $i = 0 To 1
						$asize[$i] = DllStructGetData($tdib, $i + 2)
						If $asize[$i] < 256 Then
							DllStructSetData($tdata, $i + 1, $asize[$i])
						Else
							DllStructSetData($tdata, $i + 1, 0)
						EndIf
					Next
					DllStructSetData($tbi, "biWidth", $asize[0])
					DllStructSetData($tbi, "biHeight", 2 * $asize[1])
					DllStructSetData($tbi, "biBitCount", $ainfo[7])
					DllStructSetData($tbi, "biCompression", 0)
					DllStructSetData($tbi, "biSizeImage", $ainfo[0] + $ainfo[1])
					$ioffset += $ainfo[0] + $ainfo[1] + $ainfo[6]
					Do
						If $ainfo[6] Then
							If NOT _winapi_writefile($hfile, $tbi, $ainfo[6], $ibytes) Then
								$ierror = @error + 70
								ExitLoop
							EndIf
							For $i = 1 To 0 Step -1
								If NOT _winapi_writefile($hfile, $ainfo[$i + 2], $ainfo[$i], $ibytes) Then
									$ierror = @error + 80
									ExitLoop 2
								EndIf
							Next
						Else
							If NOT _winapi_writefile($hfile, $ainfo[3], $ainfo[1], $ibytes) Then
								$ierror = @error + 90
								ExitLoop
							EndIf
						EndIf
					Until 1
				EndIf
				For $i = 4 To 5
					_winapi_deleteobject($ainfo[$i])
				Next
				If $ierror Then
					ExitLoop 2
				EndIf
				$iindex += 1
			WEnd
			$aret = DllCall("kernel32.dll", "bool", "SetFilePointerEx", "handle", $hfile, "int64", 0, "int64*", 0, "dword", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 100
				ExitLoop
			EndIf
			If NOT _winapi_writefile($hfile, $tico, $ilength, $ibytes) Then
				$ierror = @error + 110
				ExitLoop
			EndIf
			$iresult = 1
		Until 1
		For $i = 0 To $icount - 1
			If $atemp[$i] Then
				_winapi_destroyicon($atemp[$i])
			EndIf
		Next
		If $pdata Then
			__heapfree($pdata)
		EndIf
		_winapi_closehandle($hfile)
		If NOT $iresult Then
			FileDelete($sfilepath)
		EndIf
		Return SetError($ierror, 0, $iresult)
	EndFunc

	Func _winapi_scalewindowext($hdc, $ixnum, $ixdenom, $iynum, $iydenom)
		$__g_vext = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "ScaleWindowExtEx", "handle", $hdc, "int", $ixnum, "int", $ixdenom, "int", $iynum, "int", $iydenom, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_selectclippath($hdc, $imode = 5)
		Local $aret = DllCall("gdi32.dll", "bool", "SelectClipPath", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_selectcliprgn($hdc, $hrgn)
		Local $aret = DllCall("gdi32.dll", "int", "SelectClipRgn", "handle", $hdc, "handle", $hrgn)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setarcdirection($hdc, $idirection)
		Local $aret = DllCall("gdi32.dll", "int", "SetArcDirection", "handle", $hdc, "int", $idirection)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setbitmapbits($hbitmap, $isize, $pbits)
		Local $aret = DllCall("gdi32.dll", "long", "SetBitmapBits", "handle", $hbitmap, "dword", $isize, "struct*", $pbits)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setbitmapdimensionex($hbitmap, $iwidth, $iheight)
		$__g_vext = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "SetBitmapDimensionEx", "handle", $hbitmap, "int", $iwidth, "int", $iheight, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setboundsrect($hdc, $iflags, $trect = 0)
		Local $aret = DllCall("gdi32.dll", "uint", "SetBoundsRect", "handle", $hdc, "struct*", $trect, "uint", $iflags)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setbrushorg($hdc, $ix, $iy)
		$__g_vext = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "SetBrushOrgEx", "handle", $hdc, "int", $ix, "int", $iy, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setcoloradjustment($hdc, $tadjustment)
		Local $aret = DllCall("gdi32.dll", "bool", "SetColorAdjustment", "handle", $hdc, "struct*", $tadjustment)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setdcbrushcolor($hdc, $irgb)
		Local $aret = DllCall("gdi32.dll", "dword", "SetDCBrushColor", "handle", $hdc, "dword", __rgb($irgb))
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_setdcpencolor($hdc, $irgb)
		Local $aret = DllCall("gdi32.dll", "dword", "SetDCPenColor", "handle", $hdc, "dword", __rgb($irgb))
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return __rgb($aret[0])
	EndFunc

	Func _winapi_setdevicegammaramp($hdc, Const ByRef $aramp)
		If (UBound($aramp, $ubound_dimensions) <> 2) OR (UBound($aramp, $ubound_rows) <> 256) OR (UBound($aramp, $ubound_columns) <> 3) Then
			Return SetError(12, 0, 0)
		EndIf
		Local $tdata = DllStructCreate("ushort[256];ushort[256];ushort[256]")
		For $i = 0 To 2
			For $j = 0 To 255
				DllStructSetData($tdata, $i + 1, $aramp[$j][$i], $j + 1)
			Next
		Next
		Local $aret = DllCall("gdi32.dll", "bool", "SetDeviceGammaRamp", "handle", $hdc, "struct*", $tdata)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setdibcolortable($hbitmap, $tcolortable, $icolorcount)
		If $icolorcount > DllStructGetSize($tcolortable) / 4 Then Return SetError(1, 0, 0)
		Local $hdc = _winapi_createcompatibledc(0)
		Local $hsv = _winapi_selectobject($hdc, $hbitmap)
		Local $ierror = 0
		Local $aret = DllCall("gdi32.dll", "uint", "SetDIBColorTable", "handle", $hdc, "uint", 0, "uint", $icolorcount, "struct*", $tcolortable)
		If @error Then $ierror = @error
		_winapi_selectobject($hdc, $hsv)
		_winapi_deletedc($hdc)
		If $ierror Then Return SetError($ierror, 0, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setdibitstodevice($hdc, $ixdest, $iydest, $iwidth, $iheight, $ixsrc, $iysrc, $istartscan, $iscanlines, $tbitmapinfo, $iusage, $pbits)
		Local $aret = DllCall("gdi32.dll", "int", "SetDIBitsToDevice", "handle", $hdc, "int", $ixdest, "int", $iydest, "dword", $iwidth, "dword", $iheight, "int", $ixsrc, "int", $iysrc, "uint", $istartscan, "uint", $iscanlines, "struct*", $pbits, "struct*", $tbitmapinfo, "uint", $iusage)
		If @error OR ($aret[0] = -1) Then Return SetError(@error + 10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setenhmetafilebits($pdata, $ilength)
		Local $aret = DllCall("gdi32.dll", "handle", "SetEnhMetaFileBits", "uint", $ilength, "struct*", $pdata)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setgraphicsmode($hdc, $imode)
		Local $aret = DllCall("gdi32.dll", "int", "SetGraphicsMode", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setmapmode($hdc, $imode)
		Local $aret = DllCall("gdi32.dll", "int", "SetMapMode", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setpixel($hdc, $ix, $iy, $irgb)
		Local $aret = DllCall("gdi32.dll", "bool", "SetPixelV", "handle", $hdc, "int", $ix, "int", $iy, "dword", __rgb($irgb))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setpolyfillmode($hdc, $imode = 1)
		Local $aret = DllCall("gdi32.dll", "int", "SetPolyFillMode", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setrectrgn($hrgn, $trect)
		Local $aret = DllCall("gdi32.dll", "bool", "SetRectRgn", "handle", $hrgn, "int", DllStructGetData($trect, 1), "int", DllStructGetData($trect, 2), "int", DllStructGetData($trect, 3), "int", DllStructGetData($trect, 4))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setrop2($hdc, $imode)
		Local $aret = DllCall("gdi32.dll", "int", "SetROP2", "handle", $hdc, "int", $imode)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setstretchbltmode($hdc, $imode)
		Local $aret = DllCall("gdi32.dll", "int", "SetStretchBltMode", "handle", $hdc, "int", $imode)
		If @error OR NOT $aret[0] OR ($aret[0] = 87) Then Return SetError(@error + 10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_settextalign($hdc, $imode = 0)
		Local $aret = DllCall("gdi32.dll", "uint", "SetTextAlign", "handle", $hdc, "uint", $imode)
		If @error OR ($aret[0] = 4294967295) Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_settextcharacterextra($hdc, $icharextra)
		Local $aret = DllCall("gdi32.dll", "int", "SetTextCharacterExtra", "handle", $hdc, "int", $icharextra)
		If @error OR ($aret[0] = -2147483648) Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_settextjustification($hdc, $ibreakextra, $ibreakcount)
		Local $aret = DllCall("gdi32.dll", "bool", "SetTextJustification", "handle", $hdc, "int", $ibreakextra, "int", $ibreakcount)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setudfcolormode($imode)
		$__g_irgbmode = NOT ($imode = 0)
	EndFunc

	Func _winapi_setwindowext($hdc, $ixextent, $iyextent)
		$__g_vext = DllStructCreate($tagsize)
		Local $aret = DllCall("gdi32.dll", "bool", "SetWindowExtEx", "handle", $hdc, "int", $ixextent, "int", $iyextent, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setwindoworg($hdc, $ix, $iy)
		$__g_vext = DllStructCreate($tagpoint)
		Local $aret = DllCall("gdi32.dll", "bool", "SetWindowOrgEx", "handle", $hdc, "int", $ix, "int", $iy, "struct*", $__g_vext)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setworldtransform($hdc, ByRef $txform)
		Local $aret = DllCall("gdi32.dll", "bool", "SetWorldTransform", "handle", $hdc, "struct*", $txform)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_stretchblt($hdestdc, $ixdest, $iydest, $iwidthdest, $iheightdest, $hsrcdc, $ixsrc, $iysrc, $iwidthsrc, $iheightsrc, $irop)
		Local $aret = DllCall("gdi32.dll", "bool", "StretchBlt", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidthdest, "int", $iheightdest, "hwnd", $hsrcdc, "int", $ixsrc, "int", $iysrc, "int", $iwidthsrc, "int", $iheightsrc, "dword", $irop)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_stretchdibits($hdestdc, $ixdest, $iydest, $iwidthdest, $iheightdest, $ixsrc, $iysrc, $iwidthsrc, $iheightsrc, $tbitmapinfo, $iusage, $pbits, $irop)
		Local $aret = DllCall("gdi32.dll", "int", "StretchDIBits", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidthdest, "int", $iheightdest, "int", $ixsrc, "int", $iysrc, "int", $iwidthsrc, "int", $iheightsrc, "struct*", $pbits, "struct*", $tbitmapinfo, "uint", $iusage, "dword", $irop)
		If @error OR ($aret[0] = -1) Then Return SetError(@error + 10, $aret[0], 0)
		Return $aret[0]
	EndFunc

	Func _winapi_strokeandfillpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "StrokeAndFillPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_strokepath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "StrokePath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_subtractrect(ByRef $trect1, ByRef $trect2)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "SubtractRect", "struct*", $trect, "struct*", $trect1, "struct*", $trect2)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
		Return $trect
	EndFunc

	Func _winapi_tabbedtextout($hdc, $ix, $iy, $stext, $atab = 0, $istart = 0, $iend = -1, $iorigin = 0)
		Local $itab, $icount
		If NOT IsArray($atab) Then
			If $atab Then
				$itab = $atab
				Dim $atab[1] = [$itab]
				$istart = 0
				$iend = 0
				$icount = 1
			Else
				$icount = 0
			EndIf
		Else
			$icount = 1
		EndIf
		Local $ttab = 0
		If $icount Then
			If __checkerrorarraybounds($atab, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			$icount = $iend - $istart + 1
			$ttab = DllStructCreate("uint[" & $icount & "]")
			$itab = 1
			For $i = $istart To $iend
				DllStructSetData($ttab, 1, $atab[$i], $itab)
				$itab += 1
			Next
		EndIf
		Local $aret = DllCall("user32.dll", "long", "TabbedTextOutW", "handle", $hdc, "int", $ix, "int", $iy, "wstr", $stext, "int", StringLen($stext), "int", $icount, "struct*", $ttab, "int", $iorigin)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		$__g_vext = _winapi_createsize(_winapi_loword($aret[0]), _winapi_hiword($aret[0]))
		Return 1
	EndFunc

	Func _winapi_textout($hdc, $ix, $iy, $stext)
		Local $aret = DllCall("gdi32.dll", "bool", "TextOutW", "handle", $hdc, "int", $ix, "int", $iy, "wstr", $stext, "int", StringLen($stext))
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_transparentblt($hdestdc, $ixdest, $iydest, $iwidthdest, $iheightdest, $hsrcdc, $ixsrc, $iysrc, $iwidthsrc, $iheightsrc, $irgb)
		Local $aret = DllCall("gdi32.dll", "bool", "GdiTransparentBlt", "handle", $hdestdc, "int", $ixdest, "int", $iydest, "int", $iwidthdest, "int", $iheightdest, "hwnd", $hsrcdc, "int", $ixsrc, "int", $iysrc, "int", $iwidthsrc, "int", $iheightsrc, "dword", __rgb($irgb))
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_unionrect(ByRef $trect1, ByRef $trect2)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("user32.dll", "bool", "UnionRect", "struct*", $trect, "struct*", $trect1, "struct*", $trect2)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, 0, 0)
		Return $trect
	EndFunc

	Func _winapi_validaterect($hwnd, $trect = 0)
		Local $aret = DllCall("user32.dll", "bool", "ValidateRect", "hwnd", $hwnd, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_validatergn($hwnd, $hrgn = 0)
		Local $aret = DllCall("user32.dll", "bool", "ValidateRgn", "hwnd", $hwnd, "handle", $hrgn)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_widenpath($hdc)
		Local $aret = DllCall("gdi32.dll", "bool", "WidenPath", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_windowfromdc($hdc)
		Local $aret = DllCall("user32.dll", "hwnd", "WindowFromDC", "handle", $hdc)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

#EndRegion Public Functions
#Region Embedded DLL Functions

	Func __alphaproc()
		Static $pproc = 0
		If NOT $pproc Then
			If @AutoItX64 Then
				$pproc = __init(Binary("0x48894C240848895424104C894424184C894C24205541574831C050504883EC28" & "48837C24600074054831C0EB0748C7C0010000004821C0751F488B6C24604883" & "7D180074054831C0EB0748C7C0010000004821C07502EB0948C7C001000000EB" & "034831C04821C0740C48C7C0FFFFFFFF4863C0EB6F48C744242800000000488B" & "6C24604C637D04488B6C2460486345084C0FAFF849C1E7024983C7FC4C3B7C24" & "287C36488B6C24604C8B7D184C037C24284983C7034C897C2430488B6C243080" & "7D0000740C48C7C0010000004863C0EB1348834424280471A54831C04863C0EB" & "034831C04883C438415F5DC3"))
			Else
				$pproc = __init(Binary("0x555331C05050837C241C00740431C0EB05B80100000021C075198B6C241C837D" & "1400740431C0EB05B80100000021C07502EB07B801000000EB0231C021C07407" & "B8FFFFFFFFEB4FC70424000000008B6C241C8B5D048B6C241C0FAF5D08C1E302" & "83C3FC3B1C247C288B6C241C8B5D14031C2483C303895C24048B6C2404807D00" & "007407B801000000EB0C8304240471BE31C0EB0231C083C4085B5DC21000"))
			EndIf
		EndIf
		Return $pproc
	EndFunc

	Func __andproc()
		Static $pproc = 0
		If NOT $pproc Then
			If @AutoItX64 Then
				$pproc = __init(Binary("0x48894C240848895424104C894424184C894C2420554157415648C7C009000000" & "4883EC0848C704240000000048FFC875EF4883EC284883BC24A0000000007405" & "4831C0EB0748C7C0010000004821C00F85840000004883BC24A8000000007405" & "4831C0EB0748C7C0010000004821C07555488BAC24A000000048837D18007405" & "4831C0EB0748C7C0010000004821C07522488BAC24A800000048837D18007405" & "4831C0EB0748C7C0010000004821C07502EB0948C7C001000000EB034831C048" & "21C07502EB0948C7C001000000EB034831C04821C07502EB0948C7C001000000" & "EB034831C04821C0740B4831C04863C0E9D701000048C74424280000000048C7" & "44243000000000488BAC24A00000004C637D0849FFCF4C3B7C24300F8C9C0100" & "0048C74424380000000048C74424400000000048C744244800000000488BAC24" & "A00000004C637D0449FFCF4C3B7C24480F8CDB000000488BAC24A00000004C8B" & "7D184C037C24284983C7034C897C2450488B6C2450807D000074264C8B7C2440" & "4C8B74243849F7DE4983C61F4C89F148C7C00100000048D3E04909C74C897C24" & "4048FF4424384C8B7C24384983FF1F7E6F4C8B7C244049F7D74C897C244048C7" & "442458180000004831C0483B4424587F3D488BAC24A80000004C8B7D184C037C" & "24604C897C24504C8B7C2440488B4C245849D3FF4C89F850488B6C2458588845" & "0048FF4424604883442458F871B948C74424380000000048C744244000000000" & "48834424280448FF4424480F810BFFFFFF48837C24380074794C8B7C244049F7" & "D74C8B74243849F7DE4983C6204C89F148C7C0FFFFFFFF48D3E04921C74C897C" & "244048C7442458180000004831C0483B4424587F3D488BAC24A80000004C8B7D" & "184C037C24604C897C24504C8B7C2440488B4C245849D3FF4C89F850488B6C24" & "585888450048FF4424604883442458F871B948FF4424300F814AFEFFFF48C7C0" & "010000004863C0EB034831C04883C470415E415F5DC3"))
			Else
				$pproc = __init(Binary("0x555357BA0800000083EC04C70424000000004A75F3837C243800740431C0EB05" & "B80100000021C07562837C243C00740431C0EB05B80100000021C0753F8B6C24" & "38837D1400740431C0EB05B80100000021C075198B6C243C837D1400740431C0" & "EB05B80100000021C07502EB07B801000000EB0231C021C07502EB07B8010000" & "00EB0231C021C07502EB07B801000000EB0231C021C0740731C0E969010000C7" & "042400000000C7442404000000008B6C24388B5D084B3B5C24040F8C3F010000" & "C744240800000000C744240C00000000C7442410000000008B6C24388B5D044B" & "3B5C24100F8CA90000008B6C24388B5D14031C2483C303895C24148B6C241480" & "7D0000741C8B5C240C8B7C2408F7DF83C71F89F9B801000000D3E009C3895C24" & "0CFF4424088B5C240883FB1F7E578B5C240CF7D3895C240CC744241818000000" & "31C03B4424187F2D8B6C243C8B5D14035C241C895C24148B5C240C8B4C2418D3" & "FB538B6C241858884500FF44241C83442418F871CBC744240800000000C74424" & "0C0000000083042404FF4424100F8145FFFFFF837C240800745B8B5C240CF7D3" & "8B7C2408F7DF83C72089F9B8FFFFFFFFD3E021C3895C240CC744241818000000" & "31C03B4424187F2D8B6C243C8B5D14035C241C895C24148B5C240C8B4C2418D3" & "FB538B6C241858884500FF44241C83442418F871CBFF4424040F81AFFEFFFFB8" & "01000000EB0231C083C4205F5B5DC21000"))
			EndIf
		EndIf
		Return $pproc
	EndFunc

	Func __xorproc()
		Static $pproc = 0
		If NOT $pproc Then
			If @AutoItX64 Then
				$pproc = __init(Binary("0x48894C240848895424104C894424184C894C24205541574831C050504883EC28" & "48837C24600074054831C0EB0748C7C0010000004821C0751B48837C24680074" & "054831C0EB0748C7C0010000004821C07502EB0948C7C001000000EB034831C0" & "4821C074084831C04863C0EB7748C7442428000000004C637C24584983C7FC4C" & "3B7C24287C4F4C8B7C24604C037C24284C897C2430488B6C2430807D00007405" & "4831C0EB0748C7C0010000004821C0741C4C8B7C24684C037C24284983C7034C" & "897C2430488B6C2430C64500FF48834424280471A148C7C0010000004863C0EB" & "034831C04883C438415F5DC3"))
			Else
				$pproc = __init(Binary("0x555331C05050837C241C00740431C0EB05B80100000021C07516837C24200074" & "0431C0EB05B80100000021C07502EB07B801000000EB0231C021C0740431C0EB" & "5AC70424000000008B5C241883C3FC3B1C247C3E8B5C241C031C24895C24048B" & "6C2404807D0000740431C0EB05B80100000021C074168B5C2420031C2483C303" & "895C24048B6C2404C64500FF8304240471B6B801000000EB0231C083C4085B5D" & "C21000"))
			EndIf
		EndIf
		Return $pproc
	EndFunc

#EndRegion Embedded DLL Functions
#Region Internal Functions

	Func __enumdisplaymonitorsproc($hmonitor, $hdc, $prect, $lparam)
		#forceref $hDC, $lParam
		__inc($__g_venum)
		$__g_venum[$__g_venum[0][0]][0] = $hmonitor
		If NOT $prect Then
			$__g_venum[$__g_venum[0][0]][1] = 0
		Else
			$__g_venum[$__g_venum[0][0]][1] = DllStructCreate($tagrect)
			If NOT _winapi_movememory(DllStructGetPtr($__g_venum[$__g_venum[0][0]][1]), $prect, 16) Then Return 0
		EndIf
		Return 1
	EndFunc

	Func __enumfontfamiliesproc($pelfex, $pntmex, $ifonttype, $ppattern)
		Local $telfex = DllStructCreate($taglogfont & ";wchar FullName[64];wchar Style[32];wchar Script[32]", $pelfex)
		Local $tntmex = DllStructCreate($tagnewtextmetricex, $pntmex)
		Local $tpattern = DllStructCreate("uint;uint;ptr", $ppattern)
		If $ifonttype AND NOT BitAND($ifonttype, DllStructGetData($tpattern, 1)) Then
			Return 1
		EndIf
		If DllStructGetData($tpattern, 3) Then
			Local $aret = DllCall("shlwapi.dll", "bool", "PathMatchSpecW", "ptr", DllStructGetPtr($telfex, 14), "ptr", DllStructGetData($tpattern, 3))
			If NOT @error Then
				If DllStructGetData($tpattern, 2) Then
					If $aret[0] Then
						Return 1
					Else
					EndIf
				Else
					If $aret[0] Then
					Else
						Return 1
					EndIf
				EndIf
			EndIf
		EndIf
		__inc($__g_venum)
		$__g_venum[$__g_venum[0][0]][0] = DllStructGetData($telfex, 14)
		$__g_venum[$__g_venum[0][0]][1] = DllStructGetData($telfex, 16)
		$__g_venum[$__g_venum[0][0]][2] = DllStructGetData($telfex, 15)
		$__g_venum[$__g_venum[0][0]][3] = DllStructGetData($telfex, 17)
		$__g_venum[$__g_venum[0][0]][4] = $ifonttype
		$__g_venum[$__g_venum[0][0]][5] = DllStructGetData($tntmex, 19)
		$__g_venum[$__g_venum[0][0]][6] = DllStructGetData($tntmex, 20)
		$__g_venum[$__g_venum[0][0]][7] = DllStructGetData($tntmex, 21)
		Return 1
	EndFunc

	Func __enumfontstylesproc($pelfex, $pntmex, $ifonttype, $pfn)
		#forceref $iFontType
		Local $telfex = DllStructCreate($taglogfont & ";wchar FullName[64];wchar Style[32];wchar Script[32]", $pelfex)
		Local $tntmex = DllStructCreate($tagnewtextmetricex, $pntmex)
		Local $tfn = DllStructCreate("dword;wchar[64]", $pfn)
		If BitAND(DllStructGetData($tntmex, "ntmFlags"), 97) = DllStructGetData($tfn, 1) Then
			DllStructSetData($tfn, 2, DllStructGetData($telfex, "FullName"))
			Return 0
		Else
			Return 1
		EndIf
	EndFunc

#EndRegion Internal Functions
Global $__g_hgdipbrush = 0
Global $__g_hgdipdll = 0
Global $__g_hgdippen = 0
Global $__g_igdipref = 0
Global $__g_igdiptoken = 0
Global $__g_bgdip_v1_0 = True

Func _gdiplus_arrowcapcreate($fheight, $fwidth, $bfilled = True)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateAdjustableArrowCap", "float", $fheight, "float", $fwidth, "bool", $bfilled, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[4]
EndFunc

Func _gdiplus_arrowcapdispose($hcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteCustomLineCap", "handle", $hcap)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_arrowcapgetfillstate($harrowcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetAdjustableArrowCapFillState", "handle", $harrowcap, "bool*", 0)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_arrowcapgetheight($harrowcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetAdjustableArrowCapHeight", "handle", $harrowcap, "float*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_arrowcapgetmiddleinset($harrowcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetAdjustableArrowCapMiddleInset", "handle", $harrowcap, "float*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_arrowcapgetwidth($harrowcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetAdjustableArrowCapWidth", "handle", $harrowcap, "float*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_arrowcapsetfillstate($harrowcap, $bfilled = True)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetAdjustableArrowCapFillState", "handle", $harrowcap, "bool", $bfilled)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_arrowcapsetheight($harrowcap, $fheight)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetAdjustableArrowCapHeight", "handle", $harrowcap, "float", $fheight)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_arrowcapsetmiddleinset($harrowcap, $finset)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetAdjustableArrowCapMiddleInset", "handle", $harrowcap, "float", $finset)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_arrowcapsetwidth($harrowcap, $fwidth)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetAdjustableArrowCapWidth", "handle", $harrowcap, "float", $fwidth)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_bitmapclonearea($hbitmap, $nleft, $ntop, $nwidth, $nheight, $iformat = 137224)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneBitmapArea", "float", $nleft, "float", $ntop, "float", $nwidth, "float", $nheight, "int", $iformat, "handle", $hbitmap, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[7]
EndFunc

Func _gdiplus_bitmapcreatedibfrombitmap($hbitmap)
	Local $aret = DllCall($__g_hgdipdll, "uint", "GdipGetImageDimension", "handle", $hbitmap, "float*", 0, "float*", 0)
	If @error OR $aret[0] Then Return SetError(@error + 10, $aret[0], 0)
	Local $tdata = _gdiplus_bitmaplockbits($hbitmap, 0, 0, $aret[2], $aret[3], $gdip_ilmread, $gdip_pxf32argb)
	Local $pbits = DllStructGetData($tdata, "Scan0")
	If NOT $pbits Then Return 0
	Local $tbihdr = DllStructCreate($tagbitmapv5header)
	DllStructSetData($tbihdr, "bV5Size", DllStructGetSize($tbihdr))
	DllStructSetData($tbihdr, "bV5Width", $aret[2])
	DllStructSetData($tbihdr, "bV5Height", $aret[3])
	DllStructSetData($tbihdr, "bV5Planes", 1)
	DllStructSetData($tbihdr, "bV5BitCount", 32)
	DllStructSetData($tbihdr, "bV5Compression", 0)
	DllStructSetData($tbihdr, "bV5SizeImage", $aret[3] * DllStructGetData($tdata, "Stride"))
	DllStructSetData($tbihdr, "bV5AlphaMask", -16777216)
	DllStructSetData($tbihdr, "bV5RedMask", 16711680)
	DllStructSetData($tbihdr, "bV5GreenMask", 65280)
	DllStructSetData($tbihdr, "bV5BlueMask", 255)
	DllStructSetData($tbihdr, "bV5CSType", 2)
	DllStructSetData($tbihdr, "bV5Intent", 4)
	Local $hhbitmapv5 = DllCall("gdi32.dll", "ptr", "CreateDIBSection", "hwnd", 0, "struct*", $tbihdr, "uint", 0, "ptr*", 0, "ptr", 0, "dword", 0)
	If NOT @error AND $hhbitmapv5[0] Then
		DllCall("gdi32.dll", "dword", "SetBitmapBits", "ptr", $hhbitmapv5[0], "dword", $aret[2] * $aret[3] * 4, "ptr", DllStructGetData($tdata, "Scan0"))
		$hhbitmapv5 = $hhbitmapv5[0]
	Else
		$hhbitmapv5 = 0
	EndIf
	_gdiplus_bitmapunlockbits($hbitmap, $tdata)
	$tdata = 0
	$tbihdr = 0
	Return $hhbitmapv5
EndFunc

Func _gdiplus_bitmapcreatefromfile($sfilename)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromFile", "wstr", $sfilename, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_bitmapcreatefromgraphics($iwidth, $iheight, $hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromGraphics", "int", $iwidth, "int", $iheight, "handle", $hgraphics, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[4]
EndFunc

Func _gdiplus_bitmapcreatefromhbitmap($hbitmap, $hpal = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromHBITMAP", "handle", $hbitmap, "handle", $hpal, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_bitmapcreatefrommemory($dimage, $bhbitmap = False)
	If NOT IsBinary($dimage) Then Return SetError(1, 0, 0)
	Local $aresult = 0
	Local Const $dmembitmap = Binary($dimage)
	Local Const $ilen = BinaryLen($dmembitmap)
	Local Const $gmem_moveable = 2
	$aresult = DllCall("kernel32.dll", "handle", "GlobalAlloc", "uint", $gmem_moveable, "ulong_ptr", $ilen)
	If @error Then Return SetError(4, 0, 0)
	Local Const $hdata = $aresult[0]
	$aresult = DllCall("kernel32.dll", "ptr", "GlobalLock", "handle", $hdata)
	If @error Then Return SetError(5, 0, 0)
	Local $tmem = DllStructCreate("byte[" & $ilen & "]", $aresult[0])
	DllStructSetData($tmem, 1, $dmembitmap)
	DllCall("kernel32.dll", "bool", "GlobalUnlock", "handle", $hdata)
	If @error Then Return SetError(6, 0, 0)
	Local Const $hstream = _winapi_createstreamonhglobal($hdata)
	If @error Then Return SetError(2, 0, 0)
	Local Const $hbitmap = _gdiplus_bitmapcreatefromstream($hstream)
	If @error Then Return SetError(3, 0, 0)
	DllCall("oleaut32.dll", "long", "DispCallFunc", "ptr", $hstream, "ulong_ptr", 8 * (1 + @AutoItX64), "uint", 4, "ushort", 23, "uint", 0, "ptr", 0, "ptr", 0, "str", "")
	If $bhbitmap Then
		Local Const $hhbmp = _gdiplus_bitmapcreatedibfrombitmap($hbitmap)
		_gdiplus_bitmapdispose($hbitmap)
		Return $hhbmp
	EndIf
	Return $hbitmap
EndFunc

Func _gdiplus_bitmapcreatefromresource($hinst, $vresourcename)
	Local $stype = "int"
	If IsString($vresourcename) Then $stype = "wstr"
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromResource", "handle", $hinst, $stype, $vresourcename, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_bitmapcreatefromscan0($iwidth, $iheight, $ipixelformat = $gdip_pxf32argb, $istride = 0, $pscan0 = 0)
	Local $aresult = DllCall($__g_hgdipdll, "uint", "GdipCreateBitmapFromScan0", "int", $iwidth, "int", $iheight, "int", $istride, "int", $ipixelformat, "struct*", $pscan0, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[6]
EndFunc

Func _gdiplus_bitmapcreatefromstream($pstream)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromStream", "ptr", $pstream, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_bitmapcreatehbitmapfrombitmap($hbitmap, $iargb = -16777216)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateHBITMAPFromBitmap", "handle", $hbitmap, "handle*", 0, "dword", $iargb)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_bitmapdispose($hbitmap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDisposeImage", "handle", $hbitmap)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_bitmapcreatefromhicon($hicon)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateBitmapFromHICON", "handle", $hicon, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_bitmapcreatefromhicon32($hicon)
	Local $tsize = _winapi_geticondimension($hicon)
	Local $iwidth = DllStructGetData($tsize, "X")
	Local $iheight = DllStructGetData($tsize, "Y")
	If $iwidth <= 0 OR $iheight <= 0 Then Return SetError(10, -1, 0)
	Local $tbitmapinfo = DllStructCreate("dword Size;long Width;long Height;word Planes;word BitCount;dword Compression;dword SizeImage;long XPelsPerMeter;long YPelsPerMeter;dword ClrUsed;dword ClrImportant;dword RGBQuad")
	DllStructSetData($tbitmapinfo, "Size", DllStructGetSize($tbitmapinfo) - 4)
	DllStructSetData($tbitmapinfo, "Width", $iwidth)
	DllStructSetData($tbitmapinfo, "Height", -$iheight)
	DllStructSetData($tbitmapinfo, "Planes", 1)
	DllStructSetData($tbitmapinfo, "BitCount", 32)
	DllStructSetData($tbitmapinfo, "Compression", 0)
	DllStructSetData($tbitmapinfo, "SizeImage", 0)
	Local $hdc = _winapi_createcompatibledc(0)
	Local $pbits
	Local $hbmp = _winapi_createdibsection(0, $tbitmapinfo, 0, $pbits)
	Local $horig = _winapi_selectobject($hdc, $hbmp)
	_winapi_drawiconex($hdc, 0, 0, $hicon, $iwidth, $iheight)
	Local $hbitmapicon = _gdiplus_bitmapcreatefromscan0($iwidth, $iheight, $gdip_pxf32argb, $iwidth * 4, $pbits)
	Local $hbitmap = _gdiplus_bitmapcreatefromscan0($iwidth, $iheight)
	Local $hcontext = _gdiplus_imagegetgraphicscontext($hbitmap)
	_gdiplus_graphicsdrawimage($hcontext, $hbitmapicon, 0, 0)
	_gdiplus_graphicsdispose($hcontext)
	_gdiplus_bitmapdispose($hbitmapicon)
	_winapi_selectobject($hdc, $horig)
	_winapi_deletedc($hdc)
	_winapi_deleteobject($hbmp)
	Return $hbitmap
EndFunc

Func _gdiplus_bitmapgetpixel($hbitmap, $ix, $iy)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapGetPixel", "handle", $hbitmap, "int", $ix, "int", $iy, "uint*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[4]
EndFunc

Func _gdiplus_bitmaplockbits($hbitmap, $ileft, $itop, $iwidth, $iheight, $iflags = $gdip_ilmread, $iformat = $gdip_pxf32rgb)
	Local $tdata = DllStructCreate($taggdipbitmapdata)
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, "Left", $ileft)
	DllStructSetData($trect, "Top", $itop)
	DllStructSetData($trect, "Right", $iwidth)
	DllStructSetData($trect, "Bottom", $iheight)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapLockBits", "handle", $hbitmap, "struct*", $trect, "uint", $iflags, "int", $iformat, "struct*", $tdata)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $tdata
EndFunc

Func _gdiplus_bitmapsetpixel($hbitmap, $ix, $iy, $iargb)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapSetPixel", "handle", $hbitmap, "int", $ix, "int", $iy, "uint", $iargb)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_bitmapunlockbits($hbitmap, $tbitmapdata)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapUnlockBits", "handle", $hbitmap, "struct*", $tbitmapdata)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_brushclone($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneBrush", "handle", $hbrush, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_brushcreatesolid($iargb = -16777216)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateSolidFill", "int", $iargb, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_brushdispose($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteBrush", "handle", $hbrush)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_brushgetsolidcolor($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetSolidFillColor", "handle", $hbrush, "dword*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_brushgettype($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetBrushType", "handle", $hbrush, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_brushsetsolidcolor($hbrush, $iargb = -16777216)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetSolidFillColor", "handle", $hbrush, "dword", $iargb)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_colormatrixcreate()
	Return _gdiplus_colormatrixcreatescale(1, 1, 1, 1)
EndFunc

Func _gdiplus_colormatrixcreategrayscale()
	Local $ii, $ij, $tcm, $alums[4] = [$gdip_rlum, $gdip_glum, $gdip_blum, 0]
	$tcm = DllStructCreate($taggdipcolormatrix)
	For $ii = 0 To 3
		For $ij = 1 To 3
			DllStructSetData($tcm, "m", $alums[$ii], $ii * 5 + $ij)
		Next
	Next
	DllStructSetData($tcm, "m", 1, 19)
	DllStructSetData($tcm, "m", 1, 25)
	Return $tcm
EndFunc

Func _gdiplus_colormatrixcreatenegative()
	Local $ii, $tcm
	$tcm = _gdiplus_colormatrixcreatescale(-1, -1, -1, 1)
	For $ii = 1 To 4
		DllStructSetData($tcm, "m", 1, 20 + $ii)
	Next
	Return $tcm
EndFunc

Func _gdiplus_colormatrixcreatesaturation($fsat)
	Local $fsatcomp, $tcm
	$tcm = DllStructCreate($taggdipcolormatrix)
	$fsatcomp = (1 - $fsat)
	DllStructSetData($tcm, "m", $fsatcomp * $gdip_rlum + $fsat, 1)
	DllStructSetData($tcm, "m", $fsatcomp * $gdip_rlum, 2)
	DllStructSetData($tcm, "m", $fsatcomp * $gdip_rlum, 3)
	DllStructSetData($tcm, "m", $fsatcomp * $gdip_glum, 6)
	DllStructSetData($tcm, "m", $fsatcomp * $gdip_glum + $fsat, 7)
	DllStructSetData($tcm, "m", $fsatcomp * $gdip_glum, 8)
	DllStructSetData($tcm, "m", $fsatcomp * $gdip_blum, 11)
	DllStructSetData($tcm, "m", $fsatcomp * $gdip_blum, 12)
	DllStructSetData($tcm, "m", $fsatcomp * $gdip_blum + $fsat, 13)
	DllStructSetData($tcm, "m", 1, 19)
	DllStructSetData($tcm, "m", 1, 25)
	Return $tcm
EndFunc

Func _gdiplus_colormatrixcreatescale($fred, $fgreen, $fblue, $falpha = 1)
	Local $tcm
	$tcm = DllStructCreate($taggdipcolormatrix)
	DllStructSetData($tcm, "m", $fred, 1)
	DllStructSetData($tcm, "m", $fgreen, 7)
	DllStructSetData($tcm, "m", $fblue, 13)
	DllStructSetData($tcm, "m", $falpha, 19)
	DllStructSetData($tcm, "m", 1, 25)
	Return $tcm
EndFunc

Func _gdiplus_colormatrixcreatetranslate($fred, $fgreen, $fblue, $falpha = 0)
	Local $ii, $tcm, $afactors[4] = [$fred, $fgreen, $fblue, $falpha]
	$tcm = _gdiplus_colormatrixcreate()
	For $ii = 0 To 3
		DllStructSetData($tcm, "m", $afactors[$ii], 21 + $ii)
	Next
	Return $tcm
EndFunc

Func _gdiplus_customlinecapclone($hcustomlinecap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneCustomLineCap", "handle", $hcustomlinecap, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_customlinecapcreate($hpathfill, $hpathstroke, $ilinecap = 0, $nbaseinset = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateCustomLineCap", "handle", $hpathfill, "handle", $hpathstroke, "int", $ilinecap, "float", $nbaseinset, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[5]
EndFunc

Func _gdiplus_customlinecapdispose($hcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteCustomLineCap", "handle", $hcap)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_customlinecapgetstrokecaps($hcustomlinecap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCustomLineCapStrokeCaps", "hwnd", $hcustomlinecap, "ptr*", 0, "ptr*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then SetError(10, $aresult[0], 0)
	Local $acaps[2]
	$acaps[0] = $aresult[2]
	$acaps[1] = $aresult[3]
	Return $acaps
EndFunc

Func _gdiplus_customlinecapsetstrokecaps($hcustomlinecap, $istartcap, $iendcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetCustomLineCapStrokeCaps", "handle", $hcustomlinecap, "int", $istartcap, "int", $iendcap)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_decoders()
	Local $icount = _gdiplus_decodersgetcount()
	Local $isize = _gdiplus_decodersgetsize()
	Local $tbuffer = DllStructCreate("byte[" & $isize & "]")
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageDecoders", "uint", $icount, "uint", $isize, "struct*", $tbuffer)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $tcodec, $ainfo[$icount + 1][14]
	$ainfo[0][0] = $icount
	For $ii = 1 To $icount
		$tcodec = DllStructCreate($taggdipimagecodecinfo, $pbuffer)
		$ainfo[$ii][1] = _winapi_stringfromguid(DllStructGetPtr($tcodec, "CLSID"))
		$ainfo[$ii][2] = _winapi_stringfromguid(DllStructGetPtr($tcodec, "FormatID"))
		$ainfo[$ii][3] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "CodecName"))
		$ainfo[$ii][4] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "DllName"))
		$ainfo[$ii][5] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "FormatDesc"))
		$ainfo[$ii][6] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "FileExt"))
		$ainfo[$ii][7] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "MimeType"))
		$ainfo[$ii][8] = DllStructGetData($tcodec, "Flags")
		$ainfo[$ii][9] = DllStructGetData($tcodec, "Version")
		$ainfo[$ii][10] = DllStructGetData($tcodec, "SigCount")
		$ainfo[$ii][11] = DllStructGetData($tcodec, "SigSize")
		$ainfo[$ii][12] = DllStructGetData($tcodec, "SigPattern")
		$ainfo[$ii][13] = DllStructGetData($tcodec, "SigMask")
		$pbuffer += DllStructGetSize($tcodec)
	Next
	Return $ainfo
EndFunc

Func _gdiplus_decodersgetcount()
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageDecodersSize", "uint*", 0, "uint*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[1]
EndFunc

Func _gdiplus_decodersgetsize()
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageDecodersSize", "uint*", 0, "uint*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_drawimagepoints($hgraphic, $himage, $nulx, $nuly, $nurx, $nury, $nllx, $nlly, $icount = 3)
	Local $tpoint = DllStructCreate("float X;float Y;float X2;float Y2;float X3;float Y3")
	DllStructSetData($tpoint, "X", $nulx)
	DllStructSetData($tpoint, "Y", $nuly)
	DllStructSetData($tpoint, "X2", $nurx)
	DllStructSetData($tpoint, "Y2", $nury)
	DllStructSetData($tpoint, "X3", $nllx)
	DllStructSetData($tpoint, "Y3", $nlly)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImagePoints", "handle", $hgraphic, "handle", $himage, "struct*", $tpoint, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_encoders()
	Local $icount = _gdiplus_encodersgetcount()
	Local $isize = _gdiplus_encodersgetsize()
	Local $tbuffer = DllStructCreate("byte[" & $isize & "]")
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageEncoders", "uint", $icount, "uint", $isize, "struct*", $tbuffer)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $tcodec, $ainfo[$icount + 1][14]
	$ainfo[0][0] = $icount
	For $ii = 1 To $icount
		$tcodec = DllStructCreate($taggdipimagecodecinfo, $pbuffer)
		$ainfo[$ii][1] = _winapi_stringfromguid(DllStructGetPtr($tcodec, "CLSID"))
		$ainfo[$ii][2] = _winapi_stringfromguid(DllStructGetPtr($tcodec, "FormatID"))
		$ainfo[$ii][3] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "CodecName"))
		$ainfo[$ii][4] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "DllName"))
		$ainfo[$ii][5] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "FormatDesc"))
		$ainfo[$ii][6] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "FileExt"))
		$ainfo[$ii][7] = _winapi_widechartomultibyte(DllStructGetData($tcodec, "MimeType"))
		$ainfo[$ii][8] = DllStructGetData($tcodec, "Flags")
		$ainfo[$ii][9] = DllStructGetData($tcodec, "Version")
		$ainfo[$ii][10] = DllStructGetData($tcodec, "SigCount")
		$ainfo[$ii][11] = DllStructGetData($tcodec, "SigSize")
		$ainfo[$ii][12] = DllStructGetData($tcodec, "SigPattern")
		$ainfo[$ii][13] = DllStructGetData($tcodec, "SigMask")
		$pbuffer += DllStructGetSize($tcodec)
	Next
	Return $ainfo
EndFunc

Func _gdiplus_encodersgetclsid($sfileextension)
	Local $aencoders = _gdiplus_encoders()
	If @error Then Return SetError(@error, 0, "")
	For $ii = 1 To $aencoders[0][0]
		If StringInStr($aencoders[$ii][6], "*." & $sfileextension) > 0 Then Return $aencoders[$ii][1]
	Next
	Return SetError(-1, -1, "")
EndFunc

Func _gdiplus_encodersgetcount()
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageEncodersSize", "uint*", 0, "uint*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[1]
EndFunc

Func _gdiplus_encodersgetparamlist($himage, $sencoder)
	Local $isize = _gdiplus_encodersgetparamlistsize($himage, $sencoder)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Local $tguid = _winapi_guidfromstring($sencoder)
	Local $iremainingsize = $isize - 4 - _gdiplus_paramsize()
	Local $tbuffer
	If $iremainingsize Then
		$tbuffer = DllStructCreate("dword Count;" & $taggdipencoderparam & ";byte [" & $iremainingsize & "]")
	Else
		$tbuffer = DllStructCreate("dword Count;" & $taggdipencoderparam)
	EndIf
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEncoderParameterList", "handle", $himage, "struct*", $tguid, "uint", $isize, "struct*", $tbuffer)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $tbuffer
EndFunc

Func _gdiplus_encodersgetparamlistsize($himage, $sencoder)
	Local $tguid = _winapi_guidfromstring($sencoder)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEncoderParameterListSize", "handle", $himage, "struct*", $tguid, "uint*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_encodersgetsize()
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageEncodersSize", "uint*", 0, "uint*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_fontcreate($hfamily, $fsize, $istyle = 0, $iunit = 3)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFont", "handle", $hfamily, "float", $fsize, "int", $istyle, "int", $iunit, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[5]
EndFunc

Func _gdiplus_fontdispose($hfont)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteFont", "handle", $hfont)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_fontfamilycreate($sfamily, $pcollection = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFontFamilyFromName", "wstr", $sfamily, "ptr", $pcollection, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_fontfamilycreatefromcollection($sfontname, $hfontcollection)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFontFamilyFromName", "wstr", $sfontname, "ptr", $hfontcollection, "ptr*", 0)
	If @error Then Return SetError(@error, @extended, "")
	If $aresult[0] Then Return SetError(10, $aresult[0], "")
	Return $aresult[3]
EndFunc

Func _gdiplus_fontfamilydispose($hfamily)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteFontFamily", "handle", $hfamily)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_fontfamilygetcellascent($hfontfamily, $istyle = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCellAscent", "handle", $hfontfamily, "int", $istyle, "ushort*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_fontfamilygetcelldescent($hfontfamily, $istyle = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCellDescent", "handle", $hfontfamily, "int", $istyle, "ushort*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_fontfamilygetemheight($hfontfamily, $istyle = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEmHeight", "handle", $hfontfamily, "int", $istyle, "ushort*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_fontfamilygetlinespacing($hfontfamily, $istyle = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetLineSpacing", "handle", $hfontfamily, "int", $istyle, "ushort*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_fontgetheight($hfont, $hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetFontHeight", "handle", $hfont, "handle", $hgraphics, "float*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_fontprivateaddfont($hfontcollection, $sfontfile)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPrivateAddFontFile", "ptr", $hfontcollection, "wstr", $sfontfile)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_fontprivateaddmemoryfont($hfontcollection, $tfont)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPrivateAddMemoryFont", "handle", $hfontcollection, "struct*", $tfont, "int", DllStructGetSize($tfont))
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_fontprivatecollectiondispose($hfontcollection)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeletePrivateFontCollection", "handle*", $hfontcollection)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_fontprivatecreatecollection()
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipNewPrivateFontCollection", "ptr*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[1]
EndFunc

Func _gdiplus_graphicsclear($hgraphics, $iargb = -16777216)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGraphicsClear", "handle", $hgraphics, "dword", $iargb)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicscreatefromhdc($hdc)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFromHDC", "handle", $hdc, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_graphicscreatefromhwnd($hwnd)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateFromHWND", "hwnd", $hwnd, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_graphicsdispose($hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteGraphics", "handle", $hgraphics)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawarc($hgraphics, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle, $hpen = 0)
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawArc", "handle", $hgraphics, "handle", $hpen, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawbezier($hgraphics, $nx1, $ny1, $nx2, $ny2, $nx3, $ny3, $nx4, $ny4, $hpen = 0)
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawBezier", "handle", $hgraphics, "handle", $hpen, "float", $nx1, "float", $ny1, "float", $nx2, "float", $ny2, "float", $nx3, "float", $ny3, "float", $nx4, "float", $ny4)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawclosedcurve($hgraphics, $apoints, $hpen = 0)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawClosedCurve", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawclosedcurve2($hgraphics, $apoints, $ntension, $hpen = 0)
	Local $ii, $icount, $tpoints, $aresult
	__gdiplus_pendefcreate($hpen)
	$icount = $apoints[0][0]
	$tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	$aresult = DllCall($__g_hgdipdll, "int", "GdipDrawClosedCurve2", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount, "float", $ntension)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawcurve($hgraphics, $apoints, $hpen = 0)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawCurve", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawcurve2($hgraphics, $apoints, $ntension, $hpen = 0)
	Local $ii, $icount, $tpoints, $aresult
	__gdiplus_pendefcreate($hpen)
	$icount = $apoints[0][0]
	$tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	$aresult = DllCall($__g_hgdipdll, "int", "GdipDrawCurve2", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount, "float", $ntension)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawellipse($hgraphics, $nx, $ny, $nwidth, $nheight, $hpen = 0)
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawEllipse", "handle", $hgraphics, "handle", $hpen, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawimage($hgraphics, $himage, $nx, $ny)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImage", "handle", $hgraphics, "handle", $himage, "float", $nx, "float", $ny)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawimagepointsrect($hgraphics, $himage, $nulx, $nuly, $nurx, $nury, $nllx, $nlly, $nsrcx, $nsrcy, $nsrcwidth, $nsrcheight, $himageattributes = 0, $iunit = 2)
	Local $tpoints = DllStructCreate("float X; float Y; float X2; float Y2; float X3; float Y3;")
	DllStructSetData($tpoints, "X", $nulx)
	DllStructSetData($tpoints, "Y", $nuly)
	DllStructSetData($tpoints, "X2", $nurx)
	DllStructSetData($tpoints, "Y2", $nury)
	DllStructSetData($tpoints, "X3", $nllx)
	DllStructSetData($tpoints, "Y3", $nlly)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImagePointsRect", "handle", $hgraphics, "handle", $himage, "struct*", $tpoints, "int", 3, "float", $nsrcx, "float", $nsrcy, "float", $nsrcwidth, "float", $nsrcheight, "int", $iunit, "handle", $himageattributes, "ptr", 0, "ptr", 0)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawimagerect($hgraphics, $himage, $nx, $ny, $nw, $nh)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImageRect", "handle", $hgraphics, "handle", $himage, "float", $nx, "float", $ny, "float", $nw, "float", $nh)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawimagerectrect($hgraphics, $himage, $nsrcx, $nsrcy, $nsrcwidth, $nsrcheight, $ndstx, $ndsty, $ndstwidth, $ndstheight, $pattributes = 0, $iunit = 2)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImageRectRect", "handle", $hgraphics, "handle", $himage, "float", $ndstx, "float", $ndsty, "float", $ndstwidth, "float", $ndstheight, "float", $nsrcx, "float", $nsrcy, "float", $nsrcwidth, "float", $nsrcheight, "int", $iunit, "handle", $pattributes, "ptr", 0, "ptr", 0)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawline($hgraphics, $nx1, $ny1, $nx2, $ny2, $hpen = 0)
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawLine", "handle", $hgraphics, "handle", $hpen, "float", $nx1, "float", $ny1, "float", $nx2, "float", $ny2)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawpath($hgraphics, $hpath, $hpen = 0)
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawPath", "handle", $hgraphics, "handle", $hpen, "handle", $hpath)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawpie($hgraphics, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle, $hpen = 0)
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawPie", "handle", $hgraphics, "handle", $hpen, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawpolygon($hgraphics, $apoints, $hpen = 0)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawPolygon", "handle", $hgraphics, "handle", $hpen, "struct*", $tpoints, "int", $icount)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawrect($hgraphics, $nx, $ny, $nwidth, $nheight, $hpen = 0)
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawRectangle", "handle", $hgraphics, "handle", $hpen, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsdrawstring($hgraphics, $sstring, $nx, $ny, $sfont = "Arial", $fsize = 10, $iformat = 0)
	Local $hbrush = _gdiplus_brushcreatesolid()
	Local $hformat = _gdiplus_stringformatcreate($iformat)
	Local $hfamily = _gdiplus_fontfamilycreate($sfont)
	Local $hfont = _gdiplus_fontcreate($hfamily, $fsize)
	Local $tlayout = _gdiplus_rectfcreate($nx, $ny, 0, 0)
	Local $ainfo = _gdiplus_graphicsmeasurestring($hgraphics, $sstring, $hfont, $tlayout, $hformat)
	If @error Then Return SetError(@error, @extended, 0)
	Local $aresult = _gdiplus_graphicsdrawstringex($hgraphics, $sstring, $hfont, $ainfo[0], $hformat, $hbrush)
	Local $ierror = @error, $iextended = @extended
	_gdiplus_fontdispose($hfont)
	_gdiplus_fontfamilydispose($hfamily)
	_gdiplus_stringformatdispose($hformat)
	_gdiplus_brushdispose($hbrush)
	Return SetError($ierror, $iextended, $aresult)
EndFunc

Func _gdiplus_graphicsdrawstringex($hgraphics, $sstring, $hfont, $tlayout, $hformat, $hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawString", "handle", $hgraphics, "wstr", $sstring, "int", -1, "handle", $hfont, "struct*", $tlayout, "handle", $hformat, "handle", $hbrush)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsfillclosedcurve($hgraphics, $apoints, $hbrush = 0)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	__gdiplus_brushdefcreate($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillClosedCurve", "handle", $hgraphics, "handle", $hbrush, "struct*", $tpoints, "int", $icount)
	__gdiplus_brushdefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsfillclosedcurve2($hgraphics, $apoints, $ntension, $hbrush = 0, $ifillmode = 0)
	Local $ii, $icount, $tpoints, $aresult
	__gdiplus_brushdefcreate($hbrush)
	$icount = $apoints[0][0]
	$tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	$aresult = DllCall($__g_hgdipdll, "int", "GdipFillClosedCurve2", "handle", $hgraphics, "handle", $hbrush, "struct*", $tpoints, "int", $icount, "float", $ntension, "int", $ifillmode)
	__gdiplus_brushdefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsfillellipse($hgraphics, $nx, $ny, $nwidth, $nheight, $hbrush = 0)
	__gdiplus_brushdefcreate($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillEllipse", "handle", $hgraphics, "handle", $hbrush, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
	__gdiplus_brushdefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsfillpath($hgraphics, $hpath, $hbrush = 0)
	__gdiplus_brushdefcreate($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillPath", "handle", $hgraphics, "handle", $hbrush, "handle", $hpath)
	__gdiplus_brushdefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsfillpie($hgraphics, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle, $hbrush = 0)
	__gdiplus_brushdefcreate($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillPie", "handle", $hgraphics, "handle", $hbrush, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
	__gdiplus_brushdefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsfillpolygon($hgraphics, $apoints, $hbrush = 0)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	__gdiplus_brushdefcreate($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillPolygon", "handle", $hgraphics, "handle", $hbrush, "struct*", $tpoints, "int", $icount, "int", "FillModeAlternate")
	__gdiplus_brushdefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsfillrect($hgraphics, $nx, $ny, $nwidth, $nheight, $hbrush = 0)
	__gdiplus_brushdefcreate($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillRectangle", "handle", $hgraphics, "handle", $hbrush, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
	__gdiplus_brushdefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsfillregion($hgraphics, $hregion, $hbrush = 0)
	__gdiplus_brushdefcreate($hbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFillRegion", "handle", $hgraphics, "handle", $hbrush, "handle", $hregion)
	__gdiplus_brushdefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsgetcompositingmode($hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCompositingMode", "handle", $hgraphics, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_graphicsgetcompositingquality($hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetCompositingQuality", "handle", $hgraphics, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_graphicsgetdc($hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetDC", "handle", $hgraphics, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_graphicsgetinterpolationmode($hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetInterpolationMode", "handle", $hgraphics, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_graphicsgetsmoothingmode($hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetSmoothingMode", "handle", $hgraphics, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Switch $aresult[2]
		Case $gdip_smoothingmode_none
			Return 0
		Case $gdip_smoothingmode_highquality, $gdip_smoothingmode_antialias8x4
			Return 1
		Case $gdip_smoothingmode_antialias8x8
			Return 2
		Case Else
			Return 0
	EndSwitch
EndFunc

Func _gdiplus_graphicsgettransform($hgraphics, $hmatrix)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetWorldTransform", "handle", $hgraphics, "handle", $hmatrix)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsmeasurecharacterranges($hgraphics, $sstring, $hfont, $tlayout, $hstringformat)
	Local $icount = _gdiplus_stringformatgetmeasurablecharacterrangecount($hstringformat)
	If @error Then Return SetError(@error, @extended, 0)
	Local $tregions = DllStructCreate("handle[" & $icount & "]")
	Local $aregions[$icount + 1] = [$icount]
	For $ii = 1 To $icount
		$aregions[$ii] = _gdiplus_regioncreate()
		DllStructSetData($tregions, 1, $aregions[$ii], $ii)
	Next
	DllCall($__g_hgdipdll, "int", "GdipMeasureCharacterRanges", "handle", $hgraphics, "wstr", $sstring, "int", -1, "hwnd", $hfont, "struct*", $tlayout, "handle", $hstringformat, "int", $icount, "struct*", $tregions)
	Local $ierror = @error, $iextended = @extended
	If $ierror Then
		For $ii = 1 To $icount
			_gdiplus_regiondispose($aregions[$ii])
		Next
		Return SetError($ierror + 10, $iextended, 0)
	EndIf
	Return $aregions
EndFunc

Func _gdiplus_graphicsmeasurestring($hgraphics, $sstring, $hfont, $tlayout, $hformat)
	Local $trectf = DllStructCreate($taggdiprectf)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipMeasureString", "handle", $hgraphics, "wstr", $sstring, "int", -1, "handle", $hfont, "struct*", $tlayout, "handle", $hformat, "struct*", $trectf, "int*", 0, "int*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Local $ainfo[3]
	$ainfo[0] = $trectf
	$ainfo[1] = $aresult[8]
	$ainfo[2] = $aresult[9]
	Return $ainfo
EndFunc

Func _gdiplus_graphicsreleasedc($hgraphics, $hdc)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipReleaseDC", "handle", $hgraphics, "handle", $hdc)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_graphicsresetclip($hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetClip", "handle", $hgraphics)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsresettransform($hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetWorldTransform", "handle", $hgraphics)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsrestore($hgraphics, $istate)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipRestoreGraphics", "handle", $hgraphics, "uint", $istate)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicsrotatetransform($hgraphics, $fangle, $iorder = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipRotateWorldTransform", "handle", $hgraphics, "float", $fangle, "int", $iorder)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssave($hgraphics)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSaveGraphics", "handle", $hgraphics, "uint*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_graphicsscaletransform($hgraphics, $fscalex, $fscaley, $iorder = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipScaleWorldTransform", "handle", $hgraphics, "float", $fscalex, "float", $fscaley, "int", $iorder)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssetclippath($hgraphics, $hpath, $icombinemode = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetClipPath", "handle", $hgraphics, "handle", $hpath, "int", $icombinemode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssetcliprect($hgraphics, $nx, $ny, $nwidth, $nheight, $icombinemode = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetClipRect", "handle", $hgraphics, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "int", $icombinemode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssetclipregion($hgraphics, $hregion, $icombinemode = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetClipRegion", "handle", $hgraphics, "handle", $hregion, "int", $icombinemode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssetcompositingmode($hgraphics, $icompositionmode)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetCompositingMode", "handle", $hgraphics, "int", $icompositionmode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssetcompositingquality($hgraphics, $icompositionquality)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetCompositingQuality", "handle", $hgraphics, "int", $icompositionquality)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssetinterpolationmode($hgraphics, $iinterpolationmode)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetInterpolationMode", "handle", $hgraphics, "int", $iinterpolationmode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssetpixeloffsetmode($hgraphics, $ipixeloffsetmode)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPixelOffsetMode", "handle", $hgraphics, "int", $ipixeloffsetmode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssetsmoothingmode($hgraphics, $ismooth)
	If $ismooth < $gdip_smoothingmode_default OR $ismooth > $gdip_smoothingmode_antialias8x8 Then $ismooth = $gdip_smoothingmode_default
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetSmoothingMode", "handle", $hgraphics, "int", $ismooth)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssettextrenderinghint($hgraphics, $itextrenderinghint)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetTextRenderingHint", "handle", $hgraphics, "int", $itextrenderinghint)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicssettransform($hgraphics, $hmatrix)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetWorldTransform", "handle", $hgraphics, "handle", $hmatrix)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_graphicstransformpoints($hgraphics, ByRef $apoints, $icoordspaceto = 0, $icoordspacefrom = 1)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], ($ii - 1) * 2 + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], ($ii - 1) * 2 + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTransformPoints", "handle", $hgraphics, "int", $icoordspaceto, "int", $icoordspacefrom, "struct*", $tpoints, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	For $ii = 1 To $icount
		$apoints[$ii][0] = DllStructGetData($tpoints, 1, ($ii - 1) * 2 + 1)
		$apoints[$ii][1] = DllStructGetData($tpoints, 1, ($ii - 1) * 2 + 2)
	Next
	Return True
EndFunc

Func _gdiplus_graphicstranslatetransform($hgraphics, $ndx, $ndy, $iorder = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTranslateWorldTransform", "handle", $hgraphics, "float", $ndx, "float", $ndy, "int", $iorder)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_hatchbrushcreate($ihatchstyle = 0, $iargbforeground = -1, $iargbbackground = -1)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateHatchBrush", "int", $ihatchstyle, "uint", $iargbforeground, "uint", $iargbbackground, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[4]
EndFunc

Func _gdiplus_hiconcreatefrombitmap($hbitmap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateHICONFromBitmap", "handle", $hbitmap, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_imageattributescreate()
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateImageAttributes", "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[1]
EndFunc

Func _gdiplus_imageattributesdispose($himageattributes)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDisposeImageAttributes", "handle", $himageattributes)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_imageattributessetcolorkeys($himageattributes, $icoloradjusttype = 0, $benable = False, $iargblow = 0, $iargbhigh = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetImageAttributesColorKeys", "handle", $himageattributes, "int", $icoloradjusttype, "int", $benable, "uint", $iargblow, "uint", $iargbhigh)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_imageattributessetcolormatrix($himageattributes, $icoloradjusttype = 0, $benable = False, $tclrmatrix = 0, $tgraymatrix = 0, $icolormatrixflags = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetImageAttributesColorMatrix", "handle", $himageattributes, "int", $icoloradjusttype, "int", $benable, "struct*", $tclrmatrix, "struct*", $tgraymatrix, "int", $icolormatrixflags)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_imagedispose($himage)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDisposeImage", "handle", $himage)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_imagegetdimension($himage)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageDimension", "handle", $himage, "float*", 0, "float*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Local $aimgdim[2] = [$aresult[2], $aresult[3]]
	Return $aimgdim
EndFunc

Func _gdiplus_imagegetflags($himage)
	Local $aflag[2] = [0, ""]
	If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, $aflag)
	Local $aimageflags[13][2] = [["Pixel data Cacheable", $gdip_imageflags_caching], ["Pixel data read-only", $gdip_imageflags_readonly], ["Pixel size in image", $gdip_imageflags_hasrealpixelsize], ["DPI info in image", $gdip_imageflags_hasrealdpi], ["YCCK color space", $gdip_imageflags_colorspace_ycck], ["YCBCR color space", $gdip_imageflags_colorspace_ycbcr], ["Grayscale image", $gdip_imageflags_colorspace_gray], ["CMYK color space", $gdip_imageflags_colorspace_cmyk], ["RGB color space", $gdip_imageflags_colorspace_rgb], ["Partially scalable", $gdip_imageflags_partiallyscalable], ["Alpha values other than 0 (transparent) and 255 (opaque)", $gdip_imageflags_hastranslucent], ["Alpha values", $gdip_imageflags_hasalpha], ["Scalable", $gdip_imageflags_scalable]]
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageFlags", "handle", $himage, "long*", 0)
	If @error Then Return SetError(@error, @extended, $aflag)
	If $aresult[0] Then Return SetError(10, $aresult[0], $aflag)
	If $aresult[2] = $gdip_imageflags_none Then
		$aflag[1] = "No pixel data"
		Return SetError(12, $aresult[2], $aflag)
	EndIf
	$aflag[0] = $aresult[2]
	For $i = 0 To 12
		If BitAND($aresult[2], $aimageflags[$i][1]) = $aimageflags[$i][1] Then
			If StringLen($aflag[1]) Then $aflag[1] &= "|"
			$aresult[2] -= $aimageflags[$i][1]
			$aflag[1] &= $aimageflags[$i][0]
		EndIf
	Next
	Return $aflag
EndFunc

Func _gdiplus_imagegetgraphicscontext($himage)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageGraphicsContext", "handle", $himage, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_imagegetheight($himage)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageHeight", "handle", $himage, "uint*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_imagegethorizontalresolution($himage)
	If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageHorizontalResolution", "handle", $himage, "float*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return Round($aresult[2])
EndFunc

Func _gdiplus_imagegetpixelformat($himage)
	Local $aformat[2] = [0, ""]
	If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, $aformat)
	Local $apixelformat[14][2] = [["1 Bpp Indexed", $gdip_pxf01indexed], ["4 Bpp Indexed", $gdip_pxf04indexed], ["8 Bpp Indexed", $gdip_pxf08indexed], ["16 Bpp Grayscale", $gdip_pxf16grayscale], ["16 Bpp RGB 555", $gdip_pxf16rgb555], ["16 Bpp RGB 565", $gdip_pxf16rgb565], ["16 Bpp ARGB 1555", $gdip_pxf16argb1555], ["24 Bpp RGB", $gdip_pxf24rgb], ["32 Bpp RGB", $gdip_pxf32rgb], ["32 Bpp ARGB", $gdip_pxf32argb], ["32 Bpp PARGB", $gdip_pxf32pargb], ["48 Bpp RGB", $gdip_pxf48rgb], ["64 Bpp ARGB", $gdip_pxf64argb], ["64 Bpp PARGB", $gdip_pxf64pargb]]
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImagePixelFormat", "handle", $himage, "int*", 0)
	If @error Then Return SetError(@error, @extended, $aformat)
	If $aresult[0] Then Return SetError(10, $aresult[0], $aformat)
	For $i = 0 To 13
		If $apixelformat[$i][1] = $aresult[2] Then
			$aformat[0] = $apixelformat[$i][1]
			$aformat[1] = $apixelformat[$i][0]
			Return $aformat
		EndIf
	Next
	Return SetError(12, 0, $aformat)
EndFunc

Func _gdiplus_imagegetrawformat($himage)
	Local $aguid[2]
	If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, $aguid)
	Local $aimagetype[11][2] = [["UNDEFINED", $gdip_imageformat_undefined], ["MEMORYBMP", $gdip_imageformat_memorybmp], ["BMP", $gdip_imageformat_bmp], ["EMF", $gdip_imageformat_emf], ["WMF", $gdip_imageformat_wmf], ["JPEG", $gdip_imageformat_jpeg], ["PNG", $gdip_imageformat_png], ["GIF", $gdip_imageformat_gif], ["TIFF", $gdip_imageformat_tiff], ["EXIF", $gdip_imageformat_exif], ["ICON", $gdip_imageformat_icon]]
	Local $tstruct = DllStructCreate("byte[16]")
	Local $aresult1 = DllCall($__g_hgdipdll, "int", "GdipGetImageRawFormat", "handle", $himage, "struct*", $tstruct)
	If @error Then Return SetError(@error, @extended, $aguid)
	If $aresult1[0] Then Return SetError(10, $aresult1[0], $aguid)
	Local $sresult2 = _winapi_stringfromguid($aresult1[2])
	If @error Then Return SetError(@error + 20, @extended, $aguid)
	If $sresult2 = "" Then Return SetError(12, 0, $aguid)
	For $i = 0 To 10
		If $aimagetype[$i][1] == $sresult2 Then
			$aguid[0] = $aimagetype[$i][1]
			$aguid[1] = $aimagetype[$i][0]
			Return $aguid
		EndIf
	Next
	Return SetError(13, 0, $aguid)
EndFunc

Func _gdiplus_imagegetthumbnail($himage, $iwidth = 0, $iheight = 0, $bkeepratio = True, $hcallback = NULL , $hcallbackdata = NULL )
	If $bkeepratio Then
		Local $aimgdim = _gdiplus_imagegetdimension($himage)
		If @error Then Return SetError(@error + 20, @extended, False)
		Local $f
		If $iwidth < 1 OR $iheight < 1 Then
			$iwidth = 0
			$iheight = 0
		Else
			If ($aimgdim[0] / $aimgdim[1]) > 1 Then
				$f = $aimgdim[0] / $iwidth
			Else
				$f = $aimgdim[1] / $iheight
			EndIf
			$iwidth = Int($aimgdim[0] / $f)
			$iheight = Int($aimgdim[1] / $f)
		EndIf
	EndIf
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageThumbnail", "handle", $himage, "uint", $iwidth, "uint", $iheight, "ptr*", 0, "ptr", $hcallback, "ptr", $hcallbackdata)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return $aresult[4]
EndFunc

Func _gdiplus_imagegettype($himage)
	If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, -1)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageType", "handle", $himage, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_imagegetverticalresolution($himage)
	If ($himage = -1) OR (NOT $himage) Then Return SetError(11, 0, 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageVerticalResolution", "handle", $himage, "float*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return Round($aresult[2])
EndFunc

Func _gdiplus_imagegetwidth($himage)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetImageWidth", "handle", $himage, "uint*", -1)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_imageloadfromfile($sfilename)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipLoadImageFromFile", "wstr", $sfilename, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_imageloadfromstream($pstream)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipLoadImageFromStream", "ptr", $pstream, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_imagerotateflip($himage, $irotatefliptype)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipImageRotateFlip", "handle", $himage, "int", $irotatefliptype)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_imagesavetofile($himage, $sfilename)
	Local $sext = __gdiplus_extractfileext($sfilename)
	Local $sclsid = _gdiplus_encodersgetclsid($sext)
	If $sclsid = "" Then Return SetError(-1, 0, False)
	Local $bret = _gdiplus_imagesavetofileex($himage, $sfilename, $sclsid, 0)
	Return SetError(@error, @extended, $bret)
EndFunc

Func _gdiplus_imagesavetofileex($himage, $sfilename, $sencoder, $tparams = 0)
	Local $tguid = _winapi_guidfromstring($sencoder)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSaveImageToFile", "handle", $himage, "wstr", $sfilename, "struct*", $tguid, "struct*", $tparams)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_imagesavetostream($himage, $pstream, $tencoder, $tparams = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSaveImageToStream", "handle", $himage, "ptr", $pstream, "struct*", $tencoder, "struct*", $tparams)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_imagescale($himage, $iscalew, $iscaleh, $iinterpolationmode = $gdip_interpolationmode_highqualitybicubic)
	Local $iwidth = _gdiplus_imagegetwidth($himage) * $iscalew
	If @error Then Return SetError(1, 0, 0)
	Local $iheight = _gdiplus_imagegetheight($himage) * $iscaleh
	If @error Then Return SetError(2, 0, 0)
	Local $hbitmap = _gdiplus_bitmapcreatefromscan0($iwidth, $iheight)
	If @error Then Return SetError(3, 0, 0)
	Local $hbmpctxt = _gdiplus_imagegetgraphicscontext($hbitmap)
	If @error Then
		_gdiplus_bitmapdispose($hbitmap)
		Return SetError(4, 0, 0)
	EndIf
	_gdiplus_graphicssetinterpolationmode($hbmpctxt, $iinterpolationmode)
	If @error Then
		_gdiplus_graphicsdispose($hbmpctxt)
		_gdiplus_bitmapdispose($hbitmap)
		Return SetError(5, 0, 0)
	EndIf
	_gdiplus_graphicsdrawimagerect($hbmpctxt, $himage, 0, 0, $iwidth, $iheight)
	If @error Then
		_gdiplus_graphicsdispose($hbmpctxt)
		_gdiplus_bitmapdispose($hbitmap)
		Return SetError(6, 0, 0)
	EndIf
	_gdiplus_graphicsdispose($hbmpctxt)
	Return $hbitmap
EndFunc

Func _gdiplus_imageresize($himage, $inewwidth, $inewheight, $iinterpolationmode = $gdip_interpolationmode_highqualitybicubic)
	Local $hbitmap = _gdiplus_bitmapcreatefromscan0($inewwidth, $inewheight)
	If @error Then Return SetError(1, 0, 0)
	Local $hbmpctxt = _gdiplus_imagegetgraphicscontext($hbitmap)
	If @error Then
		_gdiplus_bitmapdispose($hbitmap)
		Return SetError(2, @extended, 0)
	EndIf
	_gdiplus_graphicssetinterpolationmode($hbmpctxt, $iinterpolationmode)
	If @error Then
		_gdiplus_graphicsdispose($hbmpctxt)
		_gdiplus_bitmapdispose($hbitmap)
		Return SetError(3, @extended, 0)
	EndIf
	_gdiplus_graphicsdrawimagerect($hbmpctxt, $himage, 0, 0, $inewwidth, $inewheight)
	If @error Then
		_gdiplus_graphicsdispose($hbmpctxt)
		_gdiplus_bitmapdispose($hbitmap)
		Return SetError(4, @extended, 0)
	EndIf
	_gdiplus_graphicsdispose($hbmpctxt)
	Return $hbitmap
EndFunc

Func _gdiplus_linebrushcreate($nx1, $ny1, $nx2, $ny2, $iargbclr1, $iargbclr2, $iwrapmode = 0)
	Local $tpointf1, $tpointf2, $aresult
	$tpointf1 = DllStructCreate("float;float")
	$tpointf2 = DllStructCreate("float;float")
	DllStructSetData($tpointf1, 1, $nx1)
	DllStructSetData($tpointf1, 2, $ny1)
	DllStructSetData($tpointf2, 1, $nx2)
	DllStructSetData($tpointf2, 2, $ny2)
	$aresult = DllCall($__g_hgdipdll, "int", "GdipCreateLineBrush", "struct*", $tpointf1, "struct*", $tpointf2, "uint", $iargbclr1, "uint", $iargbclr2, "int", $iwrapmode, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[6]
EndFunc

Func _gdiplus_linebrushcreatefromrect($trectf, $iargbclr1, $iargbclr2, $igradientmode = 0, $iwrapmode = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateLineBrushFromRect", "struct*", $trectf, "uint", $iargbclr1, "uint", $iargbclr2, "int", $igradientmode, "int", $iwrapmode, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[6]
EndFunc

Func _gdiplus_linebrushcreatefromrectwithangle($trectf, $iargbclr1, $iargbclr2, $fangle, $bisanglescalable = True, $iwrapmode = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateLineBrushFromRectWithAngle", "struct*", $trectf, "uint", $iargbclr1, "uint", $iargbclr2, "float", $fangle, "int", $bisanglescalable, "int", $iwrapmode, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[7]
EndFunc

Func _gdiplus_linebrushgetcolors($hlinegradientbrush)
	Local $targbs, $aargbs[2], $aresult
	$targbs = DllStructCreate("uint;uint")
	$aresult = DllCall($__g_hgdipdll, "uint", "GdipGetLineColors", "handle", $hlinegradientbrush, "struct*", $targbs)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	$aargbs[0] = DllStructGetData($targbs, 1)
	$aargbs[1] = DllStructGetData($targbs, 2)
	Return $aargbs
EndFunc

Func _gdiplus_linebrushgetrect($hlinegradientbrush)
	Local $trectf = DllStructCreate($taggdiprectf)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetLineRect", "handle", $hlinegradientbrush, "struct*", $trectf)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $arectf[4]
	For $ii = 1 To 4
		$arectf[$ii - 1] = DllStructGetData($trectf, $ii)
	Next
	Return $arectf
EndFunc

Func _gdiplus_linebrushmultiplytransform($hlinegradientbrush, $hmatrix, $iorder = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipMultiplyLineTransform", "handle", $hlinegradientbrush, "handle", $hmatrix, "int", $iorder)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_linebrushresettransform($hlinegradientbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetLineTransform", "handle", $hlinegradientbrush)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_linebrushsetblend($hlinegradientbrush, $ablends)
	Local $ii, $icount, $tfactors, $tpositions, $aresult
	$icount = $ablends[0][0]
	$tfactors = DllStructCreate("float[" & $icount & "]")
	$tpositions = DllStructCreate("float[" & $icount & "]")
	For $ii = 1 To $icount
		DllStructSetData($tfactors, 1, $ablends[$ii][0], $ii)
		DllStructSetData($tpositions, 1, $ablends[$ii][1], $ii)
	Next
	$aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineBlend", "handle", $hlinegradientbrush, "struct*", $tfactors, "struct*", $tpositions, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_linebrushsetcolors($hlinegradientbrush, $iargbstart, $iargbend)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineColors", "handle", $hlinegradientbrush, "uint", $iargbstart, "uint", $iargbend)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_linebrushsetgammacorrection($hlinegradientbrush, $busegammacorrection = True)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineGammaCorrection", "handle", $hlinegradientbrush, "int", $busegammacorrection)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_linebrushsetlinearblend($hlinegradientbrush, $ffocus, $fscale = 1)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineLinearBlend", "handle", $hlinegradientbrush, "float", $ffocus, "float", $fscale)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_linebrushsetpresetblend($hlinegradientbrush, $ainterpolations)
	Local $ii, $icount, $tcolors, $tpositions, $aresult
	$icount = $ainterpolations[0][0]
	$tcolors = DllStructCreate("uint[" & $icount & "]")
	$tpositions = DllStructCreate("float[" & $icount & "]")
	For $ii = 1 To $icount
		DllStructSetData($tcolors, 1, $ainterpolations[$ii][0], $ii)
		DllStructSetData($tpositions, 1, $ainterpolations[$ii][1], $ii)
	Next
	$aresult = DllCall($__g_hgdipdll, "int", "GdipSetLinePresetBlend", "handle", $hlinegradientbrush, "struct*", $tcolors, "struct*", $tpositions, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_linebrushsetsigmablend($hlinegradientbrush, $ffocus, $fscale = 1)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineSigmaBlend", "handle", $hlinegradientbrush, "float", $ffocus, "float", $fscale)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_linebrushsettransform($hlinegradientbrush, $hmatrix)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetLineTransform", "handle", $hlinegradientbrush, "handle", $hmatrix)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_matrixcreate()
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateMatrix", "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[1]
EndFunc

Func _gdiplus_matrixclone($hmatrix)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneMatrix", "handle", $hmatrix, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_matrixdispose($hmatrix)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteMatrix", "handle", $hmatrix)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_matrixgetelements($hmatrix)
	Local $telements = DllStructCreate("float[6]")
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetMatrixElements", "handle", $hmatrix, "struct*", $telements)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $aelements[6]
	For $ii = 1 To 6
		$aelements[$ii - 1] = DllStructGetData($telements, 1, $ii)
	Next
	Return $aelements
EndFunc

Func _gdiplus_matrixinvert($hmatrix)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipInvertMatrix", "handle", $hmatrix)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_matrixmultiply($hmatrix1, $hmatrix2, $iorder = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipMultiplyMatrix", "handle", $hmatrix1, "handle", $hmatrix2, "int", $iorder)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_matrixrotate($hmatrix, $fangle, $bappend = False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipRotateMatrix", "handle", $hmatrix, "float", $fangle, "int", $bappend)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_matrixscale($hmatrix, $fscalex, $fscaley, $border = False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipScaleMatrix", "handle", $hmatrix, "float", $fscalex, "float", $fscaley, "int", $border)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_matrixsetelements($hmatrix, $nm11 = 1, $nm12 = 0, $nm21 = 0, $nm22 = 1, $ndx = 0, $ndy = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetMatrixElements", "handle", $hmatrix, "float", $nm11, "float", $nm12, "float", $nm21, "float", $nm22, "float", $ndx, "float", $ndy)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_matrixshear($hmatrix, $fshearx, $fsheary, $iorder = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipShearMatrix", "handle", $hmatrix, "float", $fshearx, "float", $fsheary, "int", $iorder)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_matrixtransformpoints($hmatrix, ByRef $apoints)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], ($ii - 1) * 2 + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], ($ii - 1) * 2 + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTransformMatrixPoints", "handle", $hmatrix, "struct*", $tpoints, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	For $ii = 1 To $icount
		$apoints[$ii][0] = DllStructGetData($tpoints, 1, ($ii - 1) * 2 + 1)
		$apoints[$ii][1] = DllStructGetData($tpoints, 1, ($ii - 1) * 2 + 2)
	Next
	Return True
EndFunc

Func _gdiplus_matrixtranslate($hmatrix, $foffsetx, $foffsety, $bappend = False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTranslateMatrix", "handle", $hmatrix, "float", $foffsetx, "float", $foffsety, "int", $bappend)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_paramadd(ByRef $tparams, $sguid, $inbofvalues, $itype, $pvalues)
	Local $icount = DllStructGetData($tparams, "Count")
	Local $pguid = DllStructGetPtr($tparams, "GUID") + ($icount * _gdiplus_paramsize())
	Local $tparam = DllStructCreate($taggdipencoderparam, $pguid)
	_winapi_guidfromstringex($sguid, $pguid)
	DllStructSetData($tparam, "Type", $itype)
	DllStructSetData($tparam, "NumberOfValues", $inbofvalues)
	DllStructSetData($tparam, "Values", $pvalues)
	DllStructSetData($tparams, "Count", $icount + 1)
EndFunc

Func _gdiplus_paraminit($icount)
	Local $sstruct = $taggdipencoderparams
	For $i = 2 To $icount
		$sstruct &= ";struct;byte[16];ulong;ulong;ptr;endstruct"
	Next
	Return DllStructCreate($sstruct)
EndFunc

Func _gdiplus_paramsize()
	Local $tparam = DllStructCreate($taggdipencoderparam)
	Return DllStructGetSize($tparam)
EndFunc

Func _gdiplus_pathaddarc($hpath, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathArc", "handle", $hpath, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddbezier($hpath, $nx1, $ny1, $nx2, $ny2, $nx3, $ny3, $nx4, $ny4)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathBezier", "handle", $hpath, "float", $nx1, "float", $ny1, "float", $nx2, "float", $ny2, "float", $nx3, "float", $ny3, "float", $nx4, "float", $ny4)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddclosedcurve($hpath, $apoints)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathClosedCurve", "handle", $hpath, "struct*", $tpoints, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddclosedcurve2($hpath, $apoints, $ntension = 0.5)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathClosedCurve2", "handle", $hpath, "struct*", $tpoints, "int", $icount, "float", $ntension)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddcurve($hpath, $apoints)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathCurve", "handle", $hpath, "struct*", $tpoints, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddcurve2($hpath, $apoints, $ntension = 0.5)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathCurve2", "handle", $hpath, "struct*", $tpoints, "int", $icount, "float", $ntension)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddcurve3($hpath, $apoints, $ioffset, $inumofsegments, $ntension = 0.5)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathCurve3", "handle", $hpath, "struct*", $tpoints, "int", $icount, "int", $ioffset, "int", $inumofsegments, "float", $ntension)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddellipse($hpath, $nx, $ny, $nwidth, $nheight)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathEllipse", "handle", $hpath, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddline($hpath, $nx1, $ny1, $nx2, $ny2)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathLine", "handle", $hpath, "float", $nx1, "float", $ny1, "float", $nx2, "float", $ny2)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddline2($hpath, $apoints)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathLine2", "handle", $hpath, "struct*", $tpoints, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddpath($hpath1, $hpath2, $bconnect = True)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathPath", "handle", $hpath1, "handle", $hpath2, "int", $bconnect)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddpie($hpath, $nx, $ny, $nwidth, $nheight, $fstartangle, $fsweepangle)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathPie", "handle", $hpath, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "float", $fstartangle, "float", $fsweepangle)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddpolygon($hpath, $apoints)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathPolygon", "handle", $hpath, "struct*", $tpoints, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddrectangle($hpath, $nx, $ny, $nwidth, $nheight)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathRectangle", "handle", $hpath, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathaddstring($hpath, $sstring, $tlayout, $hfamily, $istyle = 0, $fsize = 8.5, $hformat = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipAddPathString", "handle", $hpath, "wstr", $sstring, "int", -1, "handle", $hfamily, "int", $istyle, "float", $fsize, "struct*", $tlayout, "handle", $hformat)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushcreate($apoints, $iwrapmode = 0)
	Local $icount = $apoints[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], (($ii - 1) * 2) + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePathGradient", "struct*", $tpoints, "int", $icount, "int", $iwrapmode, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[4]
EndFunc

Func _gdiplus_pathbrushcreatefrompath($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePathGradientFromPath", "handle", $hpath, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_pathbrushgetcenterpoint($hpathgradientbrush)
	Local $tpointf = DllStructCreate("float;float")
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientCenterPoint", "handle", $hpathgradientbrush, "struct*", $tpointf)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $apointf[2]
	$apointf[0] = DllStructGetData($tpointf, 1)
	$apointf[1] = DllStructGetData($tpointf, 2)
	Return $apointf
EndFunc

Func _gdiplus_pathbrushgetfocusscales($hpathgradientbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientFocusScales", "handle", $hpathgradientbrush, "float*", 0, "float*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $ascales[2]
	$ascales[0] = $aresult[2]
	$ascales[1] = $aresult[3]
	Return $ascales
EndFunc

Func _gdiplus_pathbrushgetpointcount($hpathgradientbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientPointCount", "handle", $hpathgradientbrush, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pathbrushgetrect($hpathgradientbrush)
	Local $trectf = DllStructCreate($taggdiprectf)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientRect", "handle", $hpathgradientbrush, "struct*", $trectf)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $arectf[4]
	For $ii = 1 To 4
		$arectf[$ii - 1] = DllStructGetData($trectf, $ii)
	Next
	Return $arectf
EndFunc

Func _gdiplus_pathbrushgetwrapmode($hpathgradientbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathGradientWrapMode", "handle", $hpathgradientbrush, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pathbrushmultiplytransform($hpathgradientbrush, $hmatrix, $iorder = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipMultiplyPathGradientTransform", "handle", $hpathgradientbrush, "handle", $hmatrix, "int", $iorder)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushresettransform($hpathgradientbrush)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetPathGradientTransform", "handle", $hpathgradientbrush)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetblend($hpathgradientbrush, $ablends)
	Local $icount = $ablends[0][0]
	Local $tfactors = DllStructCreate("float[" & $icount & "]")
	Local $tpositions = DllStructCreate("float[" & $icount & "]")
	For $ii = 1 To $icount
		DllStructSetData($tfactors, 1, $ablends[$ii][0], $ii)
		DllStructSetData($tpositions, 1, $ablends[$ii][1], $ii)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientBlend", "handle", $hpathgradientbrush, "struct*", $tfactors, "struct*", $tpositions, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetcentercolor($hpathgradientbrush, $iargb)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientCenterColor", "handle", $hpathgradientbrush, "uint", $iargb)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetcenterpoint($hpathgradientbrush, $nx, $ny)
	Local $tpointf = DllStructCreate("float;float")
	DllStructSetData($tpointf, 1, $nx)
	DllStructSetData($tpointf, 2, $ny)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientCenterPoint", "handle", $hpathgradientbrush, "struct*", $tpointf)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetfocusscales($hpathgradientbrush, $fscalex, $fscaley)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientFocusScales", "handle", $hpathgradientbrush, "float", $fscalex, "float", $fscaley)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetgammacorrection($hpathgradientbrush, $busegammacorrection)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientGammaCorrection", "handle", $hpathgradientbrush, "int", $busegammacorrection)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetlinearblend($hpathgradientbrush, $ffocus, $fscale = 1)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientLinearBlend", "handle", $hpathgradientbrush, "float", $ffocus, "float", $fscale)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetpresetblend($hpathgradientbrush, $ainterpolations)
	Local $icount = $ainterpolations[0][0]
	Local $tcolors = DllStructCreate("uint[" & $icount & "]")
	Local $tpositions = DllStructCreate("float[" & $icount & "]")
	For $ii = 1 To $icount
		DllStructSetData($tcolors, 1, $ainterpolations[$ii][0], $ii)
		DllStructSetData($tpositions, 1, $ainterpolations[$ii][1], $ii)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientPresetBlend", "handle", $hpathgradientbrush, "struct*", $tcolors, "struct*", $tpositions, "int", $icount)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetsigmablend($hpathgradientbrush, $ffocus, $fscale = 1)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientSigmaBlend", "handle", $hpathgradientbrush, "float", $ffocus, "float", $fscale)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetsurroundcolor($hpathgradientbrush, $iargb)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientSurroundColorsWithCount", "handle", $hpathgradientbrush, "uint*", $iargb, "int*", 1)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetsurroundcolorswithcount($hpathgradientbrush, $acolors)
	Local $icount = $acolors[0]
	Local $icolors = _gdiplus_pathbrushgetpointcount($hpathgradientbrush)
	If $icolors < $icount Then $icount = $icolors
	Local $tcolors = DllStructCreate("uint[" & $icount & "]")
	For $ii = 1 To $icount
		DllStructSetData($tcolors, 1, $acolors[$ii], $ii)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientSurroundColorsWithCount", "handle", $hpathgradientbrush, "struct*", $tcolors, "int*", $icount)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_pathbrushsettransform($hpathgradientbrush, $hmatrix)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientTransform", "handle", $hpathgradientbrush, "handle", $hmatrix)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathbrushsetwrapmode($hpathgradientbrush, $iwrapmode)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathGradientWrapMode", "handle", $hpathgradientbrush, "int", $iwrapmode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathclone($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipClonePath", "handle", $hpath, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_pathclosefigure($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipClosePathFigure", "handle", $hpath)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathcreate($ifillmode = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePath", "int", $ifillmode, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_pathcreate2($apathdata, $ifillmode = 0)
	Local $icount = $apathdata[0][0]
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	Local $ttypes = DllStructCreate("byte[" & $icount & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apathdata[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tpoints, 1, $apathdata[$ii][1], (($ii - 1) * 2) + 2)
		DllStructSetData($ttypes, 1, $apathdata[$ii][2], $ii)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePath2", "struct*", $tpoints, "struct*", $ttypes, "int", $icount, "int", $ifillmode, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[5]
EndFunc

Func _gdiplus_pathdispose($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeletePath", "handle", $hpath)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathflatten($hpath, $fflatness = 0.25, $hmatrix = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipFlattenPath", "handle", $hpath, "handle", $hmatrix, "float", $fflatness)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathgetdata($hpath)
	Local $icount = _gdiplus_pathgetpointcount($hpath)
	Local $tpathdata = DllStructCreate("int Count; ptr Points; ptr Types;")
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	Local $ttypes = DllStructCreate("byte[" & $icount & "]")
	DllStructSetData($tpathdata, "Count", $icount)
	DllStructSetData($tpathdata, "Points", DllStructGetPtr($tpoints))
	DllStructSetData($tpathdata, "Types", DllStructGetPtr($ttypes))
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathData", "handle", $hpath, "struct*", $tpathdata)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError($aresult[0], $aresult[0], -1)
	Local $adata[$icount + 1][3]
	$adata[0][0] = $icount
	For $ii = 1 To $icount
		$adata[$ii][0] = DllStructGetData($tpoints, 1, (($ii - 1) * 2) + 1)
		$adata[$ii][1] = DllStructGetData($tpoints, 1, (($ii - 1) * 2) + 2)
		$adata[$ii][2] = DllStructGetData($ttypes, 1, $ii)
	Next
	Return $adata
EndFunc

Func _gdiplus_pathgetfillmode($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathFillMode", "handle", $hpath, "int*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_pathgetlastpoint($hpath)
	Local $tpointf = DllStructCreate("float;float")
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathLastPoint", "handle", $hpath, "struct*", $tpointf)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $apointf[2]
	$apointf[0] = DllStructGetData($tpointf, 1)
	$apointf[1] = DllStructGetData($tpointf, 2)
	Return $apointf
EndFunc

Func _gdiplus_pathgetpointcount($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPointCount", "handle", $hpath, "int*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_pathgetpoints($hpath)
	Local $ii, $icount, $tpoints, $apoints[1][1], $aresult
	$icount = _gdiplus_pathgetpointcount($hpath)
	If @error Then Return SetError(@error + 10, @extended, -1)
	$tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	$aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathPoints", "handle", $hpath, "struct*", $tpoints, "int", $icount)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $apoints[$icount + 1][2]
	$apoints[0][0] = $icount
	For $ii = 1 To $icount
		$apoints[$ii][0] = DllStructGetData($tpoints, 1, (($ii - 1) * 2) + 1)
		$apoints[$ii][1] = DllStructGetData($tpoints, 1, (($ii - 1) * 2) + 2)
	Next
	Return $apoints
EndFunc

Func _gdiplus_pathgetworldbounds($hpath, $hmatrix = 0, $hpen = 0)
	Local $trectf = DllStructCreate($taggdiprectf)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPathWorldBounds", "handle", $hpath, "struct*", $trectf, "handle", $hmatrix, "handle", $hpen)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $arectf[4]
	For $ii = 1 To 4
		$arectf[$ii - 1] = DllStructGetData($trectf, $ii)
	Next
	Return $arectf
EndFunc

Func _gdiplus_pathisoutlinevisiblepoint($hpath, $nx, $ny, $hpen = 0, $hgraphics = 0)
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipIsOutlineVisiblePathPoint", "handle", $hpath, "float", $nx, "float", $ny, "handle", $hpen, "handle", $hgraphics, "int*", 0)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return $aresult[6] <> 0
EndFunc

Func _gdiplus_pathisvisiblepoint($hpath, $nx, $ny, $hgraphics = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipIsVisiblePathPoint", "handle", $hpath, "float", $nx, "float", $ny, "handle", $hgraphics, "int*", 0)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return $aresult[5] <> 0
EndFunc

Func _gdiplus_pathitercreate($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePathIter", "handle*", 0, "handle", $hpath)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[1]
EndFunc

Func _gdiplus_pathiterdispose($hpathiter)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeletePathIter", "handle", $hpathiter)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathitergetsubpathcount($hpathiter)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPathIterGetSubpathCount", "handle", $hpathiter, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pathiternextmarkerpath($hpathiter, $hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPathIterNextMarkerPath", "handle", $hpathiter, "int*", 0, "handle", $hpath)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pathiternextsubpathpath($hpathiter, $hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPathIterNextSubpathPath", "handle", $hpathiter, "int*", 0, "handle", $hpath, "bool*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $areturn[2]
	$areturn[0] = $aresult[2]
	$areturn[1] = $aresult[4]
	Return $areturn
EndFunc

Func _gdiplus_pathiterrewind($hpathiter)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipPathIterRewind", "handle", $hpathiter)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathreset($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipResetPath", "handle", $hpath)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathreverse($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipReversePath", "handle", $hpath)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathsetfillmode($hpath, $ifillmode)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathFillMode", "handle", $hpath, "int", $ifillmode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathsetmarker($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPathMarker", "handle", $hpath)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathstartfigure($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipStartPathFigure", "handle", $hpath)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathtransform($hpath, $hmatrix)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTransformPath", "handle", $hpath, "handle", $hmatrix)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathwarp($hpath, $hmatrix, $apoints, $nx, $ny, $nwidth, $nheight, $iwarpmode = 0, $fflatness = 0.25)
	Local $icount = $apoints[0][0]
	If $icount <> 3 AND $icount <> 4 Then Return SetError(11, 0, False)
	Local $tpoints = DllStructCreate("float[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tpoints, 1, $apoints[$ii][0], ($ii - 1) * 2 + 1)
		DllStructSetData($tpoints, 1, $apoints[$ii][1], ($ii - 1) * 2 + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipWarpPath", "handle", $hpath, "handle", $hmatrix, "struct*", $tpoints, "int", $icount, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "int", $iwarpmode, "float", $fflatness)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathwiden($hpath, $hpen, $hmatrix = 0, $fflatness = 0.25)
	__gdiplus_pendefcreate($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipWidenPath", "handle", $hpath, "handle", $hpen, "handle", $hmatrix, "float", $fflatness)
	__gdiplus_pendefdispose()
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pathwindingmodeoutline($hpath, $hmatrix = 0, $fflatness = 0.25)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipWindingModeOutline", "handle", $hpath, "handle", $hmatrix, "float", $fflatness)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pencreate($iargb = -16777216, $nwidth = 1, $iunit = 2)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePen1", "dword", $iargb, "float", $nwidth, "int", $iunit, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[4]
EndFunc

Func _gdiplus_pencreate2($hbrush, $nwidth = 1, $iunit = 2)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreatePen2", "handle", $hbrush, "float", $nwidth, "int", $iunit, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[4]
EndFunc

Func _gdiplus_pendispose($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeletePen", "handle", $hpen)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pengetalignment($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenMode", "handle", $hpen, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pengetcolor($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenColor", "handle", $hpen, "dword*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pengetcustomendcap($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenCustomEndCap", "handle", $hpen, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_pengetdashcap($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenDashCap197819", "handle", $hpen, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pengetdashstyle($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenDashStyle", "handle", $hpen, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pengetendcap($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenEndCap", "handle", $hpen, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pengetmiterlimit($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenMiterLimit", "handle", $hpen, "float*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pengetwidth($hpen)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetPenWidth", "handle", $hpen, "float*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_pensetalignment($hpen, $ialignment = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenMode", "handle", $hpen, "int", $ialignment)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetcolor($hpen, $iargb)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenColor", "handle", $hpen, "dword", $iargb)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetcustomendcap($hpen, $hendcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenCustomEndCap", "handle", $hpen, "handle", $hendcap)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetdashcap($hpen, $idash = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenDashCap197819", "handle", $hpen, "int", $idash)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetdashstyle($hpen, $istyle = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenDashStyle", "handle", $hpen, "int", $istyle)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetendcap($hpen, $iendcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenEndCap", "handle", $hpen, "int", $iendcap)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetlinecap($hpen, $istartcap, $iendcap, $idashcap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenLineCap197819", "handle", $hpen, "int", $istartcap, "int", $iendcap, "int", $idashcap)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetlinejoin($hpen, $ilinejoin)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenLineJoin", "handle", $hpen, "int", $ilinejoin)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetmiterlimit($hpen, $fmiterlimit)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenMiterLimit", "handle", $hpen, "float", $fmiterlimit)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetstartcap($hpen, $ilinecap)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenStartCap", "handle", $hpen, "int", $ilinecap)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_pensetwidth($hpen, $fwidth)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetPenWidth", "handle", $hpen, "float", $fwidth)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_rectfcreate($nx = 0, $ny = 0, $nwidth = 0, $nheight = 0)
	Local $trectf = DllStructCreate($taggdiprectf)
	DllStructSetData($trectf, "X", $nx)
	DllStructSetData($trectf, "Y", $ny)
	DllStructSetData($trectf, "Width", $nwidth)
	DllStructSetData($trectf, "Height", $nheight)
	Return $trectf
EndFunc

Func _gdiplus_regionclone($hregion)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCloneRegion", "handle", $hregion, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_regioncombinepath($hregion, $hpath, $icombinemode = 2)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCombineRegionPath", "handle", $hregion, "handle", $hpath, "int", $icombinemode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_regioncombinerect($hregion, $nx, $ny, $nwidth, $nheight, $icombinemode = 2)
	Local $trectf = _gdiplus_rectfcreate($nx, $ny, $nwidth, $nheight)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCombineRegionRect", "handle", $hregion, "struct*", $trectf, "int", $icombinemode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_regioncombineregion($hregiondst, $hregionsrc, $icombinemode = 2)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCombineRegionRegion", "handle", $hregiondst, "handle", $hregionsrc, "int", $icombinemode)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_regioncreate()
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateRegion", "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[1]
EndFunc

Func _gdiplus_regioncreatefrompath($hpath)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateRegionPath", "handle", $hpath, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_regioncreatefromrect($nx, $ny, $nwidth, $nheight)
	Local $trectf = _gdiplus_rectfcreate($nx, $ny, $nwidth, $nheight)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateRegionRect", "struct*", $trectf, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_regiondispose($hregion)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteRegion", "handle", $hregion)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_regiongetbounds($hregion, $hgraphics)
	Local $trectf = DllStructCreate($taggdiprectf)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetRegionBounds", "handle", $hregion, "handle", $hgraphics, "struct*", $trectf)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Local $abounds[4]
	For $ii = 1 To 4
		$abounds[$ii - 1] = DllStructGetData($trectf, $ii)
	Next
	Return $abounds
EndFunc

Func _gdiplus_regiongethrgn($hregion, $hgraphics = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetRegionHRgn", "handle", $hregion, "handle", $hgraphics, "handle*", 0)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return $aresult[3]
EndFunc

Func _gdiplus_regiontransform($hregion, $hmatrix)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTransformRegion", "handle", $hregion, "handle", $hmatrix)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_regiontranslate($hregion, $ndx, $ndy)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipTranslateRegion", "handle", $hregion, "float", $ndx, "float", $ndy)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_shutdown()
	If $__g_hgdipdll = 0 Then Return SetError(-1, -1, False)
	$__g_igdipref -= 1
	If $__g_igdipref = 0 Then
		DllCall($__g_hgdipdll, "none", "GdiplusShutdown", "ulong_ptr", $__g_igdiptoken)
		DllClose($__g_hgdipdll)
		$__g_hgdipdll = 0
	EndIf
	Return True
EndFunc

Func _gdiplus_startup($sgdipdll = Default, $bretdllhandle = False)
	$__g_igdipref += 1
	If $__g_igdipref > 1 Then Return True
	If $sgdipdll = Default Then $sgdipdll = "gdiplus.dll"
	$__g_hgdipdll = DllOpen($sgdipdll)
	If $__g_hgdipdll = -1 Then
		$__g_igdipref = 0
		Return SetError(1, 2, False)
	EndIf
	Local $sver = FileGetVersion($sgdipdll)
	$sver = StringSplit($sver, ".")
	If $sver[1] > 5 Then $__g_bgdip_v1_0 = False
	Local $tinput = DllStructCreate($taggdipstartupinput)
	Local $ttoken = DllStructCreate("ulong_ptr Data")
	DllStructSetData($tinput, "Version", 1)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdiplusStartup", "struct*", $ttoken, "struct*", $tinput, "ptr", 0)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	$__g_igdiptoken = DllStructGetData($ttoken, "Data")
	If $bretdllhandle Then Return $__g_hgdipdll
	Return SetExtended($sver[1], True)
EndFunc

Func _gdiplus_stringformatcreate($iformat = 0, $ilangid = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateStringFormat", "int", $iformat, "word", $ilangid, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_stringformatdispose($hformat)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteStringFormat", "handle", $hformat)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_stringformatgetmeasurablecharacterrangecount($hstringformat)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetStringFormatMeasurableCharacterRangeCount", "handle", $hstringformat, "int*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_stringformatsetalign($hstringformat, $iflag)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetStringFormatAlign", "handle", $hstringformat, "int", $iflag)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_stringformatsetlinealign($hstringformat, $istringalign)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetStringFormatLineAlign", "handle", $hstringformat, "int", $istringalign)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_stringformatsetmeasurablecharacterranges($hstringformat, $aranges)
	Local $icount = $aranges[0][0]
	Local $tcharacterranges = DllStructCreate("int[" & $icount * 2 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tcharacterranges, 1, $aranges[$ii][0], (($ii - 1) * 2) + 1)
		DllStructSetData($tcharacterranges, 1, $aranges[$ii][1], (($ii - 1) * 2) + 2)
	Next
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetStringFormatMeasurableCharacterRanges", "handle", $hstringformat, "int", $icount, "struct*", $tcharacterranges)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_texturecreate($himage, $iwrapmode = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateTexture", "handle", $himage, "int", $iwrapmode, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_texturecreate2($himage, $nx, $ny, $nwidth, $nheight, $iwrapmode = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateTexture2", "handle", $himage, "int", $iwrapmode, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[7]
EndFunc

Func _gdiplus_texturecreateia($himage, $nx, $ny, $nwidth, $nheight, $pimageattributes = 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateTextureIA", "handle", $himage, "handle", $pimageattributes, "float", $nx, "float", $ny, "float", $nwidth, "float", $nheight, "ptr*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[7]
EndFunc

Func __gdiplus_brushdefcreate(ByRef $hbrush)
	If $hbrush = 0 Then
		$__g_hgdipbrush = _gdiplus_brushcreatesolid()
		$hbrush = $__g_hgdipbrush
	EndIf
EndFunc

Func __gdiplus_brushdefdispose($icurerror = @error, $icurextended = @extended)
	If $__g_hgdipbrush <> 0 Then
		_gdiplus_brushdispose($__g_hgdipbrush)
		$__g_hgdipbrush = 0
	EndIf
	Return SetError($icurerror, $icurextended)
EndFunc

Func __gdiplus_extractfileext($sfilename, $bnodot = True)
	Local $iindex = __gdiplus_lastdelimiter(".\:", $sfilename)
	If ($iindex > 0) AND (StringMid($sfilename, $iindex, 1) = ".") Then
		If $bnodot Then
			Return StringMid($sfilename, $iindex + 1)
		Else
			Return StringMid($sfilename, $iindex)
		EndIf
	Else
		Return ""
	EndIf
EndFunc

Func __gdiplus_lastdelimiter($sdelimiters, $sstring)
	Local $sdelimiter, $in
	For $ii = 1 To StringLen($sdelimiters)
		$sdelimiter = StringMid($sdelimiters, $ii, 1)
		$in = StringInStr($sstring, $sdelimiter, 0, -1)
		If $in > 0 Then Return $in
	Next
EndFunc

Func __gdiplus_pendefcreate(ByRef $hpen)
	If $hpen = 0 Then
		$__g_hgdippen = _gdiplus_pencreate()
		$hpen = $__g_hgdippen
	EndIf
EndFunc

Func __gdiplus_pendefdispose($icurerror = @error, $icurextended = @extended)
	If $__g_hgdippen <> 0 Then
		_gdiplus_pendispose($__g_hgdippen)
		$__g_hgdippen = 0
	EndIf
	Return SetError($icurerror, $icurextended)
EndFunc

Func _gdiplus_bitmapapplyeffect($hbitmap, $heffect, $trect = NULL )
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
	If NOT IsPtr($heffect) Then Return SetError(10, 0, False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapApplyEffect", "handle", $hbitmap, "handle", $heffect, "struct*", $trect, "int", 0, "ptr*", 0, "int*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_bitmapapplyeffectex($hbitmap, $heffect, $ix = 0, $iy = 0, $iw = 0, $ih = 0)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
	Local $trect = 0
	If BitOR($ix, $iy, $iw, $ih) Then
		$trect = DllStructCreate("int Left; int Top; int Right; int Bottom;")
		DllStructSetData($trect, "Right", $iw + DllStructSetData($trect, "Left", $ix))
		DllStructSetData($trect, "Bottom", $ih + DllStructSetData($trect, "Top", $iy))
	EndIf
	Local $istatus = _gdiplus_bitmapapplyeffect($hbitmap, $heffect, $trect)
	If NOT $istatus Then Return SetError(@error, @extended, False)
	Return True
EndFunc

Func _gdiplus_bitmapconvertformat($hbitmap, $ipixelformat, $idithertype, $ipalettetype, $tpalette, $falphathresholdpercent = 0)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapConvertFormat", "handle", $hbitmap, "uint", $ipixelformat, "uint", $idithertype, "uint", $ipalettetype, "struct*", $tpalette, "float", $falphathresholdpercent)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_bitmapcreateapplyeffect($hbitmap, $heffect, $trect = NULL , $toutrect = NULL )
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapCreateApplyEffect", "handle*", $hbitmap, "int", 1, "handle", $heffect, "struct*", $trect, "struct*", $toutrect, "handle*", 0, "int", 0, "ptr*", 0, "int*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[6]
EndFunc

Func _gdiplus_bitmapcreateapplyeffectex($hbitmap, $heffect, $ix = 0, $iy = 0, $iw = 0, $ih = 0)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $trect = 0
	If BitOR($ix, $iy, $iw, $ih) Then
		$trect = DllStructCreate("int Left; int Top; int Right; int Bottom;")
		DllStructSetData($trect, "Right", $iw + DllStructSetData($trect, "Left", $ix))
		DllStructSetData($trect, "Bottom", $ih + DllStructSetData($trect, "Top", $iy))
	EndIf
	Local $hbitmap_fx = _gdiplus_bitmapcreateapplyeffect($hbitmap, $heffect, $trect, NULL )
	Return SetError(@error, @extended, $hbitmap_fx)
EndFunc

Func _gdiplus_bitmapgethistogram($hbitmap, $ihistogramformat, $ihistogramsize, $tchannel_0, $tchannel_1 = 0, $tchannel_2 = 0, $tchannel_3 = 0)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapGetHistogram", "handle", $hbitmap, "uint", $ihistogramformat, "uint", $ihistogramsize, "struct*", $tchannel_0, "struct*", $tchannel_1, "struct*", $tchannel_2, "struct*", $tchannel_3)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_bitmapgethistogramex($hbitmap)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $isize = _gdiplus_bitmapgethistogramsize($gdip_histogramformatargb)
	Local $thistogram = DllStructCreate("int Size; uint Red[" & $isize & "]; uint MaxRed; uint Green[" & $isize & "]; uint MaxGreen; uint Blue[" & $isize & "]; uint MaxBlue; uint Alpha[" & $isize & "]; uint MaxAlpha; uint Grey[" & $isize & "]; uint MaxGrey;")
	DllStructSetData($thistogram, "Size", $isize)
	Local $istatus = _gdiplus_bitmapgethistogram($hbitmap, $gdip_histogramformatargb, $isize, DllStructGetPtr($thistogram, "Alpha"), DllStructGetPtr($thistogram, "Red"), DllStructGetPtr($thistogram, "Green"), DllStructGetPtr($thistogram, "Blue"))
	If NOT $istatus Then Return SetError(@error, @extended, 0)
	$istatus = _gdiplus_bitmapgethistogram($hbitmap, $gdip_histogramformatgray, $isize, DllStructGetPtr($thistogram, "Grey"))
	If NOT $istatus Then Return SetError(@error + 10, @extended, 0)
	Local $imaxred = 0, $imaxgreen = 0, $imaxblue = 0, $imaxalpha = 0, $imaxgrey = 0
	For $i = 1 To $isize
		If DllStructGetData($thistogram, "Red", $i) > $imaxred Then $imaxred = DllStructGetData($thistogram, "Red", $i)
		If DllStructGetData($thistogram, "Green", $i) > $imaxgreen Then $imaxgreen = DllStructGetData($thistogram, "Green", $i)
		If DllStructGetData($thistogram, "Blue", $i) > $imaxblue Then $imaxblue = DllStructGetData($thistogram, "Blue", $i)
		If DllStructGetData($thistogram, "Alpha", $i) > $imaxalpha Then $imaxalpha = DllStructGetData($thistogram, "Alpha", $i)
		If DllStructGetData($thistogram, "Grey", $i) > $imaxgrey Then $imaxgrey = DllStructGetData($thistogram, "Grey", $i)
	Next
	DllStructSetData($thistogram, "MaxRed", $imaxred)
	DllStructSetData($thistogram, "MaxGreen", $imaxgreen)
	DllStructSetData($thistogram, "MaxBlue", $imaxblue)
	DllStructSetData($thistogram, "MaxAlpha", $imaxalpha)
	DllStructSetData($thistogram, "MaxGrey", $imaxgrey)
	Return $thistogram
EndFunc

Func _gdiplus_bitmapgethistogramsize($iformat)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipBitmapGetHistogramSize", "uint", $iformat, "uint*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[2]
EndFunc

Func _gdiplus_drawimagefx($hgraphics, $himage, $heffect, $trectf = 0, $hmatrix = 0, $himgattributes = 0, $iunit = 2)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDrawImageFX", "handle", $hgraphics, "handle", $himage, "struct*", $trectf, "handle", $hmatrix, "handle", $heffect, "handle", $himgattributes, "uint", $iunit)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_drawimagefxex($hgraphics, $himage, $heffect, $nx = 0, $ny = 0, $nw = 0, $nh = 0, $hmatrix = 0, $himgattributes = 0, $iunit = 2)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
	Local $trectf = 0
	If BitOR($nx, $ny, $nw, $nh) Then $trectf = _gdiplus_rectfcreate($nx, $ny, $nw, $nh)
	Local $istatus = _gdiplus_drawimagefx($hgraphics, $himage, $heffect, $trectf, $hmatrix, $himgattributes, $iunit)
	Return SetError(@error, @extended, $istatus)
EndFunc

Func _gdiplus_effectcreate($seffectguid)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $tguid = _winapi_guidfromstring($seffectguid)
	Local $telem = DllStructCreate("uint64[2];", DllStructGetPtr($tguid))
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipCreateEffect", "uint64", DllStructGetData($telem, 1, 1), "uint64", DllStructGetData($telem, 1, 2), "handle*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $aresult[3]
EndFunc

Func _gdiplus_effectcreateblur($fradius = 10, $bexpandedge = False)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_blur)
	DllStructSetData($teffectparameters, "Radius", $fradius)
	DllStructSetData($teffectparameters, "ExpandEdge", $bexpandedge)
	Local $heffect = _gdiplus_effectcreate($gdip_blureffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreatebrightnesscontrast($ibrightnesslevel = 0, $icontrastlevel = 0)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_brightnesscontrast)
	DllStructSetData($teffectparameters, "BrightnessLevel", $ibrightnesslevel)
	DllStructSetData($teffectparameters, "ContrastLevel", $icontrastlevel)
	Local $heffect = _gdiplus_effectcreate($gdip_brightnesscontrasteffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreatecolorbalance($icyanred = 0, $imagentagreen = 0, $iyellowblue = 0)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_colorbalance)
	DllStructSetData($teffectparameters, "CyanRed", $icyanred)
	DllStructSetData($teffectparameters, "MagentaGreen", $imagentagreen)
	DllStructSetData($teffectparameters, "YellowBlue", $iyellowblue)
	Local $heffect = _gdiplus_effectcreate($gdip_colorbalanceeffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreatecolorcurve($iadjustment, $ichannel, $iadjustvalue)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_colorcurve)
	DllStructSetData($teffectparameters, "Adjustment", $iadjustment)
	DllStructSetData($teffectparameters, "Channel", $ichannel)
	DllStructSetData($teffectparameters, "AdjustValue", $iadjustvalue)
	Local $heffect = _gdiplus_effectcreate($gdip_colorcurveeffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreatecolorlut($acolorlut)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_colorlut)
	For $ii = 0 To 255
		DllStructSetData($teffectparameters, "LutA", $acolorlut[$ii][0], $ii + 1)
		DllStructSetData($teffectparameters, "LutR", $acolorlut[$ii][1], $ii + 1)
		DllStructSetData($teffectparameters, "LutG", $acolorlut[$ii][2], $ii + 1)
		DllStructSetData($teffectparameters, "LutB", $acolorlut[$ii][3], $ii + 1)
	Next
	Local $heffect = _gdiplus_effectcreate($gdip_colorluteffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreatecolormatrix($tcolormatrix)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $heffect = _gdiplus_effectcreate($gdip_colormatrixeffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $tcolormatrix)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreatehuesaturationlightness($ihuelevel = 0, $isaturationlevel = 0, $ilightnesslevel = 0)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_huesaturationlightness)
	DllStructSetData($teffectparameters, "HueLevel", $ihuelevel)
	DllStructSetData($teffectparameters, "SaturationLevel", $isaturationlevel)
	DllStructSetData($teffectparameters, "LightnessLevel", $ilightnesslevel)
	Local $heffect = _gdiplus_effectcreate($gdip_huesaturationlightnesseffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreatelevels($ihighlight = 100, $imidtone = 0, $ishadow = 0)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_levels)
	DllStructSetData($teffectparameters, "Highlight", $ihighlight)
	DllStructSetData($teffectparameters, "Midtone", $imidtone)
	DllStructSetData($teffectparameters, "Shadow", $ishadow)
	Local $heffect = _gdiplus_effectcreate($gdip_levelseffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreateredeyecorrection($aareas)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $icount = $aareas[0][0]
	Local $tareas = DllStructCreate("long[" & $icount * 4 & "]")
	For $ii = 1 To $icount
		DllStructSetData($tareas, 1, DllStructSetData($tareas, 1, $aareas[$ii][0], (($ii - 1) * 4) + 1) + $aareas[$ii][2], (($ii - 1) * 4) + 3)
		DllStructSetData($tareas, 1, DllStructSetData($tareas, 1, $aareas[$ii][1], (($ii - 1) * 4) + 2) + $aareas[$ii][3], (($ii - 1) * 4) + 4)
	Next
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_redeyecorrection)
	DllStructSetData($teffectparameters, "NumberOfAreas", $icount)
	DllStructSetData($teffectparameters, "Areas", DllStructGetPtr($tareas))
	Local $heffect = _gdiplus_effectcreate($gdip_redeyecorrectioneffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters, (DllStructGetSize($tareas) + DllStructGetSize($teffectparameters)) / DllStructGetSize($teffectparameters))
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreatesharpen($fradius = 10, $famount = 50)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_sharpen)
	DllStructSetData($teffectparameters, "Radius", $fradius)
	DllStructSetData($teffectparameters, "Amount", $famount)
	Local $heffect = _gdiplus_effectcreate($gdip_sharpeneffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectcreatetint($ihue = 0, $iamount = 0)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	Local $teffectparameters = DllStructCreate($taggdip_effectparams_tint)
	DllStructSetData($teffectparameters, "Hue", $ihue)
	DllStructSetData($teffectparameters, "Amount", $iamount)
	Local $heffect = _gdiplus_effectcreate($gdip_tinteffectguid)
	If @error Then Return SetError(@error, @extended, 0)
	_gdiplus_effectsetparameters($heffect, $teffectparameters)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return $heffect
EndFunc

Func _gdiplus_effectdispose($heffect)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipDeleteEffect", "handle", $heffect)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_effectgetparameters($heffect, $teffectparameters)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
	If DllStructGetSize($teffectparameters) < __gdiplus_effectgetparametersize($heffect) Then Return SetError(2, 5, False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEffectParameters", "handle", $heffect, "uint*", DllStructGetSize($teffectparameters), "struct*", $teffectparameters)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func __gdiplus_effectgetparametersize($heffect)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, -1)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipGetEffectParameterSize", "handle", $heffect, "uint*", 0)
	If @error Then Return SetError(@error, @extended, -1)
	If $aresult[0] Then Return SetError(10, $aresult[0], -1)
	Return $aresult[2]
EndFunc

Func _gdiplus_effectsetparameters($heffect, $teffectparameters, $isizeadjust = 1)
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, False)
	Local $isize = __gdiplus_effectgetparametersize($heffect)
	If @error Then Return SetError(@error, @extended, False)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipSetEffectParameters", "handle", $heffect, "struct*", $teffectparameters, "uint", $isize * $isizeadjust)
	If @error Then Return SetError(@error, @extended, False)
	If $aresult[0] Then Return SetError(10, $aresult[0], False)
	Return True
EndFunc

Func _gdiplus_paletteinitialize($ientries, $ipalettetype = $gdip_palettetypeoptimal, $ioptimalcolors = 0, $busetransparentcolor = True, $hbitmap = NULL )
	If $__g_bgdip_v1_0 Then Return SetError(-1, 0, 0)
	If $ioptimalcolors > 0 Then $ipalettetype = $gdip_palettetypeoptimal
	Local $tpalette = DllStructCreate("uint Flags; uint Count; uint ARGB[" & $ientries & "];")
	DllStructSetData($tpalette, "Flags", $ipalettetype)
	DllStructSetData($tpalette, "Count", $ientries)
	Local $aresult = DllCall($__g_hgdipdll, "int", "GdipInitializePalette", "struct*", $tpalette, "uint", $ipalettetype, "uint", $ioptimalcolors, "bool", $busetransparentcolor, "handle", $hbitmap)
	If @error Then Return SetError(@error, @extended, 0)
	If $aresult[0] Then Return SetError(10, $aresult[0], 0)
	Return $tpalette
EndFunc

Global $__g_ibmpformat = $gdip_pxf24rgb
Global $__g_ijpgquality = 100
Global $__g_itifcolordepth = 24
Global $__g_itifcompression = $gdip_evtcompressionlzw
Global Const $__screencaptureconstant_sm_cxscreen = 0
Global Const $__screencaptureconstant_sm_cyscreen = 1
Global Const $__screencaptureconstant_srccopy = 13369376

Func _screencapture_capture($sfilename = "", $ileft = 0, $itop = 0, $iright = -1, $ibottom = -1, $bcursor = True)
	Local $bret = False
	If $iright = -1 Then $iright = _winapi_getsystemmetrics($__screencaptureconstant_sm_cxscreen) - 1
	If $ibottom = -1 Then $ibottom = _winapi_getsystemmetrics($__screencaptureconstant_sm_cyscreen) - 1
	If $iright < $ileft Then Return SetError(-1, 0, $bret)
	If $ibottom < $itop Then Return SetError(-2, 0, $bret)
	Local $iw = ($iright - $ileft) + 1
	Local $ih = ($ibottom - $itop) + 1
	Local $hwnd = _winapi_getdesktopwindow()
	Local $hddc = _winapi_getdc($hwnd)
	Local $hcdc = _winapi_createcompatibledc($hddc)
	Local $hbmp = _winapi_createcompatiblebitmap($hddc, $iw, $ih)
	_winapi_selectobject($hcdc, $hbmp)
	_winapi_bitblt($hcdc, 0, 0, $iw, $ih, $hddc, $ileft, $itop, $__screencaptureconstant_srccopy)
	If $bcursor Then
		Local $acursor = _winapi_getcursorinfo()
		If NOT @error AND $acursor[1] Then
			$bcursor = True
			Local $hicon = _winapi_copyicon($acursor[2])
			Local $aicon = _winapi_geticoninfo($hicon)
			If NOT @error Then
				_winapi_deleteobject($aicon[4])
				If $aicon[5] <> 0 Then _winapi_deleteobject($aicon[5])
				_winapi_drawicon($hcdc, $acursor[3] - $aicon[2] - $ileft, $acursor[4] - $aicon[3] - $itop, $hicon)
			EndIf
			_winapi_destroyicon($hicon)
		EndIf
	EndIf
	_winapi_releasedc($hwnd, $hddc)
	_winapi_deletedc($hcdc)
	If $sfilename = "" Then Return $hbmp
	$bret = _screencapture_saveimage($sfilename, $hbmp, True)
	Return SetError(@error, @extended, $bret)
EndFunc

Func _screencapture_capturewnd($sfilename, $hwnd, $ileft = 0, $itop = 0, $iright = -1, $ibottom = -1, $bcursor = True)
	If NOT IsHWnd($hwnd) Then $hwnd = WinGetHandle($hwnd)
	Local $trect = DllStructCreate($tagrect)
	Local Const $dwmwa_extended_frame_bounds = 9
	Local $bret = DllCall("dwmapi.dll", "long", "DwmGetWindowAttribute", "hwnd", $hwnd, "dword", $dwmwa_extended_frame_bounds, "struct*", $trect, "dword", DllStructGetSize($trect))
	If (@error OR $bret[0] OR (Abs(DllStructGetData($trect, "Left")) + Abs(DllStructGetData($trect, "Top")) + Abs(DllStructGetData($trect, "Right")) + Abs(DllStructGetData($trect, "Bottom"))) = 0) Then
		$trect = _winapi_getwindowrect($hwnd)
		If @error Then Return SetError(@error + 10, @extended, False)
	EndIf
	$ileft += DllStructGetData($trect, "Left")
	$itop += DllStructGetData($trect, "Top")
	If $iright = -1 Then $iright = DllStructGetData($trect, "Right") - DllStructGetData($trect, "Left") - 1
	If $ibottom = -1 Then $ibottom = DllStructGetData($trect, "Bottom") - DllStructGetData($trect, "Top") - 1
	$iright += DllStructGetData($trect, "Left")
	$ibottom += DllStructGetData($trect, "Top")
	If $ileft > DllStructGetData($trect, "Right") Then $ileft = DllStructGetData($trect, "Left")
	If $itop > DllStructGetData($trect, "Bottom") Then $itop = DllStructGetData($trect, "Top")
	If $iright > DllStructGetData($trect, "Right") Then $iright = DllStructGetData($trect, "Right") - 1
	If $ibottom > DllStructGetData($trect, "Bottom") Then $ibottom = DllStructGetData($trect, "Bottom") - 1
	$bret = _screencapture_capture($sfilename, $ileft, $itop, $iright, $ibottom, $bcursor)
	Return SetError(@error, @extended, $bret)
EndFunc

Func _screencapture_saveimage($sfilename, $hbitmap, $bfreebmp = True)
	_gdiplus_startup()
	If @error Then Return SetError(-1, -1, False)
	Local $sext = StringUpper(__gdiplus_extractfileext($sfilename))
	Local $sclsid = _gdiplus_encodersgetclsid($sext)
	If $sclsid = "" Then Return SetError(-2, -2, False)
	Local $himage = _gdiplus_bitmapcreatefromhbitmap($hbitmap)
	If @error Then Return SetError(-3, -3, False)
	Local $tdata, $tparams
	Switch $sext
		Case "BMP"
			Local $ix = _gdiplus_imagegetwidth($himage)
			Local $iy = _gdiplus_imagegetheight($himage)
			Local $hclone = _gdiplus_bitmapclonearea($himage, 0, 0, $ix, $iy, $__g_ibmpformat)
			_gdiplus_imagedispose($himage)
			$himage = $hclone
		Case "JPG", "JPEG"
			$tparams = _gdiplus_paraminit(1)
			$tdata = DllStructCreate("int Quality")
			DllStructSetData($tdata, "Quality", $__g_ijpgquality)
			_gdiplus_paramadd($tparams, $gdip_epgquality, 1, $gdip_eptlong, DllStructGetPtr($tdata))
		Case "TIF", "TIFF"
			$tparams = _gdiplus_paraminit(2)
			$tdata = DllStructCreate("int ColorDepth;int Compression")
			DllStructSetData($tdata, "ColorDepth", $__g_itifcolordepth)
			DllStructSetData($tdata, "Compression", $__g_itifcompression)
			_gdiplus_paramadd($tparams, $gdip_epgcolordepth, 1, $gdip_eptlong, DllStructGetPtr($tdata, "ColorDepth"))
			_gdiplus_paramadd($tparams, $gdip_epgcompression, 1, $gdip_eptlong, DllStructGetPtr($tdata, "Compression"))
	EndSwitch
	Local $pparams = 0
	If IsDllStruct($tparams) Then $pparams = $tparams
	Local $bret = _gdiplus_imagesavetofileex($himage, $sfilename, $sclsid, $pparams)
	_gdiplus_imagedispose($himage)
	If $bfreebmp Then _winapi_deleteobject($hbitmap)
	_gdiplus_shutdown()
	Return SetError($bret = False, 0, $bret)
EndFunc

Func _screencapture_setbmpformat($iformat)
	Switch $iformat
		Case 0
			$__g_ibmpformat = $gdip_pxf16rgb555
		Case 1
			$__g_ibmpformat = $gdip_pxf16rgb565
		Case 2
			$__g_ibmpformat = $gdip_pxf24rgb
		Case 3
			$__g_ibmpformat = $gdip_pxf32rgb
		Case 4
			$__g_ibmpformat = $gdip_pxf32argb
		Case Else
			$__g_ibmpformat = $gdip_pxf24rgb
	EndSwitch
EndFunc

Func _screencapture_setjpgquality($iquality)
	If $iquality < 0 Then $iquality = 0
	If $iquality > 100 Then $iquality = 100
	$__g_ijpgquality = $iquality
EndFunc

Func _screencapture_settifcolordepth($idepth)
	Switch $idepth
		Case 24
			$__g_itifcolordepth = 24
		Case 32
			$__g_itifcolordepth = 32
		Case Else
			$__g_itifcolordepth = 0
	EndSwitch
EndFunc

Func _screencapture_settifcompression($icompress)
	Switch $icompress
		Case 1
			$__g_itifcompression = $gdip_evtcompressionnone
		Case 2
			$__g_itifcompression = $gdip_evtcompressionlzw
		Case Else
			$__g_itifcompression = 0
	EndSwitch
EndFunc

Global Const $lbs_notify = 1
Global Const $lbs_sort = 2
Global Const $lbs_noredraw = 4
Global Const $lbs_multiplesel = 8
Global Const $lbs_ownerdrawfixed = 16
Global Const $lbs_ownerdrawvariable = 32
Global Const $lbs_hasstrings = 64
Global Const $lbs_usetabstops = 128
Global Const $lbs_nointegralheight = 256
Global Const $lbs_multicolumn = 512
Global Const $lbs_wantkeyboardinput = 1024
Global Const $lbs_extendedsel = 2048
Global Const $lbs_disablenoscroll = 4096
Global Const $lbs_nodata = 8192
Global Const $lbs_nosel = 16384
Global Const $lbs_combobox = 32768
Global Const $lbs_standard = 3
Global Const $gui_ss_default_list = 10485763
Global Const $lb_err = -1
Global Const $lb_errattribute = -3
Global Const $lb_errrequired = -4
Global Const $lb_errspace = -2
Global Const $lb_addstring = 384
Global Const $lb_insertstring = 385
Global Const $lb_deletestring = 386
Global Const $lb_selitemrangeex = 387
Global Const $lb_resetcontent = 388
Global Const $lb_setsel = 389
Global Const $lb_setcursel = 390
Global Const $lb_getsel = 391
Global Const $lb_getcursel = 392
Global Const $lb_gettext = 393
Global Const $lb_gettextlen = 394
Global Const $lb_getcount = 395
Global Const $lb_selectstring = 396
Global Const $lb_dir = 397
Global Const $lb_gettopindex = 398
Global Const $lb_findstring = 399
Global Const $lb_getselcount = 400
Global Const $lb_getselitems = 401
Global Const $lb_settabstops = 402
Global Const $lb_gethorizontalextent = 403
Global Const $lb_sethorizontalextent = 404
Global Const $lb_setcolumnwidth = 405
Global Const $lb_addfile = 406
Global Const $lb_settopindex = 407
Global Const $lb_getitemrect = 408
Global Const $lb_getitemdata = 409
Global Const $lb_setitemdata = 410
Global Const $lb_selitemrange = 411
Global Const $lb_setanchorindex = 412
Global Const $lb_getanchorindex = 413
Global Const $lb_setcaretindex = 414
Global Const $lb_getcaretindex = 415
Global Const $lb_setitemheight = 416
Global Const $lb_getitemheight = 417
Global Const $lb_findstringexact = 418
Global Const $lb_setlocale = 421
Global Const $lb_getlocale = 422
Global Const $lb_setcount = 423
Global Const $lb_initstorage = 424
Global Const $lb_itemfrompoint = 425
Global Const $lb_multipleaddstring = 433
Global Const $lb_getlistboxinfo = 434
Global Const $lbn_errspace = -2
Global Const $lbn_selchange = 1
Global Const $lbn_dblclk = 2
Global Const $lbn_selcancel = 3
Global Const $lbn_setfocus = 4
Global Const $lbn_killfocus = 5
Global $__g_hlblastwnd
Global Const $__listboxconstant_classname = "ListBox"
Global Const $__listboxconstant_classnames = $__listboxconstant_classname & "|TListbox"
Global Const $__listboxconstant_default_gui_font = 17
Global Const $__listboxconstant_wm_setredraw = 11
Global Const $__listboxconstant_wm_getfont = 49

Func _guictrllistbox_addfile($hwnd, $sfilepath)
	If NOT IsString($sfilepath) Then $sfilepath = String($sfilepath)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_addfile, 0, $sfilepath, 0, "wparam", "wstr")
	Else
		Return GUICtrlSendMsg($hwnd, $lb_addfile, 0, $sfilepath)
	EndIf
EndFunc

Func _guictrllistbox_addstring($hwnd, $stext)
	If NOT IsString($stext) Then $stext = String($stext)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_addstring, 0, $stext, 0, "wparam", "wstr")
	Else
		Return GUICtrlSendMsg($hwnd, $lb_addstring, 0, $stext)
	EndIf
EndFunc

Func _guictrllistbox_beginupdate($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $__listboxconstant_wm_setredraw, False) = 0
EndFunc

Func _guictrllistbox_clickitem($hwnd, $iindex, $sbutton = "left", $bmove = False, $iclicks = 1, $ispeed = 0)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $trect = _guictrllistbox_getitemrectex($hwnd, $iindex)
	Local $tpoint = _winapi_pointfromrect($trect)
	$tpoint = _winapi_clienttoscreen($hwnd, $tpoint)
	Local $ix, $iy
	_winapi_getxyfrompoint($tpoint, $ix, $iy)
	Local $imode = Opt("MouseCoordMode", 1)
	If NOT $bmove Then
		Local $apos = MouseGetPos()
		_winapi_showcursor(False)
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
		MouseMove($apos[0], $apos[1], 0)
		_winapi_showcursor(True)
	Else
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
	EndIf
	Opt("MouseCoordMode", $imode)
EndFunc

Func _guictrllistbox_create($hwnd, $stext, $ix, $iy, $iwidth = 100, $iheight = 200, $istyle = 11534338, $iexstyle = 512)
	If NOT IsHWnd($hwnd) Then
		Return SetError(1, 0, 0)
	EndIf
	If NOT IsString($stext) Then
		Return SetError(2, 0, 0)
	EndIf
	If $iwidth = -1 Then $iwidth = 100
	If $iheight = -1 Then $iheight = 200
	Local Const $ws_vscroll = 2097152, $ws_hscroll = 1048576, $ws_border = 8388608
	If $istyle = -1 Then $istyle = BitOR($ws_border, $ws_vscroll, $ws_hscroll, $lbs_sort)
	If $iexstyle = -1 Then $iexstyle = 512
	$istyle = BitOR($istyle, $__udfguiconstant_ws_visible, $__udfguiconstant_ws_tabstop, $__udfguiconstant_ws_child, $lbs_notify)
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $hlist = _winapi_createwindowex($iexstyle, $__listboxconstant_classname, "", $istyle, $ix, $iy, $iwidth, $iheight, $hwnd, $nctrlid)
	_winapi_setfont($hlist, _winapi_getstockobject($__listboxconstant_default_gui_font))
	If StringLen($stext) Then _guictrllistbox_addstring($hlist, $stext)
	Return $hlist
EndFunc

Func _guictrllistbox_deletestring($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_deletestring, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_deletestring, $iindex, 0)
	EndIf
EndFunc

Func _guictrllistbox_destroy(ByRef $hwnd)
	Local $idestroyed = 0
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hlblastwnd) Then
			Local $nctrlid = _winapi_getdlgctrlid($hwnd)
			Local $hparent = _winapi_getparent($hwnd)
			$idestroyed = _winapi_destroywindow($hwnd)
			Local $iret = __udf_freeglobalid($hparent, $nctrlid)
			If NOT $iret Then
			EndIf
		Else
			Return SetError(1, 1, False)
		EndIf
	Else
		$idestroyed = GUICtrlDelete($hwnd)
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func _guictrllistbox_dir($hwnd, $sfilepath, $iattributes = 0, $bbrackets = True)
	If NOT IsString($sfilepath) Then $sfilepath = String($sfilepath)
	If BitAND($iattributes, $ddl_drives) = $ddl_drives AND NOT $bbrackets Then
		Local $stext
		Local $hgui_no_brackets = GUICreate("no brackets")
		Local $idlist_no_brackets = GUICtrlCreateList("", 240, 40, 120, 120)
		Local $iret = GUICtrlSendMsg($idlist_no_brackets, $lb_dir, $iattributes, $sfilepath)
		For $i = 0 To _guictrllistbox_getcount($idlist_no_brackets) - 1
			$stext = _guictrllistbox_gettext($idlist_no_brackets, $i)
			$stext = StringReplace(StringReplace(StringReplace($stext, "[", ""), "]", ":"), "-", "")
			_guictrllistbox_insertstring($hwnd, $stext)
		Next
		GUIDelete($hgui_no_brackets)
		Return $iret
	Else
		If IsHWnd($hwnd) Then
			Return _sendmessage($hwnd, $lb_dir, $iattributes, $sfilepath, 0, "wparam", "wstr")
		Else
			Return GUICtrlSendMsg($hwnd, $lb_dir, $iattributes, $sfilepath)
		EndIf
	EndIf
EndFunc

Func _guictrllistbox_endupdate($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $__listboxconstant_wm_setredraw, True) = 0
EndFunc

Func _guictrllistbox_findstring($hwnd, $stext, $bexact = False)
	If NOT IsString($stext) Then $stext = String($stext)
	If IsHWnd($hwnd) Then
		If ($bexact) Then
			Return _sendmessage($hwnd, $lb_findstringexact, -1, $stext, 0, "wparam", "wstr")
		Else
			Return _sendmessage($hwnd, $lb_findstring, -1, $stext, 0, "wparam", "wstr")
		EndIf
	Else
		If ($bexact) Then
			Return GUICtrlSendMsg($hwnd, $lb_findstringexact, -1, $stext)
		Else
			Return GUICtrlSendMsg($hwnd, $lb_findstring, -1, $stext)
		EndIf
	EndIf
EndFunc

Func _guictrllistbox_findintext($hwnd, $stext, $istart = -1, $bwrapok = True)
	Local $slist
	Local $icount = _guictrllistbox_getcount($hwnd)
	For $ii = $istart + 1 To $icount - 1
		$slist = _guictrllistbox_gettext($hwnd, $ii)
		If StringInStr($slist, $stext) Then Return $ii
	Next
	If ($istart = -1) OR NOT $bwrapok Then Return -1
	For $ii = 0 To $istart - 1
		$slist = _guictrllistbox_gettext($hwnd, $ii)
		If StringInStr($slist, $stext) Then Return $ii
	Next
	Return -1
EndFunc

Func _guictrllistbox_getanchorindex($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getanchorindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getanchorindex, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_getcaretindex($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getcaretindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getcaretindex, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_getcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getcount)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getcount, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_getcursel($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getcursel)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getcursel, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_gethorizontalextent($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_gethorizontalextent)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_gethorizontalextent, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_getitemdata($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getitemdata, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getitemdata, $iindex, 0)
	EndIf
EndFunc

Func _guictrllistbox_getitemheight($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getitemheight)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getitemheight, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_getitemrect($hwnd, $iindex)
	Local $arect[4]
	Local $trect = _guictrllistbox_getitemrectex($hwnd, $iindex)
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrllistbox_getitemrectex($hwnd, $iindex)
	Local $trect = DllStructCreate($tagrect)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lb_getitemrect, $iindex, $trect, 0, "wparam", "struct*")
	Else
		GUICtrlSendMsg($hwnd, $lb_getitemrect, $iindex, DllStructGetPtr($trect))
	EndIf
	Return $trect
EndFunc

Func _guictrllistbox_getlistboxinfo($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getlistboxinfo)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getlistboxinfo, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_getlocale($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getlocale)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getlocale, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_getlocalecountry($hwnd)
	Return _winapi_hiword(_guictrllistbox_getlocale($hwnd))
EndFunc

Func _guictrllistbox_getlocalelang($hwnd)
	Return _winapi_loword(_guictrllistbox_getlocale($hwnd))
EndFunc

Func _guictrllistbox_getlocaleprimlang($hwnd)
	Return _winapi_primarylangid(_guictrllistbox_getlocalelang($hwnd))
EndFunc

Func _guictrllistbox_getlocalesublang($hwnd)
	Return _winapi_sublangid(_guictrllistbox_getlocalelang($hwnd))
EndFunc

Func _guictrllistbox_getsel($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getsel, $iindex) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getsel, $iindex, 0) <> 0
	EndIf
EndFunc

Func _guictrllistbox_getselcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_getselcount)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_getselcount, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_getselitems($hwnd)
	Local $aarray[1] = [0]
	Local $icount = _guictrllistbox_getselcount($hwnd)
	If $icount > 0 Then
		ReDim $aarray[$icount + 1]
		Local $tarray = DllStructCreate("int[" & $icount & "]")
		If IsHWnd($hwnd) Then
			_sendmessage($hwnd, $lb_getselitems, $icount, $tarray, 0, "wparam", "struct*")
		Else
			GUICtrlSendMsg($hwnd, $lb_getselitems, $icount, DllStructGetPtr($tarray))
		EndIf
		$aarray[0] = $icount
		For $ii = 1 To $icount
			$aarray[$ii] = DllStructGetData($tarray, 1, $ii)
		Next
	EndIf
	Return $aarray
EndFunc

Func _guictrllistbox_getselitemstext($hwnd)
	Local $atext[1] = [0], $icount = _guictrllistbox_getselcount($hwnd)
	If $icount > 0 Then
		Local $aindices = _guictrllistbox_getselitems($hwnd)
		ReDim $atext[UBound($aindices)]
		$atext[0] = $aindices[0]
		For $i = 1 To $aindices[0]
			$atext[$i] = _guictrllistbox_gettext($hwnd, $aindices[$i])
		Next
	EndIf
	Return $atext
EndFunc

Func _guictrllistbox_gettext($hwnd, $iindex)
	Local $ttext = DllStructCreate("wchar Text[" & _guictrllistbox_gettextlen($hwnd, $iindex) + 1 & "]")
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	_sendmessage($hwnd, $lb_gettext, $iindex, $ttext, 0, "wparam", "struct*")
	Return DllStructGetData($ttext, "Text")
EndFunc

Func _guictrllistbox_gettextlen($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_gettextlen, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_gettextlen, $iindex, 0)
	EndIf
EndFunc

Func _guictrllistbox_gettopindex($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_gettopindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_gettopindex, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_initstorage($hwnd, $iitems, $ibytes)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_initstorage, $iitems, $ibytes)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_initstorage, $iitems, $ibytes)
	EndIf
EndFunc

Func _guictrllistbox_insertstring($hwnd, $stext, $iindex = -1)
	If NOT IsString($stext) Then $stext = String($stext)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_insertstring, $iindex, $stext, 0, "wparam", "wstr")
	Else
		Return GUICtrlSendMsg($hwnd, $lb_insertstring, $iindex, $stext)
	EndIf
EndFunc

Func _guictrllistbox_itemfrompoint($hwnd, $ix, $iy)
	Local $iret
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lb_itemfrompoint, 0, _winapi_makelong($ix, $iy))
	Else
		$iret = GUICtrlSendMsg($hwnd, $lb_itemfrompoint, 0, _winapi_makelong($ix, $iy))
	EndIf
	If _winapi_hiword($iret) <> 0 Then $iret = -1
	Return $iret
EndFunc

Func _guictrllistbox_replacestring($hwnd, $iindex, $stext)
	If (_guictrllistbox_deletestring($hwnd, $iindex) == $lb_err) Then Return SetError($lb_err, $lb_err, False)
	If (_guictrllistbox_insertstring($hwnd, $stext, $iindex) == $lb_err) Then Return SetError($lb_err, $lb_err, False)
	Return True
EndFunc

Func _guictrllistbox_resetcontent($hwnd)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lb_resetcontent)
	Else
		GUICtrlSendMsg($hwnd, $lb_resetcontent, 0, 0)
	EndIf
EndFunc

Func _guictrllistbox_selectstring($hwnd, $stext, $iindex = -1)
	If NOT IsString($stext) Then $stext = String($stext)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_selectstring, $iindex, $stext, 0, "wparam", "wstr")
	Else
		Return GUICtrlSendMsg($hwnd, $lb_selectstring, $iindex, $stext)
	EndIf
EndFunc

Func _guictrllistbox_selitemrange($hwnd, $ifirst, $ilast, $bselect = True)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_selitemrange, $bselect, _winapi_makelong($ifirst, $ilast)) = 0
	Else
		Return GUICtrlSendMsg($hwnd, $lb_selitemrange, $bselect, _winapi_makelong($ifirst, $ilast)) = 0
	EndIf
EndFunc

Func _guictrllistbox_selitemrangeex($hwnd, $ifirst, $ilast)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_selitemrangeex, $ifirst, $ilast) = 0
	Else
		Return GUICtrlSendMsg($hwnd, $lb_selitemrangeex, $ifirst, $ilast) = 0
	EndIf
EndFunc

Func _guictrllistbox_setanchorindex($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_setanchorindex, $iindex) = 0
	Else
		Return GUICtrlSendMsg($hwnd, $lb_setanchorindex, $iindex, 0) = 0
	EndIf
EndFunc

Func _guictrllistbox_setcaretindex($hwnd, $iindex, $bpartial = False)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_setcaretindex, $iindex, $bpartial) = 0
	Else
		Return GUICtrlSendMsg($hwnd, $lb_setcaretindex, $iindex, $bpartial) = 0
	EndIf
EndFunc

Func _guictrllistbox_setcolumnwidth($hwnd, $iwidth)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lb_setcolumnwidth, $iwidth)
	Else
		GUICtrlSendMsg($hwnd, $lb_setcolumnwidth, $iwidth, 0)
	EndIf
EndFunc

Func _guictrllistbox_setcursel($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_setcursel, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_setcursel, $iindex, 0)
	EndIf
EndFunc

Func _guictrllistbox_sethorizontalextent($hwnd, $iwidth)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $lb_sethorizontalextent, $iwidth)
	Else
		GUICtrlSendMsg($hwnd, $lb_sethorizontalextent, $iwidth, 0)
	EndIf
EndFunc

Func _guictrllistbox_setitemdata($hwnd, $iindex, $ivalue)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_setitemdata, $iindex, $ivalue) <> -1
	Else
		Return GUICtrlSendMsg($hwnd, $lb_setitemdata, $iindex, $ivalue) <> -1
	EndIf
EndFunc

Func _guictrllistbox_setitemheight($hwnd, $iheight, $iindex = 0)
	Local $iret
	If IsHWnd($hwnd) Then
		$iret = _sendmessage($hwnd, $lb_setitemheight, $iindex, $iheight)
		_winapi_invalidaterect($hwnd)
	Else
		$iret = GUICtrlSendMsg($hwnd, $lb_setitemheight, $iindex, $iheight)
		_winapi_invalidaterect(GUICtrlGetHandle($hwnd))
	EndIf
	Return $iret <> -1
EndFunc

Func _guictrllistbox_setlocale($hwnd, $ilocal)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_setlocale, $ilocal)
	Else
		Return GUICtrlSendMsg($hwnd, $lb_setlocale, $ilocal, 0)
	EndIf
EndFunc

Func _guictrllistbox_setsel($hwnd, $iindex = -1, $iselect = -1)
	Local $i_ret = 1
	If IsHWnd($hwnd) Then
		If $iindex == -1 Then
			For $iindex = 0 To _guictrllistbox_getcount($hwnd) - 1
				$i_ret = _guictrllistbox_getsel($hwnd, $iindex)
				If ($i_ret == $lb_err) Then Return SetError($lb_err, $lb_err, False)
				If ($i_ret > 0) Then
					$i_ret = _sendmessage($hwnd, $lb_setsel, False, $iindex) <> -1
				Else
					$i_ret = _sendmessage($hwnd, $lb_setsel, True, $iindex) <> -1
				EndIf
				If ($i_ret == False) Then Return SetError($lb_err, $lb_err, False)
			Next
		ElseIf $iselect == -1 Then
			If _guictrllistbox_getsel($hwnd, $iindex) Then
				Return _sendmessage($hwnd, $lb_setsel, False, $iindex) <> -1
			Else
				Return _sendmessage($hwnd, $lb_setsel, True, $iindex) <> -1
			EndIf
		Else
			Return _sendmessage($hwnd, $lb_setsel, $iselect, $iindex) <> -1
		EndIf
	Else
		If $iindex == -1 Then
			For $iindex = 0 To _guictrllistbox_getcount($hwnd) - 1
				$i_ret = _guictrllistbox_getsel($hwnd, $iindex)
				If ($i_ret == $lb_err) Then Return SetError($lb_err, $lb_err, False)
				If ($i_ret > 0) Then
					$i_ret = GUICtrlSendMsg($hwnd, $lb_setsel, False, $iindex) <> -1
				Else
					$i_ret = GUICtrlSendMsg($hwnd, $lb_setsel, True, $iindex) <> -1
				EndIf
				If ($i_ret == 0) Then Return SetError($lb_err, $lb_err, False)
			Next
		ElseIf $iselect == -1 Then
			If _guictrllistbox_getsel($hwnd, $iindex) Then
				Return GUICtrlSendMsg($hwnd, $lb_setsel, False, $iindex) <> -1
			Else
				Return GUICtrlSendMsg($hwnd, $lb_setsel, True, $iindex) <> -1
			EndIf
		Else
			Return GUICtrlSendMsg($hwnd, $lb_setsel, $iselect, $iindex) <> -1
		EndIf
	EndIf
	Return $i_ret <> 0
EndFunc

Func _guictrllistbox_settabstops($hwnd, $atabstops)
	Local $icount = $atabstops[0]
	Local $ttabstops = DllStructCreate("int[" & $icount & "]")
	For $ii = 1 To $icount
		DllStructSetData($ttabstops, 1, $atabstops[$ii], $ii)
	Next
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_settabstops, $icount, $ttabstops, 0, "wparam", "struct*") = 0
	Else
		Return GUICtrlSendMsg($hwnd, $lb_settabstops, $icount, DllStructGetPtr($ttabstops)) = 0
	EndIf
EndFunc

Func _guictrllistbox_settopindex($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $lb_settopindex, $iindex) <> -1
	Else
		Return GUICtrlSendMsg($hwnd, $lb_settopindex, $iindex, 0) <> -1
	EndIf
EndFunc

Func _guictrllistbox_sort($hwnd)
	Local $sbak = _guictrllistbox_gettext($hwnd, 0)
	If ($sbak == -1) Then Return SetError($lb_err, $lb_err, False)
	If (_guictrllistbox_deletestring($hwnd, 0) == -1) Then Return SetError($lb_err, $lb_err, False)
	Return _guictrllistbox_addstring($hwnd, $sbak) <> -1
EndFunc

Func _guictrllistbox_swapstring($hwnd, $iindexa, $iindexb)
	Local $sitema = _guictrllistbox_gettext($hwnd, $iindexa)
	Local $sitemb = _guictrllistbox_gettext($hwnd, $iindexb)
	If (_guictrllistbox_deletestring($hwnd, $iindexa) == -1) Then Return SetError($lb_err, $lb_err, False)
	If (_guictrllistbox_insertstring($hwnd, $sitemb, $iindexa) == -1) Then Return SetError($lb_err, $lb_err, False)
	If (_guictrllistbox_deletestring($hwnd, $iindexb) == -1) Then Return SetError($lb_err, $lb_err, False)
	If (_guictrllistbox_insertstring($hwnd, $sitema, $iindexb) == -1) Then Return SetError($lb_err, $lb_err, False)
	Return True
EndFunc

Func _guictrllistbox_updatehscroll($hwnd)
	Local $hdc, $hfont, $tsize, $stext
	Local $imax = 0
	If IsHWnd($hwnd) Then
		$hfont = _sendmessage($hwnd, $__listboxconstant_wm_getfont)
		$hdc = _winapi_getdc($hwnd)
		_winapi_selectobject($hdc, $hfont)
		For $ii = 0 To _guictrllistbox_getcount($hwnd) - 1
			$stext = _guictrllistbox_gettext($hwnd, $ii)
			$tsize = _winapi_gettextextentpoint32($hdc, $stext & "W")
			If DllStructGetData($tsize, "X") > $imax Then
				$imax = DllStructGetData($tsize, "X")
			EndIf
		Next
		_guictrllistbox_sethorizontalextent($hwnd, $imax)
		_winapi_selectobject($hdc, $hfont)
		_winapi_releasedc($hwnd, $hdc)
	Else
		$hfont = GUICtrlSendMsg($hwnd, $__listboxconstant_wm_getfont, 0, 0)
		Local $hwnd_t = GUICtrlGetHandle($hwnd)
		$hdc = _winapi_getdc($hwnd_t)
		_winapi_selectobject($hdc, $hfont)
		For $ii = 0 To _guictrllistbox_getcount($hwnd) - 1
			$stext = _guictrllistbox_gettext($hwnd, $ii)
			$tsize = _winapi_gettextextentpoint32($hdc, $stext & "W")
			If DllStructGetData($tsize, "X") > $imax Then
				$imax = DllStructGetData($tsize, "X")
			EndIf
		Next
		_guictrllistbox_sethorizontalextent($hwnd, $imax)
		_winapi_selectobject($hdc, $hfont)
		_winapi_releasedc($hwnd_t, $hdc)
	EndIf
EndFunc

Global Const $pbs_marquee = 8
Global Const $pbs_smooth = 1
Global Const $pbs_smoothreverse = 16
Global Const $pbs_vertical = 4
Global Const $gui_ss_default_progress = 0
Global Const $__progressbarconstant_wm_user = 1024
Global Const $pbm_deltapos = $__progressbarconstant_wm_user + 3
Global Const $pbm_getbarcolor = 1039
Global Const $pbm_getbkcolor = 1038
Global Const $pbm_getpos = $__progressbarconstant_wm_user + 8
Global Const $pbm_getrange = $__progressbarconstant_wm_user + 7
Global Const $pbm_getstate = 1041
Global Const $pbm_getstep = 1037
Global Const $pbm_setbarcolor = $__progressbarconstant_wm_user + 9
Global Const $pbm_setbkcolor = 8192 + 1
Global Const $pbm_setmarquee = $__progressbarconstant_wm_user + 10
Global Const $pbm_setpos = $__progressbarconstant_wm_user + 2
Global Const $pbm_setrange = $__progressbarconstant_wm_user + 1
Global Const $pbm_setrange32 = $__progressbarconstant_wm_user + 6
Global Const $pbm_setstate = 1040
Global Const $pbm_setstep = $__progressbarconstant_wm_user + 4
Global Const $pbm_stepit = $__progressbarconstant_wm_user + 5
Global Const $tcs_ex_flatseparators = 1
Global Const $tcs_ex_registerdrop = 2
Global Const $tcht_nowhere = 1
Global Const $tcht_onitemicon = 2
Global Const $tcht_onitemlabel = 4
Global Const $tcht_onitem = 6
Global Const $tcif_text = 1
Global Const $tcif_image = 2
Global Const $tcif_rtlreading = 4
Global Const $tcif_param = 8
Global Const $tcif_state = 16
Global Const $tcif_alldata = 27
Global Const $tcis_buttonpressed = 1
Global Const $tcis_highlighted = 2
Global Const $tc_err = -1
Global Const $tcs_bottom = 2
Global Const $tcs_buttons = 256
Global Const $tcs_fixedwidth = 1024
Global Const $tcs_flatbuttons = 8
Global Const $tcs_focusnever = 32768
Global Const $tcs_focusonbuttondown = 4096
Global Const $tcs_forceiconleft = 16
Global Const $tcs_forcelabelleft = 32
Global Const $tcs_hottrack = 64
Global Const $tcs_multiline = 512
Global Const $tcs_multiselect = 4
Global Const $tcs_ownerdrawfixed = 8192
Global Const $tcs_raggedright = 2048
Global Const $tcs_right = 2
Global Const $tcs_rightjustify = 0
Global Const $tcs_scrollopposite = 1
Global Const $tcs_singleline = 0
Global Const $tcs_tabs = 0
Global Const $tcs_tooltips = 16384
Global Const $tcs_vertical = 128
Global Const $gui_ss_default_tab = 0
Global Const $tcm_first = 4864
Global Const $tccm_first = 8192
Global Const $tcm_adjustrect = ($tcm_first + 40)
Global Const $tcm_deleteallitems = ($tcm_first + 9)
Global Const $tcm_deleteitem = ($tcm_first + 8)
Global Const $tcm_deselectall = ($tcm_first + 50)
Global Const $tcm_getcurfocus = ($tcm_first + 47)
Global Const $tcm_getcursel = ($tcm_first + 11)
Global Const $tcm_getextendedstyle = ($tcm_first + 53)
Global Const $tcm_getimagelist = ($tcm_first + 2)
Global Const $tcm_getitema = ($tcm_first + 5)
Global Const $tcm_getitemw = ($tcm_first + 60)
Global Const $tcm_getitemcount = ($tcm_first + 4)
Global Const $tcm_getitemrect = ($tcm_first + 10)
Global Const $tcm_getrowcount = ($tcm_first + 44)
Global Const $tcm_gettooltips = ($tcm_first + 45)
Global Const $tccm_getunicodeformat = ($tccm_first + 6)
Global Const $tcm_getunicodeformat = $tccm_getunicodeformat
Global Const $tcm_highlightitem = ($tcm_first + 51)
Global Const $tcm_hittest = ($tcm_first + 13)
Global Const $tcm_insertitema = ($tcm_first + 7)
Global Const $tcm_insertitemw = ($tcm_first + 62)
Global Const $tcm_removeimage = ($tcm_first + 42)
Global Const $tcm_setitema = ($tcm_first + 6)
Global Const $tcm_setitemw = ($tcm_first + 61)
Global Const $tcm_setitemextra = ($tcm_first + 14)
Global Const $tcm_setitemsize = $tcm_first + 41
Global Const $tcm_setcurfocus = ($tcm_first + 48)
Global Const $tcm_setcursel = ($tcm_first + 12)
Global Const $tcm_setextendedstyle = ($tcm_first + 52)
Global Const $tcm_setimagelist = $tcm_first + 3
Global Const $tcm_setmintabwidth = ($tcm_first + 49)
Global Const $tcm_setpadding = ($tcm_first + 43)
Global Const $tcm_settooltips = ($tcm_first + 46)
Global Const $tccm_setunicodeformat = ($tccm_first + 5)
Global Const $tcm_setunicodeformat = $tccm_setunicodeformat
Global Const $tcn_first = -550
Global Const $tcn_focuschange = ($tcn_first - 4)
Global Const $tcn_getobject = ($tcn_first - 3)
Global Const $tcn_keydown = ($tcn_first + 0)
Global Const $tcn_selchange = ($tcn_first - 1)
Global Const $tcn_selchanging = ($tcn_first - 2)
Global $__g_htablastwnd
Global Const $__tabconstant_classname = "SysTabControl32"
Global Const $__tabconstant_ws_clipsiblings = 67108864
Global Const $__tabconstant_wm_notify = 78
Global Const $__tabconstant_default_gui_font = 17
Global Const $tagtcitem = "uint Mask;dword State;dword StateMask;ptr Text;int TextMax;int Image;lparam Param"
Global Const $tagtchittestinfo = $tagpoint & ";uint Flags"

Func __guictrltab_adjustrect($hwnd, ByRef $trect, $blarger = False)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			_sendmessage($hwnd, $tcm_adjustrect, $blarger, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_memwrite($tmemmap, $trect)
			_sendmessage($hwnd, $tcm_adjustrect, $blarger, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	EndIf
	Return $trect
EndFunc

Func _guictrltab_activatetab($hwnd, $iindex)
	Local $nindx
	If $hwnd = -1 Then $hwnd = GUICtrlGetHandle(-1)
	If IsHWnd($hwnd) Then
		$nindx = _winapi_getdlgctrlid($hwnd)
	Else
		$nindx = $hwnd
		$hwnd = GUICtrlGetHandle($hwnd)
	EndIf
	Local $hparent = _winapi_getparent($hwnd)
	If @error Then Return SetError(1, 0, -1)
	Local $tnmhdr = DllStructCreate($tagnmhdr)
	DllStructSetData($tnmhdr, 1, $hwnd)
	DllStructSetData($tnmhdr, 2, $nindx)
	DllStructSetData($tnmhdr, 3, $tcn_selchanging)
	_sendmessage($hparent, $__tabconstant_wm_notify, $nindx, $tnmhdr, 0, "wparam", "struct*")
	Local $iret = _guictrltab_setcursel($hwnd, $iindex)
	DllStructSetData($tnmhdr, 3, $tcn_selchange)
	_sendmessage($hparent, $__tabconstant_wm_notify, $nindx, $tnmhdr, 0, "wparam", "struct*")
	Return $iret
EndFunc

Func _guictrltab_clicktab($hwnd, $iindex, $sbutton = "left", $bmove = False, $iclicks = 1, $ispeed = 1)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $ix, $iy
	If NOT $bmove Then
		Local $hwinparent = _winapi_getparent($hwnd)
		Local $avtabpos = _guictrltab_getitemrect($hwnd, $iindex)
		$ix = $avtabpos[0] + (($avtabpos[2] - $avtabpos[0]) / 2)
		$iy = $avtabpos[1] + (($avtabpos[3] - $avtabpos[1]) / 2)
		ControlClick($hwinparent, "", $hwnd, $sbutton, $iclicks, $ix, $iy)
	Else
		Local $trect = _guictrltab_getitemrectex($hwnd, $iindex)
		Local $tpoint = _winapi_pointfromrect($trect, True)
		$tpoint = _winapi_clienttoscreen($hwnd, $tpoint)
		_winapi_getxyfrompoint($tpoint, $ix, $iy)
		Local $imode = Opt("MouseCoordMode", 1)
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
		Opt("MouseCoordMode", $imode)
	EndIf
EndFunc

Func _guictrltab_create($hwnd, $ix, $iy, $iwidth = 150, $iheight = 150, $istyle = 64, $iexstyle = 0)
	If NOT IsHWnd($hwnd) Then
		Return SetError(1, 0, 0)
	EndIf
	If $iwidth = -1 Then $iwidth = 150
	If $iheight = -1 Then $iheight = 150
	If $istyle = -1 Then $istyle = $tcs_hottrack
	If $iexstyle = -1 Then $iexstyle = 0
	$istyle = BitOR($istyle, $__udfguiconstant_ws_child, $__tabconstant_ws_clipsiblings, $__udfguiconstant_ws_visible)
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $htab = _winapi_createwindowex($iexstyle, $__tabconstant_classname, "", $istyle, $ix, $iy, $iwidth, $iheight, $hwnd, $nctrlid)
	_winapi_setfont($htab, _winapi_getstockobject($__tabconstant_default_gui_font))
	Return $htab
EndFunc

Func _guictrltab_deleteallitems($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_deleteallitems) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_deleteallitems, 0, 0) <> 0
	EndIf
EndFunc

Func _guictrltab_deleteitem($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_deleteitem, $iindex) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_deleteitem, $iindex, 0) <> 0
	EndIf
EndFunc

Func _guictrltab_deselectall($hwnd, $bexclude = True)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_deselectall, $bexclude)
	Else
		GUICtrlSendMsg($hwnd, $tcm_deselectall, $bexclude, 0)
	EndIf
EndFunc

Func _guictrltab_destroy(ByRef $hwnd)
	If NOT _winapi_isclassname($hwnd, $__tabconstant_classname) Then Return SetError(2, 2, False)
	Local $idestroyed = 0
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			Local $nctrlid = _winapi_getdlgctrlid($hwnd)
			Local $hparent = _winapi_getparent($hwnd)
			$idestroyed = _winapi_destroywindow($hwnd)
			Local $iret = __udf_freeglobalid($hparent, $nctrlid)
			If NOT $iret Then
			EndIf
		Else
			Return SetError(1, 1, False)
		EndIf
	Else
		$idestroyed = GUICtrlDelete($hwnd)
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func _guictrltab_findtab($hwnd, $stext, $binstr = False, $istart = 0)
	Local $stab
	For $ii = $istart To _guictrltab_getitemcount($hwnd)
		$stab = _guictrltab_getitemtext($hwnd, $ii)
		Switch $binstr
			Case False
				If $stab = $stext Then Return $ii
			Case True
				If StringInStr($stab, $stext) Then Return $ii
		EndSwitch
	Next
	Return -1
EndFunc

Func _guictrltab_getcurfocus($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getcurfocus)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getcurfocus, 0, 0)
	EndIf
EndFunc

Func _guictrltab_getcursel($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getcursel)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getcursel, 0, 0)
	EndIf
EndFunc

Func _guictrltab_getdisplayrect($hwnd)
	Local $arect[4]
	Local $trect = _guictrltab_getdisplayrectex($hwnd)
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrltab_getdisplayrectex($hwnd)
	Local $trect = _winapi_getclientrect($hwnd)
	Return __guictrltab_adjustrect($hwnd, $trect)
EndFunc

Func _guictrltab_getextendedstyle($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getextendedstyle)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getextendedstyle, 0, 0)
	EndIf
EndFunc

Func _guictrltab_getimagelist($hwnd)
	If IsHWnd($hwnd) Then
		Return Ptr(_sendmessage($hwnd, $tcm_getimagelist))
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $tcm_getimagelist, 0, 0))
	EndIf
EndFunc

Func _guictrltab_getitem($hwnd, $iindex)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $bunicode = _guictrltab_getunicodeformat($hwnd)
	Local $ibuffer = 4096
	Local $tagtcitemex = $tagtcitem & ";ptr Filler"
	Local $titem = DllStructCreate($tagtcitemex)
	DllStructSetData($titem, "Mask", $tcif_alldata)
	DllStructSetData($titem, "TextMax", $ibuffer)
	DllStructSetData($titem, "StateMask", BitOR($tcis_highlighted, $tcis_buttonpressed))
	Local $iitem = DllStructGetSize($titem)
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $tmemmap
	Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
	Local $ptext = $pmemory + $iitem
	DllStructSetData($titem, "Text", $ptext)
	_memwrite($tmemmap, $titem, $pmemory, $iitem)
	Local $iret
	If $bunicode Then
		$iret = _sendmessage($hwnd, $tcm_getitemw, $iindex, $pmemory)
	Else
		$iret = _sendmessage($hwnd, $tcm_getitema, $iindex, $pmemory)
	EndIf
	_memread($tmemmap, $pmemory, $titem, $iitem)
	_memread($tmemmap, $ptext, $tbuffer, $ibuffer)
	_memfree($tmemmap)
	Local $aitem[4]
	$aitem[0] = DllStructGetData($titem, "State")
	$aitem[1] = DllStructGetData($tbuffer, "Text")
	$aitem[2] = DllStructGetData($titem, "Image")
	$aitem[3] = DllStructGetData($titem, "Param")
	Return SetError($iret = 0, 0, $aitem)
EndFunc

Func _guictrltab_getitemcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getitemcount)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getitemcount, 0, 0)
	EndIf
EndFunc

Func _guictrltab_getitemimage($hwnd, $iindex)
	Local $aitem = _guictrltab_getitem($hwnd, $iindex)
	Return $aitem[2]
EndFunc

Func _guictrltab_getitemparam($hwnd, $iindex)
	Local $aitem = _guictrltab_getitem($hwnd, $iindex)
	Return $aitem[3]
EndFunc

Func _guictrltab_getitemrect($hwnd, $iindex)
	Local $arect[4]
	Local $trect = _guictrltab_getitemrectex($hwnd, $iindex)
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrltab_getitemrectex($hwnd, $iindex)
	Local $trect = DllStructCreate($tagrect)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			_sendmessage($hwnd, $tcm_getitemrect, $iindex, $trect, 0, "wparam", "struct*")
		Else
			Local $irect = DllStructGetSize($trect)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
			_sendmessage($hwnd, $tcm_getitemrect, $iindex, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $trect, $irect)
			_memfree($tmemmap)
		EndIf
	Else
		GUICtrlSendMsg($hwnd, $tcm_getitemrect, $iindex, DllStructGetPtr($trect))
	EndIf
	Return $trect
EndFunc

Func _guictrltab_getitemstate($hwnd, $iindex)
	Local $aitem = _guictrltab_getitem($hwnd, $iindex)
	Return $aitem[0]
EndFunc

Func _guictrltab_getitemtext($hwnd, $iindex)
	Local $aitem = _guictrltab_getitem($hwnd, $iindex)
	Return $aitem[1]
EndFunc

Func _guictrltab_getrowcount($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getrowcount)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getrowcount, 0, 0)
	EndIf
EndFunc

Func _guictrltab_gettooltips($hwnd)
	If IsHWnd($hwnd) Then
		Return HWnd(_sendmessage($hwnd, $tcm_gettooltips))
	Else
		Return HWnd(GUICtrlSendMsg($hwnd, $tcm_gettooltips, 0, 0))
	EndIf
EndFunc

Func _guictrltab_getunicodeformat($hwnd)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_getunicodeformat) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_getunicodeformat, 0, 0) <> 0
	EndIf
EndFunc

Func _guictrltab_highlightitem($hwnd, $iindex, $bhighlight = True)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_highlightitem, $iindex, $bhighlight) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_highlightitem, $iindex, $bhighlight) <> 0
	EndIf
EndFunc

Func _guictrltab_hittest($hwnd, $ix, $iy)
	Local $ahit[2] = [-1, 1]
	Local $thit = DllStructCreate($tagtchittestinfo)
	DllStructSetData($thit, "X", $ix)
	DllStructSetData($thit, "Y", $iy)
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			$ahit[0] = _sendmessage($hwnd, $tcm_hittest, 0, $thit, 0, "wparam", "struct*")
		Else
			Local $ihit = DllStructGetSize($thit)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $ihit, $tmemmap)
			_memwrite($tmemmap, $thit)
			$ahit[0] = _sendmessage($hwnd, $tcm_hittest, 0, $pmemory, 0, "wparam", "ptr")
			_memread($tmemmap, $pmemory, $thit, $ihit)
			_memfree($tmemmap)
		EndIf
	Else
		$ahit[0] = GUICtrlSendMsg($hwnd, $tcm_hittest, 0, DllStructGetPtr($thit))
	EndIf
	$ahit[1] = DllStructGetData($thit, "Flags")
	Return $ahit
EndFunc

Func _guictrltab_insertitem($hwnd, $iindex, $stext, $iimage = -1, $iparam = 0)
	Local $bunicode = _guictrltab_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $titem = DllStructCreate($tagtcitem)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($titem, "Mask", BitOR($tcif_text, $tcif_image, $tcif_param))
	DllStructSetData($titem, "TextMax", $ibuffer)
	DllStructSetData($titem, "Image", $iimage)
	DllStructSetData($titem, "Param", $iparam)
	Local $iret
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_htablastwnd) Then
			DllStructSetData($titem, "Text", $pbuffer)
			$iret = _sendmessage($hwnd, $tcm_insertitemw, $iindex, $titem, 0, "wparam", "struct*")
		Else
			Local $iitem = DllStructGetSize($titem)
			Local $tmemmap
			Local $pmemory = _meminit($hwnd, $iitem + $ibuffer, $tmemmap)
			Local $ptext = $pmemory + $iitem
			DllStructSetData($titem, "Text", $ptext)
			_memwrite($tmemmap, $titem, $pmemory, $iitem)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
			If $bunicode Then
				$iret = _sendmessage($hwnd, $tcm_insertitemw, $iindex, $pmemory, 0, "wparam", "ptr")
			Else
				$iret = _sendmessage($hwnd, $tcm_insertitema, $iindex, $pmemory, 0, "wparam", "ptr")
			EndIf
			_memfree($tmemmap)
		EndIf
	Else
		Local $pitem = DllStructGetPtr($titem)
		DllStructSetData($titem, "Text", $pbuffer)
		If $bunicode Then
			$iret = GUICtrlSendMsg($hwnd, $tcm_insertitemw, $iindex, $pitem)
		Else
			$iret = GUICtrlSendMsg($hwnd, $tcm_insertitema, $iindex, $pitem)
		EndIf
	EndIf
	Return $iret
EndFunc

Func _guictrltab_removeimage($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_removeimage, $iindex)
		_winapi_invalidaterect($hwnd)
	Else
		GUICtrlSendMsg($hwnd, $tcm_removeimage, $iindex, 0)
	EndIf
EndFunc

Func _guictrltab_setcurfocus($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_setcurfocus, $iindex)
	Else
		GUICtrlSendMsg($hwnd, $tcm_setcurfocus, $iindex, 0)
	EndIf
EndFunc

Func _guictrltab_setcursel($hwnd, $iindex)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setcursel, $iindex)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setcursel, $iindex, 0)
	EndIf
EndFunc

Func _guictrltab_setextendedstyle($hwnd, $istyle)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setextendedstyle, 0, $istyle)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setextendedstyle, 0, $istyle)
	EndIf
EndFunc

Func _guictrltab_setimagelist($hwnd, $himage)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setimagelist, 0, $himage, 0, "wparam", "handle", "handle")
	Else
		Return Ptr(GUICtrlSendMsg($hwnd, $tcm_setimagelist, 0, $himage))
	EndIf
EndFunc

Func _guictrltab_setitem($hwnd, $iindex, $stext = -1, $istate = -1, $iimage = -1, $iparam = -1)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $titem = DllStructCreate($tagtcitem)
	Local $ibuffer, $tbuffer, $imask = 0, $iret
	Local $bunicode = _guictrltab_getunicodeformat($hwnd)
	If IsString($stext) Then
		$ibuffer = StringLen($stext) + 1
		If $bunicode Then
			$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
			$ibuffer *= 2
		Else
			$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
		EndIf
		DllStructSetData($tbuffer, "Text", $stext)
		DllStructSetData($titem, "Text", DllStructGetPtr($tbuffer))
		$imask = $tcif_text
	EndIf
	If $istate <> -1 Then
		DllStructSetData($titem, "State", $istate)
		DllStructSetData($titem, "StateMask", $istate)
		$imask = BitOR($imask, $tcif_state)
	EndIf
	If $iimage <> -1 Then
		DllStructSetData($titem, "Image", $iimage)
		$imask = BitOR($imask, $tcif_image)
	EndIf
	If $iparam <> -1 Then
		DllStructSetData($titem, "Param", $iparam)
		$imask = BitOR($imask, $tcif_param)
	EndIf
	DllStructSetData($titem, "Mask", $imask)
	Local $iitem = DllStructGetSize($titem)
	Local $tmemmap
	Local $pmemory = _meminit($hwnd, $iitem + 8192, $tmemmap)
	Local $ptext = $pmemory + 4096
	DllStructSetData($titem, "Text", $ptext)
	_memwrite($tmemmap, $titem, $pmemory, $iitem)
	If IsString($stext) Then _memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
	If $bunicode Then
		$iret = _sendmessage($hwnd, $tcm_setitemw, $iindex, $pmemory) <> 0
	Else
		$iret = _sendmessage($hwnd, $tcm_setitema, $iindex, $pmemory) <> 0
	EndIf
	_memfree($tmemmap)
	Return $iret
EndFunc

Func _guictrltab_setitemimage($hwnd, $iindex, $iimage)
	Return _guictrltab_setitem($hwnd, $iindex, -1, -1, $iimage)
EndFunc

Func _guictrltab_setitemparam($hwnd, $iindex, $iparam)
	Return _guictrltab_setitem($hwnd, $iindex, -1, -1, -1, $iparam)
EndFunc

Func _guictrltab_setitemsize($hwnd, $iwidth, $iheight)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setitemsize, 0, _winapi_makelong($iwidth, $iheight))
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setitemsize, 0, _winapi_makelong($iwidth, $iheight))
	EndIf
EndFunc

Func _guictrltab_setitemstate($hwnd, $iindex, $istate)
	Return _guictrltab_setitem($hwnd, $iindex, -1, $istate)
EndFunc

Func _guictrltab_setitemtext($hwnd, $iindex, $stext)
	Return _guictrltab_setitem($hwnd, $iindex, $stext)
EndFunc

Func _guictrltab_setmintabwidth($hwnd, $iminwidth)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setmintabwidth, 0, $iminwidth)
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setmintabwidth, 0, $iminwidth)
	EndIf
EndFunc

Func _guictrltab_setpadding($hwnd, $ihorz, $ivert)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_setpadding, 0, _winapi_makelong($ihorz, $ivert))
	Else
		GUICtrlSendMsg($hwnd, $tcm_setpadding, 0, _winapi_makelong($ihorz, $ivert))
	EndIf
EndFunc

Func _guictrltab_settooltips($hwnd, $htooltip)
	If IsHWnd($hwnd) Then
		_sendmessage($hwnd, $tcm_settooltips, $htooltip, 0, 0, "hwnd")
	Else
		GUICtrlSendMsg($hwnd, $tcm_settooltips, $htooltip, 0)
	EndIf
EndFunc

Func _guictrltab_setunicodeformat($hwnd, $bunicode)
	If IsHWnd($hwnd) Then
		Return _sendmessage($hwnd, $tcm_setunicodeformat, $bunicode) <> 0
	Else
		Return GUICtrlSendMsg($hwnd, $tcm_setunicodeformat, $bunicode, 0) <> 0
	EndIf
EndFunc

Global Const $tbif_image = 1
Global Const $tbif_text = 2
Global Const $tbif_state = 4
Global Const $tbif_style = 8
Global Const $tbif_lparam = 16
Global Const $tbif_command = 32
Global Const $tbif_size = 64
Global Const $tbif_byindex = -2147483648
Global Const $tbmf_pad = 1
Global Const $tbmf_barpad = 2
Global Const $tbmf_buttonspacing = 4
Global Const $tbstate_checked = 1
Global Const $tbstate_pressed = 2
Global Const $tbstate_enabled = 4
Global Const $tbstate_hidden = 8
Global Const $tbstate_indeterminate = 16
Global Const $tbstate_wrap = 32
Global Const $tbstate_ellipses = 64
Global Const $tbstate_marked = 128
Global Const $__toolbarconstants_wm_user = 1024
Global Const $tb_enablebutton = $__toolbarconstants_wm_user + 1
Global Const $tb_checkbutton = $__toolbarconstants_wm_user + 2
Global Const $tb_pressbutton = $__toolbarconstants_wm_user + 3
Global Const $tb_hidebutton = $__toolbarconstants_wm_user + 4
Global Const $tb_indeterminate = $__toolbarconstants_wm_user + 5
Global Const $tb_markbutton = $__toolbarconstants_wm_user + 6
Global Const $tb_isbuttonenabled = $__toolbarconstants_wm_user + 9
Global Const $tb_isbuttonchecked = $__toolbarconstants_wm_user + 10
Global Const $tb_isbuttonpressed = $__toolbarconstants_wm_user + 11
Global Const $tb_isbuttonhidden = $__toolbarconstants_wm_user + 12
Global Const $tb_isbuttonindeterminate = $__toolbarconstants_wm_user + 13
Global Const $tb_isbuttonhighlighted = $__toolbarconstants_wm_user + 14
Global Const $tb_setstate = $__toolbarconstants_wm_user + 17
Global Const $tb_getstate = $__toolbarconstants_wm_user + 18
Global Const $tb_addbitmap = $__toolbarconstants_wm_user + 19
Global Const $tb_addbuttonsa = $__toolbarconstants_wm_user + 20
Global Const $tb_insertbuttona = $__toolbarconstants_wm_user + 21
Global Const $tb_deletebutton = $__toolbarconstants_wm_user + 22
Global Const $tb_getbutton = $__toolbarconstants_wm_user + 23
Global Const $tb_buttoncount = $__toolbarconstants_wm_user + 24
Global Const $tb_commandtoindex = $__toolbarconstants_wm_user + 25
Global Const $tb_saverestorea = $__toolbarconstants_wm_user + 26
Global Const $tb_saverestorew = $__toolbarconstants_wm_user + 76
Global Const $tb_customize = $__toolbarconstants_wm_user + 27
Global Const $tb_addstringa = $__toolbarconstants_wm_user + 28
Global Const $tb_addstringw = $__toolbarconstants_wm_user + 77
Global Const $tb_getitemrect = $__toolbarconstants_wm_user + 29
Global Const $tb_buttonstructsize = $__toolbarconstants_wm_user + 30
Global Const $tb_setbuttonsize = $__toolbarconstants_wm_user + 31
Global Const $tb_setbitmapsize = $__toolbarconstants_wm_user + 32
Global Const $tb_autosize = $__toolbarconstants_wm_user + 33
Global Const $tb_gettooltips = $__toolbarconstants_wm_user + 35
Global Const $tb_settooltips = $__toolbarconstants_wm_user + 36
Global Const $tb_setparent = $__toolbarconstants_wm_user + 37
Global Const $tb_setrows = $__toolbarconstants_wm_user + 39
Global Const $tb_getrows = $__toolbarconstants_wm_user + 40
Global Const $tb_getbitmapflags = $__toolbarconstants_wm_user + 41
Global Const $tb_setcmdid = $__toolbarconstants_wm_user + 42
Global Const $tb_changebitmap = $__toolbarconstants_wm_user + 43
Global Const $tb_getbitmap = $__toolbarconstants_wm_user + 44
Global Const $tb_getbuttontexta = $__toolbarconstants_wm_user + 45
Global Const $tb_getbuttontextw = $__toolbarconstants_wm_user + 75
Global Const $tb_replacebitmap = $__toolbarconstants_wm_user + 46
Global Const $tb_setindent = $__toolbarconstants_wm_user + 47
Global Const $tb_setimagelist = $__toolbarconstants_wm_user + 48
Global Const $tb_getimagelist = $__toolbarconstants_wm_user + 49
Global Const $tb_loadimages = $__toolbarconstants_wm_user + 50
Global Const $tb_getrect = $__toolbarconstants_wm_user + 51
Global Const $tb_sethotimagelist = $__toolbarconstants_wm_user + 52
Global Const $tb_gethotimagelist = $__toolbarconstants_wm_user + 53
Global Const $tb_setdisabledimagelist = $__toolbarconstants_wm_user + 54
Global Const $tb_getdisabledimagelist = $__toolbarconstants_wm_user + 55
Global Const $tb_setstyle = $__toolbarconstants_wm_user + 56
Global Const $tb_getstyle = $__toolbarconstants_wm_user + 57
Global Const $tb_getbuttonsize = $__toolbarconstants_wm_user + 58
Global Const $tb_setbuttonwidth = $__toolbarconstants_wm_user + 59
Global Const $tb_setmaxtextrows = $__toolbarconstants_wm_user + 60
Global Const $tb_gettextrows = $__toolbarconstants_wm_user + 61
Global Const $tb_getobject = $__toolbarconstants_wm_user + 62
Global Const $tb_getbuttoninfow = $__toolbarconstants_wm_user + 63
Global Const $tb_setbuttoninfow = $__toolbarconstants_wm_user + 64
Global Const $tb_getbuttoninfoa = $__toolbarconstants_wm_user + 65
Global Const $tb_setbuttoninfoa = $__toolbarconstants_wm_user + 66
Global Const $tb_insertbuttonw = $__toolbarconstants_wm_user + 67
Global Const $tb_addbuttonsw = $__toolbarconstants_wm_user + 68
Global Const $tb_hittest = $__toolbarconstants_wm_user + 69
Global Const $tb_setdrawtextflags = $__toolbarconstants_wm_user + 70
Global Const $tb_gethotitem = $__toolbarconstants_wm_user + 71
Global Const $tb_sethotitem = $__toolbarconstants_wm_user + 72
Global Const $tb_setanchorhighlight = $__toolbarconstants_wm_user + 73
Global Const $tb_getanchorhighlight = $__toolbarconstants_wm_user + 74
Global Const $tb_mapaccelerator = $__toolbarconstants_wm_user + 78
Global Const $tb_getinsertmark = $__toolbarconstants_wm_user + 79
Global Const $tb_setinsertmark = $__toolbarconstants_wm_user + 80
Global Const $tb_insertmarkhittest = $__toolbarconstants_wm_user + 81
Global Const $tb_movebutton = $__toolbarconstants_wm_user + 82
Global Const $tb_getmaxsize = $__toolbarconstants_wm_user + 83
Global Const $tb_setextendedstyle = $__toolbarconstants_wm_user + 84
Global Const $tb_getextendedstyle = $__toolbarconstants_wm_user + 85
Global Const $tb_getpadding = $__toolbarconstants_wm_user + 86
Global Const $tb_setpadding = $__toolbarconstants_wm_user + 87
Global Const $tb_setinsertmarkcolor = $__toolbarconstants_wm_user + 88
Global Const $tb_getinsertmarkcolor = $__toolbarconstants_wm_user + 89
Global Const $tb_mapacceleratorw = $__toolbarconstants_wm_user + 90
Global Const $tb_getstringw = $__toolbarconstants_wm_user + 91
Global Const $tb_getstringa = $__toolbarconstants_wm_user + 92
Global Const $tb_getmetrics = $__toolbarconstants_wm_user + 101
Global Const $tb_setmetrics = $__toolbarconstants_wm_user + 102
Global Const $tb_getcolorscheme = 8192 + 3
Global Const $tb_setcolorscheme = 8192 + 2
Global Const $tb_setunicodeformat = 8192 + 5
Global Const $tb_getunicodeformat = 8192 + 6
Global Const $tb_setwindowtheme = 8192 + 11
Global Const $tbn_first = -700
Global Const $tbn_getbuttoninfoa = $tbn_first + 0
Global Const $tbn_begindrag = $tbn_first - 1
Global Const $tbn_enddrag = $tbn_first - 2
Global Const $tbn_beginadjust = $tbn_first - 3
Global Const $tbn_endadjust = $tbn_first - 4
Global Const $tbn_reset = $tbn_first - 5
Global Const $tbn_queryinsert = $tbn_first - 6
Global Const $tbn_querydelete = $tbn_first - 7
Global Const $tbn_toolbarchange = $tbn_first - 8
Global Const $tbn_custhelp = $tbn_first - 9
Global Const $tbn_dropdown = $tbn_first - 10
Global Const $tbn_getobject = $tbn_first - 12
Global Const $tbn_hotitemchange = $tbn_first - 13
Global Const $tbn_dragout = $tbn_first - 14
Global Const $tbn_deletingbutton = $tbn_first - 15
Global Const $tbn_getdispinfoa = $tbn_first - 16
Global Const $tbn_getdispinfow = $tbn_first - 17
Global Const $tbn_getinfotipa = $tbn_first - 18
Global Const $tbn_getinfotipw = $tbn_first - 19
Global Const $tbn_getbuttoninfow = $tbn_first - 20
Global Const $tbn_restore = $tbn_first - 21
Global Const $tbn_save = $tbn_first - 22
Global Const $tbn_initcustomize = $tbn_first - 23
Global Const $hicf_accelerator = 4
Global Const $hicf_arrowkeys = 2
Global Const $hicf_dupaccel = 8
Global Const $hicf_entering = 16
Global Const $hicf_leaving = 32
Global Const $hicf_lmouse = 128
Global Const $hicf_mouse = 1
Global Const $hicf_other = 0
Global Const $hicf_reselect = 64
Global Const $hicf_toggledropdown = 256
Global Const $btns_button = 0
Global Const $btns_sep = 1
Global Const $btns_check = 2
Global Const $btns_group = 4
Global Const $btns_checkgroup = 6
Global Const $btns_dropdown = 8
Global Const $btns_autosize = 16
Global Const $btns_noprefix = 32
Global Const $btns_showtext = 64
Global Const $btns_wholedropdown = 128
Global Const $tbstyle_tooltips = 256
Global Const $tbstyle_wrapable = 512
Global Const $tbstyle_altdrag = 1024
Global Const $tbstyle_flat = 2048
Global Const $tbstyle_list = 4096
Global Const $tbstyle_customerase = 8192
Global Const $tbstyle_registerdrop = 16384
Global Const $tbstyle_transparent = 32768
Global Const $tbstyle_ex_drawddarrows = 1
Global Const $tbstyle_ex_mixedbuttons = 8
Global Const $tbstyle_ex_hideclippedbuttons = 16
Global Const $tbstyle_ex_doublebuffer = 128
Global $__g_htblastwnd
Global Const $__toolbarconstant_classname = "ToolbarWindow32"
Global Const $__toolbarconstant_ws_clipsiblings = 67108864
Global Const $__toolbarconstant_hinst_commctrl = -1
Global Const $tagtbaddbitmap = "handle hInst;uint_ptr ID"
Global Const $tagtbinsertmark = "int Button;dword Flags"
Global Const $tagtbmetrics = "uint Size;dword Mask;int XPad;int YPad;int XBarPad;int YBarPad;int XSpacing;int YSpacing"

Func _guictrltoolbar_addbitmap($hwnd, $ibuttons, $hinst, $iid)
	Local $tbitmap = DllStructCreate($tagtbaddbitmap)
	DllStructSetData($tbitmap, "hInst", $hinst)
	DllStructSetData($tbitmap, "ID", $iid)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_addbitmap, $ibuttons, $tbitmap, 0, "wparam", "struct*")
	Else
		Local $ibitmap = DllStructGetSize($tbitmap)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibitmap, $tmemmap)
		_memwrite($tmemmap, $tbitmap, $pmemory, $ibitmap)
		$iret = _sendmessage($hwnd, $tb_addbitmap, $ibuttons, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
	Return $iret
EndFunc

Func _guictrltoolbar_addbutton($hwnd, $iid, $iimage, $istring = 0, $istyle = 0, $istate = 4, $iparam = 0)
	Local $bunicode = _guictrltoolbar_getunicodeformat($hwnd)
	Local $tbutton = DllStructCreate($tagtbbutton)
	DllStructSetData($tbutton, "Bitmap", $iimage)
	DllStructSetData($tbutton, "Command", $iid)
	DllStructSetData($tbutton, "State", $istate)
	DllStructSetData($tbutton, "Style", $istyle)
	DllStructSetData($tbutton, "Param", $iparam)
	DllStructSetData($tbutton, "String", $istring)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_addbuttonsw, 1, $tbutton, 0, "wparam", "struct*")
	Else
		Local $ibutton = DllStructGetSize($tbutton)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibutton, $tmemmap)
		_memwrite($tmemmap, $tbutton, $pmemory, $ibutton)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $tb_addbuttonsw, 1, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $tb_addbuttonsa, 1, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	__guictrltoolbar_autosize($hwnd)
	Return $iret <> 0
EndFunc

Func _guictrltoolbar_addbuttonsep($hwnd, $iwidth = 6)
	_guictrltoolbar_addbutton($hwnd, 0, $iwidth, 0, $btns_sep)
EndFunc

Func _guictrltoolbar_addstring($hwnd, $sstring)
	Local $bunicode = _guictrltoolbar_getunicodeformat($hwnd)
	Local $ibuffer = StringLen($sstring) + 2
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	DllStructSetData($tbuffer, "Text", $sstring)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_addstringw, 0, $tbuffer, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		_memwrite($tmemmap, $tbuffer, $pmemory, $ibuffer)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $tb_addstringw, 0, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $tb_addstringa, 0, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	Return $iret
EndFunc

Func __guictrltoolbar_autosize($hwnd)
	_sendmessage($hwnd, $tb_autosize)
EndFunc

Func _guictrltoolbar_buttoncount($hwnd)
	Return _sendmessage($hwnd, $tb_buttoncount)
EndFunc

Func __guictrltoolbar_buttonstructsize($hwnd)
	Local $tbutton = DllStructCreate($tagtbbutton)
	_sendmessage($hwnd, $tb_buttonstructsize, DllStructGetSize($tbutton), 0, 0, "wparam", "ptr")
EndFunc

Func _guictrltoolbar_checkbutton($hwnd, $icommandid, $bcheck = True)
	Return _sendmessage($hwnd, $tb_checkbutton, $icommandid, $bcheck) <> 0
EndFunc

Func _guictrltoolbar_clickaccel($hwnd, $saccelkey, $sbutton = "left", $bmove = False, $iclicks = 1, $ispeed = 1)
	Local $iid = _guictrltoolbar_mapaccelerator($hwnd, $saccelkey)
	_guictrltoolbar_clickbutton($hwnd, $iid, $sbutton, $bmove, $iclicks, $ispeed)
EndFunc

Func _guictrltoolbar_clickbutton($hwnd, $icommandid, $sbutton = "left", $bmove = False, $iclicks = 1, $ispeed = 1)
	Local $trect = _guictrltoolbar_getbuttonrectex($hwnd, $icommandid)
	Local $tpoint = _winapi_pointfromrect($trect)
	$tpoint = _winapi_clienttoscreen($hwnd, $tpoint)
	Local $ix, $iy
	_winapi_getxyfrompoint($tpoint, $ix, $iy)
	Local $imode = Opt("MouseCoordMode", 1)
	If NOT $bmove Then
		Local $apos = MouseGetPos()
		_winapi_showcursor(False)
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
		MouseMove($apos[0], $apos[1], 0)
		_winapi_showcursor(True)
	Else
		MouseClick($sbutton, $ix, $iy, $iclicks, $ispeed)
	EndIf
	Opt("MouseCoordMode", $imode)
EndFunc

Func _guictrltoolbar_clickindex($hwnd, $iindex, $sbutton = "left", $bmove = False, $iclicks = 1, $ispeed = 1)
	Local $icommandid = _guictrltoolbar_indextocommand($hwnd, $iindex)
	_guictrltoolbar_clickbutton($hwnd, $icommandid, $sbutton, $bmove, $iclicks, $ispeed)
EndFunc

Func _guictrltoolbar_commandtoindex($hwnd, $icommandid)
	Return _sendmessage($hwnd, $tb_commandtoindex, $icommandid)
EndFunc

Func _guictrltoolbar_create($hwnd, $istyle = 2048, $iexstyle = 0)
	$istyle = BitOR($istyle, $__udfguiconstant_ws_child, $__toolbarconstant_ws_clipsiblings, $__udfguiconstant_ws_visible)
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $htool = _winapi_createwindowex($iexstyle, $__toolbarconstant_classname, "", $istyle, 0, 0, 0, 0, $hwnd, $nctrlid)
	__guictrltoolbar_buttonstructsize($htool)
	Return $htool
EndFunc

Func _guictrltoolbar_customize($hwnd)
	_sendmessage($hwnd, $tb_customize)
EndFunc

Func _guictrltoolbar_deletebutton($hwnd, $icommandid)
	Local $iindex = _guictrltoolbar_commandtoindex($hwnd, $icommandid)
	If $iindex = -1 Then Return SetError(-1, 0, False)
	Return _sendmessage($hwnd, $tb_deletebutton, $iindex) <> 0
EndFunc

Func _guictrltoolbar_destroy(ByRef $hwnd)
	If NOT _winapi_isclassname($hwnd, $__toolbarconstant_classname) Then Return SetError(2, 2, False)
	Local $idestroyed = 0
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		Local $nctrlid = _winapi_getdlgctrlid($hwnd)
		Local $hparent = _winapi_getparent($hwnd)
		$idestroyed = _winapi_destroywindow($hwnd)
		Local $iret = __udf_freeglobalid($hparent, $nctrlid)
		If NOT $iret Then
		EndIf
	Else
		Return SetError(1, 1, False)
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func _guictrltoolbar_enablebutton($hwnd, $icommandid, $benable = True)
	Return _sendmessage($hwnd, $tb_enablebutton, $icommandid, $benable) <> 0
EndFunc

Func _guictrltoolbar_findtoolbar($hwnd, $stext)
	Local $icommandid, $htoolbar
	If NOT _winapi_iswindow($hwnd) Then
		$hwnd = WinGetHandle($hwnd)
		If @error Then Return SetError(-1, -1, 0)
	EndIf
	Local $awinlist = _winapi_enumwindows(True, $hwnd)
	For $ii = 1 To $awinlist[0][0]
		If $awinlist[$ii][1] = $__toolbarconstant_classname Then
			$htoolbar = $awinlist[$ii][0]
			For $ij = 0 To _guictrltoolbar_buttoncount($htoolbar) - 1
				$icommandid = _guictrltoolbar_indextocommand($htoolbar, $ij)
				If _guictrltoolbar_getbuttontext($htoolbar, $icommandid) = $stext Then Return $htoolbar
			Next
		EndIf
	Next
	Return SetError(-2, -2, 0)
EndFunc

Func _guictrltoolbar_getanchorhighlight($hwnd)
	Return _sendmessage($hwnd, $tb_getanchorhighlight) <> 0
EndFunc

Func _guictrltoolbar_getbitmapflags($hwnd)
	Return _sendmessage($hwnd, $tb_getbitmapflags)
EndFunc

Func _guictrltoolbar_getbuttonbitmap($hwnd, $icommandid)
	Return _sendmessage($hwnd, $tb_getbitmap, $icommandid)
EndFunc

Func _guictrltoolbar_getbuttoninfo($hwnd, $icommandid)
	Local $abutton[5]
	Local $tbutton = _guictrltoolbar_getbuttoninfoex($hwnd, $icommandid)
	$abutton[0] = DllStructGetData($tbutton, "Image")
	$abutton[1] = DllStructGetData($tbutton, "State")
	$abutton[2] = DllStructGetData($tbutton, "Style")
	$abutton[3] = DllStructGetData($tbutton, "CX")
	$abutton[4] = DllStructGetData($tbutton, "Param")
	Return $abutton
EndFunc

Func _guictrltoolbar_getbuttoninfoex($hwnd, $icommandid)
	Local $bunicode = _guictrltoolbar_getunicodeformat($hwnd)
	Local $tbutton = DllStructCreate($tagtbbuttoninfo)
	Local $ibutton = DllStructGetSize($tbutton)
	Local $imask = BitOR($tbif_image, $tbif_state, $tbif_style, $tbif_lparam, $tbif_size)
	DllStructSetData($tbutton, "Size", $ibutton)
	DllStructSetData($tbutton, "Mask", $imask)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_getbuttoninfow, $icommandid, $tbutton, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibutton, $tmemmap)
		_memwrite($tmemmap, $tbutton, $pmemory, $ibutton)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $tb_getbuttoninfow, $icommandid, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $tb_getbuttoninfoa, $icommandid, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memread($tmemmap, $pmemory, $tbutton, $ibutton)
		_memfree($tmemmap)
	EndIf
	Return SetError($iret = -1, 0, $tbutton)
EndFunc

Func _guictrltoolbar_getbuttonparam($hwnd, $icommandid)
	Local $tbutton = _guictrltoolbar_getbuttoninfoex($hwnd, $icommandid)
	Return DllStructGetData($tbutton, "Param")
EndFunc

Func _guictrltoolbar_getbuttonrect($hwnd, $icommandid)
	Local $arect[4]
	Local $trect = _guictrltoolbar_getbuttonrectex($hwnd, $icommandid)
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrltoolbar_getbuttonrectex($hwnd, $icommandid)
	Local $trect = DllStructCreate($tagrect)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		_sendmessage($hwnd, $tb_getrect, $icommandid, $trect, 0, "wparam", "struct*")
	Else
		Local $irect = DllStructGetSize($trect)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
		_sendmessage($hwnd, $tb_getrect, $icommandid, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $trect, $irect)
		_memfree($tmemmap)
	EndIf
	Return $trect
EndFunc

Func _guictrltoolbar_getbuttonsize($hwnd)
	Local $asize[2]
	Local $iret = _sendmessage($hwnd, $tb_getbuttonsize)
	$asize[0] = _winapi_hiword($iret)
	$asize[1] = _winapi_loword($iret)
	Return $asize
EndFunc

Func _guictrltoolbar_getbuttonstate($hwnd, $icommandid)
	Return _sendmessage($hwnd, $tb_getstate, $icommandid)
EndFunc

Func _guictrltoolbar_getbuttonstyle($hwnd, $icommandid)
	Local $tbutton = _guictrltoolbar_getbuttoninfoex($hwnd, $icommandid)
	Return DllStructGetData($tbutton, "Style")
EndFunc

Func _guictrltoolbar_getbuttontext($hwnd, $icommandid)
	Local $bunicode = _guictrltoolbar_getunicodeformat($hwnd)
	Local $ibuffer
	If $bunicode Then
		$ibuffer = _sendmessage($hwnd, $tb_getbuttontextw, $icommandid)
	Else
		$ibuffer = _sendmessage($hwnd, $tb_getbuttontexta, $icommandid)
	EndIf
	If $ibuffer = 0 Then Return SetError(True, 0, "")
	If $ibuffer = 1 Then Return SetError(False, 0, "")
	If $ibuffer <= -1 Then Return SetError(False, -1, "")
	$ibuffer += 1
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $iret
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_getbuttontextw, $icommandid, $tbuffer, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $tb_getbuttontextw, $icommandid, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $tb_getbuttontexta, $icommandid, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
		_memfree($tmemmap)
	EndIf
	Return SetError($iret > 0, 0, DllStructGetData($tbuffer, "Text"))
EndFunc

Func _guictrltoolbar_getcolorscheme($hwnd)
	Local $acolor[2], $iret
	Local $tcolor = DllStructCreate($tagcolorscheme)
	Local $icolor = DllStructGetSize($tcolor)
	DllStructSetData($tcolor, "Size", $icolor)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_getcolorscheme, 0, $tcolor, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $icolor, $tmemmap)
		$iret = _sendmessage($hwnd, $tb_getcolorscheme, 0, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tcolor, $icolor)
		_memfree($tmemmap)
	EndIf
	$acolor[0] = DllStructGetData($tcolor, "BtnHighlight")
	$acolor[1] = DllStructGetData($tcolor, "BtnShadow")
	Return SetError($iret = 0, 0, $acolor)
EndFunc

Func _guictrltoolbar_getdisabledimagelist($hwnd)
	Return Ptr(_sendmessage($hwnd, $tb_getdisabledimagelist))
EndFunc

Func _guictrltoolbar_getextendedstyle($hwnd)
	Return _sendmessage($hwnd, $tb_getextendedstyle)
EndFunc

Func _guictrltoolbar_gethotimagelist($hwnd)
	Return Ptr(_sendmessage($hwnd, $tb_gethotimagelist))
EndFunc

Func _guictrltoolbar_gethotitem($hwnd)
	Return _sendmessage($hwnd, $tb_gethotitem)
EndFunc

Func _guictrltoolbar_getimagelist($hwnd)
	Return Ptr(_sendmessage($hwnd, $tb_getimagelist))
EndFunc

Func _guictrltoolbar_getinsertmark($hwnd)
	Local $amark[2], $iret
	Local $tmark = DllStructCreate($tagtbinsertmark)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_getinsertmark, 0, $tmark, 0, "wparam", "struct*")
	Else
		Local $imark = DllStructGetSize($tmark)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $imark, $tmemmap)
		$iret = _sendmessage($hwnd, $tb_getinsertmark, 0, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tmark, $imark)
		_memfree($tmemmap)
	EndIf
	$amark[0] = DllStructGetData($tmark, "Button")
	$amark[1] = DllStructGetData($tmark, "Flags")
	Return SetError($iret <> 0, 0, $amark)
EndFunc

Func _guictrltoolbar_getinsertmarkcolor($hwnd)
	Return _sendmessage($hwnd, $tb_getinsertmarkcolor)
EndFunc

Func _guictrltoolbar_getmaxsize($hwnd)
	Local $asize[2], $iret
	Local $tsize = DllStructCreate($tagsize)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_getmaxsize, 0, $tsize, 0, "wparam", "struct*")
	Else
		Local $isize = DllStructGetSize($tsize)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $isize, $tmemmap)
		$iret = _sendmessage($hwnd, $tb_getmaxsize, 0, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tsize, $isize)
		_memfree($tmemmap)
	EndIf
	$asize[0] = DllStructGetData($tsize, "X")
	$asize[1] = DllStructGetData($tsize, "Y")
	Return SetError($iret = 0, 0, $asize)
EndFunc

Func _guictrltoolbar_getmetrics($hwnd)
	Local $ametrics[4]
	Local $tmetrics = DllStructCreate($tagtbmetrics)
	Local $imetrics = DllStructGetSize($tmetrics)
	Local $imask = BitOR($tbmf_pad, $tbmf_buttonspacing)
	DllStructSetData($tmetrics, "Size", $imetrics)
	DllStructSetData($tmetrics, "Mask", $imask)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		_sendmessage($hwnd, $tb_getmetrics, 0, $tmetrics, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $imetrics, $tmemmap)
		_sendmessage($hwnd, $tb_getmetrics, 0, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tmetrics, $imetrics)
		_memfree($tmemmap)
	EndIf
	$ametrics[0] = DllStructGetData($tmetrics, "XPad")
	$ametrics[1] = DllStructGetData($tmetrics, "YPad")
	$ametrics[2] = DllStructGetData($tmetrics, "XSpacing")
	$ametrics[3] = DllStructGetData($tmetrics, "YSpacing")
	Return $ametrics
EndFunc

Func _guictrltoolbar_getpadding($hwnd)
	Local $apad[2]
	Local $ipad = _sendmessage($hwnd, $tb_getpadding)
	$apad[0] = _winapi_loword($ipad)
	$apad[1] = _winapi_hiword($ipad)
	Return $apad
EndFunc

Func _guictrltoolbar_getrows($hwnd)
	Return _sendmessage($hwnd, $tb_getrows)
EndFunc

Func _guictrltoolbar_getstring($hwnd, $iindex)
	Local $bunicode = _guictrltoolbar_getunicodeformat($hwnd)
	Local $ibuffer
	If $bunicode Then
		$ibuffer = _sendmessage($hwnd, $tb_getstringw, _winapi_makelong(0, $iindex), 0, 0, "long") + 1
	Else
		$ibuffer = _sendmessage($hwnd, $tb_getstringa, _winapi_makelong(0, $iindex), 0, 0, "long") + 1
	EndIf
	If $ibuffer = 0 Then Return SetError(-1, 0, "")
	If $ibuffer = 1 Then Return ""
	Local $tbuffer
	If $bunicode Then
		$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
		$ibuffer *= 2
	Else
		$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
	EndIf
	Local $iret
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_getstringw, _winapi_makelong($ibuffer, $iindex), $tbuffer, 0, "long", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibuffer, $tmemmap)
		If $bunicode Then
			$iret = _sendmessage($hwnd, $tb_getstringw, _winapi_makelong($ibuffer, $iindex), $pmemory, 0, "long", "ptr")
		Else
			$iret = _sendmessage($hwnd, $tb_getstringa, _winapi_makelong($ibuffer, $iindex), $pmemory, 0, "long", "ptr")
		EndIf
		_memread($tmemmap, $pmemory, $tbuffer, $ibuffer)
		_memfree($tmemmap)
	EndIf
	Return SetError($iret = -1, 0, DllStructGetData($tbuffer, "Text"))
EndFunc

Func _guictrltoolbar_getstyle($hwnd)
	Return _sendmessage($hwnd, $tb_getstyle)
EndFunc

Func _guictrltoolbar_getstylealtdrag($hwnd)
	Return BitAND(_guictrltoolbar_getstyle($hwnd), $tbstyle_altdrag) <> 0
EndFunc

Func _guictrltoolbar_getstylecustomerase($hwnd)
	Return BitAND(_guictrltoolbar_getstyle($hwnd), $tbstyle_customerase) <> 0
EndFunc

Func _guictrltoolbar_getstyleflat($hwnd)
	Return BitAND(_guictrltoolbar_getstyle($hwnd), $tbstyle_flat) <> 0
EndFunc

Func _guictrltoolbar_getstylelist($hwnd)
	Return BitAND(_guictrltoolbar_getstyle($hwnd), $tbstyle_list) <> 0
EndFunc

Func _guictrltoolbar_getstyleregisterdrop($hwnd)
	Return BitAND(_guictrltoolbar_getstyle($hwnd), $tbstyle_registerdrop) <> 0
EndFunc

Func _guictrltoolbar_getstyletooltips($hwnd)
	Return BitAND(_guictrltoolbar_getstyle($hwnd), $tbstyle_tooltips) <> 0
EndFunc

Func _guictrltoolbar_getstyletransparent($hwnd)
	Return BitAND(_guictrltoolbar_getstyle($hwnd), $tbstyle_transparent) <> 0
EndFunc

Func _guictrltoolbar_getstylewrapable($hwnd)
	Return BitAND(_guictrltoolbar_getstyle($hwnd), $tbstyle_wrapable) <> 0
EndFunc

Func _guictrltoolbar_gettextrows($hwnd)
	Return _sendmessage($hwnd, $tb_gettextrows)
EndFunc

Func _guictrltoolbar_gettooltips($hwnd)
	Return HWnd(_sendmessage($hwnd, $tb_gettooltips))
EndFunc

Func _guictrltoolbar_getunicodeformat($hwnd)
	Return _sendmessage($hwnd, $tb_getunicodeformat) <> 0
EndFunc

Func _guictrltoolbar_hidebutton($hwnd, $icommandid, $bhide = True)
	Return _sendmessage($hwnd, $tb_hidebutton, $icommandid, $bhide) <> 0
EndFunc

Func _guictrltoolbar_highlightbutton($hwnd, $icommandid, $bhighlight = True)
	Return _sendmessage($hwnd, $tb_markbutton, $icommandid, $bhighlight) <> 0
EndFunc

Func _guictrltoolbar_hittest($hwnd, $ix, $iy)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $ix)
	DllStructSetData($tpoint, "Y", $iy)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_hittest, 0, $tpoint, 0, "wparam", "struct*")
	Else
		Local $ipoint = DllStructGetSize($tpoint)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ipoint, $tmemmap)
		_memwrite($tmemmap, $tpoint, $pmemory, $ipoint)
		$iret = _sendmessage($hwnd, $tb_hittest, 0, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
	Return $iret
EndFunc

Func _guictrltoolbar_indextocommand($hwnd, $iindex)
	Local $tbutton = DllStructCreate($tagtbbutton)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		_sendmessage($hwnd, $tb_getbutton, $iindex, $tbutton, 0, "wparam", "struct*")
	Else
		Local $ibutton = DllStructGetSize($tbutton)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibutton, $tmemmap)
		_memwrite($tmemmap, $tbutton, $pmemory, $ibutton)
		_sendmessage($hwnd, $tb_getbutton, $iindex, $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tbutton, $ibutton)
		_memfree($tmemmap)
	EndIf
	Return DllStructGetData($tbutton, "Command")
EndFunc

Func _guictrltoolbar_insertbutton($hwnd, $iindex, $iid, $iimage, $stext = "", $istyle = 0, $istate = 4, $iparam = 0)
	Local $bunicode = _guictrltoolbar_getunicodeformat($hwnd)
	Local $tbuffer, $iret
	Local $tbutton = DllStructCreate($tagtbbutton)
	Local $ibuffer = StringLen($stext) + 1
	If $ibuffer > 1 Then
		If $bunicode Then
			$tbuffer = DllStructCreate("wchar Text[" & $ibuffer & "]")
			$ibuffer *= 2
		Else
			$tbuffer = DllStructCreate("char Text[" & $ibuffer & "]")
		EndIf
		DllStructSetData($tbuffer, "Text", $stext)
		DllStructSetData($tbutton, "String", DllStructGetPtr($tbuffer))
	EndIf
	DllStructSetData($tbutton, "Bitmap", $iimage)
	DllStructSetData($tbutton, "Command", $iid)
	DllStructSetData($tbutton, "State", $istate)
	DllStructSetData($tbutton, "Style", $istyle)
	DllStructSetData($tbutton, "Param", $iparam)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_insertbuttonw, $iindex, $tbutton, 0, "wparam", "struct*")
	Else
		Local $ibutton = DllStructGetSize($tbutton)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibutton + $ibuffer, $tmemmap)
		Local $ptext = $pmemory + $ibutton
		_memwrite($tmemmap, $tbutton, $pmemory, $ibutton)
		If $ibuffer > 1 Then
			DllStructSetData($tbutton, "String", $ptext)
			_memwrite($tmemmap, $tbuffer, $ptext, $ibuffer)
		EndIf
		If $bunicode Then
			$iret = _sendmessage($hwnd, $tb_insertbuttonw, $iindex, $pmemory, 0, "wparam", "ptr")
		Else
			$iret = _sendmessage($hwnd, $tb_insertbuttona, $iindex, $pmemory, 0, "wparam", "ptr")
		EndIf
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrltoolbar_insertmarkhittest($hwnd, $ix, $iy)
	Local $amark[2], $iret
	Local $tpoint = DllStructCreate($tagpoint)
	Local $tmark = DllStructCreate($tagtbinsertmark)
	DllStructSetData($tpoint, "X", $ix)
	DllStructSetData($tpoint, "Y", $iy)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_insertmarkhittest, $tpoint, $tmark, 0, "struct*", "struct*")
	Else
		Local $ipoint = DllStructGetSize($tpoint)
		Local $imark = DllStructGetSize($tmark)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ipoint + $imark, $tmemmap)
		Local $pmarkptr = $pmemory + $ipoint
		_memwrite($tmemmap, $tpoint, $pmemory, $ipoint)
		$iret = _sendmessage($hwnd, $tb_insertmarkhittest, $pmemory, $pmarkptr, 0, "wparam", "ptr")
		_memread($tmemmap, $pmarkptr, $tmark, $imark)
		_memfree($tmemmap)
	EndIf
	$amark[0] = DllStructGetData($tmark, "Button")
	$amark[1] = DllStructGetData($tmark, "Flags")
	Return SetError($iret <> 0, 0, $amark)
EndFunc

Func _guictrltoolbar_isbuttonchecked($hwnd, $icommandid)
	Return _sendmessage($hwnd, $tb_isbuttonchecked, $icommandid) <> 0
EndFunc

Func _guictrltoolbar_isbuttonenabled($hwnd, $icommandid)
	Return _sendmessage($hwnd, $tb_isbuttonenabled, $icommandid) <> 0
EndFunc

Func _guictrltoolbar_isbuttonhidden($hwnd, $icommandid)
	Return _sendmessage($hwnd, $tb_isbuttonhidden, $icommandid) <> 0
EndFunc

Func _guictrltoolbar_isbuttonhighlighted($hwnd, $icommandid)
	Return _sendmessage($hwnd, $tb_isbuttonhighlighted, $icommandid) <> 0
EndFunc

Func _guictrltoolbar_isbuttonindeterminate($hwnd, $icommandid)
	Return _sendmessage($hwnd, $tb_isbuttonindeterminate, $icommandid) <> 0
EndFunc

Func _guictrltoolbar_isbuttonpressed($hwnd, $icommandid)
	Return _sendmessage($hwnd, $tb_isbuttonpressed, $icommandid) <> 0
EndFunc

Func _guictrltoolbar_loadbitmap($hwnd, $sfilename)
	Local $asize = _guictrltoolbar_getbuttonsize($hwnd)
	Local $hbitmap = _winapi_loadimage(0, $sfilename, 0, $asize[1], $asize[0], $lr_loadfromfile)
	If $hbitmap = 0 Then Return SetError(-1, -1, -1)
	Return _guictrltoolbar_addbitmap($hwnd, 1, 0, $hbitmap)
EndFunc

Func _guictrltoolbar_loadimages($hwnd, $ibitmapid)
	Return _sendmessage($hwnd, $tb_loadimages, $ibitmapid, $__toolbarconstant_hinst_commctrl)
EndFunc

Func _guictrltoolbar_mapaccelerator($hwnd, $saccelkey)
	Local $tcommand = DllStructCreate("int Data")
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		_sendmessage($hwnd, $tb_mapacceleratorw, Asc($saccelkey), $tcommand, 0, "wparam", "struct*")
	Else
		Local $icommand = DllStructGetSize($tcommand)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $icommand, $tmemmap)
		_sendmessage($hwnd, $tb_mapacceleratorw, Asc($saccelkey), $pmemory, 0, "wparam", "ptr")
		_memread($tmemmap, $pmemory, $tcommand, $icommand)
		_memfree($tmemmap)
	EndIf
	Return DllStructGetData($tcommand, "Data")
EndFunc

Func _guictrltoolbar_movebutton($hwnd, $ioldpos, $inewpos)
	Return _sendmessage($hwnd, $tb_movebutton, $ioldpos, $inewpos) <> 0
EndFunc

Func _guictrltoolbar_pressbutton($hwnd, $icommandid, $bpress = True)
	Return _sendmessage($hwnd, $tb_pressbutton, $icommandid, $bpress) <> 0
EndFunc

Func _guictrltoolbar_setanchorhighlight($hwnd, $banchor)
	Return _sendmessage($hwnd, $tb_setanchorhighlight, $banchor)
EndFunc

Func _guictrltoolbar_setbitmapsize($hwnd, $iwidth, $iheight)
	Return _sendmessage($hwnd, $tb_setbitmapsize, 0, _winapi_makelong($iwidth, $iheight), 0, "wparam", "long") <> 0
EndFunc

Func _guictrltoolbar_setbuttonbitmap($hwnd, $icommandid, $iindex)
	Return _sendmessage($hwnd, $tb_changebitmap, $icommandid, $iindex) <> 0
EndFunc

Func _guictrltoolbar_setbuttoninfo($hwnd, $icommandid, $iimage = -3, $istate = -1, $istyle = -1, $iwidth = -1, $iparam = -1)
	Local $imask = 0
	Local $tbutton = DllStructCreate($tagtbbuttoninfo)
	If $iimage <> -3 Then
		$imask = $tbif_image
		DllStructSetData($tbutton, "Image", $iimage)
	EndIf
	If $istate <> -1 Then
		$imask = BitOR($imask, $tbif_state)
		DllStructSetData($tbutton, "State", $istate)
	EndIf
	If $istyle <> -1 Then
		$imask = BitOR($imask, $tbif_style)
		DllStructSetData($tbutton, "Style", $istyle)
	EndIf
	If $iwidth <> -1 Then
		$imask = BitOR($imask, $tbif_size)
		DllStructSetData($tbutton, "CX", $iwidth)
	EndIf
	If $iparam <> -1 Then
		$imask = BitOR($imask, $tbif_lparam)
		DllStructSetData($tbutton, "Param", $iparam)
	EndIf
	DllStructSetData($tbutton, "Mask", $imask)
	Return _guictrltoolbar_setbuttoninfoex($hwnd, $icommandid, $tbutton)
EndFunc

Func _guictrltoolbar_setbuttoninfoex($hwnd, $icommandid, $tbutton)
	Local $ibutton = DllStructGetSize($tbutton)
	DllStructSetData($tbutton, "Size", $ibutton)
	Local $iret
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		$iret = _sendmessage($hwnd, $tb_setbuttoninfow, $icommandid, $tbutton, 0, "wparam", "struct*")
	Else
		Local $ibuffer = DllStructGetData($tbutton, "TextMax")
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $ibutton + $ibuffer, $tmemmap)
		Local $pbuffer = $pmemory + $ibutton
		DllStructSetData($tbutton, "Text", $pbuffer)
		_memwrite($tmemmap, $tbutton, $pmemory, $ibutton)
		_memwrite($tmemmap, $pbuffer, $pbuffer, $ibuffer)
		$iret = _sendmessage($hwnd, $tb_setbuttoninfow, $icommandid, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
	Return $iret <> 0
EndFunc

Func _guictrltoolbar_setbuttonparam($hwnd, $icommandid, $iparam)
	Local $tbutton = DllStructCreate($tagtbbuttoninfo)
	DllStructSetData($tbutton, "Mask", $tbif_lparam)
	DllStructSetData($tbutton, "Param", $iparam)
	Return _guictrltoolbar_setbuttoninfoex($hwnd, $icommandid, $tbutton)
EndFunc

Func _guictrltoolbar_setbuttonsize($hwnd, $iheight, $iwidth)
	Return _sendmessage($hwnd, $tb_setbuttonsize, 0, _winapi_makelong($iwidth, $iheight), 0, "wparam", "long") <> 0
EndFunc

Func _guictrltoolbar_setbuttonstate($hwnd, $icommandid, $istate)
	Return _sendmessage($hwnd, $tb_setstate, $icommandid, $istate) <> 0
EndFunc

Func _guictrltoolbar_setbuttonstyle($hwnd, $icommandid, $istyle)
	Local $tbutton = DllStructCreate($tagtbbuttoninfo)
	DllStructSetData($tbutton, "Mask", $tbif_style)
	DllStructSetData($tbutton, "Style", $istyle)
	Return _guictrltoolbar_setbuttoninfoex($hwnd, $icommandid, $tbutton)
EndFunc

Func _guictrltoolbar_setbuttontext($hwnd, $icommandid, $stext)
	Local $ibuffer = StringLen($stext) + 1
	Local $tbuffer = DllStructCreate("wchar Text[" & $ibuffer * 2 & "]")
	$ibuffer *= 2
	Local $pbuffer = DllStructGetPtr($tbuffer)
	Local $tbutton = DllStructCreate($tagtbbuttoninfo)
	DllStructSetData($tbuffer, "Text", $stext)
	DllStructSetData($tbutton, "Mask", $tbif_text)
	DllStructSetData($tbutton, "Text", $pbuffer)
	DllStructSetData($tbutton, "TextMax", $ibuffer)
	Return _guictrltoolbar_setbuttoninfoex($hwnd, $icommandid, $tbutton)
EndFunc

Func _guictrltoolbar_setbuttonwidth($hwnd, $imin, $imax)
	Return _sendmessage($hwnd, $tb_setbuttonwidth, 0, _winapi_makelong($imin, $imax), 0, "wparam", "long") <> 0
EndFunc

Func _guictrltoolbar_setcmdid($hwnd, $iindex, $icommandid)
	Return _sendmessage($hwnd, $tb_setcmdid, $iindex, $icommandid) <> 0
EndFunc

Func _guictrltoolbar_setcolorscheme($hwnd, $ihighlight, $ishadow)
	Local $tcolor = DllStructCreate($tagcolorscheme)
	Local $icolor = DllStructGetSize($tcolor)
	DllStructSetData($tcolor, "Size", $icolor)
	DllStructSetData($tcolor, "BtnHighlight", $ihighlight)
	DllStructSetData($tcolor, "BtnShadow", $ishadow)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		_sendmessage($hwnd, $tb_setcolorscheme, 0, $tcolor, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $icolor, $tmemmap)
		_memwrite($tmemmap, $tcolor, $pmemory, $icolor)
		_sendmessage($hwnd, $tb_setcolorscheme, 0, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
EndFunc

Func _guictrltoolbar_setdisabledimagelist($hwnd, $himagelist)
	Return _sendmessage($hwnd, $tb_setdisabledimagelist, 0, $himagelist, 0, "wparam", "handle", "handle")
EndFunc

Func _guictrltoolbar_setdrawtextflags($hwnd, $imask, $idtflags)
	Return _sendmessage($hwnd, $tb_setdrawtextflags, $imask, $idtflags)
EndFunc

Func _guictrltoolbar_setextendedstyle($hwnd, $istyle)
	Return _sendmessage($hwnd, $tb_setextendedstyle, 0, $istyle)
EndFunc

Func _guictrltoolbar_sethotimagelist($hwnd, $himagelist)
	Return _sendmessage($hwnd, $tb_sethotimagelist, 0, $himagelist, 0, "wparam", "handle", "handle")
EndFunc

Func _guictrltoolbar_sethotitem($hwnd, $iindex)
	Return _sendmessage($hwnd, $tb_sethotitem, $iindex)
EndFunc

Func _guictrltoolbar_setimagelist($hwnd, $himagelist)
	Return _sendmessage($hwnd, $tb_setimagelist, 0, $himagelist, 0, "wparam", "handle", "handle")
EndFunc

Func _guictrltoolbar_setindent($hwnd, $iindent)
	Return _sendmessage($hwnd, $tb_setindent, $iindent) <> 0
EndFunc

Func _guictrltoolbar_setindeterminate($hwnd, $icommandid, $bstate = True)
	Return _sendmessage($hwnd, $tb_indeterminate, $icommandid, $bstate) <> 0
EndFunc

Func _guictrltoolbar_setinsertmark($hwnd, $ibutton, $iflags = 0)
	Local $tmark = DllStructCreate($tagtbinsertmark)
	DllStructSetData($tmark, "Button", $ibutton)
	DllStructSetData($tmark, "Flags", $iflags)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		_sendmessage($hwnd, $tb_setinsertmark, 0, $tmark, 0, "wparam", "struct*")
	Else
		Local $imark = DllStructGetSize($tmark)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $imark, $tmemmap)
		_memwrite($tmemmap, $tmark, $pmemory, $imark)
		_sendmessage($hwnd, $tb_setinsertmark, 0, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
EndFunc

Func _guictrltoolbar_setinsertmarkcolor($hwnd, $icolor)
	Return _sendmessage($hwnd, $tb_setinsertmarkcolor, 0, $icolor)
EndFunc

Func _guictrltoolbar_setmaxtextrows($hwnd, $imaxrows)
	Return _sendmessage($hwnd, $tb_setmaxtextrows, $imaxrows) <> 0
EndFunc

Func _guictrltoolbar_setmetrics($hwnd, $ixpad, $iypad, $ixspacing, $iyspacing)
	Local $tmetrics = DllStructCreate($tagtbmetrics)
	Local $imetrics = DllStructGetSize($tmetrics)
	Local $imask = BitOR($tbmf_pad, $tbmf_buttonspacing)
	DllStructSetData($tmetrics, "Size", $imetrics)
	DllStructSetData($tmetrics, "Mask", $imask)
	DllStructSetData($tmetrics, "XPad", $ixpad)
	DllStructSetData($tmetrics, "YPad", $iypad)
	DllStructSetData($tmetrics, "XSpacing", $ixspacing)
	DllStructSetData($tmetrics, "YSpacing", $iyspacing)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		_sendmessage($hwnd, $tb_setmetrics, 0, $tmetrics, 0, "wparam", "struct*")
	Else
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $imetrics, $tmemmap)
		_memwrite($tmemmap, $tmetrics, $pmemory, $imetrics)
		_sendmessage($hwnd, $tb_setmetrics, 0, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
EndFunc

Func _guictrltoolbar_setpadding($hwnd, $icx, $icy)
	Return _sendmessage($hwnd, $tb_setpadding, 0, _winapi_makelong($icx, $icy), 0, "wparam", "long")
EndFunc

Func _guictrltoolbar_setparent($hwnd, $hparent)
	Return HWnd(_sendmessage($hwnd, $tb_setparent, $hparent))
EndFunc

Func _guictrltoolbar_setrows($hwnd, $irows, $blarger = True)
	Local $trect = DllStructCreate($tagrect)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		_sendmessage($hwnd, $tb_setrows, _winapi_makelong($irows, $blarger), $trect, 0, "long", "struct*")
	Else
		Local $irect = DllStructGetSize($trect)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $irect, $tmemmap)
		_sendmessage($hwnd, $tb_setrows, _winapi_makelong($irows, $blarger), $pmemory, 0, "long", "ptr")
		_memread($tmemmap, $pmemory, $trect, $irect)
		_memfree($tmemmap)
	EndIf
	Local $arect[4]
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrltoolbar_setstyle($hwnd, $istyle)
	$istyle = BitOR($istyle, $__udfguiconstant_ws_child, $__toolbarconstant_ws_clipsiblings, $__udfguiconstant_ws_visible)
	_sendmessage($hwnd, $tb_setstyle, 0, $istyle)
EndFunc

Func _guictrltoolbar_setstylealtdrag($hwnd, $bstate = True)
	Return __guictrltoolbar_setstyleex($hwnd, $tbstyle_altdrag, $bstate)
EndFunc

Func _guictrltoolbar_setstylecustomerase($hwnd, $bstate = True)
	Return __guictrltoolbar_setstyleex($hwnd, $tbstyle_customerase, $bstate)
EndFunc

Func __guictrltoolbar_setstyleex($hwnd, $istyle, $bstyle)
	Local $in = _guictrltoolbar_getstyle($hwnd)
	If $bstyle Then
		$in = BitOR($in, $istyle)
	Else
		$in = BitAND($in, BitNOT($istyle))
	EndIf
	Return _guictrltoolbar_setstyle($hwnd, $in)
EndFunc

Func _guictrltoolbar_setstyleflat($hwnd, $bstate)
	Return __guictrltoolbar_setstyleex($hwnd, $tbstyle_flat, $bstate)
EndFunc

Func _guictrltoolbar_setstylelist($hwnd, $bstate)
	Return __guictrltoolbar_setstyleex($hwnd, $tbstyle_list, $bstate)
EndFunc

Func _guictrltoolbar_setstyleregisterdrop($hwnd, $bstate)
	Return __guictrltoolbar_setstyleex($hwnd, $tbstyle_registerdrop, $bstate)
EndFunc

Func _guictrltoolbar_setstyletooltips($hwnd, $bstate)
	Return __guictrltoolbar_setstyleex($hwnd, $tbstyle_tooltips, $bstate)
EndFunc

Func _guictrltoolbar_setstyletransparent($hwnd, $bstate)
	Return __guictrltoolbar_setstyleex($hwnd, $tbstyle_transparent, $bstate)
EndFunc

Func _guictrltoolbar_setstylewrapable($hwnd, $bstate)
	Return __guictrltoolbar_setstyleex($hwnd, $tbstyle_wrapable, $bstate)
EndFunc

Func _guictrltoolbar_settooltips($hwnd, $htooltip)
	_sendmessage($hwnd, $tb_settooltips, $htooltip, 0, 0, "hwnd")
EndFunc

Func _guictrltoolbar_setunicodeformat($hwnd, $bunicode = False)
	Return _sendmessage($hwnd, $tb_setunicodeformat, $bunicode)
EndFunc

Func _guictrltoolbar_setwindowtheme($hwnd, $stheme)
	Local $ttheme = _winapi_multibytetowidechar($stheme)
	If _winapi_inprocess($hwnd, $__g_htblastwnd) Then
		_sendmessage($hwnd, $tb_setwindowtheme, 0, $ttheme, 0, "wparam", "struct*")
	Else
		Local $itheme = DllStructGetSize($ttheme)
		Local $tmemmap
		Local $pmemory = _meminit($hwnd, $itheme, $tmemmap)
		_memwrite($tmemmap, $ttheme, $pmemory, $itheme)
		_sendmessage($hwnd, $tb_setwindowtheme, 0, $pmemory, 0, "wparam", "ptr")
		_memfree($tmemmap)
	EndIf
EndFunc

Func _inetsmtpmailcom($s_smtpserver, $s_fromname, $s_fromaddress, $s_toaddress, $s_subject = "", $as_body = "", $s_attachfiles = "", $s_ccaddress = "", $s_bccaddress = "", $s_importance = "Normal", $s_username = "", $s_password = "", $ipport = 25, $ssl = 0)
	Local $objemail = ObjCreate("CDO.Message")
	$objemail.from = '"' & $s_fromname & '" <' & $s_fromaddress & ">"
	$objemail.to = $s_toaddress
	If $s_ccaddress <> "" Then $objemail.cc = $s_ccaddress
	If $s_bccaddress <> "" Then $objemail.bcc = $s_bccaddress
	$objemail.subject = $s_subject
	If StringInStr($as_body, "<") AND StringInStr($as_body, ">") Then
		$objemail.htmlbody = $as_body
	Else
		$objemail.textbody = $as_body & @CRLF
	EndIf
	If $s_attachfiles <> "" Then
		Local $s_files2attach = StringSplit($s_attachfiles, ";")
		For $x = 1 To $s_files2attach[0]
			$s_files2attach[$x] = _pathfull($s_files2attach[$x])
			If FileExists($s_files2attach[$x]) Then
				ConsoleWrite("+> File attachment added: " & $s_files2attach[$x] & @LF)
				$objemail.addattachment($s_files2attach[$x])
			Else
				ConsoleWrite("!> File not found to attach: " & $s_files2attach[$x] & @LF)
				SetError(1)
				Return 0
			EndIf
		Next
	EndIf
	$objemail.configuration.fields.item("http://schemas.microsoft.com/cdo/configuration/sendusing") = 2
	$objemail.configuration.fields.item("http://schemas.microsoft.com/cdo/configuration/smtpserver") = $s_smtpserver
	If Number($ipport) = 0 Then $ipport = 25
	$objemail.configuration.fields.item("http://schemas.microsoft.com/cdo/configuration/smtpserverport") = $ipport
	If $s_username <> "" Then
		$objemail.configuration.fields.item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate") = 1
		$objemail.configuration.fields.item("http://schemas.microsoft.com/cdo/configuration/sendusername") = $s_username
		$objemail.configuration.fields.item("http://schemas.microsoft.com/cdo/configuration/sendpassword") = $s_password
	EndIf
	If $ssl Then
		$objemail.configuration.fields.item("http://schemas.microsoft.com/cdo/configuration/smtpusessl") = True
	EndIf
	$objemail.configuration.fields.update
	Switch $s_importance
		Case "High"
			$objemail.fields.item("urn:schemas:mailheader:Importance") = "High"
		Case "Normal"
			$objemail.fields.item("urn:schemas:mailheader:Importance") = "Normal"
		Case "Low"
			$objemail.fields.item("urn:schemas:mailheader:Importance") = "Low"
	EndSwitch
	$objemail.fields.update
	$objemail.send
	$objemail = ""
EndFunc

Global $__g_hbuttonlastwnd
Global Const $tagbutton_imagelist = "ptr ImageList;" & $tagrect & ";uint Align"
Global Const $tagbutton_splitinfo = "uint mask;handle himlGlyph;uint uSplitStyle;" & $tagsize
Global Const $__buttonconstant_classname = "Button"
Global Const $__buttonconstant_gwl_style = -16
Global Const $__buttonconstant_wm_setfont = 48
Global Const $__buttonconstant_default_gui_font = 17

Func _guictrlbutton_click($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	_sendmessage($hwnd, $bm_click)
EndFunc

Func _guictrlbutton_create($hwnd, $stext, $ix, $iy, $iwidth, $iheight, $istyle = -1, $iexstyle = -1)
	If NOT IsHWnd($hwnd) Then
		Return SetError(1, 0, 0)
	EndIf
	If NOT IsString($stext) Then
		Return SetError(2, 0, 0)
	EndIf
	Local $iforcedstyle = BitOR($__udfguiconstant_ws_tabstop, $__udfguiconstant_ws_visible, $__udfguiconstant_ws_child, $bs_notify)
	If $istyle = -1 Then
		$istyle = $iforcedstyle
	Else
		$istyle = BitOR($istyle, $iforcedstyle)
	EndIf
	If $iexstyle = -1 Then $iexstyle = 0
	Local $nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(@error, @extended, 0)
	Local $hbutton = _winapi_createwindowex($iexstyle, $__buttonconstant_classname, $stext, $istyle, $ix, $iy, $iwidth, $iheight, $hwnd, $nctrlid)
	_sendmessage($hbutton, $__buttonconstant_wm_setfont, _winapi_getstockobject($__buttonconstant_default_gui_font), True)
	Return $hbutton
EndFunc

Func _guictrlbutton_destroy(ByRef $hwnd)
	If NOT _winapi_isclassname($hwnd, $__buttonconstant_classname) Then Return SetError(2, 2, False)
	Local $idestroyed = 0
	If IsHWnd($hwnd) Then
		If _winapi_inprocess($hwnd, $__g_hbuttonlastwnd) Then
			Local $nctrlid = _winapi_getdlgctrlid($hwnd)
			Local $hparent = _winapi_getparent($hwnd)
			$idestroyed = _winapi_destroywindow($hwnd)
			Local $iret = __udf_freeglobalid($hparent, $nctrlid)
			If NOT $iret Then
			EndIf
		Else
			Return SetError(1, 1, False)
		EndIf
	Else
		$idestroyed = GUICtrlDelete($hwnd)
	EndIf
	If $idestroyed Then $hwnd = 0
	Return $idestroyed <> 0
EndFunc

Func _guictrlbutton_enable($hwnd, $benable = True)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	If _winapi_isclassname($hwnd, $__buttonconstant_classname) Then Return _winapi_enablewindow($hwnd, $benable) = $benable
EndFunc

Func _guictrlbutton_getcheck($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $bm_getcheck)
EndFunc

Func _guictrlbutton_getfocus($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	If _winapi_isclassname($hwnd, $__buttonconstant_classname) Then Return _winapi_getfocus() = $hwnd
EndFunc

Func _guictrlbutton_getidealsize($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $tsize = DllStructCreate($tagsize), $asize[2]
	Local $iret = _sendmessage($hwnd, $bcm_getidealsize, 0, $tsize, 0, "wparam", "struct*")
	If NOT $iret Then Return SetError(-1, -1, $asize)
	$asize[0] = DllStructGetData($tsize, "X")
	$asize[1] = DllStructGetData($tsize, "Y")
	Return $asize
EndFunc

Func _guictrlbutton_getimage($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $iret = _sendmessage($hwnd, $bm_getimage, 0, 0, 0, "wparam", "lparam", "hwnd")
	If $iret <> 0 Then Return $iret
	$iret = _sendmessage($hwnd, $bm_getimage, 1, 0, 0, "wparam", "lparam", "hwnd")
	If $iret = 0 Then Return 0
	Return $iret
EndFunc

Func _guictrlbutton_getimagelist($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $tbutton_imagelist = DllStructCreate($tagbutton_imagelist), $aimagelist[6]
	If NOT _sendmessage($hwnd, $bcm_getimagelist, 0, $tbutton_imagelist, 0, "wparam", "struct*") Then Return SetError(-1, -1, $aimagelist)
	$aimagelist[0] = DllStructGetData($tbutton_imagelist, "ImageList")
	$aimagelist[1] = DllStructGetData($tbutton_imagelist, "Left")
	$aimagelist[2] = DllStructGetData($tbutton_imagelist, "Right")
	$aimagelist[3] = DllStructGetData($tbutton_imagelist, "Top")
	$aimagelist[4] = DllStructGetData($tbutton_imagelist, "Bottom")
	$aimagelist[5] = DllStructGetData($tbutton_imagelist, "Align")
	Return $aimagelist
EndFunc

Func _guictrlbutton_getnote($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $ilen = _guictrlbutton_getnotelength($hwnd) + 1
	Local $tnote = DllStructCreate("wchar Note[" & $ilen & "]")
	Local $tlen = DllStructCreate("dword")
	DllStructSetData($tlen, 1, $ilen)
	If NOT _sendmessage($hwnd, $bcm_getnote, $tlen, $tnote, 0, "struct*", "struct*") Then Return SetError(-1, 0, "")
	Return _winapi_widechartomultibyte($tnote)
EndFunc

Func _guictrlbutton_getnotelength($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $bcm_getnotelength)
EndFunc

Func _guictrlbutton_getsplitinfo($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $tsplitinfo = DllStructCreate($tagbutton_splitinfo), $ainfo[4]
	DllStructSetData($tsplitinfo, "mask", BitOR($bcsif_glyph, $bcsif_image, $bcsif_size, $bcsif_style))
	If NOT _sendmessage($hwnd, $bcm_getsplitinfo, 0, $tsplitinfo, 0, "wparam", "struct*") Then Return SetError(-1, 0, $ainfo)
	$ainfo[0] = DllStructGetData($tsplitinfo, "himlGlyph")
	$ainfo[1] = DllStructGetData($tsplitinfo, "uSplitStyle")
	$ainfo[2] = DllStructGetData($tsplitinfo, "X")
	$ainfo[3] = DllStructGetData($tsplitinfo, "Y")
	Return $ainfo
EndFunc

Func _guictrlbutton_getstate($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $bm_getstate)
EndFunc

Func _guictrlbutton_gettext($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	If _winapi_isclassname($hwnd, $__buttonconstant_classname) Then Return _winapi_getwindowtext($hwnd)
	Return ""
EndFunc

Func _guictrlbutton_gettextmargin($hwnd)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $trect = DllStructCreate($tagrect), $arect[4]
	If NOT _sendmessage($hwnd, $bcm_gettextmargin, 0, $trect, 0, "wparam", "struct*") Then Return SetError(-1, -1, $arect)
	$arect[0] = DllStructGetData($trect, "Left")
	$arect[1] = DllStructGetData($trect, "Top")
	$arect[2] = DllStructGetData($trect, "Right")
	$arect[3] = DllStructGetData($trect, "Bottom")
	Return $arect
EndFunc

Func _guictrlbutton_setcheck($hwnd, $istate = $bst_checked)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	_sendmessage($hwnd, $bm_setcheck, $istate)
EndFunc

Func _guictrlbutton_setdontclick($hwnd, $bstate = True)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	_sendmessage($hwnd, $bm_setdontclick, $bstate)
EndFunc

Func _guictrlbutton_setdropdownstate($hwnd, $bstate = True)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $bcm_setdropdownstate, $bstate) <> 0
EndFunc

Func _guictrlbutton_setfocus($hwnd, $bfocus = True)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	If _winapi_isclassname($hwnd, $__buttonconstant_classname) Then
		If $bfocus Then
			Return _winapi_setfocus($hwnd) <> 0
		Else
			Return _winapi_setfocus(_winapi_getparent($hwnd)) <> 0
		EndIf
	EndIf
EndFunc

Func _guictrlbutton_setimage($hwnd, $simagefile, $iiconid = -1, $blarge = False)
	Local $himage, $hprevimage
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	If StringUpper(StringMid($simagefile, StringLen($simagefile) - 2)) = "BMP" Then
		If BitAND(_winapi_getwindowlong($hwnd, $__buttonconstant_gwl_style), $bs_bitmap) = $bs_bitmap Then
			$himage = _winapi_loadimage(0, $simagefile, 0, 0, 0, BitOR($lr_loadfromfile, $lr_createdibsection))
			If NOT $himage Then Return SetError(-1, -1, False)
			$hprevimage = _sendmessage($hwnd, $bm_setimage, 0, $himage)
			If $hprevimage Then
				If NOT _winapi_deleteobject($hprevimage) Then _winapi_destroyicon($hprevimage)
			EndIf
			_winapi_updatewindow($hwnd)
			Return True
		EndIf
	Else
		If $iiconid = -1 Then
			$himage = _winapi_loadimage(0, $simagefile, 1, 0, 0, BitOR($lr_loadfromfile, $lr_createdibsection))
			If NOT $himage Then Return SetError(-1, -1, False)
			$hprevimage = _sendmessage($hwnd, $bm_setimage, 1, $himage)
			If $hprevimage Then
				If NOT _winapi_deleteobject($hprevimage) Then _winapi_destroyicon($hprevimage)
			EndIf
			_winapi_updatewindow($hwnd)
			Return True
		Else
			Local $ticon = DllStructCreate("handle Handle")
			Local $iret
			If $blarge Then
				$iret = _winapi_extracticonex($simagefile, $iiconid, $ticon, 0, 1)
			Else
				$iret = _winapi_extracticonex($simagefile, $iiconid, 0, $ticon, 1)
			EndIf
			If NOT $iret Then Return SetError(-1, -1, False)
			$hprevimage = _sendmessage($hwnd, $bm_setimage, 1, DllStructGetData($ticon, "Handle"))
			If $hprevimage Then
				If NOT _winapi_deleteobject($hprevimage) Then _winapi_destroyicon($hprevimage)
			EndIf
			_winapi_updatewindow($hwnd)
			Return True
		EndIf
	EndIf
	Return False
EndFunc

Func _guictrlbutton_setimagelist($hwnd, $himage, $ialign = 0, $ileft = 1, $itop = 1, $iright = 1, $ibottom = 1)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	If $ialign < 0 OR $ialign > 4 Then $ialign = 0
	Local $tbutton_imagelist = DllStructCreate($tagbutton_imagelist)
	DllStructSetData($tbutton_imagelist, "ImageList", $himage)
	DllStructSetData($tbutton_imagelist, "Left", $ileft)
	DllStructSetData($tbutton_imagelist, "Top", $itop)
	DllStructSetData($tbutton_imagelist, "Right", $iright)
	DllStructSetData($tbutton_imagelist, "Bottom", $ibottom)
	DllStructSetData($tbutton_imagelist, "Align", $ialign)
	Local $benabled = _guictrlbutton_enable($hwnd, False)
	Local $iret = _sendmessage($hwnd, $bcm_setimagelist, 0, $tbutton_imagelist, 0, "wparam", "struct*") <> 0
	_guictrlbutton_enable($hwnd)
	If NOT $benabled Then _guictrlbutton_enable($hwnd, False)
	Return $iret
EndFunc

Func _guictrlbutton_setnote($hwnd, $snote)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $tnote = _winapi_multibytetowidechar($snote)
	Return _sendmessage($hwnd, $bcm_setnote, 0, $tnote, 0, "wparam", "struct*") <> 0
EndFunc

Func _guictrlbutton_setshield($hwnd, $brequired = True)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Return _sendmessage($hwnd, $bcm_setshield, 0, $brequired) = 1
EndFunc

Func _guictrlbutton_setsize($hwnd, $iwidth, $iheight)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	If NOT _winapi_isclassname($hwnd, $__buttonconstant_classname) Then Return SetError(-1, -1, False)
	Local $hparent = _winapi_getparent($hwnd)
	If NOT $hparent Then Return SetError(-1, -1, False)
	Local $apos = WinGetPos($hwnd)
	If NOT IsArray($apos) Then Return SetError(-1, -1, False)
	Local $tpoint = DllStructCreate($tagpoint)
	DllStructSetData($tpoint, "X", $apos[0])
	DllStructSetData($tpoint, "Y", $apos[1])
	If NOT _winapi_screentoclient($hparent, $tpoint) Then Return SetError(-1, -1, False)
	Local $iret = WinMove($hwnd, "", DllStructGetData($tpoint, "X"), DllStructGetData($tpoint, "Y"), $iwidth, $iheight)
	Return SetError($iret - 1, $iret - 1, $iret <> 0)
EndFunc

Func _guictrlbutton_setsplitinfo($hwnd, $himlglyph = -1, $isplitstyle = $bcss_alignleft, $iwidth = 0, $iheight = 0)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $tsplitinfo = DllStructCreate($tagbutton_splitinfo), $imask = 0
	If $himlglyph <> -1 Then
		$imask = BitOR($imask, $bcsif_glyph)
		DllStructSetData($tsplitinfo, "himlGlyph", $himlglyph)
	EndIf
	$imask = BitOR($imask, $bcsif_style)
	If BitAND($isplitstyle, $bcss_image) = $bcss_image Then $imask = BitOR($imask, $bcsif_image)
	DllStructSetData($tsplitinfo, "uSplitStyle", $isplitstyle)
	If $iwidth > 0 OR $iheight > 0 Then
		$imask = BitOR($imask, $bcsif_size)
		DllStructSetData($tsplitinfo, "X", $iwidth)
		DllStructSetData($tsplitinfo, "Y", $iheight)
	EndIf
	DllStructSetData($tsplitinfo, "mask", $imask)
	Return _sendmessage($hwnd, $bcm_setsplitinfo, 0, $tsplitinfo, 0, "wparam", "struct*") <> 0
EndFunc

Func _guictrlbutton_setstate($hwnd, $bhighlighted = True)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	_sendmessage($hwnd, $bm_setstate, $bhighlighted)
EndFunc

Func _guictrlbutton_setstyle($hwnd, $istyle)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	_sendmessage($hwnd, $bm_setstyle, $istyle, True)
	_winapi_updatewindow($hwnd)
EndFunc

Func _guictrlbutton_settext($hwnd, $stext)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	If _winapi_isclassname($hwnd, $__buttonconstant_classname) Then Return _winapi_setwindowtext($hwnd, $stext)
EndFunc

Func _guictrlbutton_settextmargin($hwnd, $ileft = 1, $itop = 1, $iright = 1, $ibottom = 1)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	Local $trect = DllStructCreate($tagrect)
	DllStructSetData($trect, "Left", $ileft)
	DllStructSetData($trect, "Top", $itop)
	DllStructSetData($trect, "Right", $iright)
	DllStructSetData($trect, "Bottom", $ibottom)
	Return _sendmessage($hwnd, $bcm_settextmargin, 0, $trect, 0, "wparam", "struct*") <> 0
EndFunc

Func _guictrlbutton_show($hwnd, $bshow = True)
	If NOT IsHWnd($hwnd) Then $hwnd = GUICtrlGetHandle($hwnd)
	If _winapi_isclassname($hwnd, $__buttonconstant_classname) Then
		If $bshow Then
			Return _winapi_showwindow($hwnd, @SW_SHOW)
		Else
			Return _winapi_showwindow($hwnd, @SW_HIDE)
		EndIf
	EndIf
EndFunc

Global Const $__finderconstant_classname = "WinFinder"
Global Const $__finderconstant_sizeofptr = DllStructGetSize(DllStructCreate("ptr"))
Global Const $__finderconstant_gwl_iconfull = 0
Global Const $__finderconstant_gwl_iconempty = $__finderconstant_sizeofptr
Global Const $__finderconstant_gwl_cursor = 2 * $__finderconstant_sizeofptr
Global Const $__finderconstant_gwl_current = 3 * $__finderconstant_sizeofptr
Global Const $fn_wndchanged = 2
Global Const $fn_startuse = 3
Global Const $fn_enduse = 4
Global Const $fn_reschanged = 5
Global Const $__finderconstant_tagwndclassex = "uint Size; " & "uint style; " & "ptr WndProc; " & "int ClsExtra; " & "int WndExtra; " & "HANDLE Instance; " & "HANDLE Icon; " & "HANDLE Cursor; " & "HANDLE Background; " & "ptr MenuName; " & "ptr ClassName; " & "HANDLE IconSm"

Func _guictrlfinder_create($hwnd, $ix, $iw, $iwidth = 32, $iheight = 32)
	Local $hret, $nctrlid
	Local Static $iatom = 0
	If NOT IsHWnd($hwnd) OR NOT WinExists($hwnd) Then Return SetError(1, 0, 0)
	If NOT $iatom Then
		Local $hcallback, $tclassname, $twc, $ares
		If NOT OnAutoItExitRegister("__GUICtrlFinder_OnExit") Then Return SetError(2, 0, 0)
		$hcallback = __guictrlfinder_getwndproc()
		If @error Then Return SetError(3, 0, 0)
		$tclassname = DllStructCreate("wchar[" & (StringLen($__finderconstant_classname) + 1) & "]")
		DllStructSetData($tclassname, 1, $__finderconstant_classname)
		$twc = DllStructCreate($__finderconstant_tagwndclassex)
		DllStructSetData($twc, "Size", DllStructGetSize($twc))
		DllStructSetData($twc, "style", 3)
		DllStructSetData($twc, "WndProc", DllCallbackGetPtr($hcallback))
		DllStructSetData($twc, "ClsExtra", 0)
		DllStructSetData($twc, "WndExtra", 16 * (@AutoItX64 + 1))
		DllStructSetData($twc, "Instance", _winapi_getmodulehandle(0))
		DllStructSetData($twc, "Icon", 0)
		DllStructSetData($twc, "Cursor", _winapi_loadimage(0, 32512, $image_cursor, 0, 0, BitOR($lr_defaultcolor, $lr_shared)))
		DllStructSetData($twc, "Background", $color_btnface + 1)
		DllStructSetData($twc, "MenuName", 0)
		DllStructSetData($twc, "ClassName", DllStructGetPtr($tclassname))
		DllStructSetData($twc, "IconSm", 0)
		$ares = DllCall("user32.dll", "word", "RegisterClassExW", "ptr", DllStructGetPtr($twc))
		If @error OR NOT $ares[0] Then Return SetError(4, @error, 0)
		$iatom = $ares[0]
	EndIf
	$nctrlid = __udf_getnextglobalid($hwnd)
	If @error Then Return SetError(5, @error, 0)
	$hret = _winapi_createwindowex(0, $__finderconstant_classname, "", BitOR($__udfguiconstant_ws_child, $__udfguiconstant_ws_visible), $ix, $iw, $iwidth, $iheight, $hwnd, $nctrlid)
	If NOT $hret Then Return SetError(6, @error, 0)
	Return $hret
EndFunc

Func _guictrlfinder_getemptyicon($hwnd)
	If NOT _winapi_isclassname($hwnd, $__finderconstant_classname) Then Return SetError(1, 0, -1)
	Return _winapi_getwindowlong($hwnd, $__finderconstant_gwl_iconempty)
EndFunc

Func _guictrlfinder_getfullicon($hwnd)
	If NOT _winapi_isclassname($hwnd, $__finderconstant_classname) Then Return SetError(1, 0, -1)
	Return _winapi_getwindowlong($hwnd, $__finderconstant_gwl_iconfull)
EndFunc

Func _guictrlfinder_gettargetcursor($hwnd)
	If NOT _winapi_isclassname($hwnd, $__finderconstant_classname) Then Return SetError(1, 0, -1)
	Return _winapi_getwindowlong($hwnd, $__finderconstant_gwl_cursor)
EndFunc

Func _guictrlfinder_getlastwnd($hwnd)
	If NOT _winapi_isclassname($hwnd, $__finderconstant_classname) Then Return SetError(1, 0, -1)
	Return HWnd(_winapi_getwindowlong($hwnd, $__finderconstant_gwl_current))
EndFunc

Func _guictrlfinder_isfinding($hwnd)
	If NOT _winapi_isclassname($hwnd, $__finderconstant_classname) Then Return SetError(1, 0, False)
	Local $hcap = DllCall("User32.dll", "handle", "GetCapture")
	If @error Then Return False
	Return $hcap[0] = $hwnd
EndFunc

Func _guictrlfinder_setemptyicon($hwnd, $hicon)
	Local $hret
	If NOT _winapi_isclassname($hwnd, $__finderconstant_classname) Then Return SetError(1, 0, -1)
	If $hicon = Default Then $hicon = __guictrlfinder_getdefaultresources(1)
	$hret = _winapi_setwindowlong($hwnd, $__finderconstant_gwl_iconempty, $hicon)
	_winapi_postmessage(_winapi_getparent($hwnd), $wm_command, _winapi_makelong(_winapi_getdlgctrlid($hwnd), $fn_reschanged), $hwnd)
	Return $hret
EndFunc

Func _guictrlfinder_setfullicon($hwnd, $hicon)
	Local $hret
	If NOT _winapi_isclassname($hwnd, $__finderconstant_classname) Then Return SetError(1, 0, -1)
	If $hicon = Default Then $hicon = __guictrlfinder_getdefaultresources(0)
	$hret = _winapi_setwindowlong($hwnd, $__finderconstant_gwl_iconfull, $hicon)
	_winapi_postmessage(_winapi_getparent($hwnd), $wm_command, _winapi_makelong(_winapi_getdlgctrlid($hwnd), $fn_reschanged), $hwnd)
	Return $hret
EndFunc

Func _guictrlfinder_settargetcursor($hwnd, $hcur)
	Local $hret
	If NOT _winapi_isclassname($hwnd, $__finderconstant_classname) Then Return SetError(1, 0, -1)
	If $hcur = Default Then $hcur = __guictrlfinder_getdefaultresources(2)
	$hret = _winapi_setwindowlong($hwnd, $__finderconstant_gwl_cursor, $hcur)
	_winapi_postmessage(_winapi_getparent($hwnd), $wm_command, _winapi_makelong(_winapi_getdlgctrlid($hwnd), $fn_reschanged), $hwnd)
	Return $hret
EndFunc

Func _guictrlfinder_setlastwnd($hwnd, $hlastwnd)
	Local $hret
	If NOT _winapi_isclassname($hwnd, $__finderconstant_classname) Then Return SetError(1, 0, -1)
	$hret = _winapi_setwindowlong($hwnd, $__finderconstant_gwl_current, $hlastwnd)
	_winapi_postmessage(_winapi_getparent($hwnd), $wm_command, _winapi_makelong(_winapi_getdlgctrlid($hwnd), $fn_wndchanged), $hwnd)
	Return $hret
EndFunc

Func __guictrlfinder_getwndproc($fclean = False)
	Local Static $hcallback = 0
	If $fclean Then
		DllCallbackFree($hcallback)
		$hcallback = 0
	ElseIf $hcallback = 0 Then
		$hcallback = DllCallbackRegister("__GUICtrlFinder_WndProc", "lresult", "hwnd;uint;wparam;lparam")
		If $hcallback = 0 Then Return SetError(1, 0, 0)
	EndIf
	Return $hcallback
EndFunc

Func __guictrlfinder_getdefaultresources($ires = -1, $fclean = False)
	Local Static $ahres[3] = [0, 0, 0]
	If $fclean Then
		_winapi_destroyicon($ahres[0])
		_winapi_destroyicon($ahres[1])
		DllCall("user32.dll", "int", "DestroyCursor", "ptr", $ahres[2])
		$ahres[0] = 0
		Return 0
	ElseIf $ahres[0] = 0 Then
		Local $bres, $tres, $ioffset, $timg, $aret
		$bres = "0x0000010001002020100001000400E8020000160000002800000020000000400000000100040000000000000200000000000000" & "000000100000001000000000000000000080000080000000808000800000008000800080800000C0C0C000808080000000FF0000FF0" & "00000FFFF00FF000000FF00FF00FFFF0000FFFFFF000000000000000000000000000000000000000000000000000000000000000000" & "00FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFF00000FFFFFFFFFFFF000FFFFFFFFF" & "F00FF0FF00FFFFFFFFFF000FFFFFFFFF0FF00000FF0FFFFFFFFF000FFFFFFFF0FFFFF0FFFFF0FFFFFFFF000FFFFFFF0FFFF00000FFF" & "F0FFFFFFF000FFFFFFF0FFFFFF0FFFFFF0FFFFFFF000FFFFFF0F0F0FF000FF0F0F0FFFFFF000FFFFFF0F0F0F0FFF0F0F0F0FFFFFF00" & "0FFFFFF0000000F0F0000000FFFFFF000FFFFFF0F0F0F0FFF0F0F0F0FFFFFF000FFFFFF0F0F0FF000FF0F0F0FFFFFF000FFFFFFF0FF" & "FFFF0FFFFFF0FFFFFFF000FFFFFFF0FFFF00000FFFF0FFFFFFF000FFFFFFFF0FFFFF0FFFFF0FFFFFFFF000FFFFFFFFF0FF00000FF0F" & "FFFFFFFF000FFFFFFFFFF00FF0FF00FFFFFFFFFF000FFFFFFFFFFFF00000FFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000" & "FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000007770CCCCCCC" & "CCCCCCCCCCCCCC07770007070CCCCCCCCCCCCCCCCCCCCC07070007770CCCCCCCCCCCCCCCCCCCCC07770000000000000000000000000" & "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFF" & "FFFFF800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000" & "00800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008" & "000000080000000FFFFFFFFFFFFFFFFFFFFFFFF"
		$tres = DllStructCreate("byte[" & BinaryLen($bres) & "]")
		DllStructSetData($tres, 1, Binary($bres))
		$ioffset = DllCall("user32.dll", "int", "LookupIconIdFromDirectory", "ptr", DllStructGetPtr($tres), "int", 1)
		$ioffset = $ioffset[0]
		$timg = DllStructCreate($tagbitmapinfo, DllStructGetPtr($tres) + $ioffset)
		$aret = DllCall("user32.dll", "handle", "CreateIconFromResource", "ptr", DllStructGetPtr($timg), "int", DllStructGetData($timg, "Size"), "int", 1, "int", 196608)
		$ahres[0] = $aret[0]
		$bres = "0x0000010001002020100001000400E80200001600000028000000200000004000000001000400000000000002000000000000000000001000" & "00001000000000000000000080000080000000808000800000008000800080800000C0C0C000808080000000FF0000FF000000FFFF00FF00" & "0000FF00FF00FFFF0000FFFFFF00000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFF" & "FFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FF" & "FFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFF" & "FFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FF" & "FFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFF" & "FFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FF" & "FFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFFFFF" & "FFFFFFFFFFF000000000000000000000000000000000007770CCCCCCCCCCCCCCCCCCCCC07770007070CCCCCCCCCCCCCCCCCCCCC070700077" & "70CCCCCCCCCCCCCCCCCCCCC07770000000000000000000000000000000000000000000000000000000000000000000000000000000000000" & "00000000000000000000000000000000000000000000FFFFFFFF800000008000000080000000800000008000000080000000800000008000" & "0000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000" & "0000800000008000000080000000800000008000000080000000FFFFFFFFFFFFFFFFFFFFFFFF"
		$tres = DllStructCreate("byte[" & BinaryLen($bres) & "]")
		DllStructSetData($tres, 1, Binary($bres))
		$ioffset = DllCall("user32.dll", "int", "LookupIconIdFromDirectory", "ptr", DllStructGetPtr($tres), "int", 1)
		$ioffset = $ioffset[0]
		$timg = DllStructCreate($tagbitmapinfo, DllStructGetPtr($tres) + $ioffset)
		$aret = DllCall("user32.dll", "handle", "CreateIconFromResource", "ptr", DllStructGetPtr($timg), "int", DllStructGetData($timg, "Size"), "int", 1, "int", 196608)
		$ahres[1] = $aret[0]
		$bres = "0x000002000100202000000F0010003001000016000000280000002000000040000000010001000000000080000000000000000000000002" & "0000000200000000000000FFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000" & "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" & "00000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" & "FFFFFFFFF83FFFFFE6CFFFFFD837FFFFBEFBFFFF783DFFFF7EFDFFFEAC6AFFFEABAAFFFE0280FFFEABAAFFFEAC6AFFFF7EFDFFFF783DFFFF" & "BEFBFFFFD837FFFFE6CFFFFFF83FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
		$tres = DllStructCreate("byte[" & BinaryLen($bres) & "]")
		DllStructSetData($tres, 1, Binary($bres))
		$ioffset = DllCall("user32.dll", "int", "LookupIconIdFromDirectory", "ptr", DllStructGetPtr($tres), "int", 1)
		$ioffset = $ioffset[0]
		$timg = DllStructCreate($tagbitmapinfo, DllStructGetPtr($tres) + $ioffset)
		$aret = DllCall("user32.dll", "handle", "CreateIconFromResource", "ptr", DllStructGetPtr($timg), "int", DllStructGetData($timg, "Size"), "int", 1, "int", 196608)
		$ahres[2] = $aret[0]
	EndIf
	If $ires < 0 Then Return $ahres
	Return $ahres[$ires]
EndFunc

Func __guictrlfinder_wndproc($hwnd, $imsg, $wparam, $lparam)
	Local Static $hbackupcursor
	Local Static $arect
	Local Static $fin = False
	Local $hlast, $hdc, $hpen, $holdpen, $h
	Switch $imsg
		Case $wm_lbuttondown
			Local $hcur = _winapi_getwindowlong($hwnd, $__finderconstant_gwl_cursor)
			If $hcur = 0 Then $hcur = __guictrlfinder_getdefaultresources(2)
			_winapi_setcapture($hwnd)
			$hbackupcursor = _winapi_setcursor($hcur)
			_winapi_redrawwindow($hwnd)
			_winapi_postmessage(_winapi_getparent($hwnd), $wm_command, _winapi_makelong(_winapi_getdlgctrlid($hwnd), $fn_startuse), $hwnd)
		Case $wm_mousemove
			If _guictrlfinder_isfinding($hwnd) Then
				If $fin Then Return 0
				$fin = True
				Local $tpoint = _winapi_getmousepos()
				$h = _winapi_windowfrompoint($tpoint)
				If $h = 0 Then ContinueCase
				$hlast = _guictrlfinder_getlastwnd($hwnd)
				If $h <> $hlast Then
					_guictrlfinder_setlastwnd($hwnd, $h)
					If $hlast <> 0 AND IsArray($arect) Then
						$hdc = _winapi_getdc($hlast)
						If NOT $hdc Then ContinueCase
						DllCall("Gdi32.dll", "int", "SetROP2", "HANDLE", $hdc, "int", 10)
						$hpen = _winapi_createpen($ps_solid, 4, 0)
						$holdpen = _winapi_selectobject($hdc, $hpen)
						DllCall("Gdi32.dll", "int", "Rectangle", "HANDLE", $hdc, "int", 2, "int", 2, "int", $arect[0] - 1, "int", $arect[1] - 1)
						_winapi_selectobject($hdc, $holdpen)
						_winapi_deleteobject($hpen)
						_winapi_releasedc($hlast, $hdc)
					EndIf
					$arect = WinGetClientSize($h)
					If @error Then ContinueCase
					$hdc = _winapi_getdc($h)
					If NOT $hdc Then ContinueCase
					DllCall("Gdi32.dll", "int", "SetROP2", "HANDLE", $hdc, "int", 10)
					$hpen = _winapi_createpen($ps_solid, 4, 0)
					$holdpen = _winapi_selectobject($hdc, $hpen)
					DllCall("Gdi32.dll", "int", "Rectangle", "HANDLE", $hdc, "int", 2, "int", 2, "int", $arect[0] - 1, "int", $arect[1] - 1)
					_winapi_selectobject($hdc, $holdpen)
					_winapi_deleteobject($hpen)
					_winapi_releasedc($h, $hdc)
				EndIf
				ContinueCase
			EndIf
		Case -1
			$fin = False
			Return 0
		Case $wm_lbuttonup
			If _guictrlfinder_isfinding($hwnd) Then
				_winapi_releasecapture()
				_winapi_setcursor($hbackupcursor)
				$hlast = _guictrlfinder_getlastwnd($hwnd)
				If $hlast <> 0 AND IsArray($arect) Then
					If $fin Then _winapi_postmessage($hwnd, $imsg, $wparam, $lparam)
					$hdc = _winapi_getdc($hlast)
					If NOT $hdc Then Return 0
					DllCall("Gdi32.dll", "int", "SetROP2", "HANDLE", $hdc, "int", 10)
					$hpen = _winapi_createpen($ps_solid, 4, 0)
					$holdpen = _winapi_selectobject($hdc, $hpen)
					DllCall("Gdi32.dll", "int", "Rectangle", "HANDLE", $hdc, "int", 2, "int", 2, "int", $arect[0] - 1, "int", $arect[1] - 1)
					_winapi_selectobject($hdc, $holdpen)
					_winapi_deleteobject($hpen)
					_winapi_releasedc($hlast, $hdc)
					$arect = 0
				EndIf
				_winapi_redrawwindow($hwnd)
				_winapi_postmessage(_winapi_getparent($hwnd), $wm_command, _winapi_makelong(_winapi_getdlgctrlid($hwnd), $fn_enduse), $hwnd)
			EndIf
		Case $wm_paint
			Local $hico, $trect
			$hdc = _winapi_getdc($hwnd)
			If _guictrlfinder_isfinding($hwnd) Then
				$hico = _winapi_getwindowlong($hwnd, $__finderconstant_gwl_iconempty)
				If $hico = 0 Then $hico = __guictrlfinder_getdefaultresources(1)
			Else
				$hico = _winapi_getwindowlong($hwnd, $__finderconstant_gwl_iconfull)
				If $hico = 0 Then $hico = __guictrlfinder_getdefaultresources(0)
			EndIf
			$trect = DllStructCreate($tagrect)
			DllStructSetData($trect, "Left", 0)
			DllStructSetData($trect, "Top", 0)
			DllStructSetData($trect, "Right", _winapi_getwindowwidth($hwnd))
			DllStructSetData($trect, "Bottom", _winapi_getwindowheight($hwnd))
			_winapi_fillrect($hdc, DllStructGetPtr($trect), $color_btnface + 1)
			_winapi_drawicon($hdc, 0, 0, $hico)
			_winapi_releasedc($hwnd, $hdc)
			DllCall("User32.dll", "int", "ValidateRect", "HWND", $hwnd, "ptr", 0)
			Return 0
		Case $wm_destroy
			$h = _winapi_getwindowlong($hwnd, $__finderconstant_gwl_iconfull)
			If $h <> 0 AND $h <> __guictrlfinder_getdefaultresources(0) Then _winapi_destroyicon($h)
			$h = _winapi_getwindowlong($hwnd, $__finderconstant_gwl_iconempty)
			If $h <> 0 AND $h <> __guictrlfinder_getdefaultresources(1) Then _winapi_destroyicon($h)
			$h = _winapi_getwindowlong($hwnd, $__finderconstant_gwl_cursor)
			If $h <> 0 AND $h <> __guictrlfinder_getdefaultresources(2) Then DllCall("user32.dll", "int", "DestroyCursor", "ptr", $h)
			_winapi_destroywindow($hwnd)
			Return 0
	EndSwitch
	Return _winapi_defwindowproc($hwnd, $imsg, $wparam, $lparam)
EndFunc

Func __guictrlfinder_onexit()
	Local $a = _winapi_enumwindows()
	For $i = 1 To $a[0][0]
		If $a[$i][1] = $__finderconstant_classname AND WinGetProcess($a[$i][0]) = @AutoItPID Then
			_winapi_postmessage($a[$i][0], $wm_close, 0, 0)
		EndIf
	Next
	__guictrlfinder_getwndproc(True)
	__guictrlfinder_getdefaultresources(-1, True)
	DllCall("user32.dll", "int", "UnregisterClassW", "wstr", $__finderconstant_classname, "HANDLE", _winapi_getmodulehandle(0))
EndFunc

Global Const $dts_shortdateformat = 0
Global Const $dts_updown = 1
Global Const $dts_shownone = 2
Global Const $dts_longdateformat = 4
Global Const $dts_timeformat = 9
Global Const $dts_rightalign = 32
Global Const $dts_shortdatecenturyformat = 12
Global Const $dts_appcanparse = 16
Global Const $dmw_longname = 0
Global Const $dmw_shortname = 1
Global Const $dmw_locale_longname = 2
Global Const $dmw_locale_shortname = 3
Global Const $gdt_error = -1
Global Const $gdt_valid = 0
Global Const $gdt_none = 1
Global Const $gdtr_min = 1
Global Const $gdtr_max = 2
Global Const $mcht_nowhere = 0
Global Const $mcht_title = 65536
Global Const $mcht_calendar = 131072
Global Const $mcht_todaylink = 196608
Global Const $mcht_next = 16777216
Global Const $mcht_prev = 33554432
Global Const $mcht_titlebk = 65536
Global Const $mcht_titlemonth = 65537
Global Const $mcht_titleyear = 65538
Global Const $mcht_titlebtnnext = 16842755
Global Const $mcht_titlebtnprev = 33619971
Global Const $mcht_calendarbk = 131072
Global Const $mcht_calendardate = 131073
Global Const $mcht_calendarday = 131074
Global Const $mcht_calendarweeknum = 131075
Global Const $mcht_calendardatenext = 16908288
Global Const $mcht_calendardateprev = 33685504
Global Const $mcs_daystate = 1
Global Const $mcs_multiselect = 2
Global Const $mcs_weeknumbers = 4
Global Const $mcs_notodaycircle = 8
Global Const $mcs_notoday = 16
Global Const $mcs_notrailingdates = 64
Global Const $mcs_shortdaysofweek = 128
Global Const $mcs_noselchangeonnav = 256
Global Const $mcm_first = 4096
Global Const $mcm_getcalendarborder = ($mcm_first + 31)
Global Const $mcm_getcalendarcount = ($mcm_first + 23)
Global Const $mcm_getcalendargridinfo = ($mcm_first + 24)
Global Const $mcm_getcalid = ($mcm_first + 27)
Global Const $mcm_getcolor = ($mcm_first + 11)
Global Const $mcm_getcurrentview = ($mcm_first + 22)
Global Const $mcm_getcursel = ($mcm_first + 1)
Global Const $mcm_getfirstdayofweek = ($mcm_first + 16)
Global Const $mcm_getmaxselcount = ($mcm_first + 3)
Global Const $mcm_getmaxtodaywidth = ($mcm_first + 21)
Global Const $mcm_getminreqrect = ($mcm_first + 9)
Global Const $mcm_getmonthdelta = ($mcm_first + 19)
Global Const $mcm_getmonthrange = ($mcm_first + 7)
Global Const $mcm_getrange = ($mcm_first + 17)
Global Const $mcm_getselrange = ($mcm_first + 5)
Global Const $mcm_gettoday = ($mcm_first + 13)
Global Const $mcm_getunicodeformat = 8192 + 6
Global Const $mcm_hittest = ($mcm_first + 14)
Global Const $mcm_setcalendarborder = ($mcm_first + 30)
Global Const $mcm_setcalid = ($mcm_first + 28)
Global Const $mcm_setcolor = ($mcm_first + 10)
Global Const $mcm_setcurrentview = ($mcm_first + 32)
Global Const $mcm_setcursel = ($mcm_first + 2)
Global Const $mcm_setdaystate = ($mcm_first + 8)
Global Const $mcm_setfirstdayofweek = ($mcm_first + 15)
Global Const $mcm_setmaxselcount = ($mcm_first + 4)
Global Const $mcm_setmonthdelta = ($mcm_first + 20)
Global Const $mcm_setrange = ($mcm_first + 18)
Global Const $mcm_setselrange = ($mcm_first + 6)
Global Const $mcm_settoday = ($mcm_first + 12)
Global Const $mcm_setunicodeformat = 8192 + 5
Global Const $mcm_sizerecttomin = ($mcm_first + 29)
Global Const $mcn_first = -746
Global Const $mcn_selchange = ($mcn_first - 3)
Global Const $mcn_getdaystate = ($mcn_first - 1)
Global Const $mcn_select = ($mcn_first)
Global Const $mcn_viewchange = ($mcn_first - 4)
Global Const $mcsc_background = 0
Global Const $mcsc_monthbk = 4
Global Const $mcsc_text = 1
Global Const $mcsc_titlebk = 2
Global Const $mcsc_titletext = 3
Global Const $mcsc_trailingtext = 5
Global Const $dtm_first = 4096
Global Const $dtm_getsystemtime = $dtm_first + 1
Global Const $dtm_setsystemtime = $dtm_first + 2
Global Const $dtm_getrange = $dtm_first + 3
Global Const $dtm_setrange = $dtm_first + 4
Global Const $dtm_setformat = $dtm_first + 5
Global Const $dtm_setmccolor = $dtm_first + 6
Global Const $dtm_getmccolor = $dtm_first + 7
Global Const $dtm_getmonthcal = $dtm_first + 8
Global Const $dtm_setmcfont = $dtm_first + 9
Global Const $dtm_getmcfont = $dtm_first + 10
Global Const $dtm_setformatw = $dtm_first + 50
Global Const $dtn_first = -740
Global Const $dtn_first2 = -753
Global Const $dtn_datetimechange = $dtn_first2 - 6
Global Const $dtn_userstring = $dtn_first2 - 5
Global Const $dtn_wmkeydown = $dtn_first2 - 4
Global Const $dtn_format = $dtn_first2 - 3
Global Const $dtn_formatquery = $dtn_first2 - 2
Global Const $dtn_dropdown = $dtn_first2 - 1
Global Const $dtn_closeup = $dtn_first2 + 0
Global Const $dtn_userstringw = $dtn_first - 5
Global Const $dtn_wmkeydownw = $dtn_first - 4
Global Const $dtn_formatw = $dtn_first - 3
Global Const $dtn_formatqueryw = $dtn_first - 2
Global Const $gui_ss_default_date = $dts_longdateformat
Global Const $gui_ss_default_monthcal = 0
Global Const $linguistic_ignorecase = 16
Global Const $linguistic_ignorediacritic = 32
Global Const $norm_ignorecase = 1
Global Const $norm_ignorekanatype = 65536
Global Const $norm_ignorenonspace = 2
Global Const $norm_ignoresymbols = 4
Global Const $norm_ignorewidth = 131072
Global Const $norm_linguistic_casing = 134217728
Global Const $sort_digitsasnumbers = 8
Global Const $sort_stringsort = 4096
Global Const $cstr_less_than = 1
Global Const $cstr_equal = 2
Global Const $cstr_greater_than = 3
Global Const $mui_language_id = 4
Global Const $mui_language_name = 8
Global Const $date_autolayout = 64
Global Const $date_longdate = 2
Global Const $date_ltrreading = 16
Global Const $date_shortdate = 1
Global Const $date_rtlreading = 32
Global Const $date_use_alt_calendar = 4
Global Const $date_yearmonth = 8
Global Const $geo_nation = 1
Global Const $geo_latitude = 2
Global Const $geo_longitude = 3
Global Const $geo_iso2 = 4
Global Const $geo_iso3 = 5
Global Const $geo_rfc1766 = 6
Global Const $geo_lcid = 7
Global Const $geo_friendlyname = 8
Global Const $geo_officialname = 9
Global Const $geo_timezones = 10
Global Const $geo_officiallanguages = 11
Global Const $geo_iso_un_number = 12
Global Const $geo_parent = 13
Global Const $locale_ilanguage = 1
Global Const $locale_slanguage = 2
Global Const $locale_senglanguage = 4097
Global Const $locale_sabbrevlangname = 3
Global Const $locale_snativelangname = 4
Global Const $locale_icountry = 5
Global Const $locale_scountry = 6
Global Const $locale_sengcountry = 4098
Global Const $locale_sabbrevctryname = 7
Global Const $locale_snativectryname = 8
Global Const $locale_idefaultlanguage = 9
Global Const $locale_idefaultcountry = 10
Global Const $locale_idefaultcodepage = 11
Global Const $locale_idefaultansicodepage = 4100
Global Const $locale_idefaultmaccodepage = 4113
Global Const $locale_slist = 12
Global Const $locale_imeasure = 13
Global Const $locale_sdecimal = 14
Global Const $locale_sthousand = 15
Global Const $locale_sgrouping = 16
Global Const $locale_idigits = 17
Global Const $locale_ilzero = 18
Global Const $locale_inegnumber = 4112
Global Const $locale_snativedigits = 19
Global Const $locale_scurrency = 20
Global Const $locale_sintlsymbol = 21
Global Const $locale_smondecimalsep = 22
Global Const $locale_smonthousandsep = 23
Global Const $locale_smongrouping = 24
Global Const $locale_icurrdigits = 25
Global Const $locale_iintlcurrdigits = 26
Global Const $locale_icurrency = 27
Global Const $locale_inegcurr = 28
Global Const $locale_sdate = 29
Global Const $locale_stime = 30
Global Const $locale_sshortdate = 31
Global Const $locale_slongdate = 32
Global Const $locale_stimeformat = 4099
Global Const $locale_idate = 33
Global Const $locale_ildate = 34
Global Const $locale_itime = 35
Global Const $locale_itimemarkposn = 4101
Global Const $locale_icentury = 36
Global Const $locale_itlzero = 37
Global Const $locale_idaylzero = 38
Global Const $locale_imonlzero = 39
Global Const $locale_s1159 = 40
Global Const $locale_s2359 = 41
Global Const $locale_icalendartype = 4105
Global Const $locale_ioptionalcalendar = 4107
Global Const $locale_ifirstdayofweek = 4108
Global Const $locale_ifirstweekofyear = 4109
Global Const $locale_sdayname1 = 42
Global Const $locale_sdayname2 = 43
Global Const $locale_sdayname3 = 44
Global Const $locale_sdayname4 = 45
Global Const $locale_sdayname5 = 46
Global Const $locale_sdayname6 = 47
Global Const $locale_sdayname7 = 48
Global Const $locale_sabbrevdayname1 = 49
Global Const $locale_sabbrevdayname2 = 50
Global Const $locale_sabbrevdayname3 = 51
Global Const $locale_sabbrevdayname4 = 52
Global Const $locale_sabbrevdayname5 = 53
Global Const $locale_sabbrevdayname6 = 54
Global Const $locale_sabbrevdayname7 = 55
Global Const $locale_smonthname1 = 56
Global Const $locale_smonthname2 = 57
Global Const $locale_smonthname3 = 58
Global Const $locale_smonthname4 = 59
Global Const $locale_smonthname5 = 60
Global Const $locale_smonthname6 = 61
Global Const $locale_smonthname7 = 62
Global Const $locale_smonthname8 = 63
Global Const $locale_smonthname9 = 64
Global Const $locale_smonthname10 = 65
Global Const $locale_smonthname11 = 66
Global Const $locale_smonthname12 = 67
Global Const $locale_smonthname13 = 4110
Global Const $locale_sabbrevmonthname1 = 68
Global Const $locale_sabbrevmonthname2 = 69
Global Const $locale_sabbrevmonthname3 = 70
Global Const $locale_sabbrevmonthname4 = 71
Global Const $locale_sabbrevmonthname5 = 72
Global Const $locale_sabbrevmonthname6 = 73
Global Const $locale_sabbrevmonthname7 = 74
Global Const $locale_sabbrevmonthname8 = 75
Global Const $locale_sabbrevmonthname9 = 76
Global Const $locale_sabbrevmonthname10 = 77
Global Const $locale_sabbrevmonthname11 = 78
Global Const $locale_sabbrevmonthname12 = 79
Global Const $locale_sabbrevmonthname13 = 4111
Global Const $locale_spositivesign = 80
Global Const $locale_snegativesign = 81
Global Const $locale_ipossignposn = 82
Global Const $locale_inegsignposn = 83
Global Const $locale_ipossymprecedes = 84
Global Const $locale_ipossepbyspace = 85
Global Const $locale_inegsymprecedes = 86
Global Const $locale_inegsepbyspace = 87
Global Const $locale_fontsignature = 88
Global Const $locale_siso639langname = 89
Global Const $locale_siso3166ctryname = 90
Global Const $locale_idefaultebcdiccodepage = 4114
Global Const $locale_ipapersize = 4106
Global Const $locale_sengcurrname = 4103
Global Const $locale_snativecurrname = 4104
Global Const $locale_syearmonth = 4102
Global Const $locale_ssortname = 4115
Global Const $locale_idigitsubstitution = 4116
Global Const $locale_custom_default = 3072
Global Const $locale_custom_ui_default = 5120
Global Const $locale_custom_unspecified = 4096
Global Const $locale_invariant = 127
Global Const $locale_system_default = 2048
Global Const $locale_user_default = 1024
Global Const $time_force24hourformat = 8
Global Const $time_nominutesorseconds = 1
Global Const $time_noseconds = 2
Global Const $time_notimemarker = 4
Global Const $lcid_installed = 1
Global Const $lcid_supported = 2
#Region Global Variables and Constants
	Global Const $tagnumberfmt = "uint NumDigits;uint LeadingZero;uint Grouping;ptr DecimalSep;ptr ThousandSep;uint NegativeOrder"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_comparestring($ilcid, $sstring1, $sstring2, $iflags = 0)
		Local $aret = DllCall("kernel32.dll", "int", "CompareStringW", "dword", $ilcid, "dword", $iflags, "wstr", $sstring1, "int", -1, "wstr", $sstring2, "int", -1)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_createnumberformatinfo($inumdigits, $ileadingzero, $igrouping, $sdecimalsep, $sthousandsep, $inegativeorder)
		Local $tfmt = DllStructCreate($tagnumberfmt & ";wchar[" & (StringLen($sdecimalsep) + 1) & "];wchar[" & (StringLen($sthousandsep) + 1) & "]")
		DllStructSetData($tfmt, 1, $inumdigits)
		DllStructSetData($tfmt, 2, $ileadingzero)
		DllStructSetData($tfmt, 3, $igrouping)
		DllStructSetData($tfmt, 4, DllStructGetPtr($tfmt, 7))
		DllStructSetData($tfmt, 5, DllStructGetPtr($tfmt, 8))
		DllStructSetData($tfmt, 6, $inegativeorder)
		DllStructSetData($tfmt, 7, $sdecimalsep)
		DllStructSetData($tfmt, 8, $sthousandsep)
		Return $tfmt
	EndFunc

	Func _winapi_enumsystemgeoid()
		Local $henumproc = DllCallbackRegister("__EnumGeoIDProc", "bool", "long")
		Dim $__g_venum[101] = [0]
		Local $aret = DllCall("kernel32.dll", "bool", "EnumSystemGeoID", "dword", 16, "long", 0, "ptr", DllCallbackGetPtr($henumproc))
		If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumsystemlocales($iflag)
		Local $henumproc = DllCallbackRegister("__EnumLocalesProc", "bool", "ptr")
		Dim $__g_venum[101] = [0]
		Local $aret = DllCall("kernel32.dll", "bool", "EnumSystemLocalesW", "ptr", DllCallbackGetPtr($henumproc), "dword", $iflag)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_enumuilanguages($iflag = 0)
		Local $henumproc = DllCallbackRegister("__EnumUILanguagesProc", "bool", "ptr;long_ptr")
		Local $iid = 1
		If $__winver >= 1536 Then
			If BitAND($iflag, 8) Then
				$iid = 0
			EndIf
		Else
			$iflag = 0
		EndIf
		Dim $__g_venum[101] = [0]
		Local $aret = DllCall("kernel32.dll", "bool", "EnumUILanguagesW", "ptr", DllCallbackGetPtr($henumproc), "dword", $iflag, "long_ptr", $iid)
		If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
			$__g_venum = @error + 10
		EndIf
		DllCallbackFree($henumproc)
		If $__g_venum Then Return SetError($__g_venum, 0, 0)
		__inc($__g_venum, -1)
		Return $__g_venum
	EndFunc

	Func _winapi_getdateformat($ilcid = 0, $tsystemtime = 0, $iflags = 0, $sformat = "")
		If NOT $ilcid Then $ilcid = 1024
		Local $stypeofformat = "wstr"
		If NOT StringStripWS($sformat, $str_stripleading + $str_striptrailing) Then
			$stypeofformat = "ptr"
			$sformat = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "int", "GetDateFormatW", "dword", $ilcid, "dword", $iflags, "struct*", $tsystemtime, $stypeofformat, $sformat, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[5]
	EndFunc

	Func _winapi_getdurationformat($ilcid, $iduration, $sformat = "")
		If NOT $ilcid Then $ilcid = 1024
		Local $pst, $ival
		If IsDllStruct($iduration) Then
			$pst = DllStructGetPtr($iduration)
			$ival = 0
		Else
			$pst = 0
			$ival = $iduration
		EndIf
		Local $stypeofformat = "wstr"
		If NOT StringStripWS($sformat, $str_stripleading + $str_striptrailing) Then
			$stypeofformat = "ptr"
			$sformat = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "int", "GetDurationFormat", "dword", $ilcid, "dword", 0, "ptr", $pst, "uint64", $ival, $stypeofformat, $sformat, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[6]
	EndFunc

	Func _winapi_getgeoinfo($igeoid, $itype, $ilanguage = 0)
		Local $aret = DllCall("kernel32.dll", "int", "GetGeoInfoW", "long", $igeoid, "dword", $itype, "wstr", "", "int", 4096, "word", $ilanguage)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		Return $aret[3]
	EndFunc

	Func _winapi_getlocaleinfo($ilcid, $itype)
		Local $aret = DllCall("kernel32.dll", "int", "GetLocaleInfoW", "dword", $ilcid, "dword", $itype, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[3]
	EndFunc

	Func _winapi_getnumberformat($ilcid, $snumber, $tnumberfmt = 0)
		If NOT $ilcid Then $ilcid = 1024
		Local $aret = DllCall("kernel32.dll", "int", "GetNumberFormatW", "dword", $ilcid, "dword", 0, "wstr", $snumber, "struct*", $tnumberfmt, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
		Return $aret[5]
	EndFunc

	Func _winapi_getsystemdefaultlangid()
		Local $aret = DllCall("kernel32.dll", "word", "GetSystemDefaultLangID")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getsystemdefaultlcid()
		Local $aret = DllCall("kernel32.dll", "dword", "GetSystemDefaultLCID")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getsystemdefaultuilanguage()
		Local $aret = DllCall("kernel32.dll", "word", "GetSystemDefaultUILanguage")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthreadlocale()
		Local $aret = DllCall("kernel32.dll", "dword", "GetThreadLocale")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthreaduilanguage()
		Local $aret = DllCall("kernel32.dll", "word", "GetThreadUILanguage")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_gettimeformat($ilcid = 0, $tsystemtime = 0, $iflags = 0, $sformat = "")
		If NOT $ilcid Then $ilcid = 1024
		Local $stypeofformat = "wstr"
		If NOT StringStripWS($sformat, $str_stripleading + $str_striptrailing) Then
			$stypeofformat = "ptr"
			$sformat = 0
		EndIf
		Local $aret = DllCall("kernel32.dll", "int", "GetTimeFormatW", "dword", $ilcid, "dword", $iflags, "struct*", $tsystemtime, $stypeofformat, $sformat, "wstr", "", "int", 2048)
		If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
		Return $aret[5]
	EndFunc

	Func _winapi_getuserdefaultlangid()
		Local $aret = DllCall("kernel32.dll", "word", "GetUserDefaultLangID")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getuserdefaultlcid()
		Local $aret = DllCall("kernel32.dll", "dword", "GetUserDefaultLCID")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getuserdefaultuilanguage()
		Local $aret = DllCall("kernel32.dll", "word", "GetUserDefaultUILanguage")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getusergeoid()
		Local $aret = DllCall("kernel32.dll", "long", "GetUserGeoID", "uint", 16)
		If @error Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_isvalidlocale($ilcid, $iflag = 0)
		Local $aret = DllCall("kernel32.dll", "bool", "IsValidLocale", "dword", $ilcid, "dword", $iflag)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setlocaleinfo($ilcid, $itype, $sdata)
		Local $aret = DllCall("kernel32.dll", "bool", "SetLocaleInfoW", "dword", $ilcid, "dword", $itype, "wstr", $sdata)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setthreadlocale($ilcid)
		Local $aret = DllCall("kernel32.dll", "bool", "SetThreadLocale", "dword", $ilcid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_setthreaduilanguage($ilanguage)
		Local $aret = DllCall("kernel32.dll", "word", "SetThreadUILanguage", "word", $ilanguage)
		If @error Then Return SetError(@error, @extended, False)
		Return ($aret[0] = $aret[1])
	EndFunc

	Func _winapi_setusergeoid($igeoid)
		Local $aret = DllCall("kernel32.dll", "bool", "SetUserGeoID", "long", $igeoid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

#EndRegion Public Functions
#Region Internal Functions

	Func __enumgeoidproc($iid)
		__inc($__g_venum)
		$__g_venum[$__g_venum[0]] = $iid
		Return 1
	EndFunc

	Func __enumlocalesproc($plocale)
		__inc($__g_venum)
		$__g_venum[$__g_venum[0]] = Dec(DllStructGetData(DllStructCreate("wchar[" & (_winapi_strlen($plocale) + 1) & "]", $plocale), 1))
		Return 1
	EndFunc

	Func __enumuilanguagesproc($planguage, $iid)
		__inc($__g_venum)
		$__g_venum[$__g_venum[0]] = DllStructGetData(DllStructCreate("wchar[" & (_winapi_strlen($planguage) + 1) & "]", $planguage), 1)
		If $iid Then
			$__g_venum[$__g_venum[0]] = Dec($__g_venum[$__g_venum[0]])
		EndIf
		Return 1
	EndFunc

#EndRegion Internal Functions

Func _dateadd($stype, $inumber, $sdate)
	Local $astimepart[4]
	Local $asdatepart[4]
	Local $ijuliandate
	$stype = StringLeft($stype, 1)
	If StringInStr("D,M,Y,w,h,n,s", $stype) = 0 OR $stype = "" Then
		Return SetError(1, 0, 0)
	EndIf
	If NOT StringIsInt($inumber) Then
		Return SetError(2, 0, 0)
	EndIf
	If NOT _dateisvalid($sdate) Then
		Return SetError(3, 0, 0)
	EndIf
	_datetimesplit($sdate, $asdatepart, $astimepart)
	If $stype = "d" OR $stype = "w" Then
		If $stype = "w" Then $inumber = $inumber * 7
		$ijuliandate = _datetodayvalue($asdatepart[1], $asdatepart[2], $asdatepart[3]) + $inumber
		_dayvaluetodate($ijuliandate, $asdatepart[1], $asdatepart[2], $asdatepart[3])
	EndIf
	If $stype = "m" Then
		$asdatepart[2] = $asdatepart[2] + $inumber
		While $asdatepart[2] > 12
			$asdatepart[2] = $asdatepart[2] - 12
			$asdatepart[1] = $asdatepart[1] + 1
		WEnd
		While $asdatepart[2] < 1
			$asdatepart[2] = $asdatepart[2] + 12
			$asdatepart[1] = $asdatepart[1] - 1
		WEnd
	EndIf
	If $stype = "y" Then
		$asdatepart[1] = $asdatepart[1] + $inumber
	EndIf
	If $stype = "h" OR $stype = "n" OR $stype = "s" Then
		Local $itimeval = _timetoticks($astimepart[1], $astimepart[2], $astimepart[3]) / 1000
		If $stype = "h" Then $itimeval = $itimeval + $inumber * 3600
		If $stype = "n" Then $itimeval = $itimeval + $inumber * 60
		If $stype = "s" Then $itimeval = $itimeval + $inumber
		Local $iday2add = Int($itimeval / (24 * 60 * 60))
		$itimeval = $itimeval - $iday2add * 24 * 60 * 60
		If $itimeval < 0 Then
			$iday2add = $iday2add - 1
			$itimeval = $itimeval + 24 * 60 * 60
		EndIf
		$ijuliandate = _datetodayvalue($asdatepart[1], $asdatepart[2], $asdatepart[3]) + $iday2add
		_dayvaluetodate($ijuliandate, $asdatepart[1], $asdatepart[2], $asdatepart[3])
		_tickstotime($itimeval * 1000, $astimepart[1], $astimepart[2], $astimepart[3])
	EndIf
	Local $inumdays = _daysinmonth($asdatepart[1])
	If $inumdays[$asdatepart[2]] < $asdatepart[3] Then $asdatepart[3] = $inumdays[$asdatepart[2]]
	$sdate = $asdatepart[1] & "/" & StringRight("0" & $asdatepart[2], 2) & "/" & StringRight("0" & $asdatepart[3], 2)
	If $astimepart[0] > 0 Then
		If $astimepart[0] > 2 Then
			$sdate = $sdate & " " & StringRight("0" & $astimepart[1], 2) & ":" & StringRight("0" & $astimepart[2], 2) & ":" & StringRight("0" & $astimepart[3], 2)
		Else
			$sdate = $sdate & " " & StringRight("0" & $astimepart[1], 2) & ":" & StringRight("0" & $astimepart[2], 2)
		EndIf
	EndIf
	Return $sdate
EndFunc

Func _datedayofweek($idaynum, $iformat = Default)
	Local Const $monday_is_no1 = 128
	If $iformat = Default Then $iformat = 0
	$idaynum = Int($idaynum)
	If $idaynum < 1 OR $idaynum > 7 Then Return SetError(1, 0, "")
	Local $tsystemtime = DllStructCreate($tagsystemtime)
	DllStructSetData($tsystemtime, "Year", BitAND($iformat, $monday_is_no1) ? 2007 : 2006)
	DllStructSetData($tsystemtime, "Month", 1)
	DllStructSetData($tsystemtime, "Day", $idaynum)
	Return _winapi_getdateformat(BitAND($iformat, $dmw_locale_longname) ? $locale_user_default : $locale_invariant, $tsystemtime, 0, BitAND($iformat, $dmw_shortname) ? "ddd" : "dddd")
EndFunc

Func _datedaysinmonth($iyear, $imonthnum)
	$imonthnum = Int($imonthnum)
	$iyear = Int($iyear)
	Return __dateismonth($imonthnum) AND __dateisyear($iyear) ? _daysinmonth($iyear)[$imonthnum] : SetError(1, 0, 0)
EndFunc

Func _datediff($stype, $sstartdate, $senddate)
	$stype = StringLeft($stype, 1)
	If StringInStr("d,m,y,w,h,n,s", $stype) = 0 OR $stype = "" Then
		Return SetError(1, 0, 0)
	EndIf
	If NOT _dateisvalid($sstartdate) Then
		Return SetError(2, 0, 0)
	EndIf
	If NOT _dateisvalid($senddate) Then
		Return SetError(3, 0, 0)
	EndIf
	Local $asstartdatepart[4], $asstarttimepart[4], $asenddatepart[4], $asendtimepart[4]
	_datetimesplit($sstartdate, $asstartdatepart, $asstarttimepart)
	_datetimesplit($senddate, $asenddatepart, $asendtimepart)
	Local $adaysdiff = _datetodayvalue($asenddatepart[1], $asenddatepart[2], $asenddatepart[3]) - _datetodayvalue($asstartdatepart[1], $asstartdatepart[2], $asstartdatepart[3])
	Local $itimediff, $iyeardiff, $istarttimeinsecs, $iendtimeinsecs
	If $asstarttimepart[0] > 1 AND $asendtimepart[0] > 1 Then
		$istarttimeinsecs = $asstarttimepart[1] * 3600 + $asstarttimepart[2] * 60 + $asstarttimepart[3]
		$iendtimeinsecs = $asendtimepart[1] * 3600 + $asendtimepart[2] * 60 + $asendtimepart[3]
		$itimediff = $iendtimeinsecs - $istarttimeinsecs
		If $itimediff < 0 Then
			$adaysdiff = $adaysdiff - 1
			$itimediff = $itimediff + 24 * 60 * 60
		EndIf
	Else
		$itimediff = 0
	EndIf
	Select
		Case $stype = "d"
			Return $adaysdiff
		Case $stype = "m"
			$iyeardiff = $asenddatepart[1] - $asstartdatepart[1]
			Local $imonthdiff = $asenddatepart[2] - $asstartdatepart[2] + $iyeardiff * 12
			If $asenddatepart[3] < $asstartdatepart[3] Then $imonthdiff = $imonthdiff - 1
			$istarttimeinsecs = $asstarttimepart[1] * 3600 + $asstarttimepart[2] * 60 + $asstarttimepart[3]
			$iendtimeinsecs = $asendtimepart[1] * 3600 + $asendtimepart[2] * 60 + $asendtimepart[3]
			$itimediff = $iendtimeinsecs - $istarttimeinsecs
			If $asenddatepart[3] = $asstartdatepart[3] AND $itimediff < 0 Then $imonthdiff = $imonthdiff - 1
			Return $imonthdiff
		Case $stype = "y"
			$iyeardiff = $asenddatepart[1] - $asstartdatepart[1]
			If $asenddatepart[2] < $asstartdatepart[2] Then $iyeardiff = $iyeardiff - 1
			If $asenddatepart[2] = $asstartdatepart[2] AND $asenddatepart[3] < $asstartdatepart[3] Then $iyeardiff = $iyeardiff - 1
			$istarttimeinsecs = $asstarttimepart[1] * 3600 + $asstarttimepart[2] * 60 + $asstarttimepart[3]
			$iendtimeinsecs = $asendtimepart[1] * 3600 + $asendtimepart[2] * 60 + $asendtimepart[3]
			$itimediff = $iendtimeinsecs - $istarttimeinsecs
			If $asenddatepart[2] = $asstartdatepart[2] AND $asenddatepart[3] = $asstartdatepart[3] AND $itimediff < 0 Then $iyeardiff = $iyeardiff - 1
			Return $iyeardiff
		Case $stype = "w"
			Return Int($adaysdiff / 7)
		Case $stype = "h"
			Return $adaysdiff * 24 + Int($itimediff / 3600)
		Case $stype = "n"
			Return $adaysdiff * 24 * 60 + Int($itimediff / 60)
		Case $stype = "s"
			Return $adaysdiff * 24 * 60 * 60 + $itimediff
	EndSelect
EndFunc

Func _dateisleapyear($iyear)
	If StringIsInt($iyear) Then
		Select
			Case Mod($iyear, 4) = 0 AND Mod($iyear, 100) <> 0
				Return 1
			Case Mod($iyear, 400) = 0
				Return 1
			Case Else
				Return 0
		EndSelect
	EndIf
	Return SetError(1, 0, 0)
EndFunc

Func __dateismonth($inumber)
	$inumber = Int($inumber)
	Return $inumber >= 1 AND $inumber <= 12
EndFunc

Func _dateisvalid($sdate)
	Local $asdatepart[4], $astimepart[4]
	_datetimesplit($sdate, $asdatepart, $astimepart)
	If NOT StringIsInt($asdatepart[1]) Then Return 0
	If NOT StringIsInt($asdatepart[2]) Then Return 0
	If NOT StringIsInt($asdatepart[3]) Then Return 0
	$asdatepart[1] = Int($asdatepart[1])
	$asdatepart[2] = Int($asdatepart[2])
	$asdatepart[3] = Int($asdatepart[3])
	Local $inumdays = _daysinmonth($asdatepart[1])
	If $asdatepart[1] < 1000 OR $asdatepart[1] > 2999 Then Return 0
	If $asdatepart[2] < 1 OR $asdatepart[2] > 12 Then Return 0
	If $asdatepart[3] < 1 OR $asdatepart[3] > $inumdays[$asdatepart[2]] Then Return 0
	If $astimepart[0] < 1 Then Return 1
	If $astimepart[0] < 2 Then Return 0
	If $astimepart[0] = 2 Then $astimepart[3] = "00"
	If NOT StringIsInt($astimepart[1]) Then Return 0
	If NOT StringIsInt($astimepart[2]) Then Return 0
	If NOT StringIsInt($astimepart[3]) Then Return 0
	$astimepart[1] = Int($astimepart[1])
	$astimepart[2] = Int($astimepart[2])
	$astimepart[3] = Int($astimepart[3])
	If $astimepart[1] < 0 OR $astimepart[1] > 23 Then Return 0
	If $astimepart[2] < 0 OR $astimepart[2] > 59 Then Return 0
	If $astimepart[3] < 0 OR $astimepart[3] > 59 Then Return 0
	Return 1
EndFunc

Func __dateisyear($inumber)
	Return StringLen($inumber) = 4
EndFunc

Func _datelastweekdaynum($iweekdaynum)
	Select
		Case NOT StringIsInt($iweekdaynum)
			Return SetError(1, 0, 0)
		Case $iweekdaynum < 1 OR $iweekdaynum > 7
			Return SetError(2, 0, 0)
		Case Else
			Local $ilastweekdaynum
			If $iweekdaynum = 1 Then
				$ilastweekdaynum = 7
			Else
				$ilastweekdaynum = $iweekdaynum - 1
			EndIf
			Return $ilastweekdaynum
	EndSelect
EndFunc

Func _datelastmonthnum($imonthnum)
	Select
		Case NOT StringIsInt($imonthnum)
			Return SetError(1, 0, 0)
		Case NOT __dateismonth($imonthnum)
			Return SetError(2, 0, 0)
		Case Else
			Local $ilastmonthnum
			If $imonthnum = 1 Then
				$ilastmonthnum = 12
			Else
				$ilastmonthnum = $imonthnum - 1
			EndIf
			$ilastmonthnum = StringFormat("%02d", $ilastmonthnum)
			Return $ilastmonthnum
	EndSelect
EndFunc

Func _datelastmonthyear($imonthnum, $iyear)
	Select
		Case NOT StringIsInt($imonthnum) OR NOT StringIsInt($iyear)
			Return SetError(1, 0, 0)
		Case NOT __dateismonth($imonthnum)
			Return SetError(2, 0, 0)
		Case Else
			Local $ilastyear
			If $imonthnum = 1 Then
				$ilastyear = $iyear - 1
			Else
				$ilastyear = $iyear
			EndIf
			$ilastyear = StringFormat("%04d", $ilastyear)
			Return $ilastyear
	EndSelect
EndFunc

Func _datenextweekdaynum($iweekdaynum)
	Select
		Case NOT StringIsInt($iweekdaynum)
			Return SetError(1, 0, 0)
		Case $iweekdaynum < 1 OR $iweekdaynum > 7
			Return SetError(2, 0, 0)
		Case Else
			Local $inextweekdaynum
			If $iweekdaynum = 7 Then
				$inextweekdaynum = 1
			Else
				$inextweekdaynum = $iweekdaynum + 1
			EndIf
			Return $inextweekdaynum
	EndSelect
EndFunc

Func _datenextmonthnum($imonthnum)
	Select
		Case NOT StringIsInt($imonthnum)
			Return SetError(1, 0, 0)
		Case NOT __dateismonth($imonthnum)
			Return SetError(2, 0, 0)
		Case Else
			Local $inextmonthnum
			If $imonthnum = 12 Then
				$inextmonthnum = 1
			Else
				$inextmonthnum = $imonthnum + 1
			EndIf
			$inextmonthnum = StringFormat("%02d", $inextmonthnum)
			Return $inextmonthnum
	EndSelect
EndFunc

Func _datenextmonthyear($imonthnum, $iyear)
	Select
		Case NOT StringIsInt($imonthnum) OR NOT StringIsInt($iyear)
			Return SetError(1, 0, 0)
		Case NOT __dateismonth($imonthnum)
			Return SetError(2, 0, 0)
		Case Else
			Local $inextyear
			If $imonthnum = 12 Then
				$inextyear = $iyear + 1
			Else
				$inextyear = $iyear
			EndIf
			$inextyear = StringFormat("%04d", $inextyear)
			Return $inextyear
	EndSelect
EndFunc

Func _datetimeformat($sdate, $stype)
	Local $asdatepart[4], $astimepart[4]
	Local $stempdate = "", $stemptime = ""
	Local $sam, $spm, $stempstring = ""
	If NOT _dateisvalid($sdate) Then
		Return SetError(1, 0, "")
	EndIf
	If $stype < 0 OR $stype > 5 OR NOT IsInt($stype) Then
		Return SetError(2, 0, "")
	EndIf
	_datetimesplit($sdate, $asdatepart, $astimepart)
	Switch $stype
		Case 0
			$stempstring = _winapi_getlocaleinfo($locale_user_default, $locale_sshortdate)
			If NOT @error AND NOT ($stempstring = "") Then
				$stempdate = $stempstring
			Else
				$stempdate = "M/d/yyyy"
			EndIf
			If $astimepart[0] > 1 Then
				$stempstring = _winapi_getlocaleinfo($locale_user_default, $locale_stimeformat)
				If NOT @error AND NOT ($stempstring = "") Then
					$stemptime = $stempstring
				Else
					$stemptime = "h:mm:ss tt"
				EndIf
			EndIf
		Case 1
			$stempstring = _winapi_getlocaleinfo($locale_user_default, $locale_slongdate)
			If NOT @error AND NOT ($stempstring = "") Then
				$stempdate = $stempstring
			Else
				$stempdate = "dddd, MMMM dd, yyyy"
			EndIf
		Case 2
			$stempstring = _winapi_getlocaleinfo($locale_user_default, $locale_sshortdate)
			If NOT @error AND NOT ($stempstring = "") Then
				$stempdate = $stempstring
			Else
				$stempdate = "M/d/yyyy"
			EndIf
		Case 3
			If $astimepart[0] > 1 Then
				$stempstring = _winapi_getlocaleinfo($locale_user_default, $locale_stimeformat)
				If NOT @error AND NOT ($stempstring = "") Then
					$stemptime = $stempstring
				Else
					$stemptime = "h:mm:ss tt"
				EndIf
			EndIf
		Case 4
			If $astimepart[0] > 1 Then
				$stemptime = "hh:mm"
			EndIf
		Case 5
			If $astimepart[0] > 1 Then
				$stemptime = "hh:mm:ss"
			EndIf
	EndSwitch
	If $stempdate <> "" Then
		$stempstring = _winapi_getlocaleinfo($locale_user_default, $locale_sdate)
		If NOT @error AND NOT ($stempstring = "") Then
			$stempdate = StringReplace($stempdate, "/", $stempstring)
		EndIf
		Local $iwday = _datetodayofweek($asdatepart[1], $asdatepart[2], $asdatepart[3])
		$asdatepart[3] = StringRight("0" & $asdatepart[3], 2)
		$asdatepart[2] = StringRight("0" & $asdatepart[2], 2)
		$stempdate = StringReplace($stempdate, "d", "@")
		$stempdate = StringReplace($stempdate, "m", "#")
		$stempdate = StringReplace($stempdate, "y", "&")
		$stempdate = StringReplace($stempdate, "@@@@", _datedayofweek($iwday, 0))
		$stempdate = StringReplace($stempdate, "@@@", _datedayofweek($iwday, 1))
		$stempdate = StringReplace($stempdate, "@@", $asdatepart[3])
		$stempdate = StringReplace($stempdate, "@", StringReplace(StringLeft($asdatepart[3], 1), "0", "") & StringRight($asdatepart[3], 1))
		$stempdate = StringReplace($stempdate, "####", _datetomonth($asdatepart[2], 0))
		$stempdate = StringReplace($stempdate, "###", _datetomonth($asdatepart[2], 1))
		$stempdate = StringReplace($stempdate, "##", $asdatepart[2])
		$stempdate = StringReplace($stempdate, "#", StringReplace(StringLeft($asdatepart[2], 1), "0", "") & StringRight($asdatepart[2], 1))
		$stempdate = StringReplace($stempdate, "&&&&", $asdatepart[1])
		$stempdate = StringReplace($stempdate, "&&", StringRight($asdatepart[1], 2))
	EndIf
	If $stemptime <> "" Then
		$stempstring = _winapi_getlocaleinfo($locale_user_default, $locale_s1159)
		If NOT @error AND NOT ($stempstring = "") Then
			$sam = $stempstring
		Else
			$sam = "AM"
		EndIf
		$stempstring = _winapi_getlocaleinfo($locale_user_default, $locale_s2359)
		If NOT @error AND NOT ($stempstring = "") Then
			$spm = $stempstring
		Else
			$spm = "PM"
		EndIf
		$stempstring = _winapi_getlocaleinfo($locale_user_default, $locale_stime)
		If NOT @error AND NOT ($stempstring = "") Then
			$stemptime = StringReplace($stemptime, ":", $stempstring)
		EndIf
		If StringInStr($stemptime, "tt") Then
			If $astimepart[1] < 12 Then
				$stemptime = StringReplace($stemptime, "tt", $sam)
				If $astimepart[1] = 0 Then $astimepart[1] = 12
			Else
				$stemptime = StringReplace($stemptime, "tt", $spm)
				If $astimepart[1] > 12 Then $astimepart[1] = $astimepart[1] - 12
			EndIf
		EndIf
		$astimepart[1] = StringRight("0" & $astimepart[1], 2)
		$astimepart[2] = StringRight("0" & $astimepart[2], 2)
		$astimepart[3] = StringRight("0" & $astimepart[3], 2)
		$stemptime = StringReplace($stemptime, "hh", StringFormat("%02d", $astimepart[1]))
		$stemptime = StringReplace($stemptime, "h", StringReplace(StringLeft($astimepart[1], 1), "0", "") & StringRight($astimepart[1], 1))
		$stemptime = StringReplace($stemptime, "mm", StringFormat("%02d", $astimepart[2]))
		$stemptime = StringReplace($stemptime, "ss", StringFormat("%02d", $astimepart[3]))
		$stempdate = StringStripWS($stempdate & " " & $stemptime, $str_stripleading + $str_striptrailing)
	EndIf
	Return $stempdate
EndFunc

Func _datetimesplit($sdate, ByRef $adatepart, ByRef $itimepart)
	Local $sdatetime = StringSplit($sdate, " T")
	If $sdatetime[0] > 0 Then $adatepart = StringSplit($sdatetime[1], "/-.")
	If $sdatetime[0] > 1 Then
		$itimepart = StringSplit($sdatetime[2], ":")
		If UBound($itimepart) < 4 Then ReDim $itimepart[4]
	Else
		Dim $itimepart[4]
	EndIf
	If UBound($adatepart) < 4 Then ReDim $adatepart[4]
	For $x = 1 To 3
		If StringIsInt($adatepart[$x]) Then
			$adatepart[$x] = Int($adatepart[$x])
		Else
			$adatepart[$x] = -1
		EndIf
		If StringIsInt($itimepart[$x]) Then
			$itimepart[$x] = Int($itimepart[$x])
		Else
			$itimepart[$x] = 0
		EndIf
	Next
	Return 1
EndFunc

Func _datetodayofweek($iyear, $imonth, $iday)
	If NOT _dateisvalid($iyear & "/" & $imonth & "/" & $iday) Then
		Return SetError(1, 0, "")
	EndIf
	Local $i_factora = Int((14 - $imonth) / 12)
	Local $i_factory = $iyear - $i_factora
	Local $i_factorm = $imonth + (12 * $i_factora) - 2
	Local $i_factord = Mod($iday + $i_factory + Int($i_factory / 4) - Int($i_factory / 100) + Int($i_factory / 400) + Int((31 * $i_factorm) / 12), 7)
	Return $i_factord + 1
EndFunc

Func _datetodayofweekiso($iyear, $imonth, $iday)
	Local $idow = _datetodayofweek($iyear, $imonth, $iday)
	If @error Then
		Return SetError(1, 0, "")
	EndIf
	If $idow >= 2 Then Return $idow - 1
	Return 7
EndFunc

Func _datetodayvalue($iyear, $imonth, $iday)
	If NOT _dateisvalid(StringFormat("%04d/%02d/%02d", $iyear, $imonth, $iday)) Then
		Return SetError(1, 0, "")
	EndIf
	If $imonth < 3 Then
		$imonth = $imonth + 12
		$iyear = $iyear - 1
	EndIf
	Local $i_factora = Int($iyear / 100)
	Local $i_factorb = Int($i_factora / 4)
	Local $i_factorc = 2 - $i_factora + $i_factorb
	Local $i_factore = Int(1461 * ($iyear + 4716) / 4)
	Local $i_factorf = Int(153 * ($imonth + 1) / 5)
	Local $ijuliandate = $i_factorc + $iday + $i_factore + $i_factorf - 1524.5
	Return $ijuliandate
EndFunc

Func _datetomonth($imonnum, $iformat = Default)
	If $iformat = Default Then $iformat = 0
	$imonnum = Int($imonnum)
	If NOT __dateismonth($imonnum) Then Return SetError(1, 0, "")
	Local $tsystemtime = DllStructCreate($tagsystemtime)
	DllStructSetData($tsystemtime, "Year", @YEAR)
	DllStructSetData($tsystemtime, "Month", $imonnum)
	DllStructSetData($tsystemtime, "Day", 1)
	Return _winapi_getdateformat(BitAND($iformat, $dmw_locale_longname) ? $locale_user_default : $locale_invariant, $tsystemtime, 0, BitAND($iformat, $dmw_shortname) ? "MMM" : "MMMM")
EndFunc

Func _dayvaluetodate($ijuliandate, ByRef $iyear, ByRef $imonth, ByRef $iday)
	If $ijuliandate < 0 OR NOT IsNumber($ijuliandate) Then
		Return SetError(1, 0, 0)
	EndIf
	Local $i_factorz = Int($ijuliandate + 0.5)
	Local $i_factorw = Int(($i_factorz - 1867216.25) / 36524.25)
	Local $i_factorx = Int($i_factorw / 4)
	Local $i_factora = $i_factorz + 1 + $i_factorw - $i_factorx
	Local $i_factorb = $i_factora + 1524
	Local $i_factorc = Int(($i_factorb - 122.1) / 365.25)
	Local $i_factord = Int(365.25 * $i_factorc)
	Local $i_factore = Int(($i_factorb - $i_factord) / 30.6001)
	Local $i_factorf = Int(30.6001 * $i_factore)
	$iday = $i_factorb - $i_factord - $i_factorf
	If $i_factore - 1 < 13 Then
		$imonth = $i_factore - 1
	Else
		$imonth = $i_factore - 13
	EndIf
	If $imonth < 3 Then
		$iyear = $i_factorc - 4715
	Else
		$iyear = $i_factorc - 4716
	EndIf
	$iyear = StringFormat("%04d", $iyear)
	$imonth = StringFormat("%02d", $imonth)
	$iday = StringFormat("%02d", $iday)
	Return $iyear & "/" & $imonth & "/" & $iday
EndFunc

Func _date_juliandayno($iyear, $imonth, $iday)
	Local $sfulldate = StringFormat("%04d/%02d/%02d", $iyear, $imonth, $iday)
	If NOT _dateisvalid($sfulldate) Then
		Return SetError(1, 0, "")
	EndIf
	Local $ijday = 0
	Local $aidaysinmonth = _daysinmonth($iyear)
	For $icntr = 1 To $imonth - 1
		$ijday = $ijday + $aidaysinmonth[$icntr]
	Next
	$ijday = ($iyear * 1000) + ($ijday + $iday)
	Return $ijday
EndFunc

Func _juliantodate($ijday, $ssep = "/")
	Local $iyear = Int($ijday / 1000)
	Local $idays = Mod($ijday, 1000)
	Local $imaxdays = 365
	If _dateisleapyear($iyear) Then $imaxdays = 366
	If $idays > $imaxdays Then
		Return SetError(1, 0, "")
	EndIf
	Local $aidaysinmonth = _daysinmonth($iyear)
	Local $imonth = 1
	While $idays > $aidaysinmonth[$imonth]
		$idays = $idays - $aidaysinmonth[$imonth]
		$imonth = $imonth + 1
	WEnd
	Return StringFormat("%04d%s%02d%s%02d", $iyear, $ssep, $imonth, $ssep, $idays)
EndFunc

Func _now()
	Return _datetimeformat(@YEAR & "/" & @MON & "/" & @MDAY & " " & @HOUR & ":" & @MIN & ":" & @SEC, 0)
EndFunc

Func _nowcalc()
	Return @YEAR & "/" & @MON & "/" & @MDAY & " " & @HOUR & ":" & @MIN & ":" & @SEC
EndFunc

Func _nowcalcdate()
	Return @YEAR & "/" & @MON & "/" & @MDAY
EndFunc

Func _nowdate()
	Return _datetimeformat(@YEAR & "/" & @MON & "/" & @MDAY, 0)
EndFunc

Func _nowtime($stype = 3)
	If $stype < 3 OR $stype > 5 Then $stype = 3
	Return _datetimeformat(@YEAR & "/" & @MON & "/" & @MDAY & " " & @HOUR & ":" & @MIN & ":" & @SEC, $stype)
EndFunc

Func _setdate($iday, $imonth = 0, $iyear = 0)
	If $iyear = 0 Then $iyear = @YEAR
	If $imonth = 0 Then $imonth = @MON
	If NOT _dateisvalid($iyear & "/" & $imonth & "/" & $iday) Then Return 1
	Local $tsystemtime = DllStructCreate($tagsystemtime)
	DllCall("kernel32.dll", "none", "GetLocalTime", "struct*", $tsystemtime)
	If @error Then Return SetError(@error, @extended, 0)
	DllStructSetData($tsystemtime, "Day", $iday)
	If $imonth > 0 Then DllStructSetData($tsystemtime, "Month", $imonth)
	If $iyear > 0 Then DllStructSetData($tsystemtime, "Year", $iyear)
	Local $ireturn = _date_time_setlocaltime($tsystemtime)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return Int($ireturn)
EndFunc

Func _settime($ihour, $iminute, $isecond = 0, $imseconds = 0)
	If $ihour < 0 OR $ihour > 23 Then Return 1
	If $iminute < 0 OR $iminute > 59 Then Return 1
	If $isecond < 0 OR $isecond > 59 Then Return 1
	If $imseconds < 0 OR $imseconds > 999 Then Return 1
	Local $tsystemtime = DllStructCreate($tagsystemtime)
	DllCall("kernel32.dll", "none", "GetLocalTime", "struct*", $tsystemtime)
	If @error Then Return SetError(@error, @extended, 0)
	DllStructSetData($tsystemtime, "Hour", $ihour)
	DllStructSetData($tsystemtime, "Minute", $iminute)
	If $isecond > 0 Then DllStructSetData($tsystemtime, "Seconds", $isecond)
	If $imseconds > 0 Then DllStructSetData($tsystemtime, "MSeconds", $imseconds)
	Local $ireturn = _date_time_setlocaltime($tsystemtime)
	If @error Then Return SetError(@error + 10, @extended, 0)
	Return Int($ireturn)
EndFunc

Func _tickstotime($iticks, ByRef $ihours, ByRef $imins, ByRef $isecs)
	If Number($iticks) > 0 Then
		$iticks = Int($iticks / 1000)
		$ihours = Int($iticks / 3600)
		$iticks = Mod($iticks, 3600)
		$imins = Int($iticks / 60)
		$isecs = Mod($iticks, 60)
		Return 1
	ElseIf Number($iticks) = 0 Then
		$ihours = 0
		$iticks = 0
		$imins = 0
		$isecs = 0
		Return 1
	Else
		Return SetError(1, 0, 0)
	EndIf
EndFunc

Func _timetoticks($ihours = @HOUR, $imins = @MIN, $isecs = @SEC)
	If StringIsInt($ihours) AND StringIsInt($imins) AND StringIsInt($isecs) Then
		Local $iticks = 1000 * ((3600 * $ihours) + (60 * $imins) + $isecs)
		Return $iticks
	Else
		Return SetError(1, 0, 0)
	EndIf
EndFunc

Func _weeknumberiso($iyear = @YEAR, $imonth = @MON, $iday = @MDAY)
	If $iday > 31 OR $iday < 1 Then
		Return SetError(1, 0, -1)
	ElseIf NOT __dateismonth($imonth) Then
		Return SetError(2, 0, -1)
	ElseIf $iyear < 1 OR $iyear > 2999 Then
		Return SetError(3, 0, -1)
	EndIf
	Local $idow = _datetodayofweekiso($iyear, $imonth, $iday) - 1
	Local $idow0101 = _datetodayofweekiso($iyear, 1, 1) - 1
	If ($imonth = 1 AND 3 < $idow0101 AND $idow0101 < 7 - ($iday - 1)) Then
		$idow = $idow0101 - 1
		$idow0101 = _datetodayofweekiso($iyear - 1, 1, 1) - 1
		$imonth = 12
		$iday = 31
		$iyear = $iyear - 1
	ElseIf ($imonth = 12 AND 30 - ($iday - 1) < _datetodayofweekiso($iyear + 1, 1, 1) - 1 AND _datetodayofweekiso($iyear + 1, 1, 1) - 1 < 4) Then
		Return 1
	EndIf
	Return Int((_datetodayofweekiso($iyear, 1, 1) - 1 < 4) + 4 * ($imonth - 1) + (2 * ($imonth - 1) + ($iday - 1) + $idow0101 - $idow + 6) * 36 / 256)
EndFunc

Func _weeknumber($iyear = @YEAR, $imonth = @MON, $iday = @MDAY, $iweekstart = 1)
	If $iday > 31 OR $iday < 1 Then
		Return SetError(1, 0, -1)
	ElseIf NOT __dateismonth($imonth) Then
		Return SetError(3, 0, -1)
	ElseIf $iyear < 1 OR $iyear > 2999 Then
		Return SetError(4, 0, -1)
	ElseIf $iweekstart < 1 OR $iweekstart > 2 Then
		Return SetError(2, 0, -1)
	EndIf
	Local $istartweek1, $iendweek1
	Local $idow0101 = _datetodayofweekiso($iyear, 1, 1)
	Local $idate = $iyear & "/" & $imonth & "/" & $iday
	If $iweekstart = 1 Then
		If $idow0101 = 6 Then
			$istartweek1 = 0
		Else
			$istartweek1 = -1 * $idow0101 - 1
		EndIf
		$iendweek1 = $istartweek1 + 6
	Else
		$istartweek1 = $idow0101 * -1
		$iendweek1 = $istartweek1 + 6
	EndIf
	Local $istartweek1ny
	Local $iendweek1date = _dateadd("d", $iendweek1, $iyear & "/01/01")
	Local $idow0101ny = _datetodayofweekiso($iyear + 1, 1, 1)
	If $iweekstart = 1 Then
		If $idow0101ny = 6 Then
			$istartweek1ny = 0
		Else
			$istartweek1ny = -1 * $idow0101ny - 1
		EndIf
	Else
		$istartweek1ny = $idow0101ny * -1
	EndIf
	Local $istartweek1dateny = _dateadd("d", $istartweek1ny, $iyear + 1 & "/01/01")
	Local $icurrdatediff = _datediff("d", $iendweek1date, $idate) - 1
	Local $icurrdatediffny = _datediff("d", $istartweek1dateny, $idate)
	If $icurrdatediff >= 0 AND $icurrdatediffny < 0 Then Return 2 + Int($icurrdatediff / 7)
	If $icurrdatediff < 0 OR $icurrdatediffny >= 0 Then Return 1
EndFunc

Func _daysinmonth($iyear)
	Local $adays = [12, 31, (_dateisleapyear($iyear) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	Return $adays
EndFunc

Func __date_time_clonesystemtime($psystemtime)
	Local $tsystemtime1 = DllStructCreate($tagsystemtime, $psystemtime)
	Local $tsystemtime2 = DllStructCreate($tagsystemtime)
	DllStructSetData($tsystemtime2, "Month", DllStructGetData($tsystemtime1, "Month"))
	DllStructSetData($tsystemtime2, "Day", DllStructGetData($tsystemtime1, "Day"))
	DllStructSetData($tsystemtime2, "Year", DllStructGetData($tsystemtime1, "Year"))
	DllStructSetData($tsystemtime2, "Hour", DllStructGetData($tsystemtime1, "Hour"))
	DllStructSetData($tsystemtime2, "Minute", DllStructGetData($tsystemtime1, "Minute"))
	DllStructSetData($tsystemtime2, "Second", DllStructGetData($tsystemtime1, "Second"))
	DllStructSetData($tsystemtime2, "MSeconds", DllStructGetData($tsystemtime1, "MSeconds"))
	DllStructSetData($tsystemtime2, "DOW", DllStructGetData($tsystemtime1, "DOW"))
	Return $tsystemtime2
EndFunc

Func _date_time_comparefiletime($tfiletime1, $tfiletime2)
	Local $aresult = DllCall("kernel32.dll", "long", "CompareFileTime", "struct*", $tfiletime1, "struct*", $tfiletime2)
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _date_time_dosdatetimetofiletime($ifatdate, $ifattime)
	Local $ttime = DllStructCreate($tagfiletime)
	Local $aresult = DllCall("kernel32.dll", "bool", "DosDateTimeToFileTime", "word", $ifatdate, "word", $ifattime, "struct*", $ttime)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $ttime)
EndFunc

Func _date_time_dosdatetoarray($idosdate)
	Local $adate[3]
	$adate[0] = BitAND($idosdate, 31)
	$adate[1] = BitAND(BitShift($idosdate, 5), 15)
	$adate[2] = BitAND(BitShift($idosdate, 9), 63) + 1980
	Return $adate
EndFunc

Func _date_time_dosdatetimetoarray($idosdate, $idostime)
	Local $adate[6]
	$adate[0] = BitAND($idosdate, 31)
	$adate[1] = BitAND(BitShift($idosdate, 5), 15)
	$adate[2] = BitAND(BitShift($idosdate, 9), 63) + 1980
	$adate[5] = BitAND($idostime, 31) * 2
	$adate[4] = BitAND(BitShift($idostime, 5), 63)
	$adate[3] = BitAND(BitShift($idostime, 11), 31)
	Return $adate
EndFunc

Func _date_time_dosdatetimetostr($idosdate, $idostime)
	Local $adate = _date_time_dosdatetimetoarray($idosdate, $idostime)
	Return StringFormat("%02d/%02d/%04d %02d:%02d:%02d", $adate[0], $adate[1], $adate[2], $adate[3], $adate[4], $adate[5])
EndFunc

Func _date_time_dosdatetostr($idosdate)
	Local $adate = _date_time_dosdatetoarray($idosdate)
	Return StringFormat("%02d/%02d/%04d", $adate[0], $adate[1], $adate[2])
EndFunc

Func _date_time_dostimetoarray($idostime)
	Local $atime[3]
	$atime[2] = BitAND($idostime, 31) * 2
	$atime[1] = BitAND(BitShift($idostime, 5), 63)
	$atime[0] = BitAND(BitShift($idostime, 11), 31)
	Return $atime
EndFunc

Func _date_time_dostimetostr($idostime)
	Local $atime = _date_time_dostimetoarray($idostime)
	Return StringFormat("%02d:%02d:%02d", $atime[0], $atime[1], $atime[2])
EndFunc

Func _date_time_encodefiletime($imonth, $iday, $iyear, $ihour = 0, $iminute = 0, $isecond = 0, $imseconds = 0)
	Local $tsystemtime = _date_time_encodesystemtime($imonth, $iday, $iyear, $ihour, $iminute, $isecond, $imseconds)
	Return _date_time_systemtimetofiletime($tsystemtime)
EndFunc

Func _date_time_encodesystemtime($imonth, $iday, $iyear, $ihour = 0, $iminute = 0, $isecond = 0, $imseconds = 0)
	Local $tsystemtime = DllStructCreate($tagsystemtime)
	DllStructSetData($tsystemtime, "Month", $imonth)
	DllStructSetData($tsystemtime, "Day", $iday)
	DllStructSetData($tsystemtime, "Year", $iyear)
	DllStructSetData($tsystemtime, "Hour", $ihour)
	DllStructSetData($tsystemtime, "Minute", $iminute)
	DllStructSetData($tsystemtime, "Second", $isecond)
	DllStructSetData($tsystemtime, "MSeconds", $imseconds)
	Return $tsystemtime
EndFunc

Func _date_time_filetimetoarray(ByRef $tfiletime)
	If ((DllStructGetData($tfiletime, 1) + DllStructGetData($tfiletime, 2)) = 0) Then Return SetError(10, 0, 0)
	Local $tsystemtime = _date_time_filetimetosystemtime($tfiletime)
	If @error Then Return SetError(@error, @extended, 0)
	Return _date_time_systemtimetoarray($tsystemtime)
EndFunc

Func _date_time_filetimetostr(ByRef $tfiletime, $ifmt = 0)
	Local $adate = _date_time_filetimetoarray($tfiletime)
	If @error Then Return SetError(@error, @extended, "")
	If $ifmt Then
		Return StringFormat("%04d/%02d/%02d %02d:%02d:%02d", $adate[2], $adate[0], $adate[1], $adate[3], $adate[4], $adate[5])
	Else
		Return StringFormat("%02d/%02d/%04d %02d:%02d:%02d", $adate[0], $adate[1], $adate[2], $adate[3], $adate[4], $adate[5])
	EndIf
EndFunc

Func _date_time_filetimetodosdatetime($tfiletime)
	Local $adate[2]
	Local $aresult = DllCall("kernel32.dll", "bool", "FileTimeToDosDateTime", "struct*", $tfiletime, "word*", 0, "word*", 0)
	If @error Then Return SetError(@error, @extended, $adate)
	$adate[0] = $aresult[2]
	$adate[1] = $aresult[3]
	Return SetExtended($aresult[0], $adate)
EndFunc

Func _date_time_filetimetolocalfiletime($tfiletime)
	Local $tlocal = DllStructCreate($tagfiletime)
	Local $aresult = DllCall("kernel32.dll", "bool", "FileTimeToLocalFileTime", "struct*", $tfiletime, "struct*", $tlocal)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $tlocal)
EndFunc

Func _date_time_filetimetosystemtime($tfiletime)
	Local $tsysttime = DllStructCreate($tagsystemtime)
	Local $aresult = DllCall("kernel32.dll", "bool", "FileTimeToSystemTime", "struct*", $tfiletime, "struct*", $tsysttime)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $tsysttime)
EndFunc

Func _date_time_getfiletime($hfile)
	Local $adate[3]
	$adate[0] = DllStructCreate($tagfiletime)
	$adate[1] = DllStructCreate($tagfiletime)
	$adate[2] = DllStructCreate($tagfiletime)
	Local $aresult = DllCall("kernel32.dll", "bool", "GetFileTime", "handle", $hfile, "struct*", $adate[0], "struct*", $adate[1], "struct*", $adate[2])
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $adate)
EndFunc

Func _date_time_getlocaltime()
	Local $tsysttime = DllStructCreate($tagsystemtime)
	DllCall("kernel32.dll", "none", "GetLocalTime", "struct*", $tsysttime)
	If @error Then Return SetError(@error, @extended, 0)
	Return $tsysttime
EndFunc

Func _date_time_getsystemtime()
	Local $tsysttime = DllStructCreate($tagsystemtime)
	DllCall("kernel32.dll", "none", "GetSystemTime", "struct*", $tsysttime)
	If @error Then Return SetError(@error, @extended, 0)
	Return $tsysttime
EndFunc

Func _date_time_getsystemtimeadjustment()
	Local $ainfo[3]
	Local $aresult = DllCall("kernel32.dll", "bool", "GetSystemTimeAdjustment", "dword*", 0, "dword*", 0, "bool*", 0)
	If @error Then Return SetError(@error, @extended, 0)
	$ainfo[0] = $aresult[1]
	$ainfo[1] = $aresult[2]
	$ainfo[2] = $aresult[3] <> 0
	Return SetExtended($aresult[0], $ainfo)
EndFunc

Func _date_time_getsystemtimeasfiletime()
	Local $tfiletime = DllStructCreate($tagfiletime)
	DllCall("kernel32.dll", "none", "GetSystemTimeAsFileTime", "struct*", $tfiletime)
	If @error Then Return SetError(@error, @extended, 0)
	Return $tfiletime
EndFunc

Func _date_time_getsystemtimes()
	Local $ainfo[3]
	$ainfo[0] = DllStructCreate($tagfiletime)
	$ainfo[1] = DllStructCreate($tagfiletime)
	$ainfo[2] = DllStructCreate($tagfiletime)
	Local $aresult = DllCall("kernel32.dll", "bool", "GetSystemTimes", "struct*", $ainfo[0], "struct*", $ainfo[1], "struct*", $ainfo[2])
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $ainfo)
EndFunc

Func _date_time_gettickcount()
	Local $aresult = DllCall("kernel32.dll", "dword", "GetTickCount")
	If @error Then Return SetError(@error, @extended, 0)
	Return $aresult[0]
EndFunc

Func _date_time_gettimezoneinformation()
	Local $ttimezone = DllStructCreate($tagtime_zone_information)
	Local $aresult = DllCall("kernel32.dll", "dword", "GetTimeZoneInformation", "struct*", $ttimezone)
	If @error OR $aresult[0] = -1 Then Return SetError(@error, @extended, 0)
	Local $ainfo[8]
	$ainfo[0] = $aresult[0]
	$ainfo[1] = DllStructGetData($ttimezone, "Bias")
	$ainfo[2] = _winapi_widechartomultibyte(DllStructGetPtr($ttimezone, "StdName"))
	$ainfo[3] = __date_time_clonesystemtime(DllStructGetPtr($ttimezone, "StdDate"))
	$ainfo[4] = DllStructGetData($ttimezone, "StdBias")
	$ainfo[5] = _winapi_widechartomultibyte(DllStructGetPtr($ttimezone, "DayName"))
	$ainfo[6] = __date_time_clonesystemtime(DllStructGetPtr($ttimezone, "DayDate"))
	$ainfo[7] = DllStructGetData($ttimezone, "DayBias")
	Return $ainfo
EndFunc

Func _date_time_localfiletimetofiletime($tlocaltime)
	Local $tfiletime = DllStructCreate($tagfiletime)
	Local $aresult = DllCall("kernel32.dll", "bool", "LocalFileTimeToFileTime", "struct*", $tlocaltime, "struct*", $tfiletime)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $tfiletime)
EndFunc

Func _date_time_setfiletime($hfile, $tcreatetime, $tlastaccess, $tlastwrite)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetFileTime", "handle", $hfile, "struct*", $tcreatetime, "struct*", $tlastaccess, "struct*", $tlastwrite)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _date_time_setlocaltime($tsystemtime)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetLocalTime", "struct*", $tsystemtime)
	If @error OR NOT $aresult[0] Then Return SetError(@error + 10, @extended, False)
	$aresult = DllCall("kernel32.dll", "bool", "SetLocalTime", "struct*", $tsystemtime)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _date_time_setsystemtime($tsystemtime)
	Local $aresult = DllCall("kernel32.dll", "bool", "SetSystemTime", "struct*", $tsystemtime)
	If @error Then Return SetError(@error, @extended, False)
	Return $aresult[0]
EndFunc

Func _date_time_setsystemtimeadjustment($iadjustment, $bdisabled)
	Local $htoken = _security__openthreadtokenex(BitOR($token_adjust_privileges, $token_query))
	If @error Then Return SetError(@error + 10, @extended, False)
	_security__setprivilege($htoken, "SeSystemtimePrivilege", True)
	Local $ierror = @error
	Local $ilasterror = @extended
	Local $bret = False
	If NOT @error Then
		Local $aresult = DllCall("kernel32.dll", "bool", "SetSystemTimeAdjustment", "dword", $iadjustment, "bool", $bdisabled)
		If @error Then
			$ierror = @error
			$ilasterror = @extended
		ElseIf $aresult[0] Then
			$bret = True
		Else
			$ierror = 20
			$ilasterror = _winapi_getlasterror()
		EndIf
		_security__setprivilege($htoken, "SeSystemtimePrivilege", False)
		If NOT $ierror AND @error Then $ierror = 22
	EndIf
	_winapi_closehandle($htoken)
	Return SetError($ierror, $ilasterror, $bret)
EndFunc

Func _date_time_settimezoneinformation($ibias, $sstdname, $tstddate, $istdbias, $sdayname, $tdaydate, $idaybias)
	Local $tstdname = _winapi_multibytetowidechar($sstdname)
	Local $tdayname = _winapi_multibytetowidechar($sdayname)
	Local $tzoneinfo = DllStructCreate($tagtime_zone_information)
	DllStructSetData($tzoneinfo, "Bias", $ibias)
	DllStructSetData($tzoneinfo, "StdName", DllStructGetData($tstdname, 1))
	_memmovememory($tstddate, DllStructGetPtr($tzoneinfo, "StdDate"), DllStructGetSize($tstddate))
	DllStructSetData($tzoneinfo, "StdBias", $istdbias)
	DllStructSetData($tzoneinfo, "DayName", DllStructGetData($tdayname, 1))
	_memmovememory($tdaydate, DllStructGetPtr($tzoneinfo, "DayDate"), DllStructGetSize($tdaydate))
	DllStructSetData($tzoneinfo, "DayBias", $idaybias)
	Local $htoken = _security__openthreadtokenex(BitOR($token_adjust_privileges, $token_query))
	If @error Then Return SetError(@error + 10, @extended, False)
	_security__setprivilege($htoken, "SeSystemtimePrivilege", True)
	Local $ierror = @error
	Local $ilasterror = @extended
	Local $bret = False
	If NOT @error Then
		Local $aresult = DllCall("kernel32.dll", "bool", "SetTimeZoneInformation", "struct*", $tzoneinfo)
		If @error Then
			$ierror = @error
			$ilasterror = @extended
		ElseIf $aresult[0] Then
			$ilasterror = 0
			$bret = True
		Else
			$ierror = 20
			$ilasterror = _winapi_getlasterror()
		EndIf
		_security__setprivilege($htoken, "SeSystemtimePrivilege", False)
		If NOT $ierror AND @error Then $ierror = 22
	EndIf
	_winapi_closehandle($htoken)
	Return SetError($ierror, $ilasterror, $bret)
EndFunc

Func _date_time_systemtimetoarray(ByRef $tsystemtime)
	Local $ainfo[8]
	$ainfo[0] = DllStructGetData($tsystemtime, "Month")
	$ainfo[1] = DllStructGetData($tsystemtime, "Day")
	$ainfo[2] = DllStructGetData($tsystemtime, "Year")
	$ainfo[3] = DllStructGetData($tsystemtime, "Hour")
	$ainfo[4] = DllStructGetData($tsystemtime, "Minute")
	$ainfo[5] = DllStructGetData($tsystemtime, "Second")
	$ainfo[6] = DllStructGetData($tsystemtime, "MSeconds")
	$ainfo[7] = DllStructGetData($tsystemtime, "DOW")
	Return $ainfo
EndFunc

Func _date_time_systemtimetodatestr(ByRef $tsystemtime, $ifmt = 0)
	Local $ainfo = _date_time_systemtimetoarray($tsystemtime)
	If @error Then Return SetError(@error, @extended, "")
	If $ifmt Then
		Return StringFormat("%04d/%02d/%02d", $ainfo[2], $ainfo[0], $ainfo[1])
	Else
		Return StringFormat("%02d/%02d/%04d", $ainfo[0], $ainfo[1], $ainfo[2])
	EndIf
EndFunc

Func _date_time_systemtimetodatetimestr(ByRef $tsystemtime, $ifmt = 0)
	Local $ainfo = _date_time_systemtimetoarray($tsystemtime)
	If @error Then Return SetError(@error, @extended, "")
	If $ifmt Then
		Return StringFormat("%04d/%02d/%02d %02d:%02d:%02d", $ainfo[2], $ainfo[0], $ainfo[1], $ainfo[3], $ainfo[4], $ainfo[5])
	Else
		Return StringFormat("%02d/%02d/%04d %02d:%02d:%02d", $ainfo[0], $ainfo[1], $ainfo[2], $ainfo[3], $ainfo[4], $ainfo[5])
	EndIf
EndFunc

Func _date_time_systemtimetofiletime($tsystemtime)
	Local $tfiletime = DllStructCreate($tagfiletime)
	Local $aresult = DllCall("kernel32.dll", "bool", "SystemTimeToFileTime", "struct*", $tsystemtime, "struct*", $tfiletime)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $tfiletime)
EndFunc

Func _date_time_systemtimetotimestr(ByRef $tsystemtime)
	Local $ainfo = _date_time_systemtimetoarray($tsystemtime)
	Return StringFormat("%02d:%02d:%02d", $ainfo[3], $ainfo[4], $ainfo[5])
EndFunc

Func _date_time_systemtimetotzspecificlocaltime($tutc, $ttimezone = 0)
	Local $tlocaltime = DllStructCreate($tagsystemtime)
	Local $aresult = DllCall("kernel32.dll", "bool", "SystemTimeToTzSpecificLocalTime", "struct*", $ttimezone, "struct*", $tutc, "struct*", $tlocaltime)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $tlocaltime)
EndFunc

Func _date_time_tzspecificlocaltimetosystemtime($tlocaltime, $ttimezone = 0)
	Local $tutc = DllStructCreate($tagsystemtime)
	Local $aresult = DllCall("kernel32.dll", "bool", "TzSpecificLocalTimeToSystemTime", "struct*", $ttimezone, "struct*", $tlocaltime, "struct*", $tutc)
	If @error Then Return SetError(@error, @extended, 0)
	Return SetExtended($aresult[0], $tutc)
EndFunc

Global Const $bpbf_compatiblebitmap = 0
Global Const $bpbf_dib = 1
Global Const $bpbf_topdowndib = 2
Global Const $bpbf_topdownmonodib = 3
Global Const $bppf_erase = 1
Global Const $bppf_noclip = 2
Global Const $bppf_nonclient = 4
Global Const $dtt_textcolor = 1
Global Const $dtt_bordercolor = 2
Global Const $dtt_shadowcolor = 4
Global Const $dtt_shadowtype = 8
Global Const $dtt_shadowoffset = 16
Global Const $dtt_bordersize = 32
Global Const $dtt_fontprop = 64
Global Const $dtt_colorprop = 128
Global Const $dtt_stateid = 256
Global Const $dtt_calcrect = 512
Global Const $dtt_applyoverlay = 1024
Global Const $dtt_glowsize = 2048
Global Const $dtt_callback = 4096
Global Const $dtt_composited = 8192
Global Const $dtt_validbits = BitOR($dtt_textcolor, $dtt_bordercolor, $dtt_shadowcolor, $dtt_shadowtype, $dtt_shadowoffset, $dtt_bordersize, $dtt_fontprop, $dtt_colorprop, $dtt_stateid, $dtt_calcrect, $dtt_applyoverlay, $dtt_glowsize, $dtt_composited)
Global Const $tst_none = 0
Global Const $tst_single = 1
Global Const $tst_continuous = 2
Global Const $stap_allow_nonclient = 1
Global Const $stap_allow_controls = 2
Global Const $stap_allow_webcontent = 4
Global Const $gbf_direct = 1
Global Const $gbf_copy = 2
Global Const $gbf_validbits = BitOR($gbf_direct, $gbf_copy)
Global Const $sz_thdocprop_author = "Author"
Global Const $sz_thdocprop_canonicalname = "ThemeName"
Global Const $sz_thdocprop_displayname = "DisplayName"
Global Const $sz_thdocprop_tooltip = "ToolTip"
Global Const $ts_min = 0
Global Const $ts_true = 1
Global Const $ts_draw = 2
Global Const $po_class = 2
Global Const $po_global = 3
Global Const $po_notfound = 4
Global Const $po_part = 1
Global Const $po_state = 0
Global Const $tmt_bool = 203
Global Const $tmt_color = 204
Global Const $tmt_dibdata = 2
Global Const $tmt_diskstream = 213
Global Const $tmt_enum = 200
Global Const $tmt_filename = 206
Global Const $tmt_font = 210
Global Const $tmt_glyphdibdata = 8
Global Const $tmt_hbitmap = 212
Global Const $tmt_int = 202
Global Const $tmt_intlist = 211
Global Const $tmt_margins = 205
Global Const $tmt_position = 208
Global Const $tmt_rect = 209
Global Const $tmt_size = 207
Global Const $tmt_string = 201
Global Const $tmt_alwaysshowsizingbar = 2208
Global Const $tmt_autosize = 2202
Global Const $tmt_bgfill = 2205
Global Const $tmt_borderonly = 2203
Global Const $tmt_composited = 2204
Global Const $tmt_compositedopaque = 2219
Global Const $tmt_drawborders = 2214
Global Const $tmt_flatmenus = 1001
Global Const $tmt_glyphonly = 2207
Global Const $tmt_glyphtransparent = 2206
Global Const $tmt_integralsizing = 2211
Global Const $tmt_localizedmirrorimage = 2220
Global Const $tmt_mirrorimage = 2209
Global Const $tmt_noetchedeffect = 2215
Global Const $tmt_sourcegrow = 2212
Global Const $tmt_sourceshrink = 2213
Global Const $tmt_textapplyoverlay = 2216
Global Const $tmt_textglow = 2217
Global Const $tmt_textitalic = 2218
Global Const $tmt_transparent = 2201
Global Const $tmt_uniformsizing = 2210
Global Const $tmt_userpicture = 5001
Global Const $tmt_accentcolorhint = 3823
Global Const $tmt_activeborder = 1611
Global Const $tmt_activecaption = 1603
Global Const $tmt_appworkspace = 1613
Global Const $tmt_background = 1602
Global Const $tmt_blendcolor = 5003
Global Const $tmt_bodytextcolor = 3827
Global Const $tmt_bordercolor = 3801
Global Const $tmt_bordercolorhint = 3822
Global Const $tmt_btnface = 1616
Global Const $tmt_btnhighlight = 1621
Global Const $tmt_btnshadow = 1617
Global Const $tmt_btntext = 1619
Global Const $tmt_buttonalternateface = 1626
Global Const $tmt_captiontext = 1610
Global Const $tmt_dkshadow3d = 1622
Global Const $tmt_edgedkshadowcolor = 3807
Global Const $tmt_edgefillcolor = 3808
Global Const $tmt_edgehighlightcolor = 3805
Global Const $tmt_edgelightcolor = 3804
Global Const $tmt_edgeshadowcolor = 3806
Global Const $tmt_fillcolor = 3802
Global Const $tmt_fillcolorhint = 3821
Global Const $tmt_fromcolor1 = 2001
Global Const $tmt_fromcolor2 = 2002
Global Const $tmt_fromcolor3 = 2003
Global Const $tmt_fromcolor4 = 2004
Global Const $tmt_fromcolor5 = 2005
Global Const $tmt_glowcolor = 3816
Global Const $tmt_glyphtextcolor = 3819
Global Const $tmt_glyphtransparentcolor = 3820
Global Const $tmt_gradientactivecaption = 1628
Global Const $tmt_gradientcolor1 = 3810
Global Const $tmt_gradientcolor2 = 3811
Global Const $tmt_gradientcolor3 = 3812
Global Const $tmt_gradientcolor4 = 3813
Global Const $tmt_gradientcolor5 = 3814
Global Const $tmt_gradientinactivecaption = 1629
Global Const $tmt_graytext = 1618
Global Const $tmt_heading1textcolor = 3825
Global Const $tmt_heading2textcolor = 3826
Global Const $tmt_highlight = 1614
Global Const $tmt_highlighttext = 1615
Global Const $tmt_hottracking = 1627
Global Const $tmt_inactiveborder = 1612
Global Const $tmt_inactivecaption = 1604
Global Const $tmt_inactivecaptiontext = 1620
Global Const $tmt_infobk = 1625
Global Const $tmt_infotext = 1624
Global Const $tmt_light3d = 1623
Global Const $tmt_menu = 1605
Global Const $tmt_menubar = 1631
Global Const $tmt_menuhilight = 1630
Global Const $tmt_menutext = 1608
Global Const $tmt_scrollbar = 1601
Global Const $tmt_shadowcolor = 3815
Global Const $tmt_textbordercolor = 3817
Global Const $tmt_textcolor = 3803
Global Const $tmt_textcolorhint = 3824
Global Const $tmt_textshadowcolor = 3818
Global Const $tmt_transparentcolor = 3809
Global Const $tmt_window = 1606
Global Const $tmt_windowframe = 1607
Global Const $tmt_windowtext = 1609
Global Const $tmt_atlasimage = 8000
Global Const $tmt_bgtype = 4001
Global Const $tmt_bordertype = 4002
Global Const $tmt_contentalignment = 4006
Global Const $tmt_filltype = 4003
Global Const $tmt_glyphtype = 4012
Global Const $tmt_glyphfontsizingtype = 4014
Global Const $tmt_halign = 4005
Global Const $tmt_iconeffect = 4009
Global Const $tmt_imagelayout = 4011
Global Const $tmt_imageselecttype = 4013
Global Const $tmt_offsettype = 4008
Global Const $tmt_sizingtype = 4004
Global Const $tmt_textshadowtype = 4010
Global Const $tmt_truesizescalingtype = 4015
Global Const $tmt_valign = 4007
Global Const $tmt_glyphimagefile = 3008
Global Const $tmt_imagefile = 3001
Global Const $tmt_imagefile1 = 3002
Global Const $tmt_imagefile2 = 3003
Global Const $tmt_imagefile3 = 3004
Global Const $tmt_imagefile4 = 3005
Global Const $tmt_imagefile5 = 3006
Global Const $tmt_scaledbackground = 7001
Global Const $tmt_bodyfont = 809
Global Const $tmt_captionfont = 801
Global Const $tmt_glyphfont = 2601
Global Const $tmt_heading1font = 807
Global Const $tmt_heading2font = 808
Global Const $tmt_icontitlefont = 806
Global Const $tmt_menufont = 803
Global Const $tmt_msgboxfont = 805
Global Const $tmt_smallcaptionfont = 802
Global Const $tmt_statusfont = 804
Global Const $tmt_alphalevel = 2402
Global Const $tmt_alphathreshold = 2415
Global Const $tmt_animationdelay = 2428
Global Const $tmt_animationduration = 5006
Global Const $tmt_bordersize = 2403
Global Const $tmt_charset = 403
Global Const $tmt_colorizationcolor = 2431
Global Const $tmt_colorizationopacity = 2432
Global Const $tmt_framespersecond = 2426
Global Const $tmt_fromhue1 = 1801
Global Const $tmt_fromhue2 = 1802
Global Const $tmt_fromhue3 = 1803
Global Const $tmt_fromhue4 = 1804
Global Const $tmt_fromhue5 = 1805
Global Const $tmt_glowintensity = 2429
Global Const $tmt_glyphindex = 2418
Global Const $tmt_gradientratio1 = 2406
Global Const $tmt_gradientratio2 = 2407
Global Const $tmt_gradientratio3 = 2408
Global Const $tmt_gradientratio4 = 2409
Global Const $tmt_gradientratio5 = 2410
Global Const $tmt_height = 2417
Global Const $tmt_imagecount = 2401
Global Const $tmt_mincolordepth = 1301
Global Const $tmt_mindpi1 = 2420
Global Const $tmt_mindpi2 = 2421
Global Const $tmt_mindpi3 = 2422
Global Const $tmt_mindpi4 = 2423
Global Const $tmt_mindpi5 = 2424
Global Const $tmt_opacity = 2430
Global Const $tmt_pixelsperframe = 2427
Global Const $tmt_progresschunksize = 2411
Global Const $tmt_progressspacesize = 2412
Global Const $tmt_roundcornerheight = 2405
Global Const $tmt_roundcornerwidth = 2404
Global Const $tmt_saturation = 2413
Global Const $tmt_textbordersize = 2414
Global Const $tmt_textglowsize = 2425
Global Const $tmt_tocolor1 = 2006
Global Const $tmt_tocolor2 = 2007
Global Const $tmt_tocolor3 = 2008
Global Const $tmt_tocolor4 = 2009
Global Const $tmt_tocolor5 = 2010
Global Const $tmt_tohue1 = 1806
Global Const $tmt_tohue2 = 1807
Global Const $tmt_tohue3 = 1808
Global Const $tmt_tohue4 = 1809
Global Const $tmt_tohue5 = 1810
Global Const $tmt_truesizestretchmark = 2419
Global Const $tmt_width = 2416
Global Const $tmt_transitiondurations = 6000
Global Const $tmt_captionmargins = 3603
Global Const $tmt_contentmargins = 3602
Global Const $tmt_sizingmargins = 3601
Global Const $tmt_minsize = 3403
Global Const $tmt_minsize1 = 3404
Global Const $tmt_minsize2 = 3405
Global Const $tmt_minsize3 = 3406
Global Const $tmt_minsize4 = 3407
Global Const $tmt_minsize5 = 3408
Global Const $tmt_normalsize = 3409
Global Const $tmt_offset = 3401
Global Const $tmt_textshadowoffset = 3402
Global Const $tmt_animationbuttonrect = 5005
Global Const $tmt_atlasrect = 8002
Global Const $tmt_customsplitrect = 5004
Global Const $tmt_defaultpanesize = 5002
Global Const $tmt_captionbarheight = 1205
Global Const $tmt_captionbarwidth = 1204
Global Const $tmt_menubarheight = 1209
Global Const $tmt_menubarwidth = 1208
Global Const $tmt_paddedborderwidth = 1210
Global Const $tmt_scrollbarheight = 1203
Global Const $tmt_scrollbarwidth = 1202
Global Const $tmt_sizingborderwidth = 1201
Global Const $tmt_smcaptionbarheight = 1207
Global Const $tmt_smcaptionbarwidth = 1206
Global Const $tmt_alias = 1404
Global Const $tmt_atlasinputimage = 8001
Global Const $tmt_author = 604
Global Const $tmt_classicvalue = 3202
Global Const $tmt_colorschemes = 401
Global Const $tmt_company = 603
Global Const $tmt_copyright = 605
Global Const $tmt_cssname = 1401
Global Const $tmt_description = 608
Global Const $tmt_displayname = 601
Global Const $tmt_lastupdated = 1403
Global Const $tmt_sizes = 402
Global Const $tmt_text = 3201
Global Const $tmt_tooltip = 602
Global Const $tmt_url = 606
Global Const $tmt_version = 607
Global Const $tmt_xmlname = 1402
Global Const $tmt_name = 600
#Region Global Variables and Constants
	Global Const $tagdttopts = "dword Size;dword Flags;dword clrText;dword clrBorder;dword clrShadow;int TextShadowType;" & $tagpoint & ";int BorderSize;int FontPropId;int ColorPropId;int StateId;int ApplyOverlay;int GlowSize;ptr DrawTextCallback;lparam lParam"
#EndRegion Global Variables and Constants
#Region Functions list
#EndRegion Functions list
#Region Public Functions

	Func _winapi_beginbufferedpaint($hdc, $ttarget, ByRef $hnewdc, $iformat = 0, $iflags = 0, $texclude = 0, $ialpha = -1)
		Local Const $tagbp_paintparams = "dword cbSize;dword dwFlags;ptr prcExclude;ptr pBlendFunction"
		Local $tpp = DllStructCreate($tagbp_paintparams)
		$hnewdc = 0
		Local $tbf = 0
		If $ialpha <> -1 Then
			$tbf = DllStructCreate($tagblendfunction)
			DllStructSetData($tbf, 1, 0)
			DllStructSetData($tbf, 2, 0)
			DllStructSetData($tbf, 3, $ialpha)
			DllStructSetData($tbf, 4, 1)
		EndIf
		DllStructSetData($tpp, 1, DllStructGetSize($tpp))
		DllStructSetData($tpp, 2, $iflags)
		DllStructSetData($tpp, 3, DllStructGetPtr($texclude))
		DllStructSetData($tpp, 4, DllStructGetPtr($tbf))
		Local $aret = DllCall("uxtheme.dll", "handle", "BeginBufferedPaint", "handle", $hdc, "struct*", $ttarget, "dword", $iformat, "struct*", $tpp, "handle*", 0)
		If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
		$hnewdc = $aret[5]
		Return $aret[0]
	EndFunc

	Func _winapi_bufferedpaintclear($hbp, $trect = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "BufferedPaintClear", "handle", $hbp, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_bufferedpaintinit()
		Local $aret = DllCall("uxtheme.dll", "long", "BufferedPaintInit")
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_bufferedpaintsetalpha($hbp, $ialpha = 255, $trect = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "BufferedPaintSetAlpha", "handle", $hbp, "struct*", $trect, "byte", $ialpha)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_bufferedpaintuninit()
		Local $aret = DllCall("uxtheme.dll", "long", "BufferedPaintUnInit")
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_closethemedata($htheme)
		Local $aret = DllCall("uxtheme.dll", "long", "CloseThemeData", "handle", $htheme)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemebackground($htheme, $ipartid, $istateid, $hdc, $trect, $tclip = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeBackground", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "struct*", $tclip)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemeedge($htheme, $ipartid, $istateid, $hdc, $trect, $iedge, $iflags, $tarea = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeEdge", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "uint", $iedge, "uint", $iflags, "struct*", $tarea)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemeicon($htheme, $ipartid, $istateid, $hdc, $trect, $hil, $iindex)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeIcon", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "handle", $hil, "int", $iindex)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemeparentbackground($hwnd, $hdc, $trect = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeParentBackground", "hwnd", $hwnd, "handle", $hdc, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemetext($htheme, $ipartid, $istateid, $hdc, $stext, $trect, $iflags)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeText", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "wstr", $stext, "int", -1, "dword", $iflags, "dword", 0, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_drawthemetextex($htheme, $ipartid, $istateid, $hdc, $stext, $trect, $iflags, $tdttopts)
		Local $aret = DllCall("uxtheme.dll", "long", "DrawThemeTextEx", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "wstr", $stext, "int", -1, "dword", $iflags, "struct*", $trect, "struct*", $tdttopts)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_endbufferedpaint($hbp, $bupdate = True)
		Local $aret = DllCall("uxtheme.dll", "long", "EndBufferedPaint", "handle", $hbp, "bool", $bupdate)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

	Func _winapi_getbufferedpaintbits($hbp)
		Local $aret = DllCall("uxtheme.dll", "long", "GetBufferedPaintBits", "handle", $hbp, "ptr*", 0, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return SetExtended($aret[3], $aret[2])
	EndFunc

	Func _winapi_getbufferedpaintdc($hbp)
		Local $aret = DllCall("uxtheme.dll", "handle", "GetBufferedPaintDC", "handle", $hbp)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getbufferedpainttargetdc($hbp)
		Local $aret = DllCall("uxtheme.dll", "handle", "GetBufferedPaintTargetDC", "handle", $hbp)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getbufferedpainttargetrect($hbp)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetBufferedPaintTargetRect", "handle", $hbp, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $trect
	EndFunc

	Func _winapi_getcurrentthemename()
		Local $aret = DllCall("uxtheme.dll", "long", "GetCurrentThemeName", "wstr", "", "int", 4096, "wstr", "", "int", 2048, "wstr", "", "int", 2048)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Local $aresult[3]
		For $i = 0 To 2
			$aresult[$i] = $aret[$i * 2 + 1]
		Next
		Return $aresult
	EndFunc

	Func _winapi_getthemeappproperties()
		Local $aret = DllCall("uxtheme.dll", "dword", "GetThemeAppProperties")
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemebackgroundcontentrect($htheme, $ipartid, $istateid, $hdc, $trect)
		Local $tarea = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBackgroundContentRect", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "struct*", $tarea)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tarea
	EndFunc

	Func _winapi_getthemebackgroundextent($htheme, $ipartid, $istateid, $hdc, $trect)
		Local $tarea = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBackgroundExtent", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "struct*", $tarea)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tarea
	EndFunc

	Func _winapi_getthemebackgroundregion($htheme, $ipartid, $istateid, $hdc, $trect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBackgroundRegion", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "handle*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[6]
	EndFunc

	Func _winapi_getthemebitmap($htheme, $ipartid, $istateid, $ipropid, $iflag = 1)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBitmap", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "ulong", $iflag, "handle*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aret[0] Then Return SetError(10, $aret[0], -1)
		Return $aret[6]
	EndFunc

	Func _winapi_getthemebool($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeBool", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "bool*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_getthemecolor($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeColor", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "dword*", 0)
		If @error Then Return SetError(@error, @extended, -1)
		If $aret[0] Then Return SetError(10, $aret[0], -1)
		Return __rgb($aret[5])
	EndFunc

	Func _winapi_getthemedocumentationproperty($sfilepath, $sproperty)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeDocumentationProperty", "wstr", $sfilepath, "wstr", $sproperty, "wstr", "", "int", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[3]
	EndFunc

	Func _winapi_getthemeenumvalue($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeEnumValue", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_getthemefilename($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "uint", "GetThemeFilename", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "wstr", "", "int", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[5]
	EndFunc

	Func _winapi_getthemefont($htheme, $ipartid, $istateid, $ipropid, $hdc = 0)
		Local $tlogfont = DllStructCreate($taglogfont)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeFont", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "int", $ipropid, "struct*", $tlogfont)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tlogfont
	EndFunc

	Func _winapi_getthemeint($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeInt", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_getthememargins($htheme, $ipartid, $istateid, $ipropid, $hdc, $trect)
		Local $tmargins = DllStructCreate($tagmargins)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeMargins", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "int", $ipropid, "struct*", $trect, "struct*", $tmargins)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tmargins
	EndFunc

	Func _winapi_getthememetric($htheme, $ipartid, $istateid, $ipropid, $hdc = 0)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeMetric", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "int", $ipropid, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[6]
	EndFunc

	Func _winapi_getthemepartsize($htheme, $ipartid, $istateid, $hdc, $trect, $itype)
		Local $tsize = DllStructCreate($tagsize)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemePartSize", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $trect, "int", $itype, "struct*", $tsize)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tsize
	EndFunc

	Func _winapi_getthemeposition($htheme, $ipartid, $istateid, $ipropid)
		Local $tpoint = DllStructCreate($tagpoint)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemePosition", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "struct*", $tpoint)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tpoint
	EndFunc

	Func _winapi_getthemepropertyorigin($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemePropertyOrigin", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "uint*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[5]
	EndFunc

	Func _winapi_getthemerect($htheme, $ipartid, $istateid, $ipropid)
		Local $trect = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeRect", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "struct*", $trect)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $trect
	EndFunc

	Func _winapi_getthemestring($htheme, $ipartid, $istateid, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeString", "handle", $htheme, "int", $ipartid, "int", $istateid, "int", $ipropid, "wstr", "", "int", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[5]
	EndFunc

	Func _winapi_getthemesysbool($htheme, $iboolid)
		Local $aret = DllCall("uxtheme.dll", "bool", "GetThemeSysBool", "handle", $htheme, "int", $iboolid)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemesyscolor($htheme, $icolorid)
		Local $aret = DllCall("uxtheme.dll", "dword", "GetThemeSysColor", "handle", $htheme, "int", $icolorid)
		If @error Then Return SetError(@error, @extended, -1)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemesyscolorbrush($htheme, $icolorid)
		Local $aret = DllCall("uxtheme.dll", "handle", "GetThemeSysColorBrush", "handle", $htheme, "int", $icolorid)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemesysfont($htheme, $ifontid)
		Local $tlogfont = DllStructCreate($taglogfont)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeSysFont", "handle", $htheme, "int", $ifontid, "struct*", $tlogfont)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tlogfont
	EndFunc

	Func _winapi_getthemesysint($htheme, $iintid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeSysInt", "handle", $htheme, "int", $iintid, "int*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[3]
	EndFunc

	Func _winapi_getthemesyssize($htheme, $isizeid)
		Local $aret = DllCall("uxtheme.dll", "int", "GetThemeSysSize", "handle", $htheme, "int", $isizeid)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_getthemesysstring($htheme, $istringid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeSysString", "handle", $htheme, "int", $istringid, "wstr", "", "int", 4096)
		If @error Then Return SetError(@error, @extended, "")
		If $aret[0] Then Return SetError(10, $aret[0], "")
		Return $aret[3]
	EndFunc

	Func _winapi_getthemetextextent($htheme, $ipartid, $istateid, $hdc, $stext, $trect, $iflags)
		Local $tarea = DllStructCreate($tagrect)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeTextExtent", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "wstr", $stext, "int", -1, "dword", $iflags, "struct*", $trect, "struct*", $tarea)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $tarea
	EndFunc

	Func _winapi_getthemetextmetrics($htheme, $ipartid, $istateid, $hdc = 0)
		Local $ttextmetric = DllStructCreate($tagtextmetric)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeTextMetrics", "handle", $htheme, "handle", $hdc, "int", $ipartid, "int", $istateid, "struct*", $ttextmetric)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $ttextmetric
	EndFunc

	Func _winapi_getthemetransitionduration($htheme, $ipartid, $istateidfrom, $istateidto, $ipropid)
		Local $aret = DllCall("uxtheme.dll", "long", "GetThemeTransitionDuration", "handle", $htheme, "int", $ipartid, "int", $istateidfrom, "int", $istateidto, "int", $ipropid, "dword*", 0)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return $aret[6]
	EndFunc

	Func _winapi_getwindowtheme($hwnd)
		Local $aret = DllCall("uxtheme.dll", "handle", "GetWindowTheme", "hwnd", $hwnd)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_isthemeactive()
		Local $aret = DllCall("uxtheme.dll", "bool", "IsThemeActive")
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isthemebackgroundpartiallytransparent($htheme, $ipartid, $istateid)
		Local $aret = DllCall("uxtheme.dll", "bool", "IsThemeBackgroundPartiallyTransparent", "handle", $htheme, "int", $ipartid, "int", $istateid)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_isthemepartdefined($htheme, $ipartid)
		Local $aret = DllCall("uxtheme.dll", "int", "IsThemePartDefined", "handle", $htheme, "int", $ipartid, "int", 0)
		If @error Then Return SetError(@error, @extended, False)
		Return $aret[0]
	EndFunc

	Func _winapi_openthemedata($hwnd, $sclass)
		Local $aret = DllCall("uxtheme.dll", "handle", "OpenThemeData", "hwnd", $hwnd, "wstr", $sclass)
		If @error Then Return SetError(@error, @extended, 0)
		Return $aret[0]
	EndFunc

	Func _winapi_setthemeappproperties($iflags)
		DllCall("uxtheme.dll", "none", "SetThemeAppProperties", "dword", $iflags)
		If @error Then Return SetError(@error, @extended, 0)
		Return 1
	EndFunc

	Func _winapi_setwindowtheme($hwnd, $sname = 0, $slist = 0)
		Local $stypeofname = "wstr", $stypeoflist = "wstr"
		If NOT IsString($sname) Then
			$stypeofname = "ptr"
			$sname = 0
		EndIf
		If NOT IsString($slist) Then
			$stypeoflist = "ptr"
			$slist = 0
		EndIf
		Local $aret = DllCall("uxtheme.dll", "long", "SetWindowTheme", "hwnd", $hwnd, $stypeofname, $sname, $stypeoflist, $slist)
		If @error Then Return SetError(@error, @extended, 0)
		If $aret[0] Then Return SetError(10, $aret[0], 0)
		Return 1
	EndFunc

#EndRegion Public Functions

Func _hextostring($shex)
	If NOT (StringLeft($shex, 2) == "0x") Then $shex = "0x" & $shex
	Return BinaryToString($shex, $sb_utf8)
EndFunc

Func _stringbetween($sstring, $sstart, $send, $imode = $str_endisstart, $bcase = False)
	$sstart = $sstart ? "\Q" & $sstart & "\E" : "\A"
	If $imode <> $str_endnotstart Then $imode = $str_endisstart
	If $imode = $str_endisstart Then
		$send = $send ? "(?=\Q" & $send & "\E)" : "\z"
	Else
		$send = $send ? "\Q" & $send & "\E" : "\z"
	EndIf
	If $bcase = Default Then
		$bcase = False
	EndIf
	Local $areturn = StringRegExp($sstring, "(?s" & (NOT $bcase ? "i" : "") & ")" & $sstart & "(.*?)" & $send, $str_regexparrayglobalmatch)
	If @error Then Return SetError(1, 0, 0)
	Return $areturn
EndFunc

Func _stringexplode($sstring, $sdelimiter, $ilimit = 0)
	If $ilimit = Default Then $ilimit = 0
	If $ilimit > 0 Then
		Local Const $null = Chr(0)
		$sstring = StringReplace($sstring, $sdelimiter, $null, $ilimit)
		$sdelimiter = $null
	ElseIf $ilimit < 0 Then
		Local $iindex = StringInStr($sstring, $sdelimiter, 0, $ilimit)
		If $iindex Then
			$sstring = StringLeft($sstring, $iindex - 1)
		EndIf
	EndIf
	Return StringSplit($sstring, $sdelimiter, $str_entiresplit + $str_nocount)
EndFunc

Func _stringinsert($sstring, $sinsertstring, $iposition)
	Local $ilength = StringLen($sstring)
	$iposition = Int($iposition)
	If $iposition < 0 Then $iposition = $ilength + $iposition
	If $ilength < $iposition OR $iposition < 0 Then Return SetError(1, 0, $sstring)
	Return StringLeft($sstring, $iposition) & $sinsertstring & StringRight($sstring, $ilength - $iposition)
EndFunc

Func _stringproper($sstring)
	Local $bcapnext = True, $schr = "", $sreturn = ""
	For $i = 1 To StringLen($sstring)
		$schr = StringMid($sstring, $i, 1)
		Select
			Case $bcapnext = True
				If StringRegExp($schr, "[a-zA-ZÀ-ÿšœžŸ]") Then
					$schr = StringUpper($schr)
					$bcapnext = False
				EndIf
			Case NOT StringRegExp($schr, "[a-zA-ZÀ-ÿšœžŸ]")
				$bcapnext = True
			Case Else
				$schr = StringLower($schr)
		EndSelect
		$sreturn &= $schr
	Next
	Return $sreturn
EndFunc

Func _stringrepeat($sstring, $irepeatcount)
	$irepeatcount = Int($irepeatcount)
	If $irepeatcount = 0 Then Return ""
	If StringLen($sstring) < 1 OR $irepeatcount < 0 Then Return SetError(1, 0, "")
	Local $sresult = ""
	While $irepeatcount > 1
		If BitAND($irepeatcount, 1) Then $sresult &= $sstring
		$sstring &= $sstring
		$irepeatcount = BitShift($irepeatcount, 1)
	WEnd
	Return $sstring & $sresult
EndFunc

Func _stringtitlecase($sstring)
	Local $bcapnext = True, $schr = "", $sreturn = ""
	For $i = 1 To StringLen($sstring)
		$schr = StringMid($sstring, $i, 1)
		Select
			Case $bcapnext = True
				If StringRegExp($schr, "[a-zA-Z\xC0-\xFF0-9]") Then
					$schr = StringUpper($schr)
					$bcapnext = False
				EndIf
			Case NOT StringRegExp($schr, "[a-zA-Z\xC0-\xFF'0-9]")
				$bcapnext = True
			Case Else
				$schr = StringLower($schr)
		EndSelect
		$sreturn &= $schr
	Next
	Return $sreturn
EndFunc

Func _stringtohex($sstring)
	Return Hex(StringToBinary($sstring, $sb_utf8))
EndFunc

#Region Header
#EndRegion Header
#Region Global Variables and Constants
	If NOT (IsDeclared("$cI_CompName")) Then
		Global $ci_compname = @ComputerName
	EndIf
	Global Const $ci_versioninfo = "00.03.08"
	Global Const $ci_aname = 0, $ci_adesc = 4
	Global $wbemflagreturnimmediately = 16, $wbemflagforwardonly = 32
	Global $err_no_info = "Array contains no information", $err_not_obj = "$colItems isnt an object"
#EndRegion Global Variables and Constants
#Region Software Functions

	Func _computergetoss(ByRef $aosinfo)
		Local $colitems, $objwmiservice, $objitem
		Local $aosinfo[1][59], $i = 1
		$objwmiservice = ObjGet("winmgmts:\\" & $ci_compname & "\root\CIMV2")
		$colitems = $objwmiservice.execquery("SELECT * FROM Win32_OperatingSystem", "WQL", $wbemflagreturnimmediately + $wbemflagforwardonly)
		If IsObj($colitems) Then
			For $objitem In $colitems
				$aosinfo = $aosinfo[UBound($aosinfo) + 1][60]
				$aosinfo[$i][0] = $objitem.name
				$aosinfo[$i][1] = $objitem.bootdevice
				$aosinfo[$i][2] = $objitem.buildnumber
				$aosinfo[$i][3] = $objitem.buildtype
				$aosinfo[$i][4] = $objitem.description
				$aosinfo[$i][5] = $objitem.codeset
				$aosinfo[$i][6] = $objitem.countrycode
				$aosinfo[$i][7] = $objitem.creationclassname
				$aosinfo[$i][8] = $objitem.cscreationclassname
				$aosinfo[$i][9] = $objitem.csdversion
				$aosinfo[$i][10] = $objitem.csname
				$aosinfo[$i][11] = $objitem.currenttimezone
				$aosinfo[$i][16] = $objitem.debug
				$aosinfo[$i][17] = $objitem.distributed
				$aosinfo[$i][18] = $objitem.encryptionlevel
				$aosinfo[$i][19] = $objitem.foregroundapplicationboost
				$aosinfo[$i][20] = $objitem.freephysicalmemory
				$aosinfo[$i][21] = $objitem.freespaceinpagingfiles
				$aosinfo[$i][22] = $objitem.freevirtualmemory
				$aosinfo[$i][23] = __stringtodate($objitem.installdate)
				$aosinfo[$i][24] = $objitem.largesystemcache
				$aosinfo[$i][25] = __stringtodate($objitem.lastbootuptime)
				$aosinfo[$i][26] = __stringtodate($objitem.localdatetime)
				$aosinfo[$i][27] = $objitem.locale
				$aosinfo[$i][28] = $objitem.manufacturer
				$aosinfo[$i][29] = $objitem.maxnumberofprocesses
				$aosinfo[$i][30] = $objitem.maxprocessmemorysize
				$aosinfo[$i][31] = $objitem.numberoflicensedusers
				$aosinfo[$i][32] = $objitem.numberofprocesses
				$aosinfo[$i][33] = $objitem.numberofusers
				$aosinfo[$i][34] = $objitem.organization
				$aosinfo[$i][35] = $objitem.oslanguage
				$aosinfo[$i][36] = $objitem.osproductsuite
				$aosinfo[$i][37] = $objitem.ostype
				$aosinfo[$i][38] = $objitem.othertypedescription
				$aosinfo[$i][39] = $objitem.plusproductid
				$aosinfo[$i][40] = $objitem.plusversionnumber
				$aosinfo[$i][41] = $objitem.primary
				$aosinfo[$i][42] = $objitem.producttype
				$aosinfo[$i][43] = $objitem.quantumtype
				$aosinfo[$i][44] = $objitem.registereduser
				$aosinfo[$i][45] = $objitem.serialnumber
				$aosinfo[$i][46] = $objitem.servicepackmajorversion
				$aosinfo[$i][47] = $objitem.servicepackminorversion
				$aosinfo[$i][48] = $objitem.sizestoredinpagingfiles
				$aosinfo[$i][49] = $objitem.status
				$aosinfo[$i][50] = $objitem.suitemask
				$aosinfo[$i][51] = $objitem.systemdevice
				$aosinfo[$i][52] = $objitem.systemdirectory
				$aosinfo[$i][53] = $objitem.systemdrive
				$aosinfo[$i][54] = $objitem.totalswapspacesize
				$aosinfo[$i][55] = $objitem.totalvirtualmemorysize
				$aosinfo[$i][56] = $objitem.totalvisiblememorysize
				$aosinfo[$i][57] = $objitem.version
				$aosinfo[$i][58] = $objitem.windowsdirectory
				$i += 1
			Next
			$aosinfo[0][0] = UBound($aosinfo) - 1
			If $aosinfo[0][0] < 1 Then
				SetError(1, 1, 0)
			EndIf
		Else
			SetError(1, 2, 0)
		EndIf
	EndFunc

#EndRegion Software Functions
#Region Hardware Functions

	Func _computergetbios(ByRef $abiosinfo)
		Local $colitems, $objwmiservice, $objitem
		Local $abiosinfo[1][25], $i = 1
		$objwmiservice = ObjGet("winmgmts:\\" & $ci_compname & "\root\CIMV2")
		$colitems = $objwmiservice.execquery("SELECT * FROM Win32_BIOS", "WQL", $wbemflagreturnimmediately + $wbemflagforwardonly)
		If IsObj($colitems) Then
			For $objitem In $colitems
				$abiosinfo = $abiosinfo[UBound($abiosinfo) + 1][25]
				$abiosinfo[$i][0] = $objitem.name
				$abiosinfo[$i][1] = $objitem.status
				$abiosinfo[$i][2] = $objitem.bioscharacteristics(0)
				$abiosinfo[$i][3] = $objitem.biosversion(0)
				$abiosinfo[$i][4] = $objitem.description
				$abiosinfo[$i][5] = $objitem.buildnumber
				$abiosinfo[$i][6] = $objitem.codeset
				$abiosinfo[$i][7] = $objitem.currentlanguage
				$abiosinfo[$i][8] = $objitem.identificationcode
				$abiosinfo[$i][9] = $objitem.installablelanguages
				$abiosinfo[$i][10] = $objitem.languageedition
				$abiosinfo[$i][11] = $objitem.listoflanguages(0)
				$abiosinfo[$i][12] = $objitem.manufacturer
				$abiosinfo[$i][13] = $objitem.othertargetos
				$abiosinfo[$i][14] = $objitem.primarybios
				$abiosinfo[$i][15] = __stringtodate($objitem.releasedate)
				$abiosinfo[$i][16] = $objitem.serialnumber
				$abiosinfo[$i][17] = $objitem.smbiosbiosversion
				$abiosinfo[$i][18] = $objitem.smbiosmajorversion
				$abiosinfo[$i][19] = $objitem.smbiosminorversion
				$abiosinfo[$i][20] = $objitem.smbiospresent
				$abiosinfo[$i][21] = $objitem.softwareelementid
				$abiosinfo[$i][22] = $objitem.softwareelementstate
				$abiosinfo[$i][23] = $objitem.targetoperatingsystem
				$abiosinfo[$i][24] = $objitem.version
				$i += 1
			Next
			$abiosinfo[0][0] = UBound($abiosinfo) - 1
			If $abiosinfo[0][0] < 1 Then
				SetError(1, 1, 0)
			EndIf
		Else
			SetError(1, 2, 0)
		EndIf
	EndFunc

	Func _computergetmemory(ByRef $amemoryinfo)
		Local $colitems, $objwmiservice, $objitem
		Local $amemoryinfo[1][28], $i = 1
		$objwmiservice = ObjGet("winmgmts:\\" & $ci_compname & "\root\CIMV2")
		$colitems = $objwmiservice.execquery("SELECT * FROM Win32_PhysicalMemory", "WQL", $wbemflagreturnimmediately + $wbemflagforwardonly)
		If IsObj($colitems) Then
			For $objitem In $colitems
				$amemoryinfo = $amemoryinfo[UBound($amemoryinfo) + 1][28]
				$amemoryinfo[$i][0] = $objitem.name
				$amemoryinfo[$i][1] = $objitem.banklabel
				$amemoryinfo[$i][2] = $objitem.capacity
				$amemoryinfo[$i][3] = $objitem.creationclassname
				$amemoryinfo[$i][4] = $objitem.description
				$amemoryinfo[$i][5] = $objitem.datawidth
				$amemoryinfo[$i][6] = $objitem.devicelocator
				$amemoryinfo[$i][7] = $objitem.formfactor
				$amemoryinfo[$i][8] = $objitem.hotswappable
				$amemoryinfo[$i][9] = $objitem.interleavedatadepth
				$amemoryinfo[$i][10] = $objitem.interleaveposition
				$amemoryinfo[$i][11] = $objitem.manufacturer
				$amemoryinfo[$i][12] = $objitem.memorytype
				$amemoryinfo[$i][13] = $objitem.model
				$amemoryinfo[$i][14] = $objitem.otheridentifyinginfo
				$amemoryinfo[$i][15] = $objitem.partnumber
				$amemoryinfo[$i][16] = $objitem.positioninrow
				$amemoryinfo[$i][17] = $objitem.poweredon
				$amemoryinfo[$i][18] = $objitem.removable
				$amemoryinfo[$i][19] = $objitem.replaceable
				$amemoryinfo[$i][20] = $objitem.serialnumber
				$amemoryinfo[$i][21] = $objitem.sku
				$amemoryinfo[$i][22] = $objitem.speed
				$amemoryinfo[$i][23] = $objitem.status
				$amemoryinfo[$i][24] = $objitem.tag
				$amemoryinfo[$i][25] = $objitem.totalwidth
				$amemoryinfo[$i][26] = $objitem.typedetail
				$amemoryinfo[$i][27] = $objitem.version
				$i += 1
			Next
			$amemoryinfo[0][0] = UBound($amemoryinfo) - 1
			If $amemoryinfo[0][0] < 1 Then
				SetError(1, 1, 0)
			EndIf
		Else
			SetError(1, 2, 0)
		EndIf
	EndFunc

	Func _computergetprocessors(ByRef $aprocessorinfo)
		Local $colitems, $objwmiservice, $objitem
		Local $aprocessorinfo[1][42], $i = 1
		$objwmiservice = ObjGet("winmgmts:\\" & $ci_compname & "\root\CIMV2")
		$colitems = $objwmiservice.execquery("SELECT * FROM Win32_Processor", "WQL", $wbemflagreturnimmediately + $wbemflagforwardonly)
		If IsObj($colitems) Then
			For $objitem In $colitems
				$aprocessorinfo = $aprocessorinfo[UBound($aprocessorinfo) + 1][42]
				$aprocessorinfo[$i][0] = StringStripWS($objitem.name, 1)
				$aprocessorinfo[$i][1] = $objitem.addresswidth
				$aprocessorinfo[$i][2] = $objitem.architecture
				$aprocessorinfo[$i][3] = $objitem.availability
				$aprocessorinfo[$i][4] = $objitem.description
				$aprocessorinfo[$i][5] = $objitem.configmanagererrorcode
				$aprocessorinfo[$i][6] = $objitem.configmanageruserconfig
				$aprocessorinfo[$i][7] = $objitem.cpustatus
				$aprocessorinfo[$i][8] = $objitem.creationclassname
				$aprocessorinfo[$i][9] = $objitem.currentclockspeed
				$aprocessorinfo[$i][10] = $objitem.currentvoltage
				$aprocessorinfo[$i][11] = $objitem.datawidth
				$aprocessorinfo[$i][12] = $objitem.deviceid
				$aprocessorinfo[$i][13] = $objitem.errorcleared
				$aprocessorinfo[$i][14] = $objitem.errordescription
				$aprocessorinfo[$i][15] = $objitem.extclock
				$aprocessorinfo[$i][16] = $objitem.family
				$aprocessorinfo[$i][17] = $objitem.l2cachesize
				$aprocessorinfo[$i][18] = $objitem.l2cachespeed
				$aprocessorinfo[$i][19] = $objitem.lasterrorcode
				$aprocessorinfo[$i][20] = $objitem.level
				$aprocessorinfo[$i][21] = $objitem.loadpercentage
				$aprocessorinfo[$i][22] = $objitem.manufacturer
				$aprocessorinfo[$i][23] = $objitem.maxclockspeed
				$aprocessorinfo[$i][24] = $objitem.otherfamilydescription
				$aprocessorinfo[$i][25] = $objitem.pnpdeviceid
				$aprocessorinfo[$i][26] = $objitem.powermanagementcapabilities(0)
				$aprocessorinfo[$i][27] = $objitem.powermanagementsupported
				$aprocessorinfo[$i][28] = $objitem.processorid
				$aprocessorinfo[$i][29] = $objitem.processortype
				$aprocessorinfo[$i][30] = $objitem.revision
				$aprocessorinfo[$i][31] = $objitem.role
				$aprocessorinfo[$i][32] = $objitem.socketdesignation
				$aprocessorinfo[$i][33] = $objitem.status
				$aprocessorinfo[$i][34] = $objitem.statusinfo
				$aprocessorinfo[$i][35] = $objitem.stepping
				$aprocessorinfo[$i][36] = $objitem.systemcreationclassname
				$aprocessorinfo[$i][37] = $objitem.systemname
				$aprocessorinfo[$i][38] = $objitem.uniqueid
				$aprocessorinfo[$i][39] = $objitem.upgrademethod
				$aprocessorinfo[$i][40] = $objitem.version
				$aprocessorinfo[$i][41] = $objitem.voltagecaps
				$i += 1
			Next
			$aprocessorinfo[0][0] = UBound($aprocessorinfo) - 1
			If $aprocessorinfo[0][0] < 1 Then
				SetError(1, 1, 0)
			EndIf
		Else
			SetError(1, 2, 0)
		EndIf
	EndFunc

#EndRegion Hardware Functions
#Region Internal Functions

	Func __stringversion()
		Return $ci_versioninfo
	EndFunc

	Func __stringtodate($dtmdate)
		Return (StringMid($dtmdate, 5, 2) & "/" & StringMid($dtmdate, 7, 2) & "/" & StringLeft($dtmdate, 4) & " " & StringMid($dtmdate, 9, 2) & ":" & StringMid($dtmdate, 11, 2) & ":" & StringMid($dtmdate, 13, 2))
	EndFunc

#EndRegion Internal Functions
Global Const $prov_rsa_full = 1
Global Const $prov_rsa_aes = 24
Global Const $crypt_verifycontext = -268435456
Global Const $hp_hashsize = 4
Global Const $hp_hashval = 2
Global Const $crypt_exportable = 1
Global Const $crypt_userdata = 1
Global Const $calg_md2 = 32769
Global Const $calg_md4 = 32770
Global Const $calg_md5 = 32771
Global Const $calg_sha1 = 32772
Global Const $calg_3des = 26115
Global Const $calg_aes_128 = 26126
Global Const $calg_aes_192 = 26127
Global Const $calg_aes_256 = 26128
Global Const $calg_des = 26113
Global Const $calg_rc2 = 26114
Global Const $calg_rc4 = 26625
Global Const $calg_userkey = 0
Global Const $kp_algid = 7
Global $__g_acryptinternaldata[3]

Func _crypt_startup()
	If __crypt_refcount() = 0 Then
		Local $hadvapi32 = DllOpen("Advapi32.dll")
		If $hadvapi32 = -1 Then Return SetError(1, 0, False)
		__crypt_dllhandleset($hadvapi32)
		Local $iproviderid = $prov_rsa_aes
		Local $aret = DllCall(__crypt_dllhandle(), "bool", "CryptAcquireContext", "handle*", 0, "ptr", 0, "ptr", 0, "dword", $iproviderid, "dword", $crypt_verifycontext)
		If @error OR NOT $aret[0] Then
			Local $ierror = @error + 10, $iextended = @extended
			DllClose(__crypt_dllhandle())
			Return SetError($ierror, $iextended, False)
		Else
			__crypt_contextset($aret[1])
		EndIf
	EndIf
	__crypt_refcountinc()
	Return True
EndFunc

Func _crypt_shutdown()
	__crypt_refcountdec()
	If __crypt_refcount() = 0 Then
		DllCall(__crypt_dllhandle(), "bool", "CryptReleaseContext", "handle", __crypt_context(), "dword", 0)
		DllClose(__crypt_dllhandle())
	EndIf
EndFunc

Func _crypt_derivekey($vpassword, $ialgid, $ihashalgid = $calg_md5)
	Local $aret = 0, $hbuff = 0, $hcrypthash = 0, $ierror = 0, $iextended = 0, $vreturn = 0
	_crypt_startup()
	Do
		$aret = DllCall(__crypt_dllhandle(), "bool", "CryptCreateHash", "handle", __crypt_context(), "uint", $ihashalgid, "ptr", 0, "dword", 0, "handle*", 0)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 10
			$iextended = @extended
			$vreturn = -1
			ExitLoop
		EndIf
		$hcrypthash = $aret[5]
		$hbuff = DllStructCreate("byte[" & BinaryLen($vpassword) & "]")
		DllStructSetData($hbuff, 1, $vpassword)
		$aret = DllCall(__crypt_dllhandle(), "bool", "CryptHashData", "handle", $hcrypthash, "struct*", $hbuff, "dword", DllStructGetSize($hbuff), "dword", $crypt_userdata)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 20
			$iextended = @extended
			$vreturn = -1
			ExitLoop
		EndIf
		$aret = DllCall(__crypt_dllhandle(), "bool", "CryptDeriveKey", "handle", __crypt_context(), "uint", $ialgid, "handle", $hcrypthash, "dword", $crypt_exportable, "handle*", 0)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 30
			$iextended = @extended
			$vreturn = -1
			ExitLoop
		EndIf
		$vreturn = $aret[5]
	Until True
	If $hcrypthash <> 0 Then DllCall(__crypt_dllhandle(), "bool", "CryptDestroyHash", "handle", $hcrypthash)
	Return SetError($ierror, $iextended, $vreturn)
EndFunc

Func _crypt_destroykey($hcryptkey)
	Local $aret = DllCall(__crypt_dllhandle(), "bool", "CryptDestroyKey", "handle", $hcryptkey)
	Local $ierror = @error, $iextended = @extended
	_crypt_shutdown()
	If $ierror OR NOT $aret[0] Then
		Return SetError($ierror + 10, $iextended, False)
	Else
		Return True
	EndIf
EndFunc

Func _crypt_encryptdata($vdata, $vcryptkey, $ialgid, $bfinal = True)
	Switch $ialgid
		Case $calg_userkey
			Local $icalgused = __crypt_getcalgfromcryptkey($vcryptkey)
			If @error Then Return SetError(@error, -1, @extended)
			If $icalgused = $calg_rc4 Then ContinueCase
		Case $calg_rc4
			If BinaryLen($vdata) = 0 Then Return SetError(0, 0, Binary(""))
	EndSwitch
	Local $ireqbuffsize = 0, $aret = 0, $hbuff = 0, $ierror = 0, $iextended = 0, $vreturn = 0
	_crypt_startup()
	Do
		If $ialgid <> $calg_userkey Then
			$vcryptkey = _crypt_derivekey($vcryptkey, $ialgid)
			If @error Then
				$ierror = @error + 100
				$iextended = @extended
				$vreturn = -1
				ExitLoop
			EndIf
		EndIf
		$aret = DllCall(__crypt_dllhandle(), "bool", "CryptEncrypt", "handle", $vcryptkey, "handle", 0, "bool", $bfinal, "dword", 0, "ptr", 0, "dword*", BinaryLen($vdata), "dword", 0)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 20
			$iextended = @extended
			$vreturn = -1
			ExitLoop
		EndIf
		$ireqbuffsize = $aret[6]
		$hbuff = DllStructCreate("byte[" & $ireqbuffsize + 1 & "]")
		DllStructSetData($hbuff, 1, $vdata)
		$aret = DllCall(__crypt_dllhandle(), "bool", "CryptEncrypt", "handle", $vcryptkey, "handle", 0, "bool", $bfinal, "dword", 0, "struct*", $hbuff, "dword*", BinaryLen($vdata), "dword", DllStructGetSize($hbuff) - 1)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 30
			$iextended = @extended
			$vreturn = -1
			ExitLoop
		EndIf
		$vreturn = BinaryMid(DllStructGetData($hbuff, 1), 1, $ireqbuffsize)
	Until True
	If $ialgid <> $calg_userkey Then _crypt_destroykey($vcryptkey)
	_crypt_shutdown()
	Return SetError($ierror, $iextended, $vreturn)
EndFunc

Func _crypt_decryptdata($vdata, $vcryptkey, $ialgid, $bfinal = True)
	Switch $ialgid
		Case $calg_userkey
			Local $icalgused = __crypt_getcalgfromcryptkey($vcryptkey)
			If @error Then Return SetError(@error, -1, @extended)
			If $icalgused = $calg_rc4 Then ContinueCase
		Case $calg_rc4
			If BinaryLen($vdata) = 0 Then Return SetError(0, 0, Binary(""))
	EndSwitch
	Local $aret = 0, $hbuff = 0, $htempstruct = 0, $ierror = 0, $iextended = 0, $iplaintextsize = 0, $vreturn = 0
	_crypt_startup()
	Do
		If $ialgid <> $calg_userkey Then
			$vcryptkey = _crypt_derivekey($vcryptkey, $ialgid)
			If @error Then
				$ierror = @error + 100
				$iextended = @extended
				$vreturn = -1
				ExitLoop
			EndIf
		EndIf
		$hbuff = DllStructCreate("byte[" & BinaryLen($vdata) + 1000 & "]")
		If BinaryLen($vdata) > 0 Then DllStructSetData($hbuff, 1, $vdata)
		$aret = DllCall(__crypt_dllhandle(), "bool", "CryptDecrypt", "handle", $vcryptkey, "handle", 0, "bool", $bfinal, "dword", 0, "struct*", $hbuff, "dword*", BinaryLen($vdata))
		If @error OR NOT $aret[0] Then
			$ierror = @error + 20
			$iextended = @extended
			$vreturn = -1
			ExitLoop
		EndIf
		$iplaintextsize = $aret[6]
		$htempstruct = DllStructCreate("byte[" & $iplaintextsize + 1 & "]", DllStructGetPtr($hbuff))
		$vreturn = BinaryMid(DllStructGetData($htempstruct, 1), 1, $iplaintextsize)
	Until True
	If $ialgid <> $calg_userkey Then _crypt_destroykey($vcryptkey)
	_crypt_shutdown()
	Return SetError($ierror, $iextended, $vreturn)
EndFunc

Func _crypt_hashdata($vdata, $ialgid, $bfinal = True, $hcrypthash = 0)
	Local $aret = 0, $hbuff = 0, $ierror = 0, $iextended = 0, $ihashsize = 0, $vreturn = 0
	_crypt_startup()
	Do
		If $hcrypthash = 0 Then
			$aret = DllCall(__crypt_dllhandle(), "bool", "CryptCreateHash", "handle", __crypt_context(), "uint", $ialgid, "ptr", 0, "dword", 0, "handle*", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 10
				$iextended = @extended
				$vreturn = -1
				ExitLoop
			EndIf
			$hcrypthash = $aret[5]
		EndIf
		$hbuff = DllStructCreate("byte[" & BinaryLen($vdata) & "]")
		DllStructSetData($hbuff, 1, $vdata)
		$aret = DllCall(__crypt_dllhandle(), "bool", "CryptHashData", "handle", $hcrypthash, "struct*", $hbuff, "dword", DllStructGetSize($hbuff), "dword", $crypt_userdata)
		If @error OR NOT $aret[0] Then
			$ierror = @error + 20
			$iextended = @extended
			$vreturn = -1
			ExitLoop
		EndIf
		If $bfinal Then
			$aret = DllCall(__crypt_dllhandle(), "bool", "CryptGetHashParam", "handle", $hcrypthash, "dword", $hp_hashsize, "dword*", 0, "dword*", 4, "dword", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 30
				$iextended = @extended
				$vreturn = -1
				ExitLoop
			EndIf
			$ihashsize = $aret[3]
			$hbuff = DllStructCreate("byte[" & $ihashsize & "]")
			$aret = DllCall(__crypt_dllhandle(), "bool", "CryptGetHashParam", "handle", $hcrypthash, "dword", $hp_hashval, "struct*", $hbuff, "dword*", DllStructGetSize($hbuff), "dword", 0)
			If @error OR NOT $aret[0] Then
				$ierror = @error + 40
				$iextended = @extended
				$vreturn = -1
				ExitLoop
			EndIf
			$vreturn = DllStructGetData($hbuff, 1)
		Else
			$vreturn = $hcrypthash
		EndIf
	Until True
	If $hcrypthash <> 0 AND $bfinal Then DllCall(__crypt_dllhandle(), "bool", "CryptDestroyHash", "handle", $hcrypthash)
	_crypt_shutdown()
	Return SetError($ierror, $iextended, $vreturn)
EndFunc

Func _crypt_hashfile($sfilepath, $ialgid)
	Local $btempdata = 0, $hfile = 0, $hhashobject = 0, $ierror = 0, $iextended = 0, $vreturn = 0
	_crypt_startup()
	Do
		$hfile = FileOpen($sfilepath, $fo_binary)
		If $hfile = -1 Then
			$ierror = 1
			$vreturn = -1
			ExitLoop
		EndIf
		Do
			$btempdata = FileRead($hfile, 512 * 1024)
			If @error Then
				$vreturn = _crypt_hashdata($btempdata, $ialgid, True, $hhashobject)
				If @error Then
					$ierror = @error
					$iextended = @extended
					$vreturn = -1
					ExitLoop 2
				EndIf
				ExitLoop 2
			Else
				$hhashobject = _crypt_hashdata($btempdata, $ialgid, False, $hhashobject)
				If @error Then
					$ierror = @error + 100
					$iextended = @extended
					$vreturn = -1
					ExitLoop 2
				EndIf
			EndIf
		Until False
	Until True
	_crypt_shutdown()
	If $hfile <> -1 Then FileClose($hfile)
	Return SetError($ierror, $iextended, $vreturn)
EndFunc

Func _crypt_encryptfile($ssourcefile, $sdestinationfile, $vcryptkey, $ialgid)
	Local $btempdata = 0, $hinfile = 0, $houtfile = 0, $ierror = 0, $iextended = 0, $ifilesize = FileGetSize($ssourcefile), $iread = 0, $breturn = True
	_crypt_startup()
	Do
		If $ialgid <> $calg_userkey Then
			$vcryptkey = _crypt_derivekey($vcryptkey, $ialgid)
			If @error Then
				$ierror = @error
				$iextended = @extended
				$breturn = False
				ExitLoop
			EndIf
		EndIf
		$hinfile = FileOpen($ssourcefile, $fo_binary)
		If @error Then
			$ierror = 2
			$breturn = False
			ExitLoop
		EndIf
		$houtfile = FileOpen($sdestinationfile, $fo_overwrite + $fo_createpath + $fo_binary)
		If @error Then
			$ierror = 3
			$breturn = False
			ExitLoop
		EndIf
		Do
			$btempdata = FileRead($hinfile, 1024 * 1024)
			$iread += BinaryLen($btempdata)
			If $iread = $ifilesize Then
				$btempdata = _crypt_encryptdata($btempdata, $vcryptkey, $calg_userkey, True)
				If @error Then
					$ierror = @error + 400
					$iextended = @extended
					$breturn = False
				EndIf
				FileWrite($houtfile, $btempdata)
				ExitLoop 2
			Else
				$btempdata = _crypt_encryptdata($btempdata, $vcryptkey, $calg_userkey, False)
				If @error Then
					$ierror = @error + 500
					$iextended = @extended
					$breturn = False
					ExitLoop 2
				EndIf
				FileWrite($houtfile, $btempdata)
			EndIf
		Until False
	Until True
	If $ialgid <> $calg_userkey Then _crypt_destroykey($vcryptkey)
	_crypt_shutdown()
	If $hinfile <> -1 Then FileClose($hinfile)
	If $houtfile <> -1 Then FileClose($houtfile)
	Return SetError($ierror, $iextended, $breturn)
EndFunc

Func _crypt_decryptfile($ssourcefile, $sdestinationfile, $vcryptkey, $ialgid)
	Local $btempdata = 0, $hinfile = 0, $houtfile = 0, $ierror = 0, $iextended = 0, $ifilesize = FileGetSize($ssourcefile), $iread = 0, $breturn = True
	_crypt_startup()
	Do
		If $ialgid <> $calg_userkey Then
			$vcryptkey = _crypt_derivekey($vcryptkey, $ialgid)
			If @error Then
				$ierror = @error
				$iextended = @extended
				$breturn = False
				ExitLoop
			EndIf
		EndIf
		$hinfile = FileOpen($ssourcefile, $fo_binary)
		If @error Then
			$ierror = 2
			$breturn = False
			ExitLoop
		EndIf
		$houtfile = FileOpen($sdestinationfile, $fo_overwrite + $fo_createpath + $fo_binary)
		If @error Then
			$ierror = 3
			$breturn = False
			ExitLoop
		EndIf
		Do
			$btempdata = FileRead($hinfile, 1024 * 1024)
			$iread += BinaryLen($btempdata)
			If $iread = $ifilesize Then
				$btempdata = _crypt_decryptdata($btempdata, $vcryptkey, $calg_userkey, True)
				If @error Then
					$ierror = @error + 400
					$iextended = @extended
					$breturn = False
				EndIf
				FileWrite($houtfile, $btempdata)
				ExitLoop 2
			Else
				$btempdata = _crypt_decryptdata($btempdata, $vcryptkey, $calg_userkey, False)
				If @error Then
					$ierror = @error + 500
					$iextended = @extended
					$breturn = False
					ExitLoop 2
				EndIf
				FileWrite($houtfile, $btempdata)
			EndIf
		Until False
	Until True
	If $ialgid <> $calg_userkey Then _crypt_destroykey($vcryptkey)
	_crypt_shutdown()
	If $hinfile <> -1 Then FileClose($hinfile)
	If $houtfile <> -1 Then FileClose($houtfile)
	Return SetError($ierror, $iextended, $breturn)
EndFunc

Func _crypt_genrandom($pbuffer, $isize)
	_crypt_startup()
	Local $aret = DllCall(__crypt_dllhandle(), "bool", "CryptGenRandom", "handle", __crypt_context(), "dword", $isize, "struct*", $pbuffer)
	Local $ierror = @error, $iextended = @extended
	_crypt_shutdown()
	If $ierror OR (NOT $aret[0]) Then
		Return SetError($ierror + 10, $iextended, False)
	Else
		Return True
	EndIf
EndFunc

Func __crypt_refcount()
	Return $__g_acryptinternaldata[0]
EndFunc

Func __crypt_refcountinc()
	$__g_acryptinternaldata[0] += 1
EndFunc

Func __crypt_refcountdec()
	If $__g_acryptinternaldata[0] > 0 Then $__g_acryptinternaldata[0] -= 1
EndFunc

Func __crypt_dllhandle()
	Return $__g_acryptinternaldata[1]
EndFunc

Func __crypt_dllhandleset($hadvapi32)
	$__g_acryptinternaldata[1] = $hadvapi32
EndFunc

Func __crypt_context()
	Return $__g_acryptinternaldata[2]
EndFunc

Func __crypt_contextset($hcryptcontext)
	$__g_acryptinternaldata[2] = $hcryptcontext
EndFunc

Func __crypt_getcalgfromcryptkey($vcryptkey)
	Local $talgid = DllStructCreate("uint;dword")
	DllStructSetData($talgid, 2, 4)
	Local $aret = DllCall(__crypt_dllhandle(), "bool", "CryptGetKeyParam", "handle", $vcryptkey, "dword", $kp_algid, "ptr", DllStructGetPtr($talgid, 1), "dword*", DllStructGetPtr($talgid, 2), "dword", 0)
	If @error OR NOT $aret[0] Then
		Return SetError(@error, @extended, $crypt_userdata)
	Else
		Return DllStructGetData($talgid, 1)
	EndIf
EndFunc

Global $ffdefaultsnapshot = 0
Global $ffdefautdebugmode = 231
Global $ffdllhandle = -1
Global $fflastsnap = 0
Global Const $ffnbsnapmax = 1024
Global $fflastsnapstatus[$ffnbsnapmax]
Global Const $ffcurrentversion = "2.2"
initffdll()

Func initffdll()
	Global $dllname
	For $i = 0 To $ffnbsnapmax - 1
		$fflastsnapstatus[$i] = 0
	Next
	If @AutoItX64 Then
		$dllname = "FastFind64.dll"
	Else
		$dllname = "FastFind.dll"
	EndIf
	$ffdllhandle = DllOpen($dllname)
	If $ffdllhandle = -1 Then
		$ffdllhandle = $dllname
		MsgBox(0, "Error", "Failed to load " & $dllname & ", application probably won't properly work. " & @LF & "Check if the file " & $dllname & "is installed near this script")
		Exit (100)
		Return
	EndIf
	If ($ffcurrentversion <> ffgetversion()) Then
		MsgBox(0, "Error", "Wrong version of " & $dllname & ". The dll is version " & ffgetversion() & " while version " & $ffcurrentversion & " is required.")
		Exit (101)
	EndIf
	ffsetdebugmode($ffdefautdebugmode)
EndFunc

Func closeffdll()
	If $ffdllhandle <> -1 Then DllClose($ffdllhandle)
EndFunc

Func ffsetdebugmode($debugmode)
	DllCall($ffdllhandle, "none", "SetDebugMode", "int", $debugmode)
EndFunc

Func fftrace($debugstring)
	DllCall($ffdllhandle, "none", "DebugTrace", "str", $debugstring)
EndFunc

Func fftraceerror($debugstring)
	DllCall($ffdllhandle, "none", "DebugError", "str", $debugstring)
EndFunc

Func ffsetwnd($windowhandle, $clientonly = True)
	DllCall($ffdllhandle, "none", "SetHWnd", "HWND", $windowhandle, "BOOLEAN", $clientonly)
EndFunc

Func ffsetdefaultsnapshot($newsnapshot)
	$ffdefaultsnapshot = $newsnapshot
EndFunc

Func ffaddcolor(Const $newcolor)
	Local $res
	If (IsArray($newcolor)) Then
		For $color In $newcolor
			$res = DllCall($ffdllhandle, "int", "AddColor", "int", $color)
		Next
	Else
		$res = DllCall($ffdllhandle, "int", "AddColor", "int", $newcolor)
	EndIf
	If IsArray($res) Then Return $res[0]
	Return $res
EndFunc

Func ffremovecolor(Const $oldcolor)
	Local $res = DllCall($ffdllhandle, "int", "RemoveColor", "int", $oldcolor)
	If IsArray($res) Then Return $res[0]
	Return $res
EndFunc

Func ffresetcolors()
	DllCall($ffdllhandle, "none", "ResetColors")
EndFunc

Func ffaddexcludedarea(Const $x1, Const $y1, Const $x2, Const $y2)
	Local $res = DllCall($ffdllhandle, "int", "AddExcludedArea", "int", $x1, "int", $y1, "int", $x2, "int", $y2)
	If IsArray($res) Then Return $res[0]
	Return $res
EndFunc

Func ffresetexcludedareas()
	DllCall($ffdllhandle, "none", "ResetExcludedAreas")
EndFunc

Func ffisexcluded(Const $x, Const $y, Const $hwnd)
	Local $res = DllCall($ffdllhandle, "BOOLEAN", "IsExcluded", "int", $x, "int", $y, "HWND", $hwnd)
	If IsArray($res) Then Return $res[0]
	Return $res
EndFunc

Func ffsnapshot(Const $left = 0, Const $top = 0, Const $right = 0, Const $bottom = 0, Const $nosnapshot = $ffdefaultsnapshot, Const $windowhandle = -1)
	If ($windowhandle <> -1) Then ffsetwnd($windowhandle)
	$ffdefaultsnapshot = $nosnapshot
	Local $res = DllCall($ffdllhandle, "int", "SnapShot", "int", $left, "int", $top, "int", $right, "int", $bottom, "int", $nosnapshot)
	If (((NOT IsArray($res)) AND ($res = 0)) OR $res[0] = 0) Then
		MsgBox(0, "FFSnapShot", "SnapShot (" & $left & "," & $top & "," & $right & "," & $bottom & "," & $nosnapshot & "," & Hex($windowhandle, 8) & ") failed ")
		If (IsArray($res)) Then
			MsgBox(0, "FFSnapShot Error", "IsArray($Res):" & IsArray($res) & " - Ubound($Res):" & UBound($res) & " - $Res[0]:" & $res[0])
		Else
			MsgBox(0, "FFSnapShot Error", "IsArray($Res):" & IsArray($res) & " - $Res:" & $res)
		EndIf
		$fflastsnapstatus[$nosnapshot] = -1
		SetError(2)
		Return False
	EndIf
	$fflastsnapstatus[$nosnapshot] = 1
	$fflastsnap = $nosnapshot
	Return True
EndFunc

Func snapshotpreprocessor($left, $top, $right, $bottom, $forcenewsnap, $nosnapshot, $windowhandle)
	If ($forcenewsnap OR $fflastsnapstatus[$nosnapshot] <> 1) Then Return ffsnapshot($left, $top, $right, $bottom, $nosnapshot, $windowhandle)
	Return True
EndFunc

Func ffnearestpixel($posx, $posy, $color, $forcenewsnap = True, $left = 0, $top = 0, $right = 0, $bottom = 0, $nosnapshot = $fflastsnap, $windowhandle = -1)
	If NOT snapshotpreprocessor($left, $top, $right, $bottom, $forcenewsnap, $nosnapshot, $windowhandle) Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "int", "ColorPixelSearch", "int*", $posx, "int*", $posy, "int", $color, "int", $nosnapshot)
	If (NOT IsArray($result) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Local $coordresult[2] = [$result[1], $result[2]]
	Return $coordresult
EndFunc

Func ffnearestspot($sizesearch, $nbpixel, $posx, $posy, $color, $shadevariation = 0, $forcenewsnap = True, $left = 0, $top = 0, $right = 0, $bottom = 0, $nosnapshot = $fflastsnap, $windowhandle = -1)
	If NOT snapshotpreprocessor($left, $top, $right, $bottom, $forcenewsnap, $nosnapshot, $windowhandle) Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "int", "GenericColorSearch", "int", $sizesearch, "int*", $nbpixel, "int*", $posx, "int*", $posy, "int", $color, "int", $shadevariation, "int", $nosnapshot)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Local $coordresult[3] = [$result[3], $result[4], $result[2]]
	Return $coordresult
EndFunc

Func ffbestspot($sizesearch, $minnbpixel, $optnbpixel, $posx, $posy, $color, $shadevariation = 0, $forcenewsnap = True, $left = 0, $top = 0, $right = 0, $bottom = 0, $nosnapshot = $fflastsnap, $windowhandle = -1)
	If NOT snapshotpreprocessor($left, $top, $right, $bottom, $forcenewsnap, $nosnapshot, $windowhandle) Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "int", "ProgressiveSearch", "int", $sizesearch, "int*", $minnbpixel, "int", $optnbpixel, "int*", $posx, "int*", $posy, "int", $color, "int", $shadevariation, "int", $nosnapshot)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Local $coordresult[3] = [$result[4], $result[5], $result[2]]
	Return $coordresult
EndFunc

Func ffcolorcount($colortocount, $shadevariation = 0, $forcenewsnap = True, $left = 0, $top = 0, $right = 0, $bottom = 0, $nosnapshot = $fflastsnap, $windowhandle = -1)
	If NOT snapshotpreprocessor($left, $top, $right, $bottom, $forcenewsnap, $nosnapshot, $windowhandle) Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "int", "ColorCount", "int", $colortocount, "int", $nosnapshot, "int", $shadevariation)
	If (NOT IsArray($result)) Then Return False
	Return $result[0]
EndFunc

Func ffisdifferent($nosnapshot1, $nosnapshot2, $shadevariation = 0)
	Local $result = DllCall($ffdllhandle, "int", "HasChanged", "int", $nosnapshot1, "int", $nosnapshot2, "int", $shadevariation)
	If (NOT IsArray($result)) Then Return False
	Return $result[0]
EndFunc

Func fflocalizechanges($nosnapshot1, $nosnapshot2, $shadevariation = 0)
	Local $result = DllCall($ffdllhandle, "int", "LocalizeChanges", "int", $nosnapshot1, "int", $nosnapshot2, "int*", 0, "int*", 0, "int*", 0, "int*", 0, "int*", 0, "int", $shadevariation)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Local $tabres[5] = [$result[3], $result[4], $result[5], $result[6], $result[7]]
	Return $tabres
EndFunc

Func ffgetpixel($x, $y, $nosnapshot = $fflastsnap)
	Local $result = DllCall($ffdllhandle, "int", "FFGetPixel", "int", $x, "int", $y, "int", $nosnapshot)
	If ((NOT IsArray($result)) OR ($result[0] = -1)) Then
		SetError(2)
		Return -1
	EndIf
	Return $result[0]
EndFunc

Func ffgetversion()
	Local $result = DllCall($ffdllhandle, "str", "FFVersion")
	If ((NOT IsArray($result))) Then
		SetError(2)
		Return "???"
	EndIf
	Return $result[0]
EndFunc

Func ffgetlasterror()
	Local $result = DllCall($ffdllhandle, "str", "GetLastErrorMsg")
	If ((NOT IsArray($result))) Then
		SetError(2)
		Return ""
	EndIf
	Return $result[0]
EndFunc

Global $lastfilenameparam = ""

Func ffsavebmp($filenamewithnoextension, $forcenewsnap = False, $left = 0, $top = 0, $right = 0, $bottom = 0, $nosnapshot = $fflastsnap, $windowhandle = -1)
	If NOT snapshotpreprocessor($left, $top, $right, $bottom, $forcenewsnap, $nosnapshot, $windowhandle) Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "BOOLEAN", "SaveBMP", "int", $nosnapshot, "str", $filenamewithnoextension)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	If (IsArray($result)) Then
		If ($result[0] > 0) Then
			$lastfilenameparam = $filenamewithnoextension + ".BMP"
		Else
			$lastfilenameparam = $filenamewithnoextension + "_"+$result[0] + ".BMP"
		EndIf
	EndIf
	Return True
EndFunc

Func ffsavejpg($filenamewithnoextension, $qualityfactor = 85, $forcenewsnap = True, $left = 0, $top = 0, $right = 0, $bottom = 0, $nosnapshot = $fflastsnap, $windowhandle = -1)
	If NOT snapshotpreprocessor($left, $top, $right, $bottom, $forcenewsnap, $nosnapshot, $windowhandle) Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "BOOLEAN", "SaveJPG", "int", $nosnapshot, "str", $filenamewithnoextension, "ULONG", $qualityfactor)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	If (IsArray($result)) Then
		If ($result[0] > 0) Then
			$lastfilenameparam = $filenamewithnoextension + ".JPG"
		Else
			$lastfilenameparam = $filenamewithnoextension + "_"+$result[0] + ".JPG"
		EndIf
	EndIf
	Return True
EndFunc

Func ffgetlastfilename()
	Return $lastfilenameparam
EndFunc

Func ffkeepchanges($nosnapshot1, $nosnapshot2, $shadevariation = 0)
	Local $result = DllCall($ffdllhandle, "int", "KeepChanges", "int", $nosnapshot1, "int", $nosnapshot2, "int", $shadevariation)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Return True
EndFunc

Func ffkeepcolor($colortofind, $shadevariation = 0, $forcenewsnap = True, $left = 0, $top = 0, $right = 0, $bottom = 0, $nosnapshot = $fflastsnap, $windowhandle = -1)
	If NOT snapshotpreprocessor($left, $top, $right, $bottom, $forcenewsnap, $nosnapshot, $windowhandle) Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "int", "KeepColor", "int", $nosnapshot, "int", $colortofind, "int", $shadevariation)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Return True
EndFunc

Func ffdrawsnapshot($nosnapshot = $fflastsnap)
	If $fflastsnapstatus[$nosnapshot] <> 1 Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "BOOLEAN", "DrawSnapShot", "int", $nosnapshot)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Return True
EndFunc

Func ffsetpixel($x, $y, $color, $nosnapshot = $fflastsnap)
	If $fflastsnapstatus[$nosnapshot] <> 1 Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "BOOLEAN", "FFSetPixel", "int", $x, "int", $y, "int", $color, "int", $nosnapshot)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Return True
EndFunc

Func ffduplicatesnapshot($nosnapshotsrc, $nosnapshotdst)
	If NOT snapshotpreprocessor(0, 0, 0, 0, False, $nosnapshotsrc, -1) Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "BOOLEAN", "DuplicateSnapShot", "int", $nosnapshotsrc, "int", $nosnapshotdst)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Return True
EndFunc

Func ffgetrawdata($nosnapshot = $fflastsnap)
	Local $aresult = DllCall($ffdllhandle, "ptr", "GetRawData", "int", $nosnapshot, "int*", 0)
	If (NOT IsArray($aresult)) Then
		SetError(1)
		Return False
	EndIf
	Local $t_raw = DllStructCreate("ubyte[" & $aresult[2] & "]", $aresult[0])
	Local $sstride = DllStructGetData($t_raw, 1)
	$sstride = StringRight($sstride, StringLen($sstride) - 2)
	Return $sstride
EndFunc

Func ffcomputemeanvalues($nosnapshot = $fflastsnap)
	Local $aresult = DllCall($ffdllhandle, "int", "ComputeMeanValues", "int", $nosnapshot, "int*", 0, "int*", 0, "int*", 0)
	If (NOT IsArray($aresult) OR $aresult[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Local $meanresult[3] = [$aresult[2], $aresult[3], $aresult[4]]
	Return $meanresult
EndFunc

Func ffapplyfilteronsnapshot($red, $green, $blue, $nosnapshot = $fflastsnap)
	Local $aresult = DllCall($ffdllhandle, "int", "ApplyFilterOnSnapShot", "int", $nosnapshot, "int", $red, "int", $green, "int", $blue)
	If (NOT IsArray($aresult) OR $aresult[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Return True
EndFunc

Func ffdrawsnapshotxy($ix, $iy, $nosnapshot = $fflastsnap)
	If $fflastsnapstatus[$nosnapshot] <> 1 Then
		SetError(2)
		Return False
	EndIf
	Local $result = DllCall($ffdllhandle, "BOOLEAN", "DrawSnapShotXY", "int", $nosnapshot, "int", $ix, "int", $iy)
	If ((NOT IsArray($result)) OR $result[0] <> 1) Then
		SetError(1)
		Return False
	EndIf
	Return True
EndFunc

Opt("SendKeyDelay", 40)
Opt("TrayOnEventMode", 1)
Opt("GUIOnEventMode", 1)
Opt("TrayMenuMode", 1)
Opt("TrayAutoPause", 0)
Opt("MustDeclareVars", 0)
OnAutoItExitRegister("ExitCode")
Global $trial = 0
Global $counthops = 0
Global $logall
Global $updatemsg = ""
Global $productname = "OHAIOHYDRA"
Global $version = "2.0.0.2"
_singleton("AIOHYDRA")
Global Const $inifile = @ScriptDir & "\AIOHydraSettings.ini"
Global $state
Global $state2
Global $log = 1
Global $nam1 = "FT"
Global $aosinfo
Global $abiosinfo
Global $amemoryinfo
Global $aprocessorinfo
Global $avideoinfo
Global $vdebugit
Global $validation
Global $securitycodeencryptionkey
Global $tmp
If $trial == 1 Then
	$securitycodeencryptionkey = "OHHYDRADEMO"
Else
	$securitycodeencryptionkey = "OHHYDRA"
EndIf
Global $logname = @YEAR & @MON & @MDAY & "-0" & ".log"
Global $temp = 1
While FileExists(@ScriptDir & "\" & $logname)
	$logname = @YEAR & @MON & @MDAY & "-" & $temp & ".log"
	$temp += 1
WEnd
Global $hlogfile
Global $starterlogdir = @ScriptDir & "\Hydra Logs\"
If NOT FileExists($starterlogdir) Then DirCreate($starterlogdir)
$hlogfile = FileOpen($starterlogdir & $logname, 1)
Global $crneeded = False

Func deletealllogits()
	Local $filesselected = FileOpenDialog("Hold Ctrl or Shift to select multiple files", @ScriptDir, "AU3 Files (*.au3)", 1 + 4)
	If @error Then Return
	Local $files = StringSplit($filesselected, "|")
	For $a = 1 To $files[0]
		Local $file = FileOpen($files[$a], 0)
		Local $contents = StringSplit(FileRead($file), @CRLF, 1)
		FileClose($files[$a])
		For $x = 1 To $contents[0]
			If StringInStr($contents[$x], "[REGEXPTITLE:\A.*LogIt.*\z]") Then
				StringReplace($contents[$x], StringInStr($contents[$x], "[REGEXPTITLE:\A.*LogIt.*\z]"), "")
			EndIf
		Next
	Next
EndFunc

Func convertau3forlogging()
	Local $filesselected = FileOpenDialog("Hold Ctrl or Shift to select multiple files", @ScriptDir, "AU3 Files (*.au3)", 1 + 4)
	If @error Then Return
	Local $before = StringSplit("EndFunc While For If", " ")
	Local $after = StringSplit("Func Next EndIf Wend", " ")
	Local $files = StringSplit($filesselected, "|")
	Local $counter = 0
	Local $string
	Local $rv = ""
	For $a = 1 To $files[0]
		Local $file = FileOpen($files[$a], 0)
		Local $contents = StringSplit(FileRead($file), @CRLF, 1)
		Local $flag = False
		FileClose($files[$a])
		For $x = 1 To $contents[0]
			If NOT $flag Then
				If StringLeft($contents[0], 9) == "#include " Then
					$contents[$x] = "#include <LogIt.au3>" & @CRLF & $contents[$x]
					$flag = True
				EndIf
			EndIf
			For $b = 1 To $before[0]
				$string = "(?m)(?i)^([[:space:]]*)(" & $before[$b] & ".*)$"
				If StringRegExp($contents[$x], $string) Then
					$contents[$x] = StringRegExpReplace($contents[$x], $string, '\1LogIt("' & StringUpper(StringLeft($before[$b], 2)) & $counter & '")' & @CRLF & "\1\2")
					$counter += 1
				EndIf
			Next
			For $b = 1 To $after[0]
				$string = "(?m)(?i)^([[:space:]]*)(" & $after[$b] & ".*)$"
				If StringRegExp($contents[$x], $string) Then
					$contents[$x] = StringRegExpReplace($contents[$x], $string, "\1\2" & @CRLF & '\1LogIt("' & StringUpper(StringLeft($after[$b], 2)) & $counter & '")')
					$counter += 1
				EndIf
			Next
		Next
		For $x = 1 To $contents[0]
			$rv &= $contents[$x] & @CRLF
		Next
		ConsoleWrite($rv)
		$file = FileOpen($files[$a] & ".new", 2)
		fconsolewrite($file)
		FileWrite($file, $rv)
		FileClose($file)
	Next
EndFunc

Global $fname = "OHAIOHydra"
Global $appnum1 = 981
Global $appnum2 = 981
If $trial <> 1 Then
	IniWrite(@ScriptDir & "\AIOHydraSettings.ini", "Version", $fname & "FileVer", $version)
EndIf
#Region ### START Koda GUI section ### Form=
	Global $lobbyname, $bottitle
	Global $flagshankyfubar = False
	Global $runningbots = 0
	Global $livebots, $tablesfinished
	Global $tmrlastcheckdeadtables = _timer_init()
	Global $checkdeadtablestimer = _timer_init()
	Global $ideadtable[100]
	Global $hdeadtable[100]
	Global $avoidtables[1]
	Global $memstats
	Global $successfulconnect = False
	Global $waitforbot = False
	Global $itstime
	Global $registeron
	Global $tournitemspassed
	Global $rebuytimer
	Global $omyret[2]
	Global $finpic
	Global $endpic
	Global $rebuypic
	Global $addonpic
	Global $beginpic
	Global $statstimer = _timer_init()
	Global $htournreg = 0
	Global $name365
	Global $pass365
	Global $nameeverest
	Global $passeverest
	Global $namebetfair
	Global $passbetfair
	Global $regscreenshot = 0
	Global $rebuyscreenshot = 0
	Global $addonscreenshot = 0
	Global $endscreenshot = 0
	Global $beginscreenshot = 0
	For $a = 0 To 99
		$ideadtable[$a] = 0
		$hdeadtable[$a] = 0
	Next
	Global $timerhandlelosttables
	Global $sngcount = 0
	Global $gtmcount = 0
	Global $tourneycount = 0
	Global $thide
	Global $waitingfortournament = False
	$log = IniRead($inifile, "Settings", "$log", 1)
	$bottitle = IniRead($inifile, "Settings", "$BotTitle", "[REGEXPCLASS:\AOpenHoldem\z]")
	Global $clientiptxt
	Global $clientcktxt
	Global $clienteeetxt
	Global $avoiddblstck = IniRead($inifile, "Settings", "$avoidDblStck", 0)
	Global $lobbyminimize = IniRead($inifile, "Settings", "$lobbyMinimize", 1)
	Global $dblrebuy = IniRead($inifile, "Settings", "$dblRebuy", 0)
	Global $tslastlaunch = -10
	Global $secondsbetweenlaunch
	Global $bscheduleactive = False
	Global $bwaitinglist = False
	Global $mslastwaitinglist = _timer_init()
	Global $cmdttimer = _timer_init()
	Global $nothingscanned = 0
	Global $biscount = 0
	Global $firstclick = 0
	Global $1stbegad = 0
	Global $nothscan = 0
	Global $cwfcount = 0
	Global $lastupdatereport = -10
	Global $waitinglistcount
	Global $satcounter
	Global $checkdeadtabletimer[23]
	Global $checkxtradeadtableattempts[23]
	Global $checkdeadsotableattempts[23]
	Global $sitoutdetected[23]
	Global $tstarttable[23]
	Global $timeprofswitch[23]
	Global $avoidtables[1]
	Global $avoidlist[1]
	Global $avoidfulltables[1]
	Global $satattables[1]
	Global $wlarray[1]
	Global $prior[3]
	Global $ranges[3][2]
	Global $advertiseon = 1
	Global $avarray1
	Global $avarray2
	Global $sotimer[23]
	Global $hoh[23]
	Global $checksumdeadtables[23]
	Global $checksumdeadtablescount[23]
	Global $ttournaments[23]
	Global $htournaments[23]
	Global $htable[23]
	Global $txtarray[23]
	Global $pplarray[23]
	Global $checkdeadtableattempts[23]
	Global $checkmisseddeadtableattempts[23]
	Global $deadmissedattempts[23]
	Global $checkdeadbotattempts[23]
	Global $lasttry[23]
	Global $lasttablecheck[23]
	Global $tlastaction[23]
	Global $timetable[23]
	Global $ppltrn = ""
	Global $txttrn = ""
	Global $lmt = ""
	Global $typ = ""
	Global $gmtp = ""
	Global $plr = ""
	Global $totalbuyin = 0
	Global $totalprofit = 0
	Global $realprofit = 0
	Global $myfav = 0
	Global $oldbotlist = -10
	Global $hactive = -10
	Global $tournamentsstarted
	Global $tournamentsregistered
	Global $profile
	Global $sessionlog
	Global $waittimer = 0
	Global $autopostimer
	Global $movedtonewtable = False
	Global $globalsngcount = 0
	For $a = 0 To 21
		$checksumdeadtables[$a] = -10
		$checkdeadsotableattempts[$a] = 0
		$checkxtradeadtableattempts[$a] = 0
		$checkdeadtabletimer[$a] = -10
		$sitoutdetected[$a] = -10
		$sotimer[$a] = -10
		$timeprofswitch[$a] = -10
		$checksumdeadtablescount[$a] = 0
		$ttournaments[$a] = ""
		$htournaments[$a] = -10
		$hoh[$a] = -10
		$txtarray[$a] = ""
		$pplarray[$a] = ""
		$htable[$a] = -10
		$lasttablecheck[$a] = -10
		$tlastaction[$a] = -10
		$timetable[$a] = -10
		$lasttry[$a] = -10
	Next
	Global $scrapearr[151][2]
	Global $height = @DesktopHeight
	Global $width = @DesktopWidth
	Global $dataentry = IniRead($inifile, "Settings", "$dataentry", 1)
	Global $minimizelobby = IniRead($inifile, "Settings", "$MinimizeLobby", 0)
	Global $hlobby
	Global $sharkfound = False
	Global $tourneyregok = False
	Global $usertype, $usergame, $userbuyin, $numplyrs
	Global $botpath
	Global $profpath, $batchpath, $botnum
	Global $avoidtables[1]
	Global $tstarttable[23]
	Global $tlastaction[23]
	Global $lastcheckdeadtablemsg = ""
	Global $lastcheckdeadtablemsg2 = ""
	Global $savelogs = IniRead($inifile, "Settings", "$Savelogs", 1)
	Global $badscrapecount = 0
	Global $sharkarray[1]
	Global $trn[8]
	Global $lobcount = 0
	Global $omyerror = ObjEvent("AutoIt.Error", "myErrorFunc")
	Global $scrapeini = @WindowsDir & "\scrapes.ini"
	Global $tabletitle
	Global $whlobbyname = "[REGEXPTITLE:\AWilliam Hill Poker\z]"
	Global $bnglobbyname = "[REGEXPTITLE:\ABetnGo.*\z]"
	Global $turbolobbyname = "[REGEXPTITLE:\ATurbopoker.fr\z]"
	Global $betfredlobbyname = "[REGEXPTITLE:\ABetfred Poker\z]"
	Global $paddylobbyname = "[REGEXPTITLE:\APaddy Power  Poker\z]"
	Global $titanlobbyname = "[REGEXPTITLE:\ATitan Poker\z]"
	Global $everestlobbyname = "[REGEXPTITLE:\AEverestPoker.*\z]"
	Global $770lobbyname = "[REGEXPTITLE:\APoker 770\z]"
	Global $bet365lobbyname = "[REGEXPTITLE:\Abet365\z]"
	Global $winnerlobbyname = "[REGEXPTITLE:\AWinner Poker.*\z]"
	Global $partylobbyname = "[REGEXPTITLE:\A.*.*Poker Lobby.*-.*\z]"
	Global $acrlobbyname = "[REGEXPTITLE:\A.*Tournament Lobby.*\z]"
	Global $eeelobbyname = "[REGEXPTITLE:\ALobby\z]"
	Global $carbonlobbyname = "[REGEXPTITLE:\A.*CarbonGaming.*-.*\z]"
	Global $bodoglobbyname = "[REGEXPTITLE:\A.*Lobby.*\z]"
	Global $bwinlobbyname = "[REGEXPTITLE:\Abwin.*Lobby.*\z]"
	Global $tablewidtheee = 562
	Global $tableheighteee = 387
	Global $tablewidthbodog = 808
	Global $tableheightbodog = 644
	Global $waitinglisttitlebodog = "[REGEXPTITLE:\ASEAT AVAILABLE\z]"
	Global $getchipstitlebodog = "[REGEXPTITLE:\ABUY IN\z]"
	Global $xcolors10max
	Global $xcolors8max
	Global $xcolors6max
	Global $xcolors2max
	Global $xcoords10maxoh = "311,239,407,223,443,141,318,48,185,48,101,75,101,222,194,238,311,239"
	Global $xcoords6maxoh = "369,240,441,146,369,57,134,57,60,146,134,240"
	Global $whxcolors10max = "16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215"
	Global $whxcolors8max = "16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215"
	Global $whxcolors6max = "16777215,16777215,16777215,16777215,16777215,16777215"
	Global $whxcolors2max = "16777215,16777215"
	Global $xcoords9maxbodog = "621,466,724,346,714,210,521,120,300,120,112,210,102,346,206,466,414,481"
	Global $xcoords6maxbodog = "389,479,685,401,685,213,389,127,89,213,89,401"
	Global $xcoords2maxbodog = "429,481,429,120"
	Global $xcolors9maxbodog = "16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215"
	Global $xcolors6maxbodog = "16777215,16777215,16777215,16777215,16777215,16777215"
	Global $xcolors2maxbodog = "16768477,16768477"
	Global $xcoords9maxmerge = "289,226,352,172,352,115,249,59,146,59,44,115,44,172,106,226,197,226"
	Global $xcoords6maxmerge = "249,226,352,145,249,59,146,59,44,145,146,226"
	Global $xcolors9maxmerge = "16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215"
	Global $xcolors6maxmerge = "16777215,16777215,16777215,16777215,16777215,16777215"
	Global $xcoords10maxeee = "361,248,455,182,455,110,361,52,248,52,139,52,48,110,48,182,139,248,248,248"
	Global $xcoords9maxeee = "279,267,406,267,513,195,513,117,356,54,205,54,54,117,54,195,2157,267"
	Global $xcoords6maxeee = "363,283,514,180,363,70,198,70,55,180,198,283"
	Global $xcoords2maxeee = "248,248,248,52"
	Global $xcolors10maxeee = "16302848,16302848,16302848,16302848,16302848,16302848,16302848,16302848,16302848,16302848"
	Global $xcolors9maxeee = "16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215"
	Global $xcolors6maxeee = "16777215,16777215,16777215,16777215,16777215,16777215"
	Global $xcolors2maxeee = "16302848,16302848"
	Global $xcoords9maxacr = "679,150,905,229,939,388,802,545,544,592,246,547,109,388,143,229,367,150"
	Global $xcoords6maxacr = "544,592,939,416,905,229,504,150,143,229,109,416"
	Global $xcoords2maxacr = "544,592,504,150"
	Global $xcolors9maxacr = "16771211,16771211,16771211,16771211,16771211,16771211,16771211,16771211,16771211"
	Global $xcolors6maxacr = "16771211,16771211,16771211,16771211,16771211,16771211"
	Global $xcolors2maxacr = "16771211,16771211"
	checksecurity()
	addinifile()
	Global $gui2 = GUICreate($productname & $version, 430, 100, 100, 100, $ws_overlappedwindow + $ws_visible + $ws_clipsiblings)
	GUISetIcon(@ScriptDir & "\icons\Poker chips.ico")
	Global $lp = GUICtrlCreateLabel("Checking Windows Settings....", 70, 50, 400, 30)
	GUICtrlSetFont(-1, 15, 400, 2)
	GUICtrlSetColor(-1, 10027008)
	If RegRead("HKLM\System\CurrentControlSet\Services\UxSms", "Start") == 2 Then
		ConsoleWrite("Disabling DWM" & @LF)
		RegWrite("HKLM\System\CurrentControlSet\Services\UxSms", "Start", "REG_DWORD", 4)
	EndIf
	Sleep(1500)
	GUICtrlDelete($lp)
	$lp = GUICtrlCreateLabel("Windows Settings Passed", 70, 50, 400, 30)
	GUICtrlSetFont(-1, 15, 400, 2)
	GUICtrlSetColor(-1, 10027008)
	Sleep(1500)
	GUICtrlDelete($lp)
	GUIDelete($gui2)
	Global $theme
	Global $adata = _winapi_getcurrentthemename()
	If IsArray($adata) Then
		$theme = _winapi_getthemedocumentationproperty($adata[0], $sz_thdocprop_canonicalname)
	EndIf
	Global $ignorewindows = ",AutoIt v3,Battery Meter,BluetoothNotificationAreaIconWindowClass"
	Global $tbcount
	Global $run = True
	Global $himage1, $himage2, $himage3, $himage4, $himage5, $himage6
	Global $himage7, $himage8, $himage9, $himage10, $himage11, $himage12
	Global $himage13, $himage14, $himage15, $himage16, $himage17, $himage18
	Global $himage19, $himage20, $himage21, $himage22
	Global $winpos
	Global $plusminusminutes[100]
	$temp = IniReadSection($inifile, "ignore")
	If NOT @error Then
		For $a = 1 To $temp[0][0]
			$ignorewindows &= $temp[$a][0] & ","
		Next
	EndIf
	Global $checkdeadtabletitles
	For $a = 0 To 21
		$tstarttable[$a] = -10
		$checkdeadtableattempts[$a] = 0
		$checkmisseddeadtableattempts[$a] = 0
		$deadmissedattempts[$a] = 0
		$tlastaction[$a] = -10
	Next
	Global $maingui = GUICreate("OH Hydra Hopper & Loader v" & $version, 432, 642, 192, 125)
	GUISetIcon(@ScriptDir & "\icons\Poker chips.ico")
	Global $pagecontrol1 = GUICtrlCreateTab(2, 2, 428, 580)
	GUICtrlSetResizing(-1, $gui_dockwidth + $gui_dockheight)
	Global $tabsheet1 = GUICtrlCreateTabItem("Hopper Settings")
	Global $lblhoppersel = GUICtrlCreateGroup("Hopper Selection", 8, 27, 290, 48)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $radhoppercash = GUICtrlCreateRadio("Cash Hopper", 12, 44, 80, 20)
	GUICtrlSetState($radhoppercash, $gui_checked)
	Global $radhoppersng = GUICtrlCreateRadio("Sng Loader", 110, 44, 80, 20)
	Global $radhoppermtt = GUICtrlCreateRadio("MTT Loader", 205, 44, 80, 20)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateGroup("Client", 305, 27, 120, 48)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $cmbsite = GUICtrlCreateCombo("888Poker", 310, 45, 110, 20)
	GUICtrlSetData(-1, "ACR|Bet365|Betcoin|Bodog/Bovada|Carbon|Ignition|Party", "888Poker")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $simtableposx
	Global $simtableposy
	If GUICtrlRead($cmbsite) == "WillHill" Then
		$simtableposx = 481
		$simtableposy = 341
	ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		$simtableposx = 812
		$simtableposy = 648
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		$simtableposx = 562
		$simtableposy = 387
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		$simtableposx = 486
		$simtableposy = 355
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		$simtableposx = 787
		$simtableposy = 589
	ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		If @OSVersion == "Win_10" Then
			$simtableposx = 1116
			$simtableposy = 759
		Else
			$simtableposx = 1008
			$simtableposy = 747
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		$simtableposx = 488
		$simtableposy = 387
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		$simtableposx = 412
		$simtableposy = 305
	Else
		$simtableposx = 802
		$simtableposy = 574
	EndIf
	Global $buyincmb
	Global $numplyrscmb
	Global $gamecmb
	Global $typecmb
	Global $btnaddtoplaysng, $btnaddtoplaymtt, $btnaddtoplaycash
	Global $numsngopentxt
	Global $chkshortstack
	Global $chkbeginner
	Global $chkbeginnersng
	Global $txtsecsdelay
	Global $txttourneypercgreat
	Global $txttourneypercless
	Global $txt365name = IniRead($inifile, "Settings", "$txt365Name", "")
	Global $txt365pass = IniRead($inifile, "Settings", "$txt365Pass", "")
	Global $txteverestname = IniRead($inifile, "Settings", "$txtEverestName", "")
	Global $txteverestpass = IniRead($inifile, "Settings", "$txtEverestPass", "")
	Global $txtbetfairname = IniRead($inifile, "Settings", "$txtBetfairName", "")
	Global $txtbetfairpass = IniRead($inifile, "Settings", "$txtBetfairPass", "")
	Global $avoidshallow = IniRead($inifile, "Settings", "$AvoidShallow", 0)
	Global $mouseclick = IniRead($inifile, "Settings", "$MouseClick", 0)
	Global $tabledelay = IniRead($inifile, "Settings", "$tableDelay", 0)
	Global $secondsbetweenwaitinglist = IniRead($inifile, "Settings", "$secondsBetweenWaitingList", "10")
	Global $nohidebot = IniRead($inifile, "Settings", "$NoHideBot", 0)
	Global $sleepbeforejoin = IniRead($inifile, "Settings", "$SleepBeforeJoin", 3)
	Global $avoidmins
	Global $lessmaxopponents = IniRead($inifile, "Settings", "$LessMaxOpponents", 2)
	Global $msbetweencloseattempts = IniRead($inifile, "Settings", "$MSBetweenCloseAttempts", 10000)
	Global $uswlcount = 0
	Global $waitinglisttitle
	Global $getchipstitle
	Global $msdelayonconnect = IniRead($inifile, "Settings", "$MSDelayOnConnect", 1000)
	Global $playnow = IniRead($inifile, "Settings", "$PlayNow", 0)
	Global $defaultbuyin = IniRead($inifile, "Settings", "$defaultBuyin", 0)
	Global $waitforbb = IniRead($inifile, "Settings", "$WaitForBB", 1)
	Global $maxamount = IniRead($inifile, "Settings", "$MaxAmount", 0)
	Global $sortlobby = IniRead($inifile, "Settings", "$sortLobby", 0)
	Global $autopost = IniRead($inifile, "Settings", "$AutoPost", 0)
	Global $tablewidthipoker = 747
	Global $tableheightipoker = 562
	Global $xcoords10max
	Global $xcoords8max
	Global $xcoords6max
	Global $xcoords2max
	Global $bottitleholdem = $bottitle
	Global $cmbgametype
	Global $numbotslbl = GUICtrlCreateLabel("# of Bots: ", 10, 87, 60, 25)
	Global $numbotscmb = GUICtrlCreateCombo("1", 80, 84, 45, 25)
	GUICtrlSetData(-1, "2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22")
	GUICtrlSetTip(-1, "Enter in the total amount of bots/sngs to play simultaneous at a time", Default, Default, 1)
	Global $lblclassname = GUICtrlCreateLabel("ClassName: ", 210, 87, 60, 25)
	Global $txtclassname = GUICtrlCreateInput("OpenHoldem", 280, 84, 100, 25)
	Global $group8 = GUICtrlCreateGroup("Table Pos", 6, 110, 425, 345)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	GUICtrlCreateLabel("Left", 70, 130, 40, 20, $ss_center)
	GUICtrlCreateLabel("Top", 120, 130, 40, 20, $ss_center)
	GUICtrlCreateLabel("Table 1", 10, 155, 45, 20)
	Global $x0txt = GUICtrlCreateInput("", 70, 153, 40, 22, $es_center)
	Global $y0txt = GUICtrlCreateInput("", 120, 153, 40, 22, $es_center)
	Global $btnt1 = GUICtrlCreateButton("...", 170, 153, 20, 20)
	GUICtrlCreateLabel("Table 2", 10, 180, 45, 20)
	Global $x1txt = GUICtrlCreateInput("", 70, 178, 40, 22, $es_center)
	Global $y1txt = GUICtrlCreateInput("", 120, 178, 40, 22, $es_center)
	Global $btnt2 = GUICtrlCreateButton("...", 170, 178, 20, 20)
	GUICtrlCreateLabel("Table 3", 10, 205, 45, 20)
	Global $x2txt = GUICtrlCreateInput("", 70, 203, 40, 22, $es_center)
	Global $y2txt = GUICtrlCreateInput("", 120, 203, 40, 22, $es_center)
	Global $btnt3 = GUICtrlCreateButton("...", 170, 203, 20, 20)
	GUICtrlCreateLabel("Table 4", 10, 230, 45, 20)
	Global $x3txt = GUICtrlCreateInput("", 70, 228, 40, 22, $es_center)
	Global $y3txt = GUICtrlCreateInput("", 120, 228, 40, 22, $es_center)
	Global $btnt4 = GUICtrlCreateButton("...", 170, 228, 20, 20)
	GUICtrlCreateLabel("Table 5", 10, 255, 45, 20)
	Global $x4txt = GUICtrlCreateInput("", 70, 253, 40, 22, $es_center)
	Global $y4txt = GUICtrlCreateInput("", 120, 253, 40, 22, $es_center)
	Global $btnt5 = GUICtrlCreateButton("...", 170, 253, 20, 20)
	GUICtrlCreateLabel("Table 6", 10, 280, 45, 20)
	Global $x5txt = GUICtrlCreateInput("", 70, 278, 40, 22, $es_center)
	Global $y5txt = GUICtrlCreateInput("", 120, 278, 40, 22, $es_center)
	Global $btnt6 = GUICtrlCreateButton("...", 170, 278, 20, 20)
	GUICtrlCreateLabel("Table 7", 10, 305, 45, 20)
	Global $x6txt = GUICtrlCreateInput("", 70, 303, 40, 22, $es_center)
	Global $y6txt = GUICtrlCreateInput("", 120, 303, 40, 22, $es_center)
	Global $btnt7 = GUICtrlCreateButton("...", 170, 303, 20, 20)
	GUICtrlCreateLabel("Table 8", 10, 330, 45, 20)
	Global $x7txt = GUICtrlCreateInput("", 70, 328, 40, 22, $es_center)
	Global $y7txt = GUICtrlCreateInput("", 120, 328, 40, 22, $es_center)
	Global $btnt8 = GUICtrlCreateButton("...", 170, 328, 20, 20)
	GUICtrlCreateLabel("Table 9", 10, 355, 45, 20)
	Global $x8txt = GUICtrlCreateInput("", 70, 353, 40, 22, $es_center)
	Global $y8txt = GUICtrlCreateInput("", 120, 353, 40, 22, $es_center)
	Global $btnt9 = GUICtrlCreateButton("...", 170, 353, 20, 20)
	GUICtrlCreateLabel("Table 10", 10, 380, 45, 20)
	Global $x9txt = GUICtrlCreateInput("", 70, 378, 40, 22, $es_center)
	Global $y9txt = GUICtrlCreateInput("", 120, 378, 40, 22, $es_center)
	Global $btnt10 = GUICtrlCreateButton("...", 170, 378, 20, 20)
	GUICtrlCreateLabel("Table 11", 10, 405, 45, 20)
	Global $x10txt = GUICtrlCreateInput("", 70, 403, 40, 22, $es_center)
	Global $y10txt = GUICtrlCreateInput("", 120, 403, 40, 22, $es_center)
	Global $btnt11 = GUICtrlCreateButton("...", 170, 403, 20, 20)
	GUICtrlCreateLabel("Left", 290, 130, 40, 20, $ss_center)
	GUICtrlCreateLabel("Top", 340, 130, 40, 20, $ss_center)
	GUICtrlCreateLabel("Table 12", 225, 155, 45, 20)
	Global $x11txt = GUICtrlCreateInput("", 290, 153, 40, 22, $es_center)
	Global $y11txt = GUICtrlCreateInput("", 340, 153, 40, 22, $es_center)
	Global $btnt12 = GUICtrlCreateButton("...", 390, 153, 20, 20)
	GUICtrlCreateLabel("Table 13", 225, 180, 50, 20)
	Global $x12txt = GUICtrlCreateInput("", 290, 178, 40, 22, $es_center)
	Global $y12txt = GUICtrlCreateInput("", 340, 178, 40, 22, $es_center)
	Global $btnt13 = GUICtrlCreateButton("...", 390, 178, 20, 20)
	GUICtrlCreateLabel("Table 14", 225, 205, 50, 20)
	Global $x13txt = GUICtrlCreateInput("", 290, 203, 40, 22, $es_center)
	Global $y13txt = GUICtrlCreateInput("", 340, 203, 40, 22, $es_center)
	Global $btnt14 = GUICtrlCreateButton("...", 390, 203, 20, 20)
	GUICtrlCreateLabel("Table 15", 225, 230, 45, 20)
	Global $x14txt = GUICtrlCreateInput("", 290, 228, 40, 22, $es_center)
	Global $y14txt = GUICtrlCreateInput("", 340, 228, 40, 22, $es_center)
	Global $btnt15 = GUICtrlCreateButton("...", 390, 228, 20, 20)
	GUICtrlCreateLabel("Table 16", 225, 255, 45, 20)
	Global $x15txt = GUICtrlCreateInput("", 290, 253, 40, 22, $es_center)
	Global $y15txt = GUICtrlCreateInput("", 340, 253, 40, 22, $es_center)
	Global $btnt16 = GUICtrlCreateButton("...", 390, 253, 20, 20)
	GUICtrlCreateLabel("Table 17", 225, 280, 45, 20)
	Global $x16txt = GUICtrlCreateInput("", 290, 278, 40, 22, $es_center)
	Global $y16txt = GUICtrlCreateInput("", 340, 278, 40, 22, $es_center)
	Global $btnt17 = GUICtrlCreateButton("...", 390, 278, 20, 20)
	GUICtrlCreateLabel("Table 18", 225, 305, 45, 20)
	Global $x17txt = GUICtrlCreateInput("", 290, 303, 40, 22, $es_center)
	Global $y17txt = GUICtrlCreateInput("", 340, 303, 40, 22, $es_center)
	Global $btnt18 = GUICtrlCreateButton("...", 390, 303, 20, 20)
	GUICtrlCreateLabel("Table 19", 225, 330, 45, 20)
	Global $x18txt = GUICtrlCreateInput("", 290, 328, 40, 22, $es_center)
	Global $y18txt = GUICtrlCreateInput("", 340, 328, 40, 22, $es_center)
	Global $btnt19 = GUICtrlCreateButton("...", 390, 328, 20, 20)
	GUICtrlCreateLabel("Table 20", 225, 355, 45, 20)
	Global $x19txt = GUICtrlCreateInput("", 290, 353, 40, 22, $es_center)
	Global $y19txt = GUICtrlCreateInput("", 340, 353, 40, 22, $es_center)
	Global $btnt20 = GUICtrlCreateButton("...", 390, 353, 20, 20)
	GUICtrlCreateLabel("Table 21", 225, 380, 45, 20)
	Global $x20txt = GUICtrlCreateInput("", 290, 378, 40, 22, $es_center)
	Global $y20txt = GUICtrlCreateInput("", 340, 378, 40, 22, $es_center)
	Global $btnt21 = GUICtrlCreateButton("...", 390, 378, 20, 20)
	GUICtrlCreateLabel("Table 22", 225, 405, 45, 20)
	Global $x21txt = GUICtrlCreateInput("", 290, 403, 40, 22, $es_center)
	Global $y21txt = GUICtrlCreateInput("", 340, 403, 40, 22, $es_center)
	Global $btnt22 = GUICtrlCreateButton("...", 390, 403, 20, 20)
	Global $botlbl = GUICtrlCreateLabel("Bot Loc: ", 10, 542, 60, 25)
	Global $bottxt = GUICtrlCreateInput("", 75, 539, 300, 25)
	Global $cmdbot = GUICtrlCreateButton("...", 380, 539, 30, 25, $ws_group)
	GUICtrlCreateTabItem("")
	Global $tabsheet2 = GUICtrlCreateTabItem("Cash Criteria")
	Global $lblgame = GUICtrlCreateGroup("Table Criteria", 5, 25, 420, 205)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $numplyrslblcash = GUICtrlCreateLabel("#Players", 18, 48, 50, 20)
	Global $numplyrscmbcash = GUICtrlCreateCombo("10", 66, 45, 41, 20)
	GUICtrlSetData(-1, "9|6|2")
	Global $typelbl = GUICtrlCreateLabel("Type", 140, 48, 50, 20)
	Global $cmbgame = GUICtrlCreateCombo("Hold'em", 175, 45, 80, 20)
	Global $lmlbl = GUICtrlCreateLabel("Limit", 285, 48, 46, 20)
	Global $cmblimit = GUICtrlCreateCombo("NL", 320, 45, 46, 20)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "TruePoker" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "5Dimes" Then
		GUICtrlSetData(-1, "PL|Fixed", "NL")
	Else
		GUICtrlSetData(-1, "PL|FL", "NL")
	EndIf
	Global $timehoplbl = GUICtrlCreateLabel("Max", 18, 73, 20, 20)
	GUICtrlSetTip(-1, "Select amount of minutes to play at a table before hopping", Default, Default, 1)
	Global $timehoptxt = GUICtrlCreateInput("40", 43, 70, 40, 20)
	GUICtrlSetTip(-1, "# of minutes to play on table before hopping (switching) to the next one", Default, Default, 1)
	GUICtrlCreateLabel("+/-", 88, 73, 20, 20)
	GUICtrlSetTip(-1, "Randomize hop times.  Ex: 60 min hop time, +/- 5 mins will hop randomly anywhere beteen 55 and 65 minutes", Default, Default, 1)
	Global $cmbtimehopdelta = GUICtrlCreateCombo("5", 108, 70, 40, 20)
	GUICtrlSetData(-1, "10|15|20|30", "10")
	GUICtrlCreateLabel("min/table", 158, 73, 60, 20)
	Global $stakescmb
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Stake", 245, 73, 85, 20)
		$stakescmb = GUICtrlCreateCombo("$0.02/0.05", 317, 70, 97, 25)
		GUICtrlSetData(-1, "$0.05/$0.10|$0.10/$0.20|$0.10/$0.25|$0.25/$0.50|$0.50/$1|$1/$2|$2/$3|$2/$4|$3/$6|$5/$10|$6/$12|$8/$16|$10/$20|$15/$30|$20/$40|$25/$50|$30/$60|1/2|2/4|5/10|10/20", "$0.02/$0.05")
	ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
		GUICtrlCreateLabel("Stake", 245, 73, 85, 20)
		$stakescmb = GUICtrlCreateCombo("0.01/0.02", 317, 70, 97, 25)
		GUICtrlSetData(-1, "0.02/0.04|0.03/0.06|0.05/0.10|0.10/0.20|0.12/0.25|0.15/0.30|0.25/0.50|0.50/$1|$1/$2|$2/$4|$3/$6|$5/$10|$10/$20|$15/$30|$25/$50|$30/$60|$50/$100|$100/$200|$200/$400|$300/$600", "0.01/0.02")
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Stake", 245, 73, 85, 20)
		$stakescmb = GUICtrlCreateCombo("$0.02/$0.04", 317, 70, 97, 25)
		GUICtrlSetData(-1, "$0.05/$0.10|$0.10/$0.25|$0.15/$0.30|$0.25/$0.50|$0.50/$1|$1/$2|$2/$4|$3/$6|$5/$10|$10/$20|$15/$30", "$0.02/$0.04")
	ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
		GUICtrlCreateLabel("Stake", 245, 73, 85, 20)
		$stakescmb = GUICtrlCreateCombo("$0.01/$0.02", 317, 70, 97, 25)
		GUICtrlSetData(-1, "$0.02/$0.04|$0.05/$0.10|$0.10/$0.25|$0.15/$0.30|$0.25/$0.50|$0.50/$1|$1/$2|$2/$4|$3/$6|$5/$10|$10/$20|$15/$30|$20/$40|$30/$60", "$0.01/$0.02")
	Else
		GUICtrlCreateLabel("Stake", 245, 73, 85, 20)
		$stakescmb = GUICtrlCreateCombo("$0.01/$0.02", 317, 70, 97, 25)
		GUICtrlSetData(-1, "$0.02/$0.04|$0.02/$0.05|$0.05/$0.10|$0.10/$0.20|$0.25/$0.50|$0.50/$1|$1/$2|$2/$4|$3/$6|$5/$10|$10/$20|$20/$40|$30/$60|$50/$100|$100/$200|$200/$400|$300/$600|1/2|2/4|5/10|10/20", "$0.01/$0.02")
	EndIf
	Global $numhopslbl = GUICtrlCreateLabel("# Total Tables", 18, 98, 85, 20)
	GUICtrlSetTip(-1, "Total # of tables to play before exiting the hopper", Default, Default, 1)
	Global $numhopstxt = GUICtrlCreateInput("", 108, 95, 40, 20)
	GUICtrlCreateLabel("Minimum Players to join", 245, 98, 120, 20)
	GUICtrlSetTip(-1, "Use this option to filter out tables with a minimum amount of players seated", Default, Default, 1)
	Global $cmbminplayrs = GUICtrlCreateCombo("", 375, 95, 40, 20)
	GUICtrlSetData(-1, "0|1|2|3|4|5|6|7|8|9", "5")
	Global $buyinlbl = GUICtrlCreateLabel("Buy in with: ", 18, 123, 60, 20)
	GUICtrlSetTip(-1, "Enter custom buyin in big blinds here", Default, Default, 1)
	Global $buyintxt = GUICtrlCreateInput("100", 108, 120, 40, 20)
	Global $buyinlbl2 = GUICtrlCreateLabel("bb", 158, 123, 35, 20)
	Global $lblsitting = GUICtrlCreateLabel("# secs to wait sitting out: ", 245, 123, 120, 20)
	GUICtrlSetTip(-1, "Enter number of seconds to wait before closing a sitting out table", Default, Default, 1)
	Global $txtsitting = GUICtrlCreateInput("15", 375, 120, 40, 20)
	Global $lblscantop1 = GUICtrlCreateLabel("Scan Top ", 18, 148, 60, 20)
	GUICtrlSetTip(-1, "Enter a number to limit scanning the lobby to a certain line amount.  Leave blank to scan entire lobby", Default, Default, 1)
	Global $lblscantop2 = GUICtrlCreateLabel("Tables Only", 158, 148, 60, 20)
	Global $txtscantop = GUICtrlCreateInput("20", 108, 145, 40, 20)
	GUICtrlCreateLabel("Max Buy in: ", 245, 148, 60, 20)
	GUICtrlSetTip(-1, "Safety feature... Will not add a table above the limit entered here.  Ex: set to .06 if not wanting to join anything higher than 5NL", Default, Default, 2)
	Global $txtmaxbuyin = GUICtrlCreateInput("0.05", 375, 145, 40, 20)
	GUICtrlCreateLabel("Lobby scan delay (secs)", 18, 173, 150, 20)
	GUICtrlSetTip(-1, "Time in seconds to wait before trying to join another table", Default, Default, 1)
	Global $txtsecondsbetweenlaunch = GUICtrlCreateInput("10", 165, 170, 40, 20)
	GUICtrlCreateLabel("Same table delay (mins)", 245, 173, 150, 20)
	GUICtrlSetTip(-1, "Time in minutes to wait before attempting to join the same table again", Default, Default, 1)
	Global $txtavoidmins = GUICtrlCreateInput("30", 375, 170, 40, 20)
	$btnaddtoplaycash = GUICtrlCreateButton("Add ToPlay", 170, 200, 90, 20)
	GUICtrlSetFont(-1, 10, 800, 0, "Arial")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $misc = GUICtrlCreateGroup("Misc.", 5, 237, 420, 150)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $chkshallow = GUICtrlCreateCheckbox("Avoid Shallow Tables", 18, 267, 150, 17)
	Global $chkcam = GUICtrlCreateCheckbox("Avoid PokerCam", 245, 267, 150, 17)
	Global $chkpushorfold = GUICtrlCreateCheckbox("Avoid Push Or Fold", 18, 294, 150, 20)
	Global $chkautotopup = GUICtrlCreateCheckbox("Auto Top Up", 245, 294, 150, 17)
	Global $txttopup = GUICtrlCreateInput("", 245, 318, 25)
	Global $lbltopmins = GUICtrlCreateLabel("secs before topup", 301, 320, 100)
	GUICtrlSetTip(-1, "Enable this option to rename logs by table name. Takes much more time from the hopper", Default, Default, 1)
	Global $chkclosetables = GUICtrlCreateCheckbox("Close Tables on Exit", 18, 321)
	GUICtrlSetState(-1, $gui_hide)
	$chkbeginner = GUICtrlCreateCheckbox("Avoid Beginner", 18, 321)
	GUICtrlSetTip(-1, "(IPoker only) Enable this option to avoid Beginner type tables", Default, Default, 1)
	Global $chkspeedpoker = GUICtrlCreateCheckbox("Snap/Speed/Zone Poker", 18, 348)
	GUICtrlSetTip(-1, "Option only available for Bodog, Bovada, Ignition, 888Poker, and IPoker", Default, Default, 1)
	Global $chkmaxbuyin = GUICtrlCreateCheckbox("Max Buyin", 245, 348, 70, 20)
	GUICtrlSetTip(-1, "(IPoker only) Enable this option to buyin with max amount of bbs available for table", Default, Default, 1)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $advgroup = GUICtrlCreateGroup("Waiting List", 5, 390, 420, 70)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $chkwaitinglist = GUICtrlCreateCheckbox("Enable Waiting List", 10, 405)
	Global $lblmax = GUICtrlCreateLabel("Max Waitlist length to join", 220, 407, 130, 20)
	Global $txtwlml = GUICtrlCreateInput("1", 355, 405, 40, 20)
	GUICtrlSetTip(-1, "Don't join any waitlist with more than # of people entered here", Default, Default, 1)
	Global $labelmax = GUICtrlCreateLabel("Max # tables to wait on", 220, 432, 130, 20)
	Global $txtmaxwaitinglist = GUICtrlCreateInput("1", 355, 430, 40, 20)
	GUICtrlSetTip(-1, "Don't join anymore waitlists after reaching number of waitlists entered here", Default, Default, 1)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $g4 = GUICtrlCreateGroup("Ranges", 5, 460, 165, 105)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	GUICtrlCreateLabel("Min", 60, 480, 40, 20)
	GUICtrlCreateLabel("Max", 110, 480, 40, 20)
	GUICtrlCreateLabel("AvgPot", 10, 503, 50, 20)
	GUICtrlSetTip(-1, "Enter minimum and maximum values here for filtering table selection based on average pot for table", Default, Default, 1)
	Global $txtminavgpot = GUICtrlCreateInput("", 60, 498, 35, 20)
	Global $txtmaxavgpot = GUICtrlCreateInput("", 110, 498, 35, 20)
	GUICtrlCreateLabel("bb", 150, 500, 30, 20)
	GUICtrlCreateLabel("Plrs/Flop", 10, 523, 50, 20)
	GUICtrlSetTip(-1, "Enter minimum and maximum values here for filtering table selection based on players/flop for table", Default, Default, 1)
	Global $txtminplrflop = GUICtrlCreateInput("", 60, 518, 35, 20)
	Global $txtmaxplrflop = GUICtrlCreateInput("", 110, 518, 35, 20)
	GUICtrlCreateLabel("%", 150, 520, 30, 20)
	GUICtrlCreateLabel("H/Hour", 10, 543, 50, 20)
	GUICtrlSetTip(-1, "Enter minimum and maximum values here for filtering table selection based on hands/hour for table", Default, Default, 1)
	Global $txtminhands = GUICtrlCreateInput("", 60, 538, 35, 20)
	Global $txtmaxhands = GUICtrlCreateInput("", 110, 538, 35, 20)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $ssenable = GUICtrlCreateCheckbox("Avoid Short Stacks", 255, 465)
	GUICtrlSetTip(-1, "Enable this option to use the hopper's short stack filter.", Default, Default, 1)
	Global $grpshort = GUICtrlCreateGroup("Short Stacks", 240, 490, 150, 75)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $sslbl = GUICtrlCreateLabel("Short Stack is <=", 245, 510, 85, 20)
	Global $ssdefinp = GUICtrlCreateInput("40", 330, 507, 30, 20)
	Global $sslbl2 = GUICtrlCreateLabel("bb", 365, 510, 60, 20)
	Global $sslbl3 = GUICtrlCreateLabel("Avoid Tbls w >=", 245, 532, 85, 20)
	Global $ssavinp = GUICtrlCreateInput("2", 330, 530, 30, 20)
	GUICtrlCreateTabItem("")
	$tabsheet2 = GUICtrlCreateTabItem("Sng Criteria")
	$lblgame = GUICtrlCreateGroup("Game", 20, 27, 385, 40)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	$cmbgametype = GUICtrlCreateCombo("", 26, 42, 114, 25)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Super Turbo|Hyper Turbo|Double-Up Turbo|Triple-Up Turbo|Double-Up|Triple-Up|Satellite|Beginner|Qualifier|Semifinal", "Normal")
	ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Super Turbo|DoN Super Turbo|Knockout|Nitro|Double or Nothing|Double or Nothing Turbo|Triple Up|Triple Up Turbo|All-In", "Normal")
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlSetData($cmbgametype, "Normal|All-in||Double Or Nothing|Jackpot|Turbo|Super Turbo", "Normal")
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlSetData($cmbgametype, "Standard|Turbo|Hyper Turbo|Coinflip|Satellite|Double or Nothing|Double or Nothing Turbo", "Standard")
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Super Turbo|Double Up|Turbo Double Up|Bounty|Allin or Fold", "Normal")
	ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Hyper Turbo|Knockout|Final Table|Double or Nothing|Satellite", "Normal")
	Else
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Super|Double|Hyper", "Normal")
	EndIf
	Global $numplyrslblsng = GUICtrlCreateLabel("# players:", 145, 44, 50, 20)
	Global $numplyrscmbsng = GUICtrlCreateCombo("", 200, 42, 41, 25)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlSetData($numplyrscmbsng, "2|6|9|12|18|27|45", "9")
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlSetData($numplyrscmbsng, "2|6|9|10|18|36", "10")
	ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
		GUICtrlSetData($numplyrscmbsng, "2|3|6|9|10|18|20|36|40|60", "9")
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlSetData($numplyrscmbsng, "2|3|5|6|8|9|10|18", "9")
	ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		GUICtrlSetData($numplyrscmbsng, "6|9|10", "9")
	ElseIf GUICtrlRead($cmbsite) == "Betonline" Then
		GUICtrlSetData($numplyrscmbsng, "2|4|6|10|12|18", "10")
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlSetData($numplyrscmbsng, "2|4|6|9|10|12|18|27|45|90|180", "10")
	Else
		GUICtrlSetData($numplyrscmbsng, "2|6|10|18|27|45")
	EndIf
	$typecmb = GUICtrlCreateCombo("NL", 345, 42, 50, 25)
	GUICtrlSetData($typecmb, "PL|FL")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateGroup("Options", 125, 85, 200, 290)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $numsngopenlbl = GUICtrlCreateLabel("# Total Sng's:", 142, 108, 85, 20)
	$numsngopentxt = GUICtrlCreateInput("5", 265, 105, 40, 21, $es_center)
	$chkshortstack = GUICtrlCreateCheckbox("Avd shrt stk tbls (IPoker)", 142, 187, 160, 20)
	GUICtrlSetTip(-1, "(IPoker) Enable this option to avoid short stack type sit n gos", Default, Default, 1)
	$chkbeginnersng = GUICtrlCreateCheckbox("Avd beginner tbls (IPoker)", 142, 162, 160, 20)
	GUICtrlSetTip(-1, "(IPoker) Enable this option to avoid beginner type sit n gos", Default, Default, 1)
	GUICtrlCreateLabel("Secs Between Join:", 142, 138, 135, 20)
	GUICtrlSetTip(-1, "Time in seconds to wait before trying to join another sit n go", Default, Default, 1)
	$txtsecsdelay = GUICtrlCreateInput("", 265, 135, 40, 22, $es_center)
	$btnaddtoplaysng = GUICtrlCreateButton("Add ToPlay", 183, 293, 85, 30)
	GUICtrlSetFont(-1, 10, 800, 0, "Arial")
	Global $buyinlblsng = GUICtrlCreateLabel("Buy-In:", 142, 214, 45, 20)
	GUICtrlCreateLabel("# of entries      <= ", 142, 243, 135, 20)
	GUICtrlSetTip(-1, "Enter a maximum number of entries to join a sng", Default, Default, 1)
	GUICtrlCreateLabel("# of entries      >= ", 142, 268, 135, 20)
	GUICtrlSetTip(-1, "Enter a minimum number of entries to join a sng", Default, Default, 1)
	$txttourneypercless = GUICtrlCreateInput("", 265, 240, 40, 22, $es_center)
	$txttourneypercgreat = GUICtrlCreateInput("", 265, 265, 40, 22, $es_center)
	$buyincmb = GUICtrlCreateCombo("", 206, 211, 105, 25, -1, $ws_ex_clientedge)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlSetData($buyincmb, "Play500|Play750|Play2000|Play2500|Play5000|Ticket|$1+$0.05|$1+$0.10|$2+$0.20|$2.50+$0.25|$3+$0.30|$3.67+$0.33|$4+$0.40|$5+$0.25|$5+$0.50|$7+$0.70|$8+$0.80|$10+$0.50|$10+$1|$11+$1", "$1+$0.10")
		GUICtrlSetData($buyincmb, "$15+$1.50|$16+$1.50|$20+$1|$25+$1.25|$25+$2.50|$32+$3|$35+$3|$35+$3.50|$40+$4|$50+$2.50|$50+$5|$55+$5|$60+$6|$64+$6|$70+$6|$72+$3.60|$72+$7", "$1+$0.10")
		GUICtrlSetData($buyincmb, "$100+$5|$120+$10|$130+$5|$150+$13|$200+$15|150Pts|500Pts|1500Pts", "$1+$0.10")
	ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
		GUICtrlSetData($buyincmb, "Free|1¢|2¢|10¢|11¢|33¢|35¢|40¢|50¢|55¢|60¢|72¢|$1|$1.09|$1.10|$1.15|$1.20|$1.60|$2.10|$2.30|$2.50|$2.70|$2.75|$2.80|$2.90|$3|$3.20|$3.30|$3.50|$5|$5.25|$5.30|$5.35|$5.40|$5.50|$6|$6.40|$8.80", "$1")
		GUICtrlSetData($buyincmb, "$10|$10.50|$10.60|$10.70|$10.80|$11|$12.50|$15|$16.50|$21|$21.25|$21.50|$22|$26|$31.50|$32|$33|$42|$52|$52.50|$53|$53.50|$55|$70|$75|$100|$103|$104|$105|$200|$208|$210|$300|$400|$500|$700|$1,000|$2,000|12", "$1")
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlSetData($buyincmb, "Freeroll|$0.10|$0.20|$0.50|$1|$2|$2.50|$3|$3.50|$5|$10|$20|$30|$40|$50|$100|$200|$300|$500|$1000|$2000|$5000", "$0.10")
	ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "TruePoker" Then
		GUICtrlSetData($buyincmb, "$1.50|$1.50+$0.11|$1.50+$0.12|$1.50+$0.15|$2+$0.17|$2.20+$0.16|$2.40+$0.10|$3|$3+$0.20|$3+$0.25|$3+$0.30|$5|$5+$0.30|$5+$0.35|$5+$0.45|$5+$0.50|$5.50+$0.25|$6+$0.18|$10|$10+$0.55|$10+$0.50|$10+$0.70|$10+$0.90|$10+$1|$11+$0.75|$12+$0.25|$15|$15+$0.80|$15+$1.40|$20|$20+$1.40|$30|$30+$2.10|$50|$50+$3.50|$80+$5.60|$100|$100+$7", "$3")
	ElseIf GUICtrlRead($cmbsite) == "Betonline" Then
		GUICtrlSetData($buyincmb, "$0.05|$0.10+$0.01|$0.22|$0.25+$0.02|$0.33+$0.03|$0.44|$0.45|$0.50+$0.05|$0.55|$0.62+$0.06|$0.70|$0.88|$1+$0.05|$1+$0.10|$1.10|$1.11+$0.10", "$1+$0.10")
		GUICtrlSetData($buyincmb, "$1.50+$0.15|$1.65|$1.76|$1.80+$0.18|$2+$0.10|$2+$0.20|$3+$0.30|$5+$0.50", "$1+$0.10")
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlSetData($buyincmb, "Restricted|$0.11|$0.60|$1.06|$1.08|$1.10|$1.20|$1.50|$1.89|$2.12|$2.16|$2.20|$3.15|$3.24|$3.30|$3.50|$5.30|$5.35|$5.40|$5.50|$5.60|$6.30", "$1.06")
		GUICtrlSetData($buyincmb, "$7|$10.19|$10.50|$10.80|$11|$11.20|$12.60|$15||$18.90|$20.90|$21.40|$21.60|$22|$25.20|$30|$33|$36.50|$52|$54|$55|$60|$73.30|$80|$82|$82.50|$103.70|$108|$119|$194|$250|$1000|$2000", "$1.06")
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlSetData($buyincmb, "$0.11|$0.22|$0.55|$1.10|$2.20|$5.50|$11|$22|$55|$109|$215|$530|$1,050", "$1.10")
	Else
		GUICtrlSetData($buyincmb, "$1+$0.10|$1+$0.20|$2+$0.20|$3+$0.30|$3.50+$0.30|$4+$0.40|$5+$0.25|$5+$0.30|$5+$0.40|$5+$0.50|$6+$0.25|$6+$0.50|$7.50+$0.50|$7+$0.70|$8+$0.80", "$2+$0.20")
		GUICtrlSetData($buyincmb, "$10+$0.50|$10+$0.60|$10+$1|$11+$0.50|$11+$1|$12+$1|$13.50+$1|$14+$1.40|$15+$1|$16+$1.60|$20+$1|$20+$2|$22+$1|$25+$2|$28+$2.80|$29+$2|$30+$1.50", "$2+$0.20")
	EndIf
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $chkdanish = GUICtrlCreateCheckbox("Danish", 142, 328, 137, 17)
	GUICtrlSetTip(-1, "Enable this feature if using Bet365 Danish version", Default, Default, 1)
	GUICtrlSetState(-1, $gui_disable)
	$chkclosetables = GUICtrlCreateCheckbox("Close Tables on Exit", 220, 188, 137, 17)
	GUICtrlSetState(-1, $gui_hide)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateTabItem("")
	Global $tabsheet3_5 = GUICtrlCreateTabItem("MTT Criteria")
	GUICtrlCreateGroup("Options", 125, 85, 200, 236)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	$btnaddtoplaymtt = GUICtrlCreateButton("Add ToPlay", 138, 221, 70, 20, $ws_group)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $tstlbl = GUICtrlCreateLabel("Time to Register: ", 130, 122, 110, 18)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $lblday = GUICtrlCreateLabel("Month:", 130, 145, 50, 18)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $cmbh = GUICtrlCreateCombo("00", 230, 118, 40, 25)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetData(-1, "01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23")
	Global $txtm = GUICtrlCreateInput("59", 280, 118, 30, 21)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $lblh = GUICtrlCreateLabel("Hour", 235, 100, 27, 18)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $lblm = GUICtrlCreateLabel("Min", 282, 100, 20, 18)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $cmbdate = GUICtrlCreateCombo("00", 265, 142, 49, 25)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetData(-1, "01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31")
	Global $cmbmonth = GUICtrlCreateCombo("00", 210, 142, 49, 25)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetData(-1, "01|02|03|04|05|06|07|08|09|10|11|12")
	Global $chkautorebuy = GUICtrlCreateCheckbox("Auto Rebuy", 220, 196, 89, 17)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	If GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" Then
		GUICtrlSetState(-1, $gui_disable)
	EndIf
	Global $chkdblrebuy = GUICtrlCreateCheckbox("Dbl Rebuy", 220, 221, 89, 17)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	If GUICtrlRead($cmbsite) <> "WillHill" AND GUICtrlRead($cmbsite) <> "Netbet" Then GUICtrlSetState(-1, $gui_disable)
	Global $chkminlobby = GUICtrlCreateCheckbox("Minimize Lobby", 130, 171, 140, 17)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $chkaddon = GUICtrlCreateCheckbox("Add on", 130, 196, 89, 17)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	If GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" Then
		GUICtrlSetState(-1, $gui_disable)
	EndIf
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $schedulegroup = GUICtrlCreateGroup("Scheduled Tournaments", 5, 330, 420, 246)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $listtoplaymtt = GUICtrlCreateListView("", 15, 345, 400, 190, -1)
	Global $hlisttoplaymtt = GUICtrlGetHandle($listtoplaymtt)
	_guictrllistview_setextendedlistviewstyle($listtoplaymtt, BitOR($lvs_ex_checkboxes, $lvs_ex_doublebuffer, $lvs_ex_infotip, $lvs_ex_fullrowselect))
	_guictrllistview_setunicodeformat($listtoplaymtt, False)
	_guictrllistview_insertcolumn($listtoplaymtt, 0, "", 30)
	_guictrllistview_insertcolumn($listtoplaymtt, 1, "Site", 60)
	_guictrllistview_insertcolumn($listtoplaymtt, 2, "Reg Start Time:", 100)
	_guictrllistview_insertcolumn($listtoplaymtt, 3, "Tourney", 100)
	_guictrllistview_insertcolumn($listtoplaymtt, 4, "Buyin", 80)
	Global $btndeletetoplaymtt = GUICtrlCreateButton("Del", 338, 555, 40, 20)
	GUICtrlSetOnEvent($btnaddtoplaymtt, "btnAddToPlayClickMTT")
	GUICtrlSetOnEvent($btndeletetoplaymtt, "btnDeleteToPlayClickMTT")
	GUICtrlCreateTabItem("")
	Global $tabsheet2_5 = GUICtrlCreateTabItem("ToPlay")
	$schedulegroup = GUICtrlCreateGroup("Sng ToPlay Sessions", 5, 25, 420, 205)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $listtoplaysng = GUICtrlCreateListView("", 15, 45, 400, 150, -1)
	Global $hlisttoplaysng = GUICtrlGetHandle($listtoplaysng)
	_guictrllistview_setextendedlistviewstyle($listtoplaysng, BitOR($lvs_ex_checkboxes, $lvs_ex_doublebuffer, $lvs_ex_infotip, $lvs_ex_fullrowselect))
	_guictrllistview_setunicodeformat($listtoplaysng, False)
	_guictrllistview_insertcolumn($listtoplaysng, 0, "", 30)
	_guictrllistview_insertcolumn($listtoplaysng, 1, "Site", 60)
	_guictrllistview_insertcolumn($listtoplaysng, 2, "Stake", 80)
	_guictrllistview_insertcolumn($listtoplaysng, 3, "Type", 80)
	_guictrllistview_insertcolumn($listtoplaysng, 4, "Players", 40)
	_guictrllistview_insertcolumn($listtoplaysng, 5, "Limit", 40)
	_guictrllistview_insertcolumn($listtoplaysng, 6, "Join <=", 160)
	_guictrllistview_insertcolumn($listtoplaysng, 7, "Join >=", 160)
	Global $btndeletetoplaysng = GUICtrlCreateButton("Del", 375, 200, 40, 20)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlSetOnEvent($btndeletetoplaysng, "btnDeleteToPlayClickSng")
	GUICtrlSetOnEvent($btnaddtoplaysng, "btnAddToPlayClickSng")
	updatelistviewtoplaysng()
	$schedulegroup = GUICtrlCreateGroup("Cash ToPlay Sessions", 5, 235, 420, 205)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $listtoplaycash = GUICtrlCreateListView("", 15, 250, 400, 150, -1)
	Global $hlisttoplaycash = GUICtrlGetHandle($listtoplaycash)
	_guictrllistview_setextendedlistviewstyle($listtoplaycash, BitOR($lvs_ex_checkboxes, $lvs_ex_doublebuffer, $lvs_ex_infotip, $lvs_ex_fullrowselect))
	_guictrllistview_setunicodeformat($listtoplaycash, False)
	_guictrllistview_insertcolumn($listtoplaycash, 0, "", 30)
	_guictrllistview_insertcolumn($listtoplaycash, 1, "Site", 80)
	_guictrllistview_insertcolumn($listtoplaycash, 2, "Stake", 80)
	_guictrllistview_insertcolumn($listtoplaycash, 3, "Players", 50)
	_guictrllistview_insertcolumn($listtoplaycash, 4, "Game", 60)
	_guictrllistview_insertcolumn($listtoplaycash, 5, "Limit", 40)
	Global $btndeletetoplaycash = GUICtrlCreateButton("Del", 338, 405, 40, 20)
	GUICtrlSetOnEvent($btndeletetoplaycash, "btnDeleteToPlayClickCash")
	GUICtrlSetOnEvent($btnaddtoplaycash, "btnAddToPlayClickCash")
	updatelistviewtoplaycash()
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateTabItem("")
	Global $tabsheet3_6 = GUICtrlCreateTabItem("Registered Tourneys")
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	$schedulegroup = GUICtrlCreateGroup("Registered Tournaments", 5, 25, 420, 510)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $listschedulemtt = GUICtrlCreateListView("", 15, 40, 400, 485)
	Global $hlistschedulemtt = GUICtrlGetHandle($listschedulemtt)
	_guictrllistview_setextendedlistviewstyle($listschedulemtt, BitOR($lvs_ex_checkboxes, $lvs_ex_doublebuffer, $lvs_ex_infotip, $lvs_ex_fullrowselect))
	_guictrllistview_insertcolumn($listschedulemtt, 0, "", 30)
	_guictrllistview_insertcolumn($listschedulemtt, 1, "Site", 80)
	_guictrllistview_insertcolumn($listschedulemtt, 2, "ID", 120)
	_guictrllistview_insertcolumn($listschedulemtt, 3, "Information", 320)
	GUICtrlSendMsg(-1, $lvm_setcolumnwidth, 0, 50)
	Global $btndeleteschedulemtt = GUICtrlCreateButton("Del", 338, 550, 40, 20)
	GUICtrlSetOnEvent($btndeleteschedulemtt, "btnDeleteScheduleClickMTT")
	updatelistviewtoplaymtt()
	updatelistviewmtt()
	GUICtrlCreateLabel(":", 132, 298, 2, 4)
	Global $lbl = GUICtrlCreateLabel("+/-", 230, 296, 4, 4)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $lblschstatus = GUICtrlCreateLabel("", 180, 504, 220, 60)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 16711680)
	GUICtrlCreateTabItem("")
	Global $tabsheet3 = GUICtrlCreateTabItem("AutoLogin")
	$misc = GUICtrlCreateGroup("AutoLogin", 110, 85, 255, 246)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $chk888autologin = GUICtrlCreateCheckbox("888 AutoLogin", 115, 145, 90, 17)
	GUICtrlSetTip(-1, "Enable this option to force the hopper launch the poker site and login automatically", Default, Default, 1)
	Global $chkipautologin = GUICtrlCreateCheckbox("IPoker AutoLogin", 115, 195, 115, 17)
	GUICtrlSetTip(-1, "Enable this option to force the hopper launch the poker site and login automatically", Default, Default, 1)
	Global $chkbodogautologin = GUICtrlCreateCheckbox("Bodog AutoLogin", 115, 220, 115, 17)
	GUICtrlSetState(-1, $gui_disable)
	GUICtrlSetTip(-1, "Enable this option to force the hopper launch the poker site and login automatically", Default, Default, 1)
	$clienteeetxt = GUICtrlCreateInput("", 240, 145, 70, 20)
	Global $clienteeebot = GUICtrlCreateButton("...", 320, 145, 20, 20)
	$clientiptxt = GUICtrlCreateInput("", 240, 195, 70, 20)
	Global $clientipbot = GUICtrlCreateButton("...", 320, 195, 20, 20)
	Global $clientbodogtxt = GUICtrlCreateInput("", 240, 220, 70, 20)
	GUICtrlSetState(-1, $gui_disable)
	Global $clientbodogbot = GUICtrlCreateButton("...", 320, 220, 20, 20)
	GUICtrlSetState(-1, $gui_disable)
	Global $lbllobbypos = GUICtrlCreateLabel("Lobby Position", 205, 255)
	Global $lbllobbyposx = GUICtrlCreateLabel("X: ", 145, 282, 20, 20)
	Global $lbllobbyposy = GUICtrlCreateLabel("Y: ", 245, 282, 20, 20)
	Global $txtlobbyposx = GUICtrlCreateInput("", 170, 280, 50, 20)
	Global $txtlobbyposy = GUICtrlCreateInput("", 270, 280, 50, 20)
	Global $btnlobbypos = GUICtrlCreateButton("...", 335, 280, 20, 20)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateTabItem("")
	$tabsheet3 = GUICtrlCreateTabItem("Scheduler")
	$schedulegroup = GUICtrlCreateGroup("Schedule Sessions", 5, 25, 420, 325)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $listschedule = GUICtrlCreateListView("", 15, 40, 400, 240, -1)
	Global $hlistschedule = GUICtrlGetHandle($listschedule)
	_guictrllistview_setextendedlistviewstyle($listschedule, BitOR($lvs_ex_checkboxes, $lvs_ex_doublebuffer, $lvs_ex_infotip, $lvs_ex_fullrowselect))
	_guictrllistview_setunicodeformat($listschedule, False)
	_guictrllistview_insertcolumn($listschedule, 0, "", 30)
	_guictrllistview_insertcolumn($listschedule, 1, "Day", 80)
	_guictrllistview_insertcolumn($listschedule, 2, "StartTime(24)", 80)
	_guictrllistview_insertcolumn($listschedule, 3, "Length(min)", 80)
	_guictrllistview_insertcolumn($listschedule, 4, "+/-(min)", 60)
	Global $combo1 = GUICtrlCreateCombo("Sunday", 15, 295, 75, 20)
	GUICtrlSetData(-1, "Monday|Tuesday|Wednesday|Thursday|Friday|Saturday")
	Global $combo2a = GUICtrlCreateCombo("00", 92, 295, 40, 20)
	GUICtrlSetData(-1, "01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23")
	GUICtrlCreateLabel(":", 132, 297, 2)
	Global $combo2b = GUICtrlCreateCombo("00", 137, 295, 40, 20)
	GUICtrlSetData(-1, "05|10|15|20|25|30|35|40|45|50|55")
	Global $combo3 = GUICtrlCreateCombo("15", 186, 295, 40, 20)
	GUICtrlSetData(-1, "30|45|60|90|120|180|210|240|300|360|420|480|540|600|660|720")
	$lbl = GUICtrlCreateLabel("+/-", 230, 295)
	Global $timeinput = GUICtrlCreateCombo("05", 250, 295, 40, 20)
	GUICtrlSetData(-1, "10|20|30|40|50|60", "05")
	Global $btnaddschedule = GUICtrlCreateButton("Add", 295, 295, 40, 20)
	Global $btndeleteschedule = GUICtrlCreateButton("Del", 338, 295, 40, 20)
	Global $btnupdateschedule = GUICtrlCreateButton("chg", 380, 295, 40, 20)
	Global $btnstartscheduler = GUICtrlCreateButton("Start Scheduler", 295, 320, 125, 25)
	$lblschstatus = GUICtrlCreateLabel("", 25, 523, 350, 60)
	GUICtrlSetFont(-1, 10, 800, 0, "Arial")
	GUICtrlSetColor(-1, 16711680)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateTabItem("")
	Global $tabsheet4_9 = GUICtrlCreateTabItem("Opponent Modeling")
	Global $g5_1 = GUICtrlCreateGroup("Opponent Stats", 5, 25, 420, 300)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $lblfishstats = GUICtrlCreateLabel("Fish Stats: ", 80, 48, 80, 20)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $lblfishhands = GUICtrlCreateLabel("Hands Required: ", 15, 73, 80, 20)
	Global $txtfishhands1 = GUICtrlCreateInput("", 120, 70, 70, 20, BitOR($ws_border, $es_center))
	Global $lblfishvpip = GUICtrlCreateLabel("VPIP: ", 15, 98, 40, 20)
	Global $lblfishvpipgr = GUICtrlCreateLabel(">=", 60, 98, 20, 20)
	Global $txtfishvpipgr = GUICtrlCreateInput("", 85, 95, 40, 20)
	Global $lblfishvpipless = GUICtrlCreateLabel("<=", 130, 98, 20, 20)
	Global $txtfishvpipless = GUICtrlCreateInput("", 155, 95, 40, 20)
	Global $lblfishpfr = GUICtrlCreateLabel("PFR: ", 15, 123, 40, 20)
	Global $lblfishpfrgr = GUICtrlCreateLabel(">=", 60, 123, 20, 20)
	Global $txtfishpfrgr = GUICtrlCreateInput("", 85, 120, 40, 20)
	Global $lblfishpfrless = GUICtrlCreateLabel("<=", 130, 123, 20, 20)
	Global $txtfishpfrless = GUICtrlCreateInput("", 155, 120, 40, 20)
	Global $chkadvfish = GUICtrlCreateCheckbox("Advanced Fish Filtering: ", 15, 150, 150)
	Global $lblfish3bet = GUICtrlCreateLabel("3Bet: ", 15, 178, 40, 20)
	Global $lblfish3betgr = GUICtrlCreateLabel(">=", 60, 178, 20, 20)
	Global $txtfish3betgr = GUICtrlCreateInput("", 85, 175, 40, 20)
	Global $lblfish3betless = GUICtrlCreateLabel("<=", 130, 178, 20, 20)
	Global $txtfish3betless = GUICtrlCreateInput("", 155, 175, 40, 20)
	Global $lblfish4bet = GUICtrlCreateLabel("4Bet: ", 15, 203, 100, 20)
	Global $lblfish4betgr = GUICtrlCreateLabel(">=", 60, 203, 20, 20)
	Global $txtfish4betgr = GUICtrlCreateInput("", 85, 200, 40, 20)
	Global $lblfish4betless = GUICtrlCreateLabel("<=", 130, 203, 20, 20)
	Global $txtfish4betless = GUICtrlCreateInput("", 155, 200, 40, 20)
	Global $btnrecvalues = GUICtrlCreateButton("Use Default Values", 140, 265, 165, 20)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $lblsharkstats = GUICtrlCreateLabel("Shark Stats: ", 275, 48, 80, 20)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $lblsharkhands = GUICtrlCreateLabel("Hands Required: ", 220, 73, 80, 20)
	Global $txtsharkhands1 = GUICtrlCreateInput("", 325, 70, 70, 20, BitOR($ws_border, $es_center))
	Global $lblsharkvpip = GUICtrlCreateLabel("VPIP: ", 220, 98, 40, 20)
	Global $lblsharkvpipgr = GUICtrlCreateLabel(">=", 265, 98, 20, 20)
	Global $txtsharkvpipgr = GUICtrlCreateInput("", 290, 95, 40, 20)
	Global $lblsharkvpipless = GUICtrlCreateLabel("<=", 335, 98, 20, 20)
	Global $txtsharkvpipless = GUICtrlCreateInput("", 360, 95, 40, 20)
	Global $lblsharkpfr = GUICtrlCreateLabel("PFR: ", 220, 123, 40, 20)
	Global $lblsharkpfrgr = GUICtrlCreateLabel(">=", 265, 123, 20, 20)
	Global $txtsharkpfrgr = GUICtrlCreateInput("", 290, 120, 40, 20)
	Global $lblsharkpfrless = GUICtrlCreateLabel("<=", 335, 123, 20, 20)
	Global $txtsharkpfrless = GUICtrlCreateInput("", 360, 120, 40, 20)
	Global $chkadvshark = GUICtrlCreateCheckbox("Advanced Shark Filtering: ", 220, 150, 150)
	Global $lblshark3bet = GUICtrlCreateLabel("3Bet: ", 220, 178, 40, 20)
	Global $lblshark3betgr = GUICtrlCreateLabel(">=", 265, 178, 20, 20)
	Global $txtshark3betgr = GUICtrlCreateInput("", 290, 175, 40, 20)
	Global $lblshark3betless = GUICtrlCreateLabel("<=", 335, 178, 20, 20)
	Global $txtshark3betless = GUICtrlCreateInput("", 360, 175, 40, 20)
	Global $lblshark4bet = GUICtrlCreateLabel("4Bet: ", 220, 203, 40, 20)
	Global $lblshark4betgr = GUICtrlCreateLabel(">=", 265, 203, 20, 20)
	Global $txtshark4betgr = GUICtrlCreateInput("", 290, 200, 40, 20)
	Global $lblshark4betless = GUICtrlCreateLabel("<=", 335, 203, 20, 20)
	Global $txtshark4betless = GUICtrlCreateInput("", 360, 200, 40, 20)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlSetOnEvent($chkadvshark, "SetData")
	GUICtrlSetOnEvent($chkadvfish, "SetData")
	GUICtrlSetOnEvent($chkwaitinglist, "SetData")
	GUICtrlSetOnEvent($btnrecvalues, "GetDefaultStats")
	GUICtrlSetOnEvent($btnlobbypos, "LobbyPos")
	Global $g5 = GUICtrlCreateGroup("Test Opponent Stats", 5, 325, 420, 150)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $lblplayername = GUICtrlCreateLabel("Player Name: ", 15, 348, 70, 20)
	Global $txtplayername = GUICtrlCreateInput("", 120, 345, 120, 20)
	Global $lblhands = GUICtrlCreateLabel("Hands Played: ", 15, 373, 70, 20)
	Global $lblhands1 = GUICtrlCreateLabel("", 120, 370, 70, 20, BitOR($ws_border, $es_center))
	Global $lblvpip = GUICtrlCreateLabel("Player VPIP: ", 15, 398, 70, 20)
	Global $lblvpip1 = GUICtrlCreateLabel("", 120, 395, 70, 20, BitOR($ws_border, $es_center))
	Global $lblpfr = GUICtrlCreateLabel("Player PFR: ", 15, 423, 70, 20)
	Global $lblpfr1 = GUICtrlCreateLabel("", 120, 420, 70, 20, BitOR($ws_border, $es_center))
	Global $lbl3bet = GUICtrlCreateLabel("Player 3Bet: ", 15, 448, 70, 20)
	Global $lbl3bet1 = GUICtrlCreateLabel("", 120, 445, 70, 20, BitOR($ws_border, $es_center))
	Global $lblcbet = GUICtrlCreateLabel("Player CBet: ", 220, 373, 70, 20)
	Global $lblcbet1 = GUICtrlCreateLabel("", 325, 370, 70, 20, BitOR($ws_border, $es_center))
	Global $lblfcbet = GUICtrlCreateLabel("Player FCBet: ", 220, 398, 70, 20)
	Global $lblfcbet1 = GUICtrlCreateLabel("", 325, 395, 70, 20, BitOR($ws_border, $es_center))
	Global $lblf3bet = GUICtrlCreateLabel("Player F3Bet: ", 220, 423, 70, 20)
	Global $lblf3bet1 = GUICtrlCreateLabel("", 325, 420, 70, 20, BitOR($ws_border, $es_center))
	Global $lbl4bet = GUICtrlCreateLabel("Player 4Bet: ", 220, 448, 70, 20)
	Global $lbl4bet1 = GUICtrlCreateLabel("", 325, 445, 70, 20, BitOR($ws_border, $es_center))
	Global $btnteststats = GUICtrlCreateButton("Test Stats", 280, 345, 90, 20)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateGroup("Sharks/Fish", 5, 475, 160, 100)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	GUICtrlCreateLabel("Avoid Tbls w>=", 10, 525, 85, 20)
	Global $alimitinp = GUICtrlCreateInput("3", 85, 522, 30, 20)
	GUICtrlCreateLabel("Sharks", 117, 525, 60, 20)
	GUICtrlCreateLabel("Join Tbls w>=", 10, 500, 85, 20)
	Global $jlimitinp = GUICtrlCreateInput("3", 85, 497, 30, 20)
	GUICtrlCreateLabel("Fish", 117, 500, 60, 20)
	Global $jenable = GUICtrlCreateCheckbox("Go Fish", 10, 550)
	GUICtrlSetTip(-1, "Enable this option to use the hopper's built-in Fish Finder.  Choose 'Names' if adding specific names or choose 'Rates' if adding rule based auto-rates from HM or PT3", Default, Default, 1)
	Global $aenable = GUICtrlCreateCheckbox("Avd Sharks", 80, 550)
	GUICtrlSetTip(-1, "Enable this option to use the hopper's built-in Shark Avoider.  Choose 'Names' if adding specific names or choose 'Rates' if adding rule based auto-rates from HM or PT3", Default, Default, 1)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $huddb = GUICtrlCreateGroup("HUD DB", 170, 475, 260, 100)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $input_dr = "{PostgreSQL ANSI}"
	GUICtrlCreateLabel("Server", 175, 498, 50, 20)
	Global $input_server = GUICtrlCreateInput("localhost", 225, 495, 60, 20)
	GUICtrlCreateLabel("Port", 175, 523, 45, 20)
	Global $input_port = GUICtrlCreateInput("5432", 225, 520, 40, 20)
	GUICtrlCreateLabel("Database", 175, 548, 50, 20)
	Global $input_db = GUICtrlCreateInput("PT3 DB", 225, 545, 60, 20)
	GUICtrlCreateLabel("User", 295, 498, 45, 20)
	Global $input_uid = GUICtrlCreateInput("postgres", 340, 495, 75, 20)
	GUICtrlCreateLabel("Pass", 295, 523, 50, 20)
	Global $input_pwd = GUICtrlCreateInput("dbpass", 340, 520, 75, 20)
	GUICtrlCreateLabel("DB", 295, 548, 50, 20)
	Global $cmbdb = GUICtrlCreateCombo("PT3", 355, 545, 60, 20)
	GUICtrlSetData(-1, "PT4|HM2")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlSetOnEvent($cmbdb, "SetData")
	GUICtrlCreateTabItem("")
	$tabsheet3_6 = GUICtrlCreateTabItem("In Progress")
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	$schedulegroup = GUICtrlCreateGroup("Tourneys Playing", 5, 25, 420, 260)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $tourneystatuslist = GUICtrlCreateListView("", 15, 40, 400, 235)
	Global $hlisttoplaytourneystatus = GUICtrlGetHandle($tourneystatuslist)
	_guictrllistview_setextendedlistviewstyle($tourneystatuslist, BitOR($lvs_ex_checkboxes, $lvs_ex_doublebuffer, $lvs_ex_infotip, $lvs_ex_fullrowselect))
	_guictrllistview_setunicodeformat($tourneystatuslist, False)
	_guictrllistview_insertcolumn($tourneystatuslist, 0, "", 30)
	_guictrllistview_insertcolumn($tourneystatuslist, 1, "Site", 70)
	_guictrllistview_insertcolumn($tourneystatuslist, 2, "Tourney", 250)
	GUICtrlSendMsg(-1, $lvm_setcolumnwidth, 0, 50)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	$schedulegroup = GUICtrlCreateGroup("Cash Tables Playing", 5, 300, 420, 260)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $statuslist = GUICtrlCreateListView("", 15, 315, 400, 235)
	Global $hlisttoplaystatus = GUICtrlGetHandle($statuslist)
	_guictrllistview_setextendedlistviewstyle($statuslist, BitOR($lvs_ex_checkboxes, $lvs_ex_doublebuffer, $lvs_ex_infotip, $lvs_ex_fullrowselect))
	_guictrllistview_setunicodeformat($statuslist, False)
	_guictrllistview_insertcolumn($statuslist, 0, "", 30)
	_guictrllistview_insertcolumn($statuslist, 1, "Site", 70)
	_guictrllistview_insertcolumn($statuslist, 2, "Table", 300)
	_guictrllistview_insertcolumn($statuslist, 3, "Time Playing", 100)
	GUICtrlSendMsg(-1, $lvm_setcolumnwidth, 0, 50)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateTabItem("")
	$tabsheet3_6 = GUICtrlCreateTabItem("Email Notification")
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	Global $emailgrp = GUICtrlCreateGroup("Email Info", 5, 30, 420, 330)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $lblemailprov = GUICtrlCreateLabel("Email Provider: ", 15, 63, 100, 25)
	Global $cmbemailprov = GUICtrlCreateCombo("Gmail", 120, 60, 75, 25)
	GUICtrlSetData(-1, "Yahoo|Hotmail|Aol|Other")
	Global $lblserver = GUICtrlCreateLabel("Server Name: ", 15, 93, 100, 25)
	Global $txtserver = GUICtrlCreateInput("", 120, 90, 130, 25)
	Global $lblfromadd = GUICtrlCreateLabel("From email: ", 15, 123, 100, 25)
	Global $txtfromadd = GUICtrlCreateInput("", 120, 120, 170, 25)
	Global $lbltoadd = GUICtrlCreateLabel("To email: ", 15, 153, 100, 25)
	Global $txttoadd = GUICtrlCreateInput("", 120, 150, 170, 25)
	Global $chkssl = GUICtrlCreateCheckbox("SSL", 15, 180)
	Global $lblport = GUICtrlCreateLabel("Port: ", 15, 213, 100, 25)
	Global $txtport = GUICtrlCreateInput("", 120, 210, 130, 25)
	Global $lblusername = GUICtrlCreateLabel("Username: ", 15, 243, 100, 25)
	Global $txtusername = GUICtrlCreateInput("", 120, 240, 170, 25)
	Global $lblpass = GUICtrlCreateLabel("Password: ", 15, 273, 100, 25)
	Global $txtpass = GUICtrlCreateInput("", 120, 270, 170, 25, $es_password)
	Global $btntestemail = GUICtrlCreateButton("Test Send Email", 30, 310, 100, 20)
	GUICtrlSetOnEvent($btntestemail, "TestEmail")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $nptifygrp = GUICtrlCreateGroup("Notifications", 5, 375, 420, 200)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	Global $chknotifyend = GUICtrlCreateCheckbox("Notify on end of tournament", 15, 395)
	Global $chknotifybegin = GUICtrlCreateCheckbox("Notify on start of tournament", 15, 418)
	Global $chknotifyreg = GUICtrlCreateCheckbox("Notify on registration of tournament", 15, 441)
	Global $chknotifyrebuy = GUICtrlCreateCheckbox("Notify on rebuy of tournament", 15, 464)
	Global $chknotifyaddon = GUICtrlCreateCheckbox("Notify on addon of tournament", 15, 487)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateTabItem("")
	Global $tabsheet10 = GUICtrlCreateTabItem("Log Output")
	Global $logs = GUICtrlCreateGroup("Session Log", 5, 30, 420, 235)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	$sessionlog = GUICtrlCreateEdit("Start Session Log", 15, 50, 400, 205, $es_readonly + $ws_vscroll, $es_multiline)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $au2 = GUICtrlCreateGroup("Updates", 5, 270, 420, 105)
	GUICtrlSetColor(-1, 10027008)
	GUICtrlSetFont(-1, 9, 800, 0, "Arial")
	GUICtrlSetColor(-1, 8388608)
	If $trial <> 1 Then
		Global $btnupdate = GUICtrlCreateButton("Check for New Hydra Updates", 225, 320, 183, 21, $ws_group)
		GUICtrlSetFont(-1, 8, 800, 0, "MS Sans Serif")
	EndIf
	Global $btncheckwindowinfo = GUICtrlCreateButton("Debug Window", 8, 290, 183, 21, $ws_group)
	GUICtrlSetFont(-1, 8, 800, 0, "MS Sans Serif")
	Global $btnsupportcenter = GUICtrlCreateButton("Support Center", 225, 290, 183, 21, $ws_group)
	GUICtrlSetFont(-1, 8, 800, 0, "MS Sans Serif")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	Global $chkmaxlogging = GUICtrlCreateCheckbox("Max Logging", 225, 345, 183, 21)
	GUICtrlSetTip(-1, "Enable this option for extensive logging info (Debug use only)", Default, Default, 1)
	GUICtrlCreateTabItem("")
	Global $btnsavesettings = GUICtrlCreateButton("Save", 120, 587, 60, 25, $ws_group)
	GUICtrlSetFont(-1, 10, 800, 0, "MS Sans Serif")
	Global $startbtn = GUICtrlCreateButton("Start", 360, 587, 60, 25, $ws_group)
	GUICtrlSetFont(-1, 10, 800, 0, "MS Sans Serif")
	Global $btnexit = GUICtrlCreateButton("Exit", 10, 587, 60, 25, $ws_group)
	GUICtrlSetFont(-1, 10, 800, 0, "MS Sans Serif")
	Global $btnhide = GUICtrlCreateButton("Hide", 240, 587, 60, 25, $ws_group)
	GUICtrlSetFont(-1, 10, 800, 0, "MS Sans Serif")
	Global $lblminsplayed = GUICtrlCreateLabel("Minutes Played: ", 20, 622, 82, 18)
	Global $lblsngsplayed = GUICtrlCreateLabel("Sngs Played: ", 240, 622, 70, 18)
	Global $minselaptxt = GUICtrlCreateLabel("", 110, 620, 76, 20, BitOR($ws_border, $es_center))
	Global $numsngstxt = GUICtrlCreateLabel("", 320, 620, 76, 20, BitOR($ws_border, $es_center))
	Global $tablewidth
	Global $tableheight

	Func updatelistviewtoplaycash()
		_guictrllistview_deleteallitems(GUICtrlGetHandle($listtoplaycash))
		Local $rawtoplay = IniReadSection($inifile, "toplayCash")
		_arraysort($rawtoplay, 0, 1)
		If @error == 0 Then
			For $a = 1 To $rawtoplay[0][0]
				Local $tvalue = StringSplit($rawtoplay[$a][0], "~")
				_guictrllistview_additem($listtoplaycash, "")
				_guictrllistview_addsubitem($listtoplaycash, $a - 1, $tvalue[1], 1)
				_guictrllistview_addsubitem($listtoplaycash, $a - 1, $tvalue[2], 2)
				_guictrllistview_addsubitem($listtoplaycash, $a - 1, $tvalue[3], 3)
				_guictrllistview_addsubitem($listtoplaycash, $a - 1, $tvalue[4], 4)
				_guictrllistview_addsubitem($listtoplaycash, $a - 1, $tvalue[5], 5)
				If $rawtoplay[$a][1] = 1 Then
					_guictrllistview_setitemchecked($listtoplaycash, $a - 1, 1)
				EndIf
			Next
		EndIf
	EndFunc

	Func btndeletetoplayclickcash()
		Local $delflag
		$delflag = 0
		Local $si = _guictrllistview_getselectedindices($listtoplaycash, True)
		If $si[0] > 0 Then
			Local $selecteditem = _guictrllistview_getitemtextstring($listtoplaycash, $si[1])
			If StringLen($selecteditem) > 0 Then
				Local $sitem = StringSplit($selecteditem, "|")
				If $sitem[0] >= 5 Then
					IniDelete($inifile, "toplayCash", $sitem[2] & "~" & $sitem[3] & "~" & $sitem[4] & "~" & $sitem[5] & "~" & $sitem[6])
					$delflag = 1
				Else
					MsgBox(0, "Selection", "Nothing Selected")
				EndIf
			EndIf
		Else
			MsgBox(0, "Selection", "Nothing Selected")
		EndIf
		updatelistviewtoplaycash()
		Return $delflag
	EndFunc

	Func btnaddtoplayclickcash()
		Local $aitems
		$aitems = GUICtrlRead($stakescmb)
		Local $newvalue = GUICtrlRead($cmbsite) & "~" & $aitems & "~" & GUICtrlRead($numplyrscmbcash) & "~" & GUICtrlRead($cmbgame) & "~" & GUICtrlRead($cmblimit)
		IniWrite($inifile, "toplayCash", $newvalue, 1)
		updatelistviewtoplaycash()
	EndFunc

	Func getplaylinecash()
		Local $rawtoplay = IniReadSection($inifile, "toplayCash")
		If NOT IsArray($rawtoplay) Then
			MsgBox(0, "ToPlay", "Empty ToPlay List")
			Return ""
		EndIf
		Local $k = $rawtoplay[0][0]
		For $i = 1 To $k
			If $i > $k Then ExitLoop
			If $rawtoplay[$i][1] == 0 Then
				_arraydelete($rawtoplay, $i)
				$k = $k - 1
				$i = $i - 1
			EndIf
		Next
		$rawtoplay[0][0] = $k
		Local $result2 = _arrayfindall($rawtoplay, "/", 1, $rawtoplay[0][0], 1, 1, 0)
		If IsArray($result2) Then
			Local $x = Random(0, _arraymaxindex($result2), 1)
			Return $rawtoplay[$result2[$x]][0]
		Else
			Return ""
		EndIf
	EndFunc

	Func getplaylinevaluescash()
		Local $trv[8]
		Local $tv
		$tv = getplaylinecash()
		If StringInStr($tv, "~") Then
			$trv = StringSplit($tv, "~")
			If $trv[0] >= 5 Then
				Return $trv
			Else
				Return ""
			EndIf
		Else
			Return ""
		EndIf
	EndFunc

	Func _winactivate($hmywin)
		DllCall("user32.dll", "bool", "SetForegroundWindow", "ptr", $hmywin)
	EndFunc

	Global $gltimer = 0
	Global $gltimerlimit = 5 * 60 * 1000
	Global $glstarttime = 0

	Func gainloss()
		Local $aresultsarray
		If $gltimer = 0 Then
			$gltimer = TimerInit()
		EndIf
		If TimerDiff($gltimer) < $gltimerlimit Then
			Return 0
		Else
			$gltimer = TimerInit()
		EndIf
		Local $id_site
		If $nam1 = "FT" Then
			$id_site = 300
		ElseIf $nam1 = "UB" Then
			$id_site = 800
		ElseIf $nam1 = "BD" Then
			$id_site = 1300
		ElseIf $nam1 = "CK" Then
			$id_site = 1200
		EndIf
		Local $oconn = ObjCreate("ADODB.Connection")
		Local $adors = ObjCreate("ADODB.RecordSet")
		Local $adorsd = ObjCreate("ADODB.RecordSet")
		Local $dsn = "DRIVER=" & $input_dr & ";SERVER=" & GUICtrlRead($input_server) & ";PORT=" & GUICtrlRead($input_port) & ";DATABASE=" & GUICtrlRead($input_db) & ";UID=" & GUICtrlRead($input_uid) & ";PWD=" & GUICtrlRead($input_pwd) & ";"
		ConsoleWrite("GL: Connect")
		Local $error = $oconn.open($dsn)
		If $error Then MsgBox(4096, "HUD DB Connection", "error code: " & $error)
		ConsoleWrite("GL: search")
		Local $pnm = StringLower(IniRead($inifile, "Settings", "playerid", 0))
		If $glstarttime = 0 Then
			$error = $adorsd.open("SELECT max(holdem_table_session_summary.date_start) FROM holdem_table_session_summary WHERE id_site=" & $id_site & " and id_player=(select id_player from player where id_site=" & $id_site & " and player_name_search='" & $pnm & "');", $oconn)
			If NOT $adorsd.eof Then
				$aresultsarray = $adorsd.getrows()
				If IsArray($aresultsarray) Then
					ConsoleWrite("GL: Amt " & $aresultsarray[0][0])
					$glstarttime = $aresultsarray[0][0]
				Else
					Return 0
				EndIf
			Else
				Return 0
			EndIf
		EndIf
		$error = $adors.open("SELECT sum(holdem_table_session_summary.amt_won) FROM holdem_table_session_summary WHERE id_site=" & $id_site & " and date_start>='" & $glstarttime & "' and id_player=(select id_player from player where id_site=" & $id_site & " and player_name_search='" & $pnm & "');", $oconn)
		If NOT $adors.eof Then
			ConsoleWrite("GL: get")
			$aresultsarray = $adors.getrows()
			If IsArray($aresultsarray) Then
				ConsoleWrite("GL: Amt " & $aresultsarray[0][0])
				$oconn.close
				Return $aresultsarray[0][0]
			EndIf
		EndIf
		$oconn.close
		Return 0
	EndFunc

	Func closesuwindows()
		If GUICtrlRead($cmbsite) == "Titan" Then
			Local $xwinlist = WinList()
			If IsArray($xwinlist) Then
				For $x = 1 To $xwinlist[0][0]
					Local $xwinpos = WinGetPos($xwinlist[$x][1])
					If IsArray($xwinlist) Then
						If $xwinpos[2] == 614 Then
							WinActivate($xwinlist[$x][1])
							MouseClick("left", $xwinpos[0] + 566, $xwinpos[1] + 368, 1, 0)
							WinWaitClose($xwinlist[$x][1], "", 2)
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func listtoplaycash($ix)
		Local $selecteditem = _guictrllistview_getitemtextstring($listtoplaycash, $ix)
		If StringLen($selecteditem) > 0 Then
			Local $sitem = StringSplit($selecteditem, "|")
			If $sitem[0] >= 5 Then
				If _guictrllistview_getitemchecked($listtoplaycash, $ix) = 1 Then
					IniWrite($inifile, "toplayCash", $sitem[2] & "~" & $sitem[3] & "~" & $sitem[4] & "~" & $sitem[5], "1")
				Else
					IniWrite($inifile, "toplayCash", $sitem[2] & "~" & $sitem[3] & "~" & $sitem[4] & "~" & $sitem[5], "0")
				EndIf
			EndIf
		EndIf
	EndFunc

	Func pagecontrol1click()
		Local $curtab
		$curtab = _guictrltab_getcursel($pagecontrol1)
		If $curtab = 2 Then
			MsgBox(0, "EV", "These options are only available with the 'Poker Client' Lobby selection in the setup.")
			_guictrltab_clicktab($pagecontrol1, 3)
		EndIf
	EndFunc

	Func handleclosead()
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) Then
					If $winpos[2] == 451 Then
						If iswindowvisible($winlist[$x][1]) Then
							fconsolewrite("Found Beginner/Server Ad 451... closing now")
							WinClose($winlist[$x][1])
							WinWaitClose($winlist[$x][1], "", 1)
							If WinExists($winlist[$x][1]) Then
								WinActivate($winlist[$x][1])
								MouseClick("left", $winpos[0] + 436, $winpos[1] + 12, 1, 0)
							EndIf
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Func closelobby($lobby)
		Local $hlob = WinGetHandle($lobby)
		If NOT WinExists($hlob) Then
			Return
		EndIf
		If GUICtrlRead($cmbsite) == "888Poker" Then
			fconsolewrite("CC: Closing 888Poker Client")
			WinClose($hlob)
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "TruePoker" Then
			fconsolewrite("CC: Closing ACR Poker Client")
			WinClose($hlob)
			WinWait("[REGEXPTITLE:\A.*Exit.*?.*\z]", "", 3)
			If WinExists("[REGEXPTITLE:\A.*Exit.*?.*\z]") Then
				WinActivate("[REGEXPTITLE:\A.*Exit.*?.*\z]")
				WinWaitActive("[REGEXPTITLE:\A.*Exit.*?.*\z]", "", 2)
				Local $winpos = WinGetPos("[REGEXPTITLE:\A.*Exit.*?.*\z]")
				If IsArray($winpos) Then
					MouseClick("left", $winpos[0] + 211, $winpos[1] + 120, 1, 0)
					WinWaitClose("[REGEXPTITLE:\A.*Exit.*?.*\z]", "", 2)
				EndIf
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			fconsolewrite("Close Bodog/Bovada")
			Local $title
			If WinExists("[REGEXPTITLE:\ABovada.*\z]") Then
				$title = "Bovada"
			Else
				$title = "Bodog"
			EndIf
			$hlob = WinGetHandle("[REGEXPTITLE:\A.*Poker Lobby.*\z]")
			WinActivate($hlob)
			WinClose($hlob)
			WinWait("[REGEXPTITLE:\A" & $title & ".*\z]", "", 3)
			If WinExists("[REGEXPTITLE:\A" & $title & ".*\z]") Then
				Local $winlist = WinList("[REGEXPTITLE:\A" & $title & ".*\z]")
				If IsArray($winlist) Then
					For $x = 1 To $winlist[0][0]
						$winpos = WinGetPos($winlist[$x][1])
						If IsArray($winpos) Then
							If $winpos[2] == 281 AND $winpos[3] == 101 Then
								WinActivate($winlist[$x][1])
								MouseClick("left", $winpos[0] + 101, $winpos[1] + 73, 1, 0)
								Return
							EndIf
						EndIf
					Next
				EndIf
			EndIf
		Else
			$hlob = getlobbyhnd()
			fconsolewrite("Close IPoker (WClose)")
			WinActivate($hlob)
			SendKeepActive($hlob)
			Send("!+{f4}")
			Sleep(1000)
			handleclosead()
			Sleep(500)
			If GUICtrlRead($cmbsite) == "Betfair" Then handleclosepopup()
			SendKeepActive($hlob)
			Send("{y}")
		EndIf
	EndFunc

	Func handleclosepopup()
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) Then
					If $winpos[2] == 402 Then
						If iswindowvisible($winlist[$x][1]) Then
							fconsolewrite("Found Close Popup 402 closing now")
							WinClose($winlist[$x][1])
							WinWaitClose($winlist[$x][1], "", 1)
							If WinExists($winlist[$x][1]) Then
								WinActivate($winlist[$x][1])
								MouseClick("left", $winpos[0] + 158, $winpos[1] + 181, 1, 0)
							EndIf
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Func findclientipoker()
		Local $clientpathipoker = FileOpenDialog("casino.exe", "C:\", "Execute (*.exe)")
		GUICtrlSetData($clientiptxt, $clientpathipoker)
	EndFunc

	Func findclienteee()
		Local $clientpatheee = FileOpenDialog("888poker.exe", "C:\", "Execute (*.exe)")
		GUICtrlSetData($clienteeetxt, $clientpatheee)
	EndFunc

	Func findclientbodog()
		Local $clientpathbodog = FileOpenDialog("BodogPoker.exe", "C:\", "Execute (*.exe)")
		GUICtrlSetData($clientbodogtxt, $clientpathbodog)
	EndFunc

	Func updatestatusbar()
		Local $titletemp
		Local $temp
		Local $hops = @TAB & " Hops " & $counthops & "/" & GUICtrlRead($numhopstxt)
		$temp = $hops
		$hops = @TAB & "WL " & $waitinglistcount & "/" & GUICtrlRead($txtmaxwaitinglist)
		$temp &= $hops
		Local $logstrings
		$logstrings = $temp
		For $a = 0 To GUICtrlRead($numbotscmb) - 1
			If GUICtrlRead($numbotscmb) - 1 >= $a AND WinExists($htable[$a]) AND $htable[$a] <> -10 AND $htable[$a] <> 0 AND $htable[$a] <> "" Then
				$temp = @TAB & "T" & WinGetTitle($htable[$a]) & ":" & Round(minutessince($timetable[$a]), 1) & "/" & GUICtrlRead($timehoptxt) & "m"
				ConsoleWrite($temp & @LF)
				$titletemp = WinGetTitle($htable[$a])
				If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
					$titletemp = StringMid($titletemp, StringInStr($titletemp, "-") + 2)
					$titletemp = StringRegExpReplace($titletemp, "\s", "")
				ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "TruePoker" Then
					If StringInStr($titletemp, "No Limit") Then
						If StringInStr($titletemp, "- -") Then
							$titletemp = StringLeft($titletemp, StringInStr($titletemp, ("- - ") + 2))
						Else
							$titletemp = StringLeft($titletemp, StringInStr($titletemp, "No Limit") - 2)
							$titletemp = StringStripWS($titletemp, 1)
						EndIf
					Else
						If StringInStr($titletemp, "- -") Then
							$titletemp = StringLeft($titletemp, StringInStr($titletemp, ("- - ") + 2))
						Else
							$titletemp = StringLeft($titletemp, StringInStr($titletemp, "Fixed") - 2)
							$titletemp = StringStripWS($titletemp, 1)
						EndIf
					EndIf
					$titletemp = StringRegExpReplace($titletemp, "\s", "")
				ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
					Local $titlearr
					$titlearr = StringSplit($titletemp, " ")
					$titletemp = $titlearr[1]
					$titletemp = StringRegExpReplace($titletemp, "\s", "")
				Else
					$titletemp = StringStripWS(StringLeft($titletemp, StringInStr($titletemp, "-") - 2), 3)
					$titletemp = StringStripWS(StringMid($titletemp, StringInStr($titletemp, ":") + 2), 3)
					$titletemp = StringRegExpReplace($titletemp, "\s", "")
				EndIf
				Local $usbtext = _guictrllistview_findintext($statuslist, $titletemp)
				If $usbtext <> -1 Then
					ContinueLoop
				Else
					ConsoleWrite($titletemp & " not found in list" & @LF)
				EndIf
				ConsoleWrite("Adding table to playing list: " & $titletemp & @LF)
				_guictrllistview_additem($statuslist, "")
				_guictrllistview_addsubitem($statuslist, $a, GUICtrlRead($cmbsite), 1)
				_guictrllistview_addsubitem($statuslist, $a, $titletemp, 2)
				_guictrllistview_addsubitem($statuslist, $a, Round(minutessince($timetable[$a]), 1) & "/" & GUICtrlRead($timehoptxt) & "m", 3)
			EndIf
		Next
		If $lastupdatereport == -10 OR _timer_diff($lastupdatereport) >= (IniRead($inifile, "Settings", "SecRefreshStatus", "10") * 1000) Then
			fconsolewrite($logstrings)
			$lastupdatereport = _timer_init()
		EndIf
	EndFunc

	Func closetvwindow()
		If WinExists("", "TeamViewer") Then
			Local $winlist = WinList("", "TeamViewer")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					Local $winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If $winpos[2] == 491 Then
							WinActivate($winlist[$x][1])
							WinWaitActive($winlist[$x][1], "", 2)
							MouseClick("left", $winpos[0] + 428, $winpos[1] + 140, 1, 0)
						EndIf
					EndIf
					Sleep(5)
				Next
			EndIf
		EndIf
	EndFunc

	Func checkmyfav()
		If WinExists("Lobby") Then
			Local $winlist = WinList("Lobby")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					Local $winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If $winpos[2] == 1006 Then
							WinActivate($winlist[$x][1])
							WinWaitActive($winlist[$x][1], "", 2)
							If NOT IsArray(PixelSearch($winpos[0] + 445, $winpos[1] + 163, $winpos[0] + 445, $winpos[1] + 163, 361173, 5, 1, $winlist[$x][1])) Then
								MouseClick("left", $winpos[0] + 445, $winpos[1] + 163, 1, 0)
							EndIf
						EndIf
					EndIf
					Sleep(5)
				Next
			EndIf
		EndIf
	EndFunc

	Func handlerecoveringwindow()
		logit("FU2045")
		Local $color = 0
		logit("IF2046")
		If GUICtrlRead($cmbsite) == "Titan" Then
			Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
			logit("IF2047")
			If IsArray($winlist) Then
				logit("FO2048")
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF2049")
					If IsArray($winpos) AND $winpos[2] == 402 AND iswindowvisible($winlist[$x][1]) Then
						WinActivate($winlist[$x][1])
						WinWaitActive($winlist[$x][1], "", 2)
						logit("IF2050")
						If (PixelGetColor($winpos[0] + 36, $winpos[1] + 103, $winlist[$x][1]) == $color) AND (PixelGetColor($winpos[0] + 354, $winpos[1] + 109, $winlist[$x][1]) == $color) AND (PixelGetColor($winpos[0] + 364, $winpos[1] + 122, $winlist[$x][1]) == $color) Then
							fconsolewrite("HRW: Titan Poker is recovering window found...")
							MouseClick("left", $winpos[0] + 200, $winpos[1] + 241, 1, 0)
							Return True
						EndIf
						logit("EN2051")
					EndIf
					logit("EN2052")
				Next
				logit("NE2053")
			EndIf
			logit("EN2054")
			Return False
		EndIf
		logit("EN2055")
		logit("EN2056")
	EndFunc

	Func handleunavailablewindow()
		logit("FU2033")
		Local $color = 0
		logit("IF2034")
		If GUICtrlRead($cmbsite) == "Titan" Then
			Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
			logit("IF2035")
			If IsArray($winlist) Then
				logit("FO2036")
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF2037")
					If IsArray($winpos) AND $winpos[2] == 402 AND iswindowvisible($winlist[$x][1]) Then
						WinActivate($winlist[$x][1])
						WinWaitActive($winlist[$x][1], "", 2)
						logit("IF2038")
						If (PixelGetColor($winpos[0] + 36, $winpos[1] + 103, $winlist[$x][1]) == $color) AND (PixelGetColor($winpos[0] + 409, $winpos[1] + 109, $winlist[$x][1]) == $color) AND (PixelGetColor($winpos[0] + 279, $winpos[1] + 103, $winlist[$x][1]) == $color) Then
							fconsolewrite("HUW: Selected Table is unavailable window found...")
							MouseClick("left", $winpos[0] + 200, $winpos[1] + 241, 1, 0)
							Return True
						EndIf
						logit("EN2039")
					EndIf
					logit("EN2040")
				Next
				logit("NE2041")
			EndIf
			logit("EN2042")
			Return False
		EndIf
		logit("EN2043")
		logit("EN2044")
	EndFunc

	Func checkminbuyinwindow()
		logit("FU540")
		ConsoleWrite("CMBW1" & @LF)
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		logit("IF541")
		If IsArray($winlist) Then
			logit("FO542")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
			Next
			logit("NE553")
		EndIf
		logit("EN554")
		ConsoleWrite("CMBW21" & @LF)
		ConsoleWrite("CMBW22" & @LF)
		Return False
		logit("EN555")
	EndFunc

	Func checkinvalidbuyinwindow()
		logit("FU556")
		ConsoleWrite("CIBW1" & @LF)
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		logit("IF557")
		If IsArray($winlist) Then
			logit("FO558")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
			Next
			logit("NE569")
		EndIf
		ConsoleWrite("CIBW21" & @LF)
		ConsoleWrite("CIBW22" & @LF)
		logit("EN570")
		logit("EN571")
	EndFunc

	Func clearinvalidwaitinglistcount()
		logit("FU2324")
		Global $ciwlc_timer
		logit("IF2325")
		If $ciwlc_timer == "" OR tablecount() >= GUICtrlRead($numbotscmb) Then
			$ciwlc_timer = _timer_init()
		ElseIf _timer_diff($ciwlc_timer) > 30 * 60 * 1000 Then
			fconsolewrite("CIWLC: Waiting List Timeout")
			$waitinglistcount = 0
			$ciwlc_timer = _timer_init()
		EndIf
		logit("EN2326")
		logit("EN2327")
	EndFunc

	Func checkfullwaitlisterror()
		logit("FU2394")
		logit("IF2395")
		If _timer_diff($waittimer) > (30 * 60000) Then
			Local $winlist = tablelist()
			logit("IF2396")
			If IsArray($winlist) Then
				logit("IF2397")
				If $winlist[0][0] < GUICtrlRead($numbotscmb) Then
					$waitinglistcount = 0
					$waittimer = _timer_init()
				EndIf
				logit("EN2398")
			EndIf
			logit("EN2399")
		EndIf
		logit("EN2400")
		logit("EN2401")
	EndFunc

	Func parenttitleforbuyin()
		logit("FU1985")
		ConsoleWrite("PTFB" & @LF)
		Local $title = ""
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		logit("IF1986")
		If IsArray($winlist) Then
			logit("FO1987")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF1988")
				If IsArray($winpos) Then
					logit("IF1989")
					If $winpos[2] == 450 AND $winpos[3] == 320 Then
						logit("IF1990")
						If iswindowvisible($winlist[$x][1]) Then
							Local $parenthnd = parentwindow($winlist[$x][1])
							$title = WinGetTitle($parenthnd)
							ExitLoop
						Else
							ContinueLoop
						EndIf
						logit("EN1991")
					EndIf
					logit("EN1992")
				EndIf
				logit("EN1993")
			Next
			logit("NE1994")
		EndIf
		logit("EN1995")
		ConsoleWrite("PTFB21" & @LF)
		ConsoleWrite("PTFB22" & @LF)
		Return $title
		logit("EN1996")
	EndFunc

	Func clearoldavoidfulltables()
		logit("FU722")
		Local $timestamp
		Local $commaat
		$commaat = 0
		logit("FO723")
		Local $safename
		If UBound($avoidtables) > 1 Then
			For $a = 0 To UBound($avoidfulltables) - 1
				If $avoidfulltables[$a] == "" Then
					ContinueLoop
				EndIf
				$timestamp = $avoidfulltables[$a]
				logit("IF724")
				If $avoidfulltables[$a] == "" AND UBound($avoidfulltables) > 1 Then
					ContinueLoop
				EndIf
				logit("EN725")
				logit("IF726")
				If StringInStr($timestamp, ",") > 0 Then
					For $z = 0 To 10
						$commaat = StringInStr($timestamp, ",")
						logit("IF727")
						If $commaat > 0 Then $timestamp = StringMid($timestamp, $commaat + 1)
						If $commaat == 0 Then ExitLoop
						Sleep(1000)
					Next
					logit("IF728")
					If StringLen($timestamp) < 1 OR _timer_diff($timestamp) / 60000 > 5 Then
						If StringInStr($avoidfulltables[$a], ",") Then
							Local $newname = StringSplit($avoidfulltables[$a], ",")
							$safename = $newname[1]
						Else
							$safename = ""
						EndIf
						logit("IF729")
						If StringLen($safename) > 1 Then
							logit("IF730")
							If StringLen($timestamp) > 1 Then
								fconsolewrite("Done avoiding non joined table " & $safename & " " & Int(_timer_diff($timestamp) / 60000) & "mins")
							Else
								fconsolewrite("Done avoiding non joined table " & $safename & " (missing mins)")
							EndIf
							logit("EN731")
						EndIf
						logit("EN732")
						$avoidfulltables[$a] = ""
						If $avoidfulltables[$a] == "" AND UBound($avoidfulltables) > 1 Then
							ContinueLoop
						EndIf
					EndIf
					logit("EN733")
				Else
					ContinueLoop
				EndIf
				logit("EN734")
			Next
		EndIf
		logit("NE735")
		logit("EN736")
	EndFunc

	Func joinwaitinglist()
		logit("FU1400")
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		logit("IF1401")
		If $winlist[0][0] > 0 AND IsArray($winlist) Then
			logit("FO1402")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF1403")
				If IsArray($winpos) Then
					logit("IF1404")
					If $winpos[2] == 454 AND $winpos[3] == 352 AND iswindowvisible($winlist[$x][1]) Then
						For $z = 0 To 10
							fconsolewrite("AT: Clicking 'Join Waiting List'.")
							WinActivate($winlist[$x][1])
							Local $winpos2 = WinGetPos($winlist[$x][1])
							logit("IF1405")
							If GUICtrlRead($cmbsite) == "Bet365" Then
								MouseMove($winpos2[0] + 401, $winpos2[1] + 326, 1)
							Else
								MouseMove($winpos2[0] + 316, $winpos2[1] + 324, 1)
							EndIf
							logit("EN1406")
							Sleep(250)
							MouseDown("left")
							Sleep(300)
							MouseUp("left")
							If WinExists($winlist[$x][1]) AND iswindowvisible($winlist[$x][1]) Then
								WinActivate($winlist[$x][1])
								If GUICtrlRead($cmbsite) == "Bet365" Then
									MouseClick("left", $winpos2[0] + 403, $winpos2[1] + 324, 1, 0)
								Else
									MouseClick("left", $winpos2[0] + 316, $winpos2[1] + 324, 1, 0)
								EndIf
							EndIf
							If NOT iswindowvisible($winlist[$x][1]) OR NOT WinExists($winlist[$x][1]) Then ExitLoop
							Sleep(1000)
						Next
						logit("IF1409")
						If handleppwindow() Then
							ContinueLoop
						EndIf
						logit("EN1410")
						logit("IF1411")
						If closebeginnerwin() Then Return
						logit("IF1412")
						If NOT seatavailable() Then
							For $z = 0 To 10
								logit("IF1413")
								If seatavailable() Then
									If checkwaitinglist() Then
									EndIf
									Return
								EndIf
								logit("EN1414")
								logit("IF1415")
								If checkalreadyseatedipoker() Then Return
								If detectwaitinglistbutton() == 0 OR seatavailable() Then ExitLoop
								Sleep(1000)
							Next
						EndIf
						logit("EN1416")
					EndIf
					logit("EN1417")
				EndIf
				logit("EN1418")
			Next
			logit("NE1419")
		EndIf
		logit("EN1420")
		logit("EN1421")
	EndFunc

	Func closeanyextrawindows()
		logit("FU2147")
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		Local $color
		logit("IF2148")
		$color = 16777215
		logit("EN2149")
		logit("IF2150")
		If IsArray($winlist) Then
			logit("FO2151")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF2152")
				If IsArray($winpos) Then
					logit("IF2153")
					If $winpos[2] == 402 AND iswindowvisible($winlist[$x][1]) Then
						logit("IF2154")
						If PixelGetColor($winpos[0] + 21, $winpos[1] + 247, $winlist[$x][1]) == $color Then
							fconsolewrite("Extra window Found")
							Local $hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							Sleep(400)
							MouseClick("left", $winpos[0] + 185, $winpos[1] + 219, 1, 0)
							Return True
						EndIf
						logit("EN2155")
					EndIf
					logit("EN2156")
				EndIf
				logit("EN2157")
			Next
			logit("NE2158")
		EndIf
		logit("EN2159")
		Return False
		logit("EN2160")
	EndFunc

	Func handledeadtables()
		logit("FU765")
		Local $cdtcolor = 16777215
		Local $cdtcolor2 = 8618883
		Local $cdtarray
		Local $cdtarray2
		Local $winlist = tablelist()
		logit("IF766")
		If IsArray($winlist) Then
			logit("FO767")
			For $a = 1 To $winlist[0][0]
				Local $offset = WinGetPos($winlist[$a][1])
				logit("IF768")
				If IsArray($offset) Then
					WinActivate($winlist[$a][1])
					WinWaitActive($winlist[$a][1], "", 2)
					$cdtarray = PixelSearch($offset[0] + 542, $offset[1] + 540, $offset[0] + 580, $offset[1] + 548, $cdtcolor, 2, 1, $winlist[$a][1])
					$cdtarray2 = PixelSearch($offset[0] + 542, $offset[1] + 540, $offset[0] + 580, $offset[1] + 548, $cdtcolor2, 0, 1, $winlist[$a][1])
					logit("IF769")
					If NOT IsArray($cdtarray) AND NOT IsArray($cdtarray2) Then
						fconsolewrite("Closing inactive table at start: " & $winlist[$a][0])
						WinClose($winlist[$a][1])
					EndIf
					logit("EN770")
				EndIf
				logit("EN771")
			Next
			logit("NE772")
		EndIf
		logit("EN773")
		logit("EN774")
	EndFunc

	Func checkwaitfail()
		logit("FU2567")
		logit("IF2568")
		If WinExists("WAITING LIST") Then
			Local $cwfhwnd = WinGetHandle("WAITING LIST")
			WinActivate($cwfhwnd)
			ControlClick($cwfhwnd, "", "[CLASS:Button; INSTANCE:1]", "left", 1)
			$cwfcount += 1
			logit("IF2569")
			If $cwfcount >= 10 Then
				fconsolewrite("CWF Exit")
				Exit
			EndIf
		EndIf
		logit("EN2570")
		logit("EN2571")
	EndFunc

	Func maximumtablewin()
		logit("FU2563")
		Local $tmaxtable = "MAXIMUM 4 TABLES"
		logit("IF2564")
		If WinExists($tmaxtable) AND iswindowvisible($tmaxtable) Then
			Local $hmaxtable = WinGetHandle($tmaxtable)
			WinActivate($hmaxtable)
			ControlClick($hmaxtable, "", "[CLASS:Button; INSTANCE:5]", "left", 1)
			Return True
		EndIf
		Return False
		logit("EN2565")
		logit("EN2566")
	EndFunc

	Func waitwincloseorhidden($handle, $seconds = 1)
		logit("FU2558")
		logit("FO2559")
		For $a = 1 To ($seconds * 10)
			logit("IF2560")
			If NOT WinExists($handle) OR BitAND(WinGetState($handle), 2) == 0 Then Return True
			Sleep(100)
		Next
		logit("NE2561")
		Return False
		logit("EN2562")
	EndFunc

	Func hndlwaitinglistwin()
		logit("FU2520")
		logit("IF2521")
		If WinExists("WAITING LIST") Then
			Local $wlpos = WinGetPos("WAITING LIST")
			logit("IF2522")
			If IsArray($wlpos) AND $wlpos[2] == 375 AND $wlpos[3] == 255 Then
				WinClose("WAITING LIST")
				fconsolewrite("Handling WAITING LIST unable to join window")
			EndIf
			logit("EN2523")
		EndIf
		logit("EN2524")
		logit("EN2525")
	EndFunc

	Func alreadyseated()
		logit("FU2526")
		logit("IF2527")
		If WinExists("ALREADY SEATED") Then
			ConsoleWrite("Already seated window found" & @LF)
			logit("WH2528")
			For $z = 0 To 10
				WinActivate("ALREADY SEATED")
				ControlClick("ALREADY SEATED", "", "[CLASS:Button; INSTANCE:1]", "left", 1)
				Sleep(20)
				logit("IF2529")
				If WinExists("ALREADY SEATED") Then
					SendKeepActive("ALREADY SEATED")
					Send("{SPACE}")
				EndIf
				logit("EN2530")
				If NOT WinExists("ALREADY SEATED") Then ExitLoop
				Sleep(1000)
			Next
			logit("WE2531")
		EndIf
		logit("EN2532")
		logit("EN2533")
	EndFunc

	Func seatreserved()
		logit("FU2534")
		logit("IF2535")
		If WinExists("SEAT ALREADY RESERVED") Then
			ConsoleWrite("Seat Reserved window found" & @LF)
			logit("WH2536")
			For $z = 0 To 10
				WinActivate("SEAT ALREADY RESERVED")
				ControlClick("SEAT ALREADY RESERVED", "", "[CLASS:Button; INSTANCE:1]", "left", 1)
				Sleep(20)
				logit("IF2537")
				If WinExists("SEAT ALREADY RESERVED") Then
					SendKeepActive("SEAT ALREADY RESERVED")
					Send("{SPACE}")
				EndIf
				logit("EN2538")
				If NOT WinExists("SEAT ALREADY RESERVED") Then ExitLoop
				Sleep(1000)
			Next
			logit("WE2539")
		EndIf
		logit("EN2540")
		logit("EN2541")
	EndFunc

	Func multiplebuyinwin()
		logit("FU2542")
		logit("IF2543")
		If WinExists("BUY-IN INFORMATION") Then
			logit("WH2544")
			For $z = 0 To 10
				WinActivate("BUY-IN INFORMATION")
				ControlClick("BUY-IN INFORMATION", "", "[CLASS:Button; INSTANCE:1]", "left", 1)
				Sleep(20)
				logit("IF2545")
				If WinExists("BUY-IN INFORMATION") Then
					SendKeepActive("BUY-IN INFORMATION")
					Send("{SPACE}")
				EndIf
				logit("EN2546")
				If NOT WinExists("BUY-IN INFORMATION") Then ExitLoop
				Sleep(1000)
			Next
			logit("WE2547")
		EndIf
		logit("EN2548")
		logit("EN2549")
	EndFunc

	Func satdowntoosoon()
		logit("FU2490")
		Local $alerttitle = "[REGEXPTITLE:\AInfo\z]"
		Local $tablelist = WinList($alerttitle)
		logit("IF2491")
		If IsArray($tablelist) Then
			logit("FO2492")
			For $a = 1 To $tablelist[0][0]
				Local $alertpos = WinGetPos($tablelist[$a][1])
				WinActivate($tablelist[$a][1])
				logit("IF2493")
				If IsArray($alertpos) AND $alertpos[2] == 468 AND $alertpos[3] == 227 Then
					logit("IF2494")
					If IsArray(PixelSearch($alertpos[0] + 35, $alertpos[1] + 53, $alertpos[0] + 35, $alertpos[1] + 53, 16777215, 3, 1, $tablelist[$a][1])) Then
						fconsolewrite("Sat down too soon window found... closing now")
						MouseClick("left", $alertpos[0] + 404, $alertpos[1] + 202, 1, 0)
						Return True
						ExitLoop
					EndIf
					logit("EN2495")
				EndIf
				logit("EN2496")
			Next
			logit("NE2497")
		EndIf
		logit("EN2498")
		Return False
		logit("EN2499")
	EndFunc

	Func checknotsitting()
		logit("FU2500")
		Local $winlist = tablelist()
		logit("IF2501")
		If IsArray($winlist) Then
			logit("FO2502")
			For $x = 1 To $winlist[0][0]
				WinActivate($winlist[$x][1])
				logit("IF2503")
				If NOT sittingattable($winlist[$x][1]) Then
					WinClose($winlist[$x][1])
				EndIf
				logit("EN2504")
			Next
			logit("NE2505")
		EndIf
		logit("EN2506")
		logit("EN2507")
	EndFunc

	Func youdidnotactintime()
		logit("FU2508")
		logit("IF2509")
		If WinExists("Alert") Then
			Local $hnd = WinGetHandle("Alert")
			logit("IF2510")
			If WinGetState($hnd) == 15 OR WinGetState($hnd) == 7 Then
				fconsolewrite("You did not act in time window found.. closing now")
				WinActivate($hnd)
				WinKill($hnd)
			EndIf
			logit("EN2511")
		EndIf
		logit("EN2512")
		logit("EN2513")
	EndFunc

	Func checkalreadyseatedipoker()
		logit("FU1997")
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		logit("IF1998")
		If IsArray($winlist) Then
			logit("FO1999")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF2000")
				If IsArray($winpos) Then
					logit("IF2001")
					If $winpos[2] == 402 AND $winpos[3] == 265 AND iswindowvisible($winlist[$x][1]) Then
						logit("IF2002")
						If GUICtrlRead($cmbsite) == "Titan" Then
							logit("IF2003")
							If PixelGetColor($winpos[0] + 101, $winpos[1] + 104, $winlist[$x][1]) == 0 AND PixelGetColor($winpos[0] + 185, $winpos[1] + 111, $winlist[$x][1]) == 0 AND PixelGetColor($winpos[0] + 305, $winpos[1] + 110, $winlist[$x][1]) == 0 Then
								fconsolewrite("Already seated window found... closing now")
								WinClose($winlist[$x][1])
								Sleep(500)
								logit("IF2004")
								If WinExists($winlist[$x][1]) Then
									WinActivate($winlist[$x][1])
									MouseClick("left", $winpos[0] + 200, $winpos[1] + 241, 1, 0)
								EndIf
								logit("EN2005")
								Return True
							Else
								handlesitoutwindow()
								ContinueLoop
							EndIf
							logit("EN2006")
						EndIf
						logit("EN2015")
					EndIf
					logit("EN2016")
				EndIf
				logit("EN2017")
			Next
			logit("NE2018")
		EndIf
		logit("EN2019")
		Return False
		logit("EN2020")
	EndFunc

	Func checkasactivetables($name)
		logit("FU2477")
		Local $tablelist = tablelist()
		logit("IF2478")
		If $tablelist[0][0] == 0 Then Return False
		logit("FO2479")
		For $a = 1 To $tablelist[0][0]
			logit("IF2480")
			If BitAND(WinGetState($tablelist[$a][1]), 2) == 2 Then
				Local $title = $tablelist[$a][0]
				ConsoleWrite("CASAT Title 1: " & $title & @LF)
				$title = StringLeft($title, StringInStr($title, "-", 0, 2) - 2)
				$title = StringRegExpReplace($title, "\s", "")
				ConsoleWrite("CASAT Title 2: " & $title & @LF)
				logit("IF2481")
				If $title == $name Then
					Return True
				EndIf
				logit("EN2482")
			EndIf
			logit("EN2483")
		Next
		logit("NE2484")
		Return False
		logit("EN2485")
	EndFunc

	Func tablelistcash()
		logit("FU2420")
		Local $winlist
		If GUICtrlRead($cmbsite) == "888Poker" Then
			$winlist = WinList("[REGEXPTITLE:\A.*LH.*/.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$winlist = bodogtablelist()
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*-.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Poker770" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "WillHill" Then
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Hold'em.*-.*/.*\z]")
		Else
			$winlist = WinList("[REGEXPTITLE:\A.*Hold'em.*Money in play.*\z]")
		EndIf
		Local $rv[1][2]
		Local $count = 0
		Local $tempsize
		For $a = 1 To $winlist[0][0]
			$tempsize = WinGetPos($winlist[$a][1])
			If NOT StringInStr($winlist[$a][0], "ohf") AND NOT StringInStr($winlist[$a][0], "dll") AND NOT StringInStr($winlist[$a][0], "OpenHoldem") AND NOT StringInStr($winlist[$a][0], "openholdem") AND NOT StringInStr($winlist[$a][0], "Openholdem") Then
				If IsArray($tempsize) AND ($winlist[$a][0] <> "[REGEXPTITLE:.*www.holdemmanager.com.*]") Then
					If WinGetState($winlist[$a][1]) == 7 OR WinGetState($winlist[$a][1]) == 23 OR WinGetState($winlist[$a][1]) == 15 Then
						$count += 1
						ReDim $rv[$count + 2][2]
						$rv[$count][0] = $winlist[$a][0]
						$rv[$count][1] = $winlist[$a][1]
						$rv[0][0] = $count
					EndIf
				EndIf
			EndIf
			Sleep(10)
		Next
		Return $rv
		logit("EN2427")
	EndFunc

	Func handleignorewin()
		logit("FU2369")
		Local $winlist = WinList("Error")
		logit("IF2370")
		If $winlist[0][0] > 0 Then
			logit("FO2371")
			For $z = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[0][0])
				logit("IF2372")
				If IsArray($winpos) AND $winpos[2] == 558 AND $winpos[3] == 122 Then
					SendKeepActive($winlist[$z][1])
					Send("{ALT}{I}")
					Sleep(400)
					logit("IF2373")
					If WinExists($winlist[$z][1]) AND (WinGetState($winlist[$z][1]) == 7 OR WinGetState($winlist[$z][1]) == 15) Then
						WinClose($winlist[$z][1])
					EndIf
					logit("EN2374")
				EndIf
				logit("EN2375")
			Next
			logit("NE2376")
		EndIf
		logit("EN2377")
		logit("EN2378")
	EndFunc

	Func checktimeout()
		logit("FU2385")
		logit("IF2386")
		If WinExists("[REGEXPTITLE:/ATable -.*]") AND (WinGetState("[REGEXPTITLE:/ATable -.*]") == 7 OR WinGetState("[REGEXPTITLE:/ATable -.*]") == 15) Then
			fconsolewrite("CT: Timed out Waiting List Found")
			ControlFocus("[REGEXPTITLE:/ATable -.*]", "", "[CLASS:TButton; INSTANCE:1]")
			ControlClick("[REGEXPTITLE:/ATable -.*]", "", "[CLASS:TButton; INSTANCE:1]", "left", 1)
			$waitinglistcount -= 1
			logit("IF2387")
			If $waitinglistcount < 0 Then $waitinglistcount = 0
			ConsoleWrite("Waiting List Count = " & $waitinglistcount & @LF)
			Return False
		EndIf
		logit("EN2388")
		Return True
		logit("EN2389")
	EndFunc

	Func checkeeepopups()
		If checkalreadyseatedeee() Then
		EndIf
		If findwlbtn() Then
		EndIf
		If ratholingwin() Then
		EndIf
		youhavebeenremovedfromwleee()
	EndFunc

	Func addtableeee()
		logit("FU1708")
		Local $split
		$lobbyname = "[REGEXPTITLE:\A.*Lobby.*\z]"
		$hlobby = WinGetHandle($lobbyname)
		Local $temppos = WinGetPos($hlobby)
		If $temppos[0] <> 0 OR $temppos[1] <> 0 Then
			WinMove($hlobby, "", 0, 0, Default, Default, 1)
		EndIf
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		_winapi_setforegroundwindow($hlobby)
		WinWaitActive($hlobby, "", 1)
		Local $winlobpos = WinGetCaretPos()
		Local $tablestart = PixelSearch(1 + $winlobpos[0], 210 + $winlobpos[1], 757 + $winlobpos[0], 307 + $winlobpos[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Table Bar start = " & $tablestart[0] & ", " & $tablestart[1] & @LF)
		Local $tablefinish = PixelSearch($tablestart[0] + 2, $tablestart[1], 729 + $winlobpos[0], $tablestart[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Table Bar finish = " & $tablefinish[0] & ", " & $tablefinish[1] & @LF)
		Local $tablex1 = $tablestart[0] - 12
		Local $tablex2 = $tablefinish[0]
		Local $typecolumnbar = PixelSearch(2 + $tablex2, 222 + $winlobpos[1], 757 + $winlobpos[0], 307 + $winlobpos[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Type Bar start = " & $typecolumnbar[0] & ", " & $typecolumnbar[1] & @LF)
		Local $typepixsearchid = PixelSearch($typecolumnbar[0] + 2, $typecolumnbar[1], 729 + $winlobpos[0], $typecolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Type Bar finish = " & $typepixsearchid[0] & ", " & $typepixsearchid[1] & @LF)
		Local $typex2 = $typepixsearchid[0] - 1
		Local $limitcolumnbar = PixelSearch(3 + $typex2, 222 + $winlobpos[1], 757 + $winlobpos[0], 307 + $winlobpos[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Limit Bar start = " & $limitcolumnbar[0] & ", " & $limitcolumnbar[1] & @LF)
		Local $limitpixsearchid = PixelSearch($limitcolumnbar[0] + 2, $limitcolumnbar[1], 729 + $winlobpos[0], $limitcolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Limit Bar finish = " & $limitpixsearchid[0] & ", " & $limitpixsearchid[1] & @LF)
		Local $limitx1 = $limitcolumnbar[0] - 2
		Local $limitx2 = $limitpixsearchid[0]
		Local $buyincolumnbar = PixelSearch(3 + $limitx2, 222 + $winlobpos[1], 757 + $winlobpos[0], 307 + $winlobpos[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Buyin Bar start = " & $buyincolumnbar[0] & ", " & $buyincolumnbar[1] & @LF)
		Local $buyinpixsearchid = PixelSearch($buyincolumnbar[0] + 2, $buyincolumnbar[1], 729 + $winlobpos[0], $buyincolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Buyin Bar finish = " & $buyinpixsearchid[0] & ", " & $buyinpixsearchid[1] & @LF)
		Local $buyinx1 = $buyincolumnbar[0] - 2
		Local $buyinx2 = $buyinpixsearchid[0]
		Local $playerscolumnbar = PixelSearch(3 + $buyinx2, 222 + $winlobpos[1], 757 + $winlobpos[0], 307 + $winlobpos[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Players Bar start = " & $playerscolumnbar[0] & ", " & $playerscolumnbar[1] & @LF)
		Local $playerspixsearchid = PixelSearch($playerscolumnbar[0] + 2, $playerscolumnbar[1], 729 + $winlobpos[0], $playerscolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Players Bar finish = " & $playerspixsearchid[0] & ", " & $playerspixsearchid[1] & @LF)
		Local $playersx1 = $playerscolumnbar[0] - 2
		Local $playersx2 = $playerspixsearchid[0]
		Local $avgpotcolumnbar = PixelSearch(3 + $playersx2, 222 + $winlobpos[1], 757 + $winlobpos[0], 307 + $winlobpos[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("AvgPot Bar start = " & $avgpotcolumnbar[0] & ", " & $avgpotcolumnbar[1] & @LF)
		Local $avgpotpixsearchid = PixelSearch($avgpotcolumnbar[0] + 2, $avgpotcolumnbar[1], 729 + $winlobpos[0], $avgpotcolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("AvgPot Bar finish = " & $avgpotpixsearchid[0] & ", " & $avgpotpixsearchid[1] & @LF)
		Local $avgpotx1 = $avgpotcolumnbar[0] - 2
		Local $avgpotx2 = $avgpotpixsearchid[0]
		Local $plrflopcolumnbar = PixelSearch(3 + $avgpotx2, 222 + $winlobpos[1], 757 + $winlobpos[0], 307 + $winlobpos[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("PlrFlop Bar start = " & $plrflopcolumnbar[0] & ", " & $plrflopcolumnbar[1] & @LF)
		Local $plrfloppixsearchid = PixelSearch($plrflopcolumnbar[0] + 2, $plrflopcolumnbar[1], 729 + $winlobpos[0], $plrflopcolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("PlrFlop Bar finish = " & $plrfloppixsearchid[0] & ", " & $plrfloppixsearchid[1] & @LF)
		Local $plrflopx1 = $plrflopcolumnbar[0] - 2
		Local $plrflopx2 = $plrfloppixsearchid[0]
		Local $handshrcolumnbar = PixelSearch(3 + $plrflopx2, 222 + $winlobpos[1], 757 + $winlobpos[0], 307 + $winlobpos[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("HandsHr Bar start = " & $handshrcolumnbar[0] & ", " & $handshrcolumnbar[1] & @LF)
		Local $handshrpixsearchid = PixelSearch($handshrcolumnbar[0] + 2, $handshrcolumnbar[1], 729 + $winlobpos[0], $handshrcolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("HandsHr Bar finish = " & $handshrpixsearchid[0] & ", " & $handshrpixsearchid[1] & @LF)
		Local $handshrx1 = $handshrcolumnbar[0] - 2
		Local $handshrx2 = $handshrpixsearchid[0]
		Local $waitlistcolumnbar = PixelSearch(3 + $handshrx2, 222 + $winlobpos[1], 757 + $winlobpos[0], 307 + $winlobpos[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Players Bar start = " & $waitlistcolumnbar[0] & ", " & $waitlistcolumnbar[1] & @LF)
		Local $waitlistpixsearchid = 749
		ConsoleWrite("Players Bar finish = 750" & @LF)
		Local $waitlistx1 = $waitlistcolumnbar[0] - 2
		Local $waitlistx2 = $waitlistpixsearchid
		Local $pixy = 0
		Local $pixy2 = 0
		logit("IF1709")
		If NOT IsArray($winlobpos) Then
			fconsolewrite("ATEEE: NOT ARRAY OFF")
			Return
		EndIf
		logit("EN1710")
		clearoldavoidtables()
		Local $buyinscrape
		$buyinscrape = ""
		movelobby($hlobby)
		Sleep(500)
		fconsolewrite("AT: Scanning Lobby: " & StringRegExpReplace(WinGetTitle($hlobby), "As .*\z", "As [OpenHoldemStore.com]"))
		If NOT WinActive($hlobby) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 1)
		EndIf
		logit("IF1711")
		$trn = getplaylinevaluescash()
		logit("IF1712")
		If NOT IsArray($trn) Then
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
			Return
		EndIf
		If findwlbtn() Then
		EndIf
		logit("EN1713")
		Local $userbuyin = $trn[2]
		logit("EN1716")
		logit("IF1717")
		Local $scantoptables
		If GUICtrlRead($txtscantop) == 0 OR NOT GUICtrlRead($txtscantop) Then
			$scantoptables = 28
		Else
			$scantoptables = GUICtrlRead($txtscantop)
			ConsoleWrite("AT: ScanTopTables = " & $scantoptables & @LF)
		EndIf
		logit("EN1718")
		logit("IF1721")
		If checkwaitinglist() Then
			Return
		EndIf
		logit("EN1722")
		eeehandlefavoriteswin()
		eeehandlextrawin()
		logit("EN1742")
		Local $nothingscanned = 0
		For $a = 0 To $scantoptables - 1
			Sleep(20)
			logit("IF1744")
			If tablecount() >= GUICtrlRead($numbotscmb) Then Return
			If checkwaitinglist() Then
				checkeeepopups()
				checknewtablescash()
				Return
			EndIf
			If WinExists("Choose your buy-in amount") Then
				Local $buypos = WinGetPos("Choose your buy-in amount")
				If IsArray($buypos) Then
					WinActivate("Choose your buy-in amount")
					WinWaitActive("Choose your buy-in amount", "", 1)
					MouseClick("left", 204 + $buypos[0], 451 + $buypos[1], 1, 0)
					WinWaitClose("Choose your buy-in amount", "", 1)
				EndIf
			EndIf
			logit("EN1745")
			If NOT WinActive($hlobby) Then
				WinActivate($hlobby)
				Sleep(500)
			EndIf
			Sleep(500)
			Local $arrowpix = PixelGetColor($winlobpos[0] + 735, $winlobpos[1] + 594, $hlobby)
			If $arrowpix == 16777215 Then
				Local $arrowpix2 = PixelGetColor($winlobpos[0] + 735, $winlobpos[1] + 238, $hlobby)
				If $arrowpix2 <> 2631720 Then
					MouseClick("left", $winlobpos[0] + 735, $winlobpos[1] + 238, 1, 0)
					Sleep(500)
				EndIf
			EndIf
			Local $tempcolor = PixelGetColor($winlobpos[0] + 207, $winlobpos[1] + 243 + ($a * 13), $hlobby)
			If $tempcolor == 147561 Then
				fconsolewrite("Already seated... checking next line" & @LF)
				ContinueLoop
			ElseIf $tempcolor == 10115417 Then
				fconsolewrite("Already on waitlist... checking next line" & @LF)
				ContinueLoop
			EndIf
			$temp = "Scanning line " & $a + 1 & " of " & $scantoptables
			MouseMove(214 + $winlobpos[0], 243 + $winlobpos[1] + (13 * $a), 1)
			Sleep(300)
			MouseDown("left")
			Sleep(300)
			MouseUp("left")
			fconsolewrite($temp)
			Local $textcolor = PixelGetColor($winlobpos[0] + 207, $winlobpos[1] + 243 + ($a * 13), $hlobby)
			Local $pixsearch = False
			If $a = 0 Then
				For $y = 0 To 9
					For $z = 0 To 60
						If PixelGetColor(300 + $winlobpos[0] + $z, 235 + $winlobpos[1] + $y, $hlobby) <> $textcolor Then
							$pixsearch = True
							$pixy = 237 + $y
							$pixy2 = 237 + $y + 10
							ExitLoop
						EndIf
					Next
					If $pixsearch = True Then ExitLoop
				Next
			EndIf
			ConsoleWrite("$pixy: " & $pixy & @LF)
			ConsoleWrite("$pixy2: " & $pixy2 & @LF)
			Local $tablename = _scanstring($tablex1, $pixy + ($a * 13), $tablex2, $pixy2 + ($a * 13), $textcolor, -0.01, $hlobby)
			logit("IF1748")
			If NOT $tablename Then
				fconsolewrite("AT: Table name not scanned.. checking next line")
				If $nothscan >= 100 Then
					$nothscan = 0
					Return
				Else
					If $nothingscanned >= 3 Then
						$nothingscanned = 0
						Return
					Else
						$nothingscanned += 1
					EndIf
					$nothscan += 1
				EndIf
				ContinueLoop
				Sleep(10)
			Else
				$nothscan = 0
			EndIf
			logit("EN1749")
			$tablename = StringRegExpReplace($tablename, "\s", "")
			fconsolewrite("AT: Table Name = " & $tablename)
			Local $cnt = 0
			Local $cnt2 = 0
			logit("FO1752")
			For $d = 0 To UBound($avoidtables) - 1
				logit("IF1753")
				If StringInStr($avoidtables[$d], $tablename) > 0 Then
					fconsolewrite("Avoiding UAT: " & $tablename)
					$cnt = 1
					ExitLoop
				EndIf
				logit("EN1754")
				Sleep(10)
			Next
			logit("NE1755")
			logit("IF1756")
			If $cnt > 0 Then
				Sleep(10)
				If GUICtrlRead($chkspeedpoker) <> $gui_checked Then
					ContinueLoop
				Else
					$cnt = 0
				EndIf
			EndIf
			logit("FO1757")
			For $d = 0 To UBound($satattables) - 1
				logit("IF1758")
				If StringInStr($satattables[$d], $tablename) > 0 Then
					fconsolewrite("Avoiding SAT " & $tablename)
					$cnt2 = 1
					ExitLoop
				EndIf
				logit("EN1759")
				Sleep(10)
			Next
			logit("NE1760")
			logit("IF1761")
			If $cnt2 > 0 Then
				If GUICtrlRead($chkspeedpoker) <> $gui_checked Then
					ConsoleWrite("Already sitting at this table" & @LF)
					Sleep(10)
					ContinueLoop
				Else
					$cnt2 = 0
				EndIf
			EndIf
			logit("EN1762")
			logit("IF1763")
			logit("EN1766")
			If GUICtrlRead($chkspeedpoker) <> $gui_checked Then
				Local $waitinglistscrape = _scanstring($waitlistx1, $pixy + ($a * 13), $waitlistx2, $pixy2 + ($a * 13), $textcolor, -0.01, $hlobby)
				$waitinglistscrape = StringRegExpReplace($waitinglistscrape, "\s", "")
				If StringInStr($waitinglistscrape, "outof") Then
					fconsolewrite("AT: Already on Waiting List.. checking next line")
					Sleep(10)
					ContinueLoop
				EndIf
				logit("IF1767")
				If Number($waitinglistscrape) > Number(GUICtrlRead($txtwlml)) AND GUICtrlRead($chkwaitinglist) == $gui_checked Then
					fconsolewrite("AT: " & $waitinglistscrape & " players in Waiting List.. checking next line")
					Sleep(10)
					ContinueLoop
				EndIf
				logit("EN1768")
				logit("IF1769")
				If GUICtrlRead($chkwaitinglist) == $gui_unchecked AND $waitinglistscrape > 0 AND $waitinglistscrape <> "" Then
					fconsolewrite("AT 2: " & $waitinglistscrape & " players in Waiting List.. checking next line")
					Sleep(10)
					ContinueLoop
				EndIf
			EndIf
			logit("EN1770")
			$buyinscrape = _scanstring($buyinx1, $pixy + ($a * 13), $buyinx2, $pixy2 + ($a * 13), $textcolor, -0.01, $hlobby)
			$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
			logit("IF1771")
			If NOT $buyinscrape Then
				fconsolewrite("AT: Buyin not scanned.. checking next line")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1772")
			fconsolewrite("AT: Buyin: " & $buyinscrape)
			logit("IF1773")
			Local $newb1, $buy2, $buy1
			If StringInStr($buyinscrape, "/") Then
				$split = StringSplit($buyinscrape, "/")
				logit("IF1774")
				If IsArray($split) Then
					logit("IF1775")
					If StringInStr($split[1], "$") Then
						$buy1 = StringTrimLeft($split[1], 1)
					Else
						$newb1 = $split[1]
						Local $temp4 = ($newb1 * 0.01)
						$buy1 = StringFormat("%.2f", $temp4)
					EndIf
					logit("EN1776")
					logit("IF1777")
					If StringInStr($split[2], "$") Then
						$buy2 = StringTrimLeft($split[2], 1)
					Else
						Local $newb2 = $split[2]
						Local $temp5 = ($newb2 * 0.01)
						$buy2 = StringFormat("%.2f", $temp5)
					EndIf
					logit("EN1778")
					$buyinscrape = String($buy1) & "/" & String($buy2)
					fconsolewrite("AT: New Buyin: " & $buyinscrape)
				EndIf
				logit("EN1779")
			EndIf
			logit("EN1780")
			Local $maxbuyin = StringStripWS(StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 2), 3)
			logit("IF1781")
			If Number($maxbuyin) > Number(GUICtrlRead($txtmaxbuyin)) Then
				fconsolewrite("Max Buyin: " & $maxbuyin & " is > user entered: " & GUICtrlRead($txtmaxbuyin) & " ,Checking next line")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1782")
			logit("IF1783")
			Local $players = _scanstring($playersx1, $pixy + ($a * 13), $playersx2, $pixy2 + ($a * 13), $textcolor, -0.01, $hlobby)
			$players = StringRegExpReplace($players, "\s", "")
			If GUICtrlRead($chkspeedpoker) <> $gui_checked Then
				logit("IF1818")
				If StringInStr($players, "/") Then
					Local $newplayers = StringSplit($players, "/")
				Else
					ConsoleWrite("Checking next line *Players*" & @LF)
					ContinueLoop
				EndIf
				logit("EN1819")
				Local $newseated = ""
				Local $maxseated = ""
				logit("IF1820")
				If IsArray($newplayers) Then
					$newseated = $newplayers[1]
					$maxseated = $newplayers[2]
					fconsolewrite("Players seated: " & $newseated)
					fconsolewrite("Max seats: " & $maxseated)
				Else
					ConsoleWrite("Returning 2" & @LF)
					Return
				EndIf
				logit("EN1821")
				logit("IF1822")
				If StringInStr($newseated, "Full") Then
					$newseated = $maxseated
				EndIf
			Else
				$players = "6/6"
				$newseated = 6
				$maxseated = 6
				fconsolewrite("Players seated: " & $newseated)
				fconsolewrite("Max seats: " & $maxseated)
			EndIf
			Local $rawtoplay
			Local $split2
			$rawtoplay = IniReadSection($inifile, "toplayCash")
			For $x = 1 To UBound($rawtoplay) - 1
				$split = StringSplit($rawtoplay[$x][0], "~")
				If IsArray($split) Then
					If StringInStr($maxseated, $split[2]) AND StringInStr($buyinscrape, $split[1]) Then
						$userbuyin = $buyinscrape
						fconsolewrite("Entry1: " & $maxseated & " = " & $split[2])
						fconsolewrite("BuyIn1: " & $buyinscrape & " = " & $split[1])
						$split2 = $maxseated
						ExitLoop
					Else
						fconsolewrite("Entry2: " & $maxseated & " != " & $split[2])
						fconsolewrite("BuyIn2: " & $buyinscrape & " != " & $split[1])
						Sleep(10)
						ContinueLoop
					EndIf
				Else
					ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
					MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
					Return
				EndIf
				Sleep(10)
			Next
			logit("EN1790")
			logit("IF1799")
			If NOT $userbuyin Then
				fconsolewrite("Userbuyin is empty")
				Sleep(10)
				ContinueLoop
			Else
				ConsoleWrite("UserBuyin: " & $userbuyin & @LF)
			EndIf
			logit("EN1800")
			Local $limit = _scanstring($limitx1, $pixy + ($a * 13), $limitx2, $pixy2 + ($a * 13), $textcolor, -0.01, $hlobby)
			$limit = StringRegExpReplace($limit, "\s", "")
			Local $newbb
			logit("IF1801")
			If StringInStr($buyinscrape, "$") Then
				$newbb = StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 2)
			ElseIf StringInStr($buyinscrape, "¢") Then
				$newbb = StringTrimRight($buyinscrape, 1)
				$newbb = StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 1)
			Else
				$newbb = StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 1)
			EndIf
			logit("EN1802")
			$newbb = StringRegExpReplace($newbb, "\s", "")
			fconsolewrite("New BB Amount: " & $newbb)
			Local $avgpot = _scanstring($avgpotx1, $pixy + ($a * 13), $avgpotx2, $pixy2 + ($a * 13), $textcolor, -0.01, $hlobby)
			$avgpot = StringRegExpReplace($avgpot, "\s", "")
			$avgpot = StringReplace($avgpot, "$", "")
			logit("IF1803")
			If StringInStr($avgpot, "$") Then
				$avgpot = StringTrimLeft($avgpot, 1)
			Else
				$avgpot = StringTrimRight($avgpot, 1)
				$avgpot = $avgpot * 0.01
			EndIf
			logit("EN1804")
			logit("IF1805")
			If $avgpot == "-" Then $avgpot = 0
			logit("IF1806")
			If Number($avgpot) < Number(GUICtrlRead($txtminavgpot)) * Number($newbb) Then
				fconsolewrite("AT: AvgPot is less than Minimum AvgPot entered by user: " & ($avgpot) & " < " & Number(GUICtrlRead($txtminavgpot)) * Number($newbb) & @LF)
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1807")
			logit("IF1808")
			If Number($avgpot) > Number(GUICtrlRead($txtmaxavgpot)) * Number($newbb) Then
				fconsolewrite("AT: AvgPot is greater than Maximum AvgPot entered by user: " & ($avgpot) & " > " & Number(GUICtrlRead($txtmaxavgpot)) * Number($newbb) & @LF)
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1809")
			Local $plrflop = _scanstring($plrflopx1, $pixy + ($a * 13), $plrflopx2, $pixy2 + ($a * 13), $textcolor, -0.01, $hlobby)
			$plrflop = StringRegExpReplace($plrflop, "\s", "")
			$plrflop = StringReplace($plrflop, "%", "")
			logit("IF1810")
			If Number($plrflop) < Number(GUICtrlRead($txtminplrflop)) Then
				fconsolewrite("AT: Plyr/Flop is less than Minimum Plyr/Flop entered by user: " & ($plrflop) & " < " & (GUICtrlRead($txtminplrflop)) & @LF)
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1811")
			logit("IF1812")
			If Number($plrflop) > Number(GUICtrlRead($txtmaxplrflop)) Then
				fconsolewrite("AT: Plyr/Flop is greater than Maximum Plyr/Flop entered by user: " & ($plrflop) & " > " & (GUICtrlRead($txtmaxplrflop)) & @LF)
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1813")
			Local $handshour = _scanstring($handshrx1, $pixy + ($a * 13), $handshrx2, $pixy2 + ($a * 13), $textcolor, -0.01, $hlobby)
			$handshour = StringRegExpReplace($handshour, "\s", "")
			logit("IF1814")
			If Number($handshour) < Number(GUICtrlRead($txtminhands)) Then
				fconsolewrite("AT: Hands/hr is less than Minimum Hands/hr entered by user: " & ($handshour) & " < " & (GUICtrlRead($txtminhands)) & @LF)
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1815")
			logit("IF1816")
			If Number($handshour) > Number(GUICtrlRead($txtmaxhands)) Then
				fconsolewrite("AT: Hands/hr is greater than Maximum Hands/hr entered by user: " & ($handshour) & " > " & (GUICtrlRead($txtmaxhands)) & @LF)
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1817")
			logit("NE1825")
			ConsoleWrite(@LF)
			logit("IF1826")
			If $buyinscrape == $userbuyin Then ConsoleWrite("Buyin matches," & @LF)
			logit("IF1827")
			Local $wlsuccessful
			ConsoleWrite("Split2: " & $split2 & @LF)
			Local $chekplayer = checkplayer($players)
			If $buyinscrape == $userbuyin AND _arraysearch($avoidtables, $tablename) == -1 AND _arraysearch($satattables, $tablename) == -1 AND $chekplayer Then
				fconsolewrite("AT: Found: " & $tablename)
				If NOT WinActive($hlobby) Then
					WinActivate($hlobby)
					Sleep(500)
				EndIf
				Local $winlist = tablelist()
				Local $ntables = $winlist[0][0]
				Local $noldtables = $winlist[0][0]
				ConsoleWrite("AT: Clicking table line " & $a & " to highlight before clicking Go To Table" & @LF)
				Sleep(100)
				MouseMove(378 + $winlobpos[0], 240 + $winlobpos[1] + (13 * $a), 1)
				Sleep(300)
				MouseDown("left")
				Sleep(300)
				MouseUp("left")
				Sleep(400)
				logit("IF1828")
				If GUICtrlRead($chkspeedpoker) <> $gui_checked AND (GUICtrlRead($chkwaitinglist) == 1) AND ($waitinglistscrape = "" OR $waitinglistscrape <= GUICtrlRead($txtwlml)) AND StringInStr($players, "Full") Then
					If (GUICtrlRead($ssenable) = $gui_checked OR GUICtrlRead($jenable) = $gui_checked OR GUICtrlRead($aenable) = $gui_checked) Then
						logit("IF1167")
						If thepawncash(Number($newbb)) = 1 Then
							fconsolewrite("AT: using Waiting List Pawn EEE")
							For $y = 0 To 1
								If detectwaitinglistbutton() == 1 Then ExitLoop
								ConsoleWrite("DWL != 0" & @LF)
								Sleep(20)
							Next
							If detectwaitinglistbutton() == 1 AND Number($newseated) == Number($maxseated) Then
								fconsolewrite("AT: Adding " & $tablename & " to the waiting list")
								If NOT WinActive($hlobby) Then
									WinActivate($hlobby)
									Sleep(500)
								EndIf
								logit("IF1843")
								If IsArray($winlobpos) Then MouseMove(935 + $winlobpos[0], 584 + $winlobpos[1], 0)
								MouseDown("left")
								Sleep(300)
								MouseUp("left")
								Sleep(300)
								WinWait("Member Message", "", 2)
								logit("IF1844")
								$wlsuccessful = False
								If findwlbtn() Then
									$wlsuccessful = True
								ElseIf checkalreadyseatedeee() Then
									Sleep(10)
									ContinueLoop
								ElseIf yourinluckwin() Then
									Sleep(10)
									ContinueLoop
								ElseIf ratholingwin() Then
									Sleep(10)
									ContinueLoop
								EndIf
								logit("EN1845")
								logit("WH1850")
								For $y = 0 To 3
									If detectwaitinglistbutton() <> 1 OR $wlsuccessful Then ExitLoop
									Sleep(1000)
								Next
								logit("WE1852")
								logit("IF1853")
								If yourinluckwin() Then
								EndIf
								If $wlsuccessful OR detectwaitinglistbutton() == 0 Then
									$bwaitinglist = True
									WinSetOnTop($hlobby, "", 0)
									fconsolewrite("AT: Add Successful: " & $waitinglistcount & " waiting lists added")
									logit("IF1854")
									logit("EN1855")
									Return
								Else
									fconsolewrite("AT: Waiting List Click was unsuccessful")
									$bwaitinglist = False
									Sleep(10)
									If yourinluckwin() Then
									EndIf
									ContinueLoop
								EndIf
								logit("EN1856")
							EndIf
							logit("WE1838")
						Else
							Sleep(10)
							ContinueLoop
						EndIf
						logit("EN1839")
						$bwaitinglist = False
						Sleep(100)
						logit("IF1840")
					Else
						fconsolewrite("AT: using Waiting List")
						logit("WH1829")
						For $y = 0 To 1
							If detectwaitinglistbutton() == 1 Then ExitLoop
							ConsoleWrite("DWL != 0" & @LF)
							Sleep(20)
						Next
						If detectwaitinglistbutton() == 1 AND Number($newseated) == Number($maxseated) Then
							fconsolewrite("AT: Adding " & $tablename & " to the waiting list")
							If NOT WinActive($hlobby) Then
								WinActivate($hlobby)
								Sleep(500)
							EndIf
							logit("IF1843")
							If IsArray($winlobpos) Then MouseMove(943 + $winlobpos[0], 584 + $winlobpos[1], 0)
							MouseDown("left")
							Sleep(300)
							MouseUp("left")
							Sleep(300)
							WinWait("Member Message", "", 2)
							logit("IF1844")
							$wlsuccessful = False
							If findwlbtn() Then
								$wlsuccessful = True
							ElseIf checkalreadyseatedeee() Then
								Sleep(10)
								ContinueLoop
							ElseIf yourinluckwin() Then
								Sleep(10)
								ContinueLoop
							ElseIf ratholingwin() Then
								Sleep(10)
								ContinueLoop
							EndIf
							logit("EN1845")
							logit("WH1850")
							For $y = 0 To 3
								If detectwaitinglistbutton() <> 1 OR $wlsuccessful Then ExitLoop
								Sleep(1000)
							Next
							logit("WE1852")
							logit("IF1853")
							If $wlsuccessful OR detectwaitinglistbutton() == 0 Then
								$bwaitinglist = True
								WinSetOnTop($hlobby, "", 0)
								fconsolewrite("AT: Add Successful: " & $waitinglistcount & " waiting lists added")
								logit("IF1854")
								logit("EN1855")
								Return
							Else
								fconsolewrite("AT: Waiting List Click was unsuccessful")
								$bwaitinglist = False
								Sleep(10)
								ContinueLoop
							EndIf
							logit("EN1856")
						ElseIf $newseated <> $maxseated Then
							ConsoleWrite("$newSeated: " & $newseated & "!= $maxSeated: " & $maxseated & @LF)
						Else
							ConsoleWrite("DetectWaitingListButton = " & detectwaitinglistbutton() & @LF)
						EndIf
						logit("WE1838")
					EndIf
				ElseIf NOT StringInStr($players, "Full") Then
					If (GUICtrlRead($ssenable) = $gui_checked OR GUICtrlRead($jenable) = $gui_checked OR GUICtrlRead($aenable) = $gui_checked) Then
						If thepawncash(Number($newbb)) = 1 Then
							fconsolewrite("AT: Clicking Go To Table Pawn EEE")
							If NOT WinActive($hlobby) Then
								WinActivate($hlobby)
								Sleep(500)
							EndIf
							logit("IF1857")
							If IsArray($winlobpos) Then fmouseclick("left", 830 + $winlobpos[0], 584 + $winlobpos[1], 1, 0)
						Else
							Sleep(10)
							ContinueLoop
						EndIf
					Else
						fconsolewrite("AT: Clicking Go To Table")
						If NOT WinActive($hlobby) Then
							WinActivate($hlobby)
							Sleep(500)
						EndIf
						logit("IF1857")
						If GUICtrlRead($chkspeedpoker) <> $gui_checked Then
							If IsArray($winlobpos) Then fmouseclick("left", 830 + $winlobpos[0], 584 + $winlobpos[1], 1, 0)
						Else
							If IsArray($winlobpos) Then fmouseclick("left", 885 + $winlobpos[0], 584 + $winlobpos[1], 1, 0)
							WinWait("Choose your buy-in amount", "", 10)
							If WinExists("Choose your buy-in amount") AND iswindowvisible("Choose your buy-in amount") Then
								checkgetchips()
								Sleep(500)
							EndIf
						EndIf
					EndIf
				Else
					logit("IF1858")
					If GUICtrlRead($chkwaitinglist) == 0 Then
						ConsoleWrite("EEEAT: Waiting list not enabled" & @LF)
					ElseIf $waitinglistscrape <> "" Then
						ConsoleWrite("EEEAT: Waiting list scrape = " & $waitinglistscrape & @LF)
					ElseIf Number($waitinglistscrape) > Number(GUICtrlRead($txtwlml)) Then
						ConsoleWrite("EEEAT: Waiting list scrape: " & $waitinglistscrape & " > " & Number(GUICtrlRead($txtwlml)) & @LF)
					ElseIf detectwaitinglistbutton() <> 1 Then
						ConsoleWrite("EEEAT: DetectWaitingListButton: " & detectwaitinglistbutton() & @LF)
					ElseIf $newseated <> $maxseated Then
						ConsoleWrite("EEEAT: $seatedPlayers: " & $newseated & " <> " & $maxseated & @LF)
					EndIf
					logit("EN1859")
					fconsolewrite("AT:  Wanted to join, but either we're not using the waiting list and there's no seats, or we're already on the waiting list")
					WinSetOnTop($hlobby, "", 0)
					Sleep(10)
					ContinueLoop
				EndIf
				logit("EN1860")
				WinSetOnTop($hlobby, "", 0)
				ConsoleWrite("Checking Tablelist" & @LF)
				For $y = 0 To 15
					$winlist = tablelist()
					If IsArray($winlist) Then $ntables = $winlist[0][0]
					Sleep(200)
					If $ntables <> $noldtables Then ExitLoop
				Next
				logit("IF1862")
				ConsoleWrite("Checking sitting at table" & @LF)
				Local $sitattable = sittingattable($tablename)
				If $ntables == $noldtables Then
					fconsolewrite("AT: Timed out waiting for table to start up - restarting scan")
					logit("IF1863")
					If WinExists($tablename) AND NOT $sitattable AND (WinGetState($tablename) == 7 OR WinGetState($tablename) == 15) Then
						fconsolewrite("AT: Table still open,  WClose: " & $tablename)
						WinClose($tablename)
					EndIf
					logit("EN1864")
					ExitLoop
				EndIf
				logit("EN1865")
				Local $tableassigned
				$tableassigned = False
				$hactive = -10
				Local $b
				Local $title
				$b = 0
				logit("IF1866")
				If IsArray($winlist) Then
					logit("FO1867")
					For $b = 1 To $winlist[0][0]
						logit("IF1868")
						If _arraysearch($htable, $winlist[$b][1]) == -1 Then
							$title = $winlist[$b][0]
							$title = StringLeft($title, StringInStr($title, "-", 0, 2) - 2)
							fconsolewrite("AT: Spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [OpenHoldemStore.com]"))
							logit("FO1869")
							For $c = 0 To 18
								logit("IF1870")
								If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
									$htable[$c] = $winlist[$b][1]
									$tableassigned = True
									$hactive = $c
									ConsoleWrite("AT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "" & @LF)
									ExitLoop
								EndIf
								logit("EN1871")
								Sleep(10)
							Next
							logit("NE1872")
							logit("IF1873")
							If $tableassigned Then
								ConsoleWrite("AT: Assigned" & @LF)
								checkgetchips($winlist[$b][1])
							Else
								fconsolewrite("AT: Couldn't find an empty handle. Closing window")
								WinClose($winlist[$b][1])
								WinWaitClose($winlist[$b][1], "", 2)
								closeanyareyousurewindows()
							EndIf
							logit("EN1874")
							ExitLoop
						EndIf
						logit("EN1875")
						Sleep(10)
					Next
					logit("NE1876")
				EndIf
				logit("EN1877")
				logit("IF1878")
				If NOT $tableassigned Then
					fconsolewrite("AT: Table not assigned. Restarting scan for table from the top.")
					ExitLoop
				EndIf
				$x = IniRead($inifile, "settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
				$y = IniRead($inifile, "settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
				For $z = 0 To 10
					If NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then ExitLoop
					Local $tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
					logit("IF1885")
					If ($tablepos[0] <> $x OR $tablepos[1] <> $y) Then
						fconsolewrite("AT: Moving table " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), "As .*\z", "As [OpenHoldemStore.com]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
						WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, $tablewidtheee, $tableheight, 1)
						Sleep(10)
					Else
						fconsolewrite("AT: No need to move table - it's in the right position")
						WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
						ExitLoop
					EndIf
					logit("EN1886")
					Sleep(500)
					If ($tablepos[0] == $x AND $tablepos[1] == $y) Then ExitLoop
				Next
				logit("EN1879")
				Local $sittingattable
				Local $sattable = False
				$sittingattable = False
				ConsoleWrite("2 Split2: " & $split2 & @LF)
				For $y = 0 To 10
					logit("IF1880")
					If $hactive > 6 Then ExitLoop
					If sitattable(arrayget("FMTS2119z", $htable, $hactive), $split2) Then
						$sattable = True
						$sittingattable = True
						ExitLoop
					EndIf
					Sleep(1000)
					$sittingattable = sittingattable(arrayget("FMTS2119z", $htable, $hactive))
					If $sattable OR $sittingattable OR NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then ExitLoop
				Next
				logit("IF1881")
				If NOT $sittingattable AND NOT $sattable Then
					fconsolewrite("AT: Unable to sit at table")
					If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
						WinClose(arrayget("FMTS2121z", $htable, $hactive))
						WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
					EndIf
					closeanyareyousurewindows()
					Return
				Else
					$timetable[$hactive] = _timer_init()
					Local $temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
					Local $titlearr = StringSplit($temptitle, " ")
					logit("IF1882")
					If IsArray($titlearr) Then
						$temptitle = $titlearr[1]
					EndIf
					logit("EN1883")
					$temptitle = StringRegExpReplace($temptitle, "\s", "")
					tablesseated($temptitle)
					fconsolewrite("AT: Sitting at table")
					checkbbwin()
					$counthops += 1
				EndIf
				logit("EN1884")
				logit("IF1887")
				logit("EN1888")
				ExitLoop
			ElseIf NOT $chekplayer Then
				fconsolewrite("Player check is false, continuing loop")
				Sleep(10)
				ContinueLoop
			ElseIf _arraysearch($satattables, $tablename) <> -1 Then
				ConsoleWrite("$SatAtTables is false, continuing loop" & @LF)
				Sleep(10)
				ContinueLoop
			ElseIf _arraysearch($avoidtables, $tablename) <> -1 Then
				ConsoleWrite("$AvoidTables is false, continuing loop" & @LF)
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1893")
		Next
		logit("NE1894")
		logit("EN1895")
	EndFunc

	Func checkbbwin()
		If WinExists("Member Message") Then
			Local $winlist = WinList("Member Message")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					WinActivate($winlist[$x][1])
					_winapi_setforegroundwindow($winlist[$x][1])
					WinWaitActive($winlist[$x][1], "", 1)
					Local $wincarpos = WinGetCaretPos()
					$winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If $winpos[3] == 225 Then
							MouseClick("left", $wincarpos[0] + 183, $wincarpos[1] + 139, 1, 0)
							WinWaitClose($winlist[$x][1], "", 1)
							If WinExists($winlist[$x][1]) Then
								WinClose($winlist[$x][1])
							EndIf
							Return
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func findwlbtn()
		If WinExists("Member Message") Then
			Local $winlist = WinList("Member Message")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					_winapi_setforegroundwindow($winlist[$x][1])
					WinWaitActive($winlist[$x][1], "", 1)
					Local $wincarpos = WinGetCaretPos()
					$winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If $winpos[3] == 155 OR $winpos[3] == 166 OR $winpos[3] == 167 Then
							WinActivate($winlist[$x][1])
							WinWaitActive($winlist[$x][1], "", 2)
							If PixelGetColor($wincarpos[0] + 76, $wincarpos[1] + 65, $winlist[$x][1]) == 16777215 Then
								fconsolewrite("You have been added to the waiting list")
								WinClose($winlist[$x][1])
								WinWaitClose($winlist[$x][1], "", 1)
								If NOT WinExists($winlist[$x][1]) Then
									$waitinglistcount += 1
									Return True
								EndIf
							ElseIf PixelGetColor($wincarpos[0] + 43, $wincarpos[1] + 65, $winlist[$x][1]) == 16777215 Then
								fconsolewrite("You are already on wait list window found")
								WinClose($winlist[$x][1])
								WinWaitClose($winlist[$x][1], "", 1)
								If NOT WinExists($winlist[$x][1]) Then
									$waitinglistcount -= 1
									Return False
								EndIf
							ElseIf PixelGetColor($wincarpos[0] + 64, $wincarpos[1] + 65, $winlist[$x][1]) == 16777215 Then
								fconsolewrite("You are not on wait list window found")
								WinClose($winlist[$x][1])
								WinWaitClose($winlist[$x][1], "", 1)
								If NOT WinExists($winlist[$x][1]) Then
									$waitinglistcount -= 1
									Return False
								EndIf
							EndIf
						EndIf
					EndIf
					Sleep(10)
				Next
			EndIf
		EndIf
		Return False
	EndFunc

	Func addtableacr()
		logit("FU1708")
		$lobbyname = "[REGEXPTITLE:\A.*Lobby Logged in as.*\z]"
		$hlobby = WinGetHandle($lobbyname)
		movelobby($hlobby)
		WinActivate($hlobby)
		_winapi_setforegroundwindow($hlobby)
		WinWaitActive($hlobby, "", 1)
		Local $winlobpos = WinGetCaretPos()
		logit("IF1709")
		If NOT IsArray($winlobpos) Then
			fconsolewrite("ATACR: NOT ARRAY OFF")
			Return
		EndIf
		logit("EN1710")
		clearoldavoidtables()
		Local $buyinscrape
		$buyinscrape = ""
		fconsolewrite("AT: Scanning Lobby:" & WinGetTitle($hlobby))
		Sleep(500)
		Local $userminplrflop = ControlGetText($maingui, "", $txtminplrflop)
		Local $usermaxplrflop = ControlGetText($maingui, "", $txtmaxplrflop)
		Local $userminhands = ControlGetText($maingui, "", $txtminhands)
		Local $usermaxhands = ControlGetText($maingui, "", $txtmaxhands)
		SendKeepActive($hlobby)
		Send("^{HOME}")
		logit("IF1711")
		$trn = getplaylinevaluescash()
		logit("IF1712")
		If NOT IsArray($trn) Then
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
			Return
		EndIf
		logit("EN1713")
		Local $userbuyin = $trn[2]
		logit("EN1716")
		logit("EN1720")
		Sleep(30)
		checknewtablescash()
		logit("FO1743")
		Local $listviewhandle = ControlGetHandle($hlobby, "", "IGListCtrl1")
		Local $count = ControlListView($hlobby, "", "[CLASS:IGListCtrl; INSTANCE:1]", "GetItemCount")
		ConsoleWrite("Count: " & $count & @LF)
		For $line = 0 To $count - 1 Step +1
			logit("IF1744")
			If checkwaitinglist() Then
			EndIf
			logit("EN1745")
			$temp = "Scanning line " & $line + 1 & " of " & $count
			fconsolewrite($temp)
			Local $tablename = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 1)
			logit("IF1748")
			If $tablename == "" Then
				fconsolewrite("AT: Nothing scanned.. checking next line")
				ContinueLoop
			EndIf
			logit("EN1749")
			$tablename = StringRegExpReplace($tablename, "\s", "")
			fconsolewrite("AT: Table Name = " & $tablename)
			Local $cnt = 0
			Local $cnt2 = 0
			Local $cnt3 = 0
			logit("FO1752")
			For $d = 0 To UBound($avoidtables) - 1
				logit("IF1753")
				If StringInStr($avoidtables[$d], $tablename) > 0 Then
					fconsolewrite("Avoiding UAT" & $tablename)
					$cnt = 1
					ExitLoop
				EndIf
				logit("EN1754")
			Next
			logit("NE1755")
			logit("IF1756")
			If $cnt > 0 Then ContinueLoop
			logit("FO1757")
			For $d = 0 To UBound($satattables) - 1
				logit("IF1758")
				If StringInStr($satattables[$d], $tablename) > 0 Then
					fconsolewrite("Avoiding SAT " & $tablename)
					$cnt2 = 1
					ExitLoop
				EndIf
				logit("EN1759")
			Next
			logit("NE1760")
			logit("IF1761")
			If $cnt2 > 0 Then
				ConsoleWrite("Already sitting at this table" & @LF)
				ContinueLoop
			EndIf
			For $d = 0 To UBound($wlarray) - 1
				logit("IF1758")
				If StringInStr($wlarray[$d], $tablename) > 0 Then
					fconsolewrite("Avoiding WL " & $tablename)
					$cnt3 = 1
					ExitLoop
				EndIf
				logit("EN1759")
			Next
			logit("NE1760")
			logit("IF1761")
			If $cnt3 > 0 Then
				ConsoleWrite("Already on waitlist at this table" & @LF)
				ContinueLoop
			EndIf
			logit("EN1762")
			logit("EN1766")
			Local $waitinglistscrape = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 8)
			logit("IF1767")
			If Number($waitinglistscrape) > Number(GUICtrlRead($txtwlml)) AND GUICtrlRead($chkwaitinglist) == $gui_checked Then
				fconsolewrite("AT: " & $waitinglistscrape & " players in Waiting List.. checking next line")
				ContinueLoop
			EndIf
			logit("EN1768")
			logit("IF1769")
			If GUICtrlRead($chkwaitinglist) == $gui_unchecked AND $waitinglistscrape > 0 AND $waitinglistscrape <> "" Then
				fconsolewrite("AT 2: " & $waitinglistscrape & " players in Waiting List.. checking next line")
				ContinueLoop
			EndIf
			logit("EN1770")
			$buyinscrape = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 3)
			$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
			ConsoleWrite("AT: Buyin1: " & $buyinscrape & @LF)
			If StringInStr($buyinscrape, "m") Then
				$buyinscrape = StringReplace($buyinscrape, "m", "")
			EndIf
			ConsoleWrite("AT: Buyin2: " & $buyinscrape & @LF)
			If GUICtrlRead($cmbsite) == "Betcoin" Then
				$buyinscrape = StringTrimLeft($buyinscrape, 1)
				ConsoleWrite("AT: Buyin3: " & $buyinscrape & @LF)
				Local $buysplit = StringSplit($buyinscrape, "/")
				If IsArray($buysplit) Then
					$buyinscrape = "$" & $buysplit[1] & "/$" & StringTrimLeft($buysplit[2], 1)
					ConsoleWrite("AT: Buyin4: " & $buyinscrape & @LF)
				EndIf
			EndIf
			logit("IF1771")
			If $buyinscrape == "" Then
				fconsolewrite("AT: Nothing scanned.. checking next line")
				ContinueLoop
			EndIf
			logit("EN1772")
			fconsolewrite("AT: Buyin: " & $buyinscrape)
			Local $maxbuyin = StringStripWS(StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 2), 3)
			logit("IF1781")
			If Number($maxbuyin) > Number(GUICtrlRead($txtmaxbuyin)) Then
				fconsolewrite("Max Buyin: " & $maxbuyin & " is > user entered: " & GUICtrlRead($txtmaxbuyin) & " ...Checking next line")
				ContinueLoop
			EndIf
			logit("EN1782")
			Local $players = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 5)
			$players = StringRegExpReplace($players, "\s", "")
			ConsoleWrite("$Players: " & $players & @LF)
			Local $maxseated = StringStripWS(StringMid($players, StringInStr($players, "/") + 1), 3)
			Local $seatedplayers = StringStripWS(StringLeft($players, StringInStr($players, "/") - 1), 3)
			ConsoleWrite("Max Seated: " & $maxseated & @LF)
			ConsoleWrite("Seated Players: " & $seatedplayers & @LF)
			logit("IF1784")
			Local $split
			Local $rawtoplay
			$rawtoplay = IniReadSection($inifile, "toplayCash")
			For $x = 1 To UBound($rawtoplay) - 1
				$split = StringSplit($rawtoplay[$x][0], "~")
				If IsArray($split) Then
					If StringInStr($maxseated, $split[3]) AND StringInStr($buyinscrape, $split[2]) Then
						$userbuyin = $buyinscrape
						ExitLoop
					Else
						ContinueLoop
					EndIf
				Else
					ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
					Sleep(1000)
					MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
					Return
				EndIf
			Next
			logit("EN1789")
			logit("IF1799")
			If $userbuyin == "" Then
				fconsolewrite("Userbuyin is empty")
				ContinueLoop
			Else
				ConsoleWrite("UserBuyin: " & $userbuyin & @LF)
			EndIf
			logit("EN1800")
			Local $limit = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 4)
			$limit = StringRegExpReplace($limit, "\s", "")
			Local $newbb
			logit("IF1801")
			$newbb = StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 2)
			logit("EN1802")
			$newbb = StringRegExpReplace($newbb, "\s", "")
			fconsolewrite("New BB Amount: " & $newbb)
			Local $avgpot = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 6)
			$avgpot = StringRegExpReplace($avgpot, "\s", "")
			$avgpot = StringReplace($avgpot, "$", "")
			logit("IF1803")
			If StringInStr($avgpot, "$") Then
				$avgpot = StringTrimLeft($avgpot, 1)
			EndIf
			logit("EN1804")
			logit("IF1806")
			If Number($avgpot) < Number(GUICtrlRead($txtminavgpot)) * Number($newbb) Then
				fconsolewrite("AT: AvgPot is less than Minimum AvgPot entered by user: " & ($avgpot) & " < " & Number(GUICtrlRead($txtminavgpot)) * Number($newbb) & @LF)
				ContinueLoop
			EndIf
			logit("EN1807")
			logit("IF1808")
			If Number($avgpot) > Number(GUICtrlRead($txtmaxavgpot)) * Number($newbb) Then
				fconsolewrite("AT: AvgPot is greater than Maximum AvgPot entered by user: " & ($avgpot) & " > " & Number(GUICtrlRead($txtmaxavgpot)) * Number($newbb) & @LF)
				ContinueLoop
			EndIf
			logit("EN1809")
			Local $plrflop = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 7)
			$plrflop = StringRegExpReplace($plrflop, "\s", "")
			$plrflop = StringReplace($plrflop, "%", "")
			logit("IF1810")
			If Number($plrflop) < Number($userminplrflop) Then
				fconsolewrite("AT: Plyr/Flop is less than Minimum Plyr/Flop entered by user: " & ($plrflop) & " < " & ($userminplrflop) & @LF)
				ContinueLoop
			EndIf
			logit("EN1811")
			logit("IF1812")
			If Number($plrflop) > Number($usermaxplrflop) Then
				fconsolewrite("AT: Plyr/Flop is greater than Maximum Plyr/Flop entered by user: " & ($plrflop) & " > " & ($usermaxplrflop) & @LF)
				ContinueLoop
			EndIf
			logit("EN1813")
			Local $handshour = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 9)
			$handshour = StringRegExpReplace($handshour, "\s", "")
			If StringInStr($handshour, "+") Then
				$handshour = StringReplace($handshour, "+", "")
			EndIf
			logit("IF1814")
			If Number($handshour) < Number($userminhands) Then
				fconsolewrite("AT: Hands/hr is less than Minimum Hands/hr entered by user: " & ($handshour) & " < " & ($userminhands) & @LF)
				ContinueLoop
			EndIf
			logit("EN1815")
			logit("IF1816")
			If Number($handshour) > Number($usermaxhands) Then
				fconsolewrite("AT: Hands/hr is greater than Maximum Hands/hr entered by user: " & ($handshour) & " > " & ($usermaxhands) & @LF)
				ContinueLoop
			EndIf
			logit("EN1817")
			logit("IF1818")
			logit("IF1826")
			If $buyinscrape == $userbuyin Then fconsolewrite("Buyin matches...")
			logit("IF1827")
			Local $searchat = False
			Local $searchsat = False
			Local $chkplr = False
			If _arraysearch($avoidtables, $tablename) == -1 Then
				$searchat = True
			EndIf
			If _arraysearch($satattables, $tablename) == -1 Then
				$searchsat = True
			EndIf
			If checkplayer($players, $seatedplayers) Then
				$chkplr = True
			EndIf
			ConsoleWrite("Checkplayer = true" & @LF)
			Local $maxplayers
			If $buyinscrape == $userbuyin AND $searchat AND $searchsat AND $chkplr Then
				fconsolewrite("AT: Found: " & $tablename)
				Local $winlist = tablelist()
				Local $ntables = $winlist[0][0]
				Local $noldtables = $winlist[0][0]
				ConsoleWrite("AT: Clicking table line to highlight before clicking Go To Table" & @LF)
				_guictrllistview_clickitem($listviewhandle, $line, "left", True, 1)
				Sleep(400)
				logit("IF1828")
				If (GUICtrlRead($chkwaitinglist) == 1) AND ($waitinglistscrape = "" OR $waitinglistscrape <= GUICtrlRead($txtwlml)) AND $seatedplayers == $maxseated Then
					If (GUICtrlRead($ssenable) = $gui_checked OR GUICtrlRead($jenable) = $gui_checked OR GUICtrlRead($aenable) = $gui_checked) Then
						Sleep(4000)
						logit("IF1167")
						If thepawncash(Number($newbb)) = 1 Then
							fconsolewrite("AT: using Waiting List Pawn")
							$maxplayers = 5
							$seatedplayers = $maxplayers
							logit("WH1829")
						EndIf
						WinActivate($hlobby)
						logit("IF1843")
						WinWaitActive($hlobby, "", 2)
						If IsArray($winlobpos) Then MouseMove(860 + $winlobpos[0], 502 + $winlobpos[1], 0)
						MouseDown("left")
						Sleep(300)
						MouseUp("left")
						Sleep(300)
						WinWait("Join wait list", "", 2)
						If WinExists("Leave wait list ?") Then
							checkleavewaitlist($tablename)
							ContinueLoop
						ElseIf WinExists("Join wait list") Then
							checkjoinwaitlist($tablename)
							ContinueLoop
						EndIf
						logit("EN1839")
						$bwaitinglist = False
						Sleep(500)
						logit("IF1840")
					Else
						fconsolewrite("AT: using Waiting List")
						$maxplayers = 5
						$seatedplayers = $maxplayers
						logit("WH1829")
						WinActivate($hlobby)
						WinWaitActive($hlobby, "", 2)
						If IsArray($winlobpos) Then MouseMove(860 + $winlobpos[0], 502 + $winlobpos[1], 0)
						MouseDown("left")
						Sleep(300)
						MouseUp("left")
						Sleep(300)
						WinWait("Join wait list", "", 2)
						If WinExists("Leave wait list ?") Then
							checkleavewaitlist($tablename)
							ContinueLoop
						ElseIf WinExists("Join wait list") Then
							checkjoinwaitlist($tablename)
							ContinueLoop
						EndIf
						logit("WE1838")
					EndIf
				ElseIf $seatedplayers <> $maxseated Then
					If ((GUICtrlRead($ssenable) = $gui_checked OR GUICtrlRead($jenable) = $gui_checked OR GUICtrlRead($aenable) = $gui_checked)) Then
						If thepawncash(Number($newbb)) = 1 Then
							fconsolewrite("AT: Clicking Go To Table Pawn")
							WinActivate($hlobby)
							logit("IF1857")
							If IsArray($winlobpos) Then fmouseclick("left", 862 + $winlobpos[0], 541 + $winlobpos[1], 1, 0)
						EndIf
					Else
						fconsolewrite("AT: Clicking Go To Table 'not full 2'")
						WinActivate($hlobby)
						logit("IF1857")
						If IsArray($winlobpos) Then fmouseclick("left", 862 + $winlobpos[0], 541 + $winlobpos[1], 1, 0)
					EndIf
				Else
					logit("IF1858")
					If GUICtrlRead($chkwaitinglist) == 0 Then
						ConsoleWrite("ACRAT: Waiting list not enabled" & @LF)
					ElseIf $waitinglistscrape <> "" Then
						ConsoleWrite("ACRAT: Waiting list scrape = " & $waitinglistscrape & @LF)
					ElseIf Number($waitinglistscrape) > Number(GUICtrlRead($txtwlml)) Then
						ConsoleWrite("ACRAT: Waiting list scrape: " & $waitinglistscrape & " > " & Number(GUICtrlRead($txtwlml)) & @LF)
					ElseIf $seatedplayers <> $maxseated Then
						ConsoleWrite("ACRAT: $seatedPlayers: " & $seatedplayers & " <> " & $maxseated & @LF)
					EndIf
					logit("EN1859")
					fconsolewrite("AT:  Wanted to join, but either we're not using the waiting list and there's no seats, or we're already on the waiting list")
					ContinueLoop
				EndIf
				logit("EN1860")
				For $z = 0 To 10
					$winlist = tablelist()
					logit("IF1861")
					If IsArray($winlist) Then $ntables = $winlist[0][0]
					If $ntables <> $noldtables Then ExitLoop
					Sleep(1000)
				Next
				logit("IF1862")
				If $ntables == $noldtables Then
					fconsolewrite("AT: Timed out waiting for table to start up - restarting scan")
					logit("IF1863")
					If WinExists($tablename) AND NOT sittingattable($tablename) AND iswindowvisible($tablename) Then
						fconsolewrite("AT: Table still open...  WClose: " & $tablename)
						WinClose($tablename)
					EndIf
					logit("EN1864")
					ExitLoop
				EndIf
				logit("EN1865")
				Local $tableassigned
				$tableassigned = False
				$hactive = -10
				Local $b
				Local $title
				$b = 0
				logit("IF1866")
				If IsArray($winlist) Then
					logit("FO1867")
					For $b = 1 To $winlist[0][0]
						logit("IF1868")
						If _arraysearch($htable, $winlist[$b][1]) == -1 Then
							$title = $winlist[$b][0]
							$title = StringLeft($title, StringInStr($title, "-", 0, 2) - 2)
							fconsolewrite("AT: Spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [OpenHoldemStore.com]"))
							logit("FO1869")
							For $c = 0 To 21
								logit("IF1870")
								If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR $htable[$c] == "") Then
									$htable[$c] = $winlist[$b][1]
									$tableassigned = True
									$hactive = $c
									ConsoleWrite("AT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "" & @LF)
									ExitLoop
								EndIf
								logit("EN1871")
							Next
							logit("NE1872")
							logit("IF1873")
							If $tableassigned Then
								ConsoleWrite("AT: Assigned" & @LF)
							Else
								fconsolewrite("AT: Couldn't find an empty handle. Closing window")
								WinClose($winlist[$b][1])
								closeanyareyousurewindows()
							EndIf
							logit("EN1874")
							ExitLoop
						EndIf
						logit("EN1875")
					Next
					logit("NE1876")
				EndIf
				logit("EN1877")
				logit("IF1878")
				If NOT $tableassigned Then
					fconsolewrite("AT: Table not assigned. Restarting scan for table from the top.")
					ExitLoop
				EndIf
				logit("EN1879")
				$x = IniRead($inifile, "settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
				Local $y
				$y = IniRead($inifile, "settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
				For $z = 0 To 10
					Local $tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
					logit("IF1885")
					If IsArray($tablepos) Then
						If ($tablepos[0] <> $x OR $tablepos[1] <> $y) Then
							fconsolewrite("AT: Moving table " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), "As .*\z", "As [OpenHoldemStore.com]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
							WinActivate(arrayget("FMTS2119z", $htable, $hactive))
							WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 725, 541, 1)
							Sleep(500)
						Else
							fconsolewrite("AT: No need to move table - it's in the right position")
							ExitLoop
						EndIf
						logit("EN1886")
						If ($tablepos[0] == $x AND $tablepos[1] == $y) Then ExitLoop
					EndIf
					Sleep(1000)
				Next
				Local $sittingattable
				Local $sattable = False
				$sittingattable = False
				For $z = 0 To 10
					logit("IF18820")
					If $hactive > 6 Then
						ConsoleWrite("Hactive > 6: " & $hactive & @LF)
						ExitLoop
					EndIf
					If sitattable(arrayget("FMTS2119z", $htable, $hactive), $split[2]) Then
						logit("IF18821")
						$sattable = True
						$sittingattable = True
						ConsoleWrite("$SatTable = true" & @LF)
						ExitLoop
					EndIf
					Sleep(500)
					logit("IF18822")
					$sittingattable = sittingattable(arrayget("FMTS2120z", $htable, $hactive))
					If $sattable OR $sittingattable OR NOT WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
						ConsoleWrite("$SatTable2 = true" & @LF)
						ExitLoop
					EndIf
					Sleep(1000)
				Next
				logit("IF1881")
				If NOT $sittingattable AND NOT $sattable Then
					fconsolewrite("AT: Unable to sit at table")
					logit("IF18823")
					If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
						WinClose(arrayget("FMTS2121z", $htable, $hactive))
						WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
					EndIf
					If arrayget("FMTS2121z", $htable, $hactive) <> -10 Then
						$htable[$hactive] = -10
					EndIf
					closeanyareyousurewindows()
					Return
				Else
					logit("IF18824")
					Local $temptitle = WinGetTitle(arrayget("FMTS2121z", $htable, $hactive))
					Local $titlearr = StringSplit($temptitle, " ")
					logit("IF1882")
					If IsArray($titlearr) Then
						$temptitle = $titlearr[1]
					EndIf
					logit("EN1883")
					$temptitle = StringRegExpReplace($temptitle, "\s", "")
					fconsolewrite("AT: Sitting at table")
				EndIf
				logit("EN1884")
				logit("IF1887")
				If checkwaitinglist() Then
				EndIf
				logit("EN1888")
				ExitLoop
			ElseIf NOT checkplayer($players, $seatedplayers) Then
				fconsolewrite("Player check is false.... continuing loop")
				ContinueLoop
			ElseIf _arraysearch($satattables, $tablename) <> -1 Then
				logit("NE1890")
				ContinueLoop
			ElseIf _arraysearch($avoidtables, $tablename) <> -1 Then
				logit("NE1892")
				ContinueLoop
			EndIf
			logit("EN1893")
		Next
		logit("NE1894")
		logit("EN1895")
	EndFunc

	Func checkalreadyseatedeee()
		logit("FU1896")
		logit("IF1897")
		If WinExists("Member Message") Then
			Local $winlist = WinList("Member Message")
			logit("IF1898")
			If IsArray($winlist) Then
				logit("FO1899")
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF1900")
					If IsArray($winpos) Then
						logit("IF1901")
						If $winpos[2] == 334 AND $winpos[3] == 186 AND BitAND(WinGetState($winlist[$x][1]), 2) == 2 Then
							WinActivate($winlist[$x][1])
							WinWaitActive($winlist[$x][1], "", 2)
							If PixelGetColor($winpos[0] + 67, $winpos[1] + 95, $winlist[$x][1]) == 16777215 Then
								fconsolewrite("CASEEE: Already Seated at table")
								WinClose($winlist[$x][1])
								Return True
							ElseIf PixelGetColor($winpos[0] + 39, $winpos[1] + 95, $winlist[$x][1]) == 16777215 Then
								$waitinglistcount -= 1
								Return True
							EndIf
						ElseIf $winpos[2] == 334 AND $winpos[3] == 202 AND BitAND(WinGetState($winlist[$x][1]), 2) == 2 Then
							fconsolewrite("CASEEE: Seat is already reserved found.. closing now...")
							Sleep(500)
							logit("IF1902")
							If BitAND(WinGetState($winlist[$x][1]), 2) == 2 Then
								WinClose($winlist[$x][1])
							EndIf
							logit("EN1903")
							Return True
						EndIf
						logit("EN1904")
					EndIf
					logit("EN1905")
					Sleep(5)
				Next
				logit("NE1906")
			EndIf
			logit("EN1907")
		EndIf
		logit("EN1908")
		Return False
		logit("EN1909")
	EndFunc

	Func yourinluckwin()
		logit("FU1910")
		logit("IF1911")
		If WinExists("Member Message") Then
			Local $winlist = WinList("Member Message")
			logit("IF1912")
			If IsArray($winlist) Then
				logit("FO1913")
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF1914")
					If IsArray($winpos) Then
						logit("IF1915")
						If $winpos[2] == 383 OR $winpos[2] == 391 AND iswindowvisible($winlist[$x][1]) Then
							WinActivate($winlist[$x][1])
							_winapi_setforegroundwindow($winlist[$x][1])
							WinWaitActive($winlist[$x][1], "", 2)
							Local $wincarpos = WinGetCaretPos()
							If PixelGetColor($wincarpos[0] + 326, $wincarpos[1] + 72, $winlist[$x][1]) == 16777215 Then
								fconsolewrite("YILW: Your in luck window found")
								WinClose($winlist[$x][1])
								Return True
							EndIf
						EndIf
						logit("EN1916")
					EndIf
					logit("EN1917")
					Sleep(5)
				Next
				logit("NE1918")
			EndIf
			logit("EN1919")
		EndIf
		logit("EN1920")
		Return False
		logit("EN1921")
	EndFunc

	Func ratholingwin()
		logit("FU1922")
		logit("IF1923")
		If WinExists("Member Message") Then
			Local $winlist = WinList("Member Message")
			logit("IF1924")
			If IsArray($winlist) Then
				logit("FO1925")
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF1926")
					If IsArray($winpos) Then
						logit("IF1927")
						If $winpos[2] == 334 AND $winpos[3] == 266 AND iswindowvisible($winlist[$x][1]) Then
							fconsolewrite("RHW: Rat Holing window found... closing now...")
							If WinExists($winlist[$x][1]) Then
								If WinExists($winlist[$x][1]) Then
									WinClose($winlist[$x][1])
								EndIf
							EndIf
							Return True
						EndIf
						logit("EN1930")
					EndIf
					logit("EN1931")
					Sleep(5)
				Next
				logit("NE1932")
			EndIf
			logit("EN1933")
		EndIf
		logit("EN1934")
		Return False
		logit("EN1935")
	EndFunc

	Func detectwaitinglistbutton()
		logit("FU1936")
		logit("IF1937")
		Local $winpos = WinGetPos($hlobby)
		Local $addcolor
		If IsArray($winpos) Then
			If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
				WinActivate($hlobby)
				Sleep(1000)
				Local $isjoinvisible = ControlCommand($hlobby, "", "[CLASSNN:AfxWnd8051]", "IsVisible", "")
				Local $isjoinvisible2 = ControlCommand($hlobby, "", "JOIN TABLE", "IsVisible", "")
				logit("IF1938")
				If $isjoinvisible == 1 Then
					fconsolewrite("DWLB: JWB1 Visible")
					Return 0
				ElseIf $isjoinvisible2 == 1 Then
					fconsolewrite("DWLB: JWB2 Visible")
					Return 0
				EndIf
				logit("EN1939")
				Return -1
			ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
				$winpos = WinGetPos($hlobby)
				logit("IF1940")
				If @error Then
					fconsolewrite("DWLB: Stop - no Lobby Handle")
					Exit
				EndIf
				logit("EN1941")
				logit("IF1942")
				If IsArray($winpos) Then
					$addcolor = PixelGetColor(942 + $winpos[0], 607 + $winpos[1], $hlobby)
					logit("IF1943")
					If $addcolor == 0 Then
						Return 0
					EndIf
				EndIf
				logit("EN1944")
				logit("IF1945")
				If IsArray($winpos) Then
					$addcolor = PixelGetColor(931 + $winpos[0], 614 + $winpos[1], $hlobby)
					logit("IF1946")
					If $addcolor == 0 Then
						Return 1
					EndIf
				EndIf
				logit("EN1947")
				Return -1
			Else
				logit("IF1426")
				If GUICtrlRead($cmbsite) == "BNG" Then
					logit("IF1427")
					If (PixelGetColor(690 + $winpos[0], 518 + $winpos[1], $hlobby) == 16777215) OR (PixelGetColor(766 + $winpos[0], 518 + $winpos[1], $hlobby) == 4276545) Then
						Return 1
					ElseIf PixelGetColor(666 + $winpos[0], 518 + $winpos[1], $hlobby) == 16777215 Then
						Return 0
					Else
						fconsolewrite("No waitlist button was found")
						Return -1
					EndIf
					logit("EN1428")
				ElseIf GUICtrlRead($cmbsite) == "Titan" Then
					logit("IF1429")
					If (PixelGetColor(849 + $winpos[0], 498 + $winpos[1], $hlobby) == 16777215) Then
						Return 1
					ElseIf PixelGetColor(822 + $winpos[0], 498 + $winpos[1], $hlobby) == 16777215 Then
						Return 0
					Else
						fconsolewrite("No waitlist button was found")
						Return -1
					EndIf
					logit("EN1430")
				ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
					logit("IF1433")
					If (PixelGetColor(849 + $winpos[0], 498 + $winpos[1], $hlobby) == 16777215) Then
						Return 1
					ElseIf PixelGetColor(822 + $winpos[0], 498 + $winpos[1], $hlobby) == 16777215 Then
						Return 0
					Else
						fconsolewrite("No waitlist button was found")
						Return -1
					EndIf
					logit("EN1434")
				ElseIf GUICtrlRead($cmbsite) == "Bet365" Then
					logit("IF1435")
					If (PixelGetColor(848 + $winpos[0], 497 + $winpos[1], $hlobby) == 16777215) Then
						Return 1
					ElseIf PixelGetColor(822 + $winpos[0], 497 + $winpos[1], $hlobby) == 16777215 Then
						Return 0
					Else
						fconsolewrite("No waitlist button was found")
						Return -1
					EndIf
					logit("EN1436")
				ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
					logit("IF1437")
					If (PixelGetColor(694 + $winpos[0], 496 + $winpos[1], $hlobby) == 14543075) Then
						Return 1
					ElseIf PixelGetColor(659 + $winpos[0], 497 + $winpos[1], $hlobby) == 16777215 Then
						Return 0
					Else
						fconsolewrite("No waitlist button was found")
						Return -1
					EndIf
					logit("EN1438")
				ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
					logit("IF1437")
					If (PixelGetColor(849 + $winpos[0], 498 + $winpos[1], $hlobby) == 2570823) Then
						Return 1
					ElseIf PixelGetColor(822 + $winpos[0], 498 + $winpos[1], $hlobby) == 2570823 Then
						Return 0
					Else
						fconsolewrite("No waitlist button was found")
						Return -1
					EndIf
					logit("EN1438")
				ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
					logit("IF1437")
					If (PixelGetColor(849 + $winpos[0], 498 + $winpos[1], $hlobby) == 14539996) Then
						Return 1
					ElseIf PixelGetColor(822 + $winpos[0], 498 + $winpos[1], $hlobby) == 14539996 Then
						Return 0
					Else
						fconsolewrite("No waitlist button was found")
						Return -1
					EndIf
					logit("EN1438")
				ElseIf GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Betfred" Then
					logit("IF1439")
					If (PixelGetColor(849 + $winpos[0], 498 + $winpos[1], $hlobby) == 16777215) Then
						Return 1
					ElseIf PixelGetColor(822 + $winpos[0], 498 + $winpos[1], $hlobby) == 16777215 Then
						Return 0
					Else
						fconsolewrite("No waitlist button was found")
						Return -1
					EndIf
					logit("EN1440")
				EndIf
			EndIf
		EndIf
		logit("EN1956")
		logit("EN1957")
	EndFunc

	Func addtablebodog()
		logit("FU1958")
		$nam1 = "BD"
		$hlobby = WinGetHandle($lobbyname)
		fconsolewrite("AT: Add Table Begin")
		clearoldavoidtables()
		Local $userminavgpot = ControlGetText($maingui, "", $txtminavgpot)
		Local $usermaxavgpot = ControlGetText($maingui, "", $txtmaxavgpot)
		Local $userminplrflop = ControlGetText($maingui, "", $txtminplrflop)
		Local $usermaxplrflop = ControlGetText($maingui, "", $txtmaxplrflop)
		checkdeadtables()
		logit("IF1959")
		logit("EN1962")
		fconsolewrite("AT: Scanning Lobby:" & StringRegExpReplace(WinGetTitle($hlobby), "As .*\z", "As [OpenHoldemStore]"))
		Sleep(500)
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		_winapi_setforegroundwindow($hlobby)
		WinWaitActive($hlobby, "", 1)
		Local $temppos = WinGetPos($hlobby)
		If $temppos[0] <> 0 OR $temppos[1] <> 0 Then
			WinMove($hlobby, "", 0, 0, Default, Default, 1)
		EndIf
		Local $off = WinGetCaretPos()
		Local $idstart = PixelSearch(227 + $off[0], 229 + $off[1], 999 + $off[0], 229 + $off[1], 16768942, 0, 1, $hlobby)
		If NOT IsArray($idstart) Then Return
		ConsoleWrite("ID Bar start = " & $idstart[0] & ", " & $idstart[1] & @LF)
		Local $idfinish = PixelSearch($idstart[0] + 2, $idstart[1], 999 + $off[0], $idstart[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("ID Bar finish = " & $idfinish[0] & ", " & $idfinish[1] & @LF)
		Local $idx2 = $idfinish[0] - 1
		Local $tablecolumnbar = PixelSearch($idx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($tablecolumnbar) Then Return
		ConsoleWrite("Table Bar start = " & $tablecolumnbar[0] & ", " & $tablecolumnbar[1] & @LF)
		Local $tablepixsearchid = PixelSearch($tablecolumnbar[0] + 2, $tablecolumnbar[1], 999 + $off[0], $tablecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Table Bar finish = " & $tablepixsearchid[0] & ", " & $tablepixsearchid[1] & @LF)
		Local $tablex1 = $tablecolumnbar[0] + 1
		Local $tablex2 = $tablepixsearchid[0] - 1
		Local $gamecolumnbar = PixelSearch($tablex2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($gamecolumnbar) Then Return
		ConsoleWrite("Game Bar start = " & $gamecolumnbar[0] & ", " & $gamecolumnbar[1] & @LF)
		Local $gamepixsearchid = PixelSearch($gamecolumnbar[0] + 2, $gamecolumnbar[1], 999 + $off[0], $gamecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Game Bar finish = " & $gamepixsearchid[0] & ", " & $gamepixsearchid[1] & @LF)
		Local $gamex2 = $gamepixsearchid[0] - 1
		Local $buyincolumnbar = PixelSearch($gamex2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($buyincolumnbar) Then Return
		ConsoleWrite("Buyin Bar start = " & $buyincolumnbar[0] & ", " & $buyincolumnbar[1] & @LF)
		Local $buyinpixsearchid = PixelSearch($buyincolumnbar[0] + 2, $buyincolumnbar[1], 999 + $off[0], $buyincolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Buyin Bar finish = " & $buyinpixsearchid[0] & ", " & $buyinpixsearchid[1] & @LF)
		Local $buyinx1 = $buyincolumnbar[0] + 1
		Local $buyinx2 = $buyinpixsearchid[0] - 1
		Local $limitcolumnbar = PixelSearch($buyinx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($limitcolumnbar) Then Return
		ConsoleWrite("Limit Bar start = " & $limitcolumnbar[0] & ", " & $limitcolumnbar[1] & @LF)
		Local $limitpixsearchid = PixelSearch($limitcolumnbar[0] + 2, $limitcolumnbar[1], 999 + $off[0], $limitcolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Limit Bar finish = " & $limitpixsearchid[0] & ", " & $limitpixsearchid[1] & @LF)
		Local $limitx2 = $limitpixsearchid[0] - 1
		Local $playerscolumnbar = PixelSearch($limitx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($playerscolumnbar) Then Return
		ConsoleWrite("Players Bar start = " & $playerscolumnbar[0] & ", " & $playerscolumnbar[1] & @LF)
		Local $playerspixsearchid = PixelSearch($playerscolumnbar[0] + 2, $playerscolumnbar[1], 999 + $off[0], $playerscolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Players Bar finish = " & $playerspixsearchid[0] & ", " & $playerspixsearchid[1] & @LF)
		Local $playersx1 = $playerscolumnbar[0] - 2
		Local $playersx2 = $playerspixsearchid[0] - 1
		Local $avgpotcolumnbar = PixelSearch($playersx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($avgpotcolumnbar) Then Return
		ConsoleWrite("AvgPot Bar start = " & $avgpotcolumnbar[0] & ", " & $avgpotcolumnbar[1] & @LF)
		Local $avgpotpixsearchid = PixelSearch($avgpotcolumnbar[0] + 2, $avgpotcolumnbar[1], 999 + $off[0], $avgpotcolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("AvgPot Bar finish = " & $avgpotpixsearchid[0] & ", " & $avgpotpixsearchid[1] & @LF)
		Local $avgpotx1 = $avgpotcolumnbar[0] - 2
		Local $avgpotx2 = $avgpotpixsearchid[0] - 1
		Local $plrflopcolumnbar = PixelSearch($avgpotx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($plrflopcolumnbar) Then Return
		ConsoleWrite("Hands Bar start = " & $plrflopcolumnbar[0] & ", " & $plrflopcolumnbar[1] & @LF)
		Local $plrfloppixsearchid = 996
		ConsoleWrite("Hands Bar finish = 996" & @LF)
		Local $plrflopx1 = $plrflopcolumnbar[0] - 2
		Local $plrflopx2 = $plrfloppixsearchid
		Local $pixy = 0
		Local $pixy2 = 0
		Local $range = -0.1
		Local $tablename = ""
		Local $buyin
		Local $players
		logit("IF1963")
		$trn = getplaylinevaluescash()
		logit("IF1964")
		If NOT IsArray($trn) Then
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled")
			Return
		EndIf
		logit("EN1965")
		Local $userbuyin = $trn[2]
		logit("EN1968")
		Local $scantoptables
		logit("IF1969")
		If GUICtrlRead($txtscantop) == 0 OR NOT GUICtrlRead($txtscantop) Then
			$scantoptables = 24
		Else
			$scantoptables = GUICtrlRead($txtscantop)
			fconsolewrite("AT: ScanTopTables = " & $scantoptables)
		EndIf
		logit("EN1970")
		logit("FO1971")
		For $a = 0 To $scantoptables - 1
			logit("IF1974")
			If IsArray($off) Then
				Local $sitting = PixelSearch($off[0] + 235, $off[1] + 251 + (20 * $a), $off[0] + 235, $off[1] + 251 + (20 * $a), 16777045, 3, 1, $hlobby)
				logit("IF1975")
				If IsArray($sitting) Then
					ConsoleWrite("Already seated, checking next table" & @LF)
					Sleep(10)
					ContinueLoop
				EndIf
				logit("EN1976")
			EndIf
			logit("EN1977")
			Local $textcolor = PixelGetColor($off[0] + 417, $off[1] + 253 + (20 * $a), $hlobby)
			Local $pixsearch = False
			If $a = 0 Then
				For $y = 0 To 9
					For $z = 0 To 60
						If PixelGetColor(527 + $off[0] + $z, 243 + $off[1] + $y, $hlobby) <> $textcolor Then
							$pixsearch = True
							$pixy = 243 + ($y - 1)
							$pixy2 = 243 + ($y - 1) + 12
							ExitLoop
						EndIf
					Next
					If $pixsearch = True Then ExitLoop
				Next
			EndIf
			$tablename = _scanstring($tablex1, $pixy + (20 * $a), $tablex2, $pixy2 + (20 * $a), $textcolor, $range, $hlobby)
			$tablename = StringRegExpReplace($tablename, "\s", "")
			ConsoleWrite("TableName = " & $tablename & @LF)
			$buyin = _scanstring($buyinx1, $pixy + (20 * $a), $buyinx2, $pixy2 + (20 * $a), $textcolor, $range, $hlobby)
			logit("IF1978")
			Local $maxbuyin
			If StringInStr($buyin, "Play") Then
				$maxbuyin = StringStripWS(StringMid($buyin, StringInStr($buyin, "/") + 6), 3)
			Else
				$maxbuyin = StringStripWS(StringMid($buyin, StringInStr($buyin, "/") + 2), 3)
			EndIf
			logit("EN1979")
			$buyin = StringRegExpReplace($buyin, "\s", "")
			logit("IF1980")
			If Number($maxbuyin) > Number(GUICtrlRead($txtmaxbuyin)) Then
				ConsoleWrite("Table: " & $tablename & "Max Buyin: " & $maxbuyin & " is greater than user entered: " & GUICtrlRead($txtmaxbuyin) & ", checking next line" & @LF)
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1981")
			ConsoleWrite("Buyin = " & $buyin & @LF)
			$players = _scanstring($playersx1, $pixy + (20 * $a), $playersx2, $pixy2 + (20 * $a), $textcolor, $range, $hlobby)
			$players = StringRegExpReplace($players, "\s", "")
			ConsoleWrite("Players = " & $players & @LF)
			logit("IF1982")
			logit("EN1989")
			logit("IF1990")
			If NOT $userbuyin Then
				Sleep(10)
				ContinueLoop
			Else
				ConsoleWrite("$userbuyin = " & $userbuyin & @LF)
			EndIf
			logit("EN1991")
			logit("IF1992")
			Local $newbuyin
			If StringInStr($userbuyin, "Play") Then
				Local $buy = StringSplit($userbuyin, "/")
				$newbuyin = $buy[2]
				$newbuyin = StringMid($newbuyin, StringInStr($newbuyin, "y") + 1)
			Else
				$newbuyin = StringMid($userbuyin, StringInStr($userbuyin, "/") + 2)
			EndIf
			logit("EN1993")
			logit("IF1994")
			If (StringInStr($newbuyin, " ") > 0) Then
				$newbuyin = StringLeft($newbuyin, StringInStr($newbuyin, " ") - 1)
			EndIf
			logit("EN1995")
			ConsoleWrite("AT $newBuyIn: " & $newbuyin & @LF)
			logit("IF1996")
			If NOT StringInStr($productname, "Lite") Then
				Local $avgpot = _scanstring($avgpotx1, $pixy + (20 * $a), $avgpotx2, $pixy2 + (20 * $a), $textcolor, $range, $hlobby)
				$avgpot = StringRegExpReplace($avgpot, "\s", "")
				logit("IF1997")
				If StringInStr($avgpot, ",") Then
					$avgpot = StringReplace($avgpot, ",", "")
				EndIf
				If $avgpot == "" Then
					$avgpot = 0
				EndIf
				logit("EN1998")
				ConsoleWrite("AvgPot = " & $avgpot & @LF)
				logit("IF1999")
				If StringInStr($avgpot, "Play") Then
					$avgpot = StringMid($avgpot, StringInStr($avgpot, "y") + 1)
				Else
					$avgpot = StringStripWS(StringTrimLeft($avgpot, 1), 8)
				EndIf
				logit("EN2000")
				ConsoleWrite("AvgPot = " & $avgpot & @LF)
				logit("IF2001")
				If Number($avgpot) < Number($userminavgpot) * Number($newbuyin) Then
					ConsoleWrite("Table: " & $tablename & "AT: AvgPot is less than Minimum AvgPot entered by user: " & ($avgpot) & " < " & ($userminavgpot) * Number($newbuyin) & @LF)
					Sleep(10)
					ContinueLoop
				EndIf
				logit("EN2002")
				logit("IF2003")
				If Number($avgpot) > Number($usermaxavgpot) * Number($newbuyin) Then
					ConsoleWrite("Table: " & $tablename & "AT: AvgPot is greater than Maximum AvgPot entered by user: " & ($avgpot) & " > " & ($usermaxavgpot) * Number($newbuyin) & @LF)
					Sleep(10)
					ContinueLoop
				EndIf
				logit("EN2004")
				Local $plrflop = _scanstring($plrflopx1, $pixy + (20 * $a), $plrflopx2, $pixy2 + (20 * $a), $textcolor, $range, $hlobby)
				$plrflop = StringStripWS(StringTrimRight($plrflop, 1), 8)
				$plrflop = StringRegExpReplace($plrflop, "\s", "")
				If $plrflop == "" Then
					$plrflop = 0
				EndIf
				ConsoleWrite("Players/Flop = " & $plrflop & @LF)
				logit("IF2005")
				If Number($plrflop) < Number($userminplrflop) Then
					ConsoleWrite("Table: " & $tablename & "AT: Plyr/Flop is less than Minimum Plyr/Flop entered by user: " & ($plrflop) & " < " & ($userminplrflop) & @LF)
					Sleep(10)
					ContinueLoop
				EndIf
				logit("EN2006")
				logit("IF2007")
				If Number($plrflop) > Number($usermaxplrflop) Then
					ConsoleWrite("Table: " & $tablename & "AT: Plyr/Flop is greater than Maximum Plyr/Flop entered by user: " & ($plrflop) & " > " & ($usermaxplrflop) & @LF)
					Sleep(10)
					ContinueLoop
				EndIf
				logit("EN2008")
			EndIf
			logit("EN2009")
			logit("IF2010")
			If NOT $tablename Then
				fconsolewrite("AT: Nothing scanned, checking next line")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN2011")
			Local $cnt = 0
			logit("FO2012")
			For $d = 0 To UBound($avoidtables) - 1
				logit("IF2013")
				If StringInStr($avoidtables[$d], $tablename) > 0 Then
					ConsoleWrite("Avoiding " & $tablename & @LF)
					$cnt = 1
					ExitLoop
				EndIf
				logit("EN2014")
				Sleep(10)
			Next
			logit("NE2015")
			logit("IF2016")
			If $cnt > 0 Then
				Sleep(10)
				ContinueLoop
			EndIf
			logit("IF2017")
			If $buyin == $userbuyin Then ConsoleWrite("Buyin matches ," & @LF)
			logit("IF2018")
			If $buyin == $userbuyin AND checkplayer($players) AND _arraysearch($avoidtables, $tablename) == -1 Then
				fconsolewrite("AT: Found: " & $tablename)
				WinActivate($hlobby)
				Local $winlist = bodogtablelist()
				Local $ntables = $winlist[0][0]
				Local $noldtables = $winlist[0][0]
				$bwaitinglist = False
				logit("IF2019")
				fconsolewrite("AT: Clicking Go To Table")
				WinSetState($hlobby, "", @SW_RESTORE)
				WinActivate($hlobby)
				_winapi_setforegroundwindow($hlobby)
				WinWaitActive($hlobby, "", 1)
				Opt("MouseClickDownDelay", 50)
				MouseClick("left", $off[0] + 417, (253 + (20 * $a)) + $off[1], 1, 1)
				MouseMove($off[0] + 417, (253 + (20 * $a)) + $off[1], 1)
				Sleep(200)
				MouseDown("left")
				MouseUp("left")
				MouseDown("left")
				MouseUp("left")
				Opt("MouseClickDownDelay", 1000)
				logit("EN2038")
				Sleep(200)
				WinSetOnTop($hlobby, "", 0)
				For $z = 0 To 10
					$winlist = bodogtablelist()
					$ntables = $winlist[0][0]
					Sleep(1000)
					If $ntables <> $noldtables Then ExitLoop
				Next
				logit("IF2039")
				If $ntables == $noldtables Then
					fconsolewrite("AT: Timed out waiting for table to start up - restarting scan")
					ExitLoop
				EndIf
				logit("EN2040")
				Local $tableassigned = False
				$hactive = -10
				Local $b = 0
				logit("FO2041")
				For $b = 1 To $winlist[0][0]
					logit("IF2042")
					If _arraysearch($htable, $winlist[$b][1]) == -1 Then
						fconsolewrite("AT: Spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [OpenHoldemStore]"))
						logit("FO2043")
						For $c = 0 To 18
							logit("IF2044")
							If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
								$htable[$c] = $winlist[$b][1]
								$tableassigned = True
								$hactive = $c
								fconsolewrite("AT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "")
								ExitLoop
							EndIf
							logit("EN2045")
							Sleep(10)
						Next
						logit("NE2046")
						logit("IF2047")
						If $tableassigned Then
						Else
							fconsolewrite("AT: Couldn't find an empty handle, Closing window")
							WinClose($winlist[$b][1])
							WinWaitClose($winlist[$b][1], "", 2)
						EndIf
						logit("EN2048")
						ExitLoop
					EndIf
					logit("EN2049")
					Sleep(10)
				Next
				logit("NE2050")
				logit("IF2051")
				If NOT $tableassigned Then
					fconsolewrite("AT: Table not assigned, Restarting scan for table from the top")
					ExitLoop
				EndIf
				logit("EN2052")
				Local $x = IniRead($inifile, "settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
				$y = IniRead($inifile, "settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
				Local $sittingattable = False
				For $z = 0 To 10
					Local $tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
					logit("IF2053")
					If IsArray($tablepos) Then
						logit("IF2054")
						If NOT ($tablepos[0] == $x AND $tablepos[1] == $y) Then
							fconsolewrite("AT: Moving table " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), "As .*\z", "As [OpenHoldemStore]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
							WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 808, 644, 1)
							Sleep(500)
						Else
							fconsolewrite("AT: No need to move table - it's in the right position")
							WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
							ExitLoop
						EndIf
						logit("EN2055")
					EndIf
					logit("EN2056")
					If ($tablepos[0] == $x AND $tablepos[1] == $y) Then ExitLoop
					Sleep(1000)
				Next
				WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 1)
				Sleep(1000)
				logit("IF2057")
				Local $sattable = False
				If NOT $bwaitinglist Then
					For $z = 0 To 10
						logit("IF2058")
						If $hactive > 6 Then ExitLoop
						If sitattable(arrayget("FMTS2119z", $htable, $hactive), $trn[3]) Then
							$sattable = True
							$sittingattable = True
							ExitLoop
						EndIf
						Sleep(1000)
						$sittingattable = sittingattable(arrayget("FMTS2119z", $htable, $hactive))
						If $sittingattable OR NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then ExitLoop
					Next
					logit("IF2059")
					If NOT $sittingattable AND NOT $sattable Then
						fconsolewrite("AT: Unable to sit at table")
						If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
							WinClose(arrayget("FMTS2121z", $htable, $hactive))
							WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
						EndIf
						ExitLoop
					Else
						Local $title = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
						Local $newtitle
						$newtitle = StringMid($title, StringInStr($title, "-") + 2)
						$newtitle = StringRegExpReplace($newtitle, "\s", "")
						$counthops += 1
						tablesseated($newtitle)
						$timetable[$hactive] = _timer_init()
					EndIf
					logit("EN2060")
				EndIf
				logit("EN2061")
				WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
				logit("IF2066")
				logit("IF2081")
				If $nohidebot == 0 Then hidebot(arrayget("FMTS2119z", $hoh, $hactive))
				$tslastlaunch = _timer_init()
				Sleep(500)
				$winpos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
				logit("IF2082")
				If IsArray($winpos) AND WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)) <> "" AND $autopost == 1 Then
					logit("IF2083")
					If PixelGetColor($winpos[0] + 646, $winpos[1] + 466, arrayget("FMTS2119z", $htable, $hactive)) <> 789516 Then
						MouseMove($winpos[0] + 646, $winpos[1] + 464, 1)
						MouseDown("left")
						Sleep(300)
						MouseUp("left")
					EndIf
					logit("EN2084")
				EndIf
				logit("EN2085")
				logit("IF2086")
				If IsArray($winpos) AND WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)) <> "" Then
					MouseClick("left", $winpos[0] + 43, $winpos[1] + 463, 1, 0)
				EndIf
				logit("EN2087")
				logit("EN2092")
				Return
			ElseIf NOT checkplayer($players) Then
				fconsolewrite("Check Players = False")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN2093")
			Sleep(10)
		Next
		logit("NE2094")
		logit("EN2095")
	EndFunc

	Func checkgetchipsparty()
		WinWait("Buy-in", "", 2)
		If WinExists("Buy-in") AND iswindowvisible("Buy-in") Then
			ConsoleWrite("CGC: Activate" & @LF)
			WinActivate("Buy-in")
			WinWaitActive("Buy-in", "", 2)
			ControlClick("Buy-in", "", "OK", "left", 1)
		EndIf
	EndFunc

	Func checkxtrasisalwin()
		logit("FU1380")
		logit("IF1381")
		ConsoleWrite("CXSW" & @LF)
		If GUICtrlRead($cmbsite) == "Sisal" Then
			Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
			logit("IF1382")
			If IsArray($winlist) Then
				logit("FO1383")
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF1384")
					If IsArray($winpos) Then
						logit("IF1385")
						logit("EN1394")
					EndIf
					logit("EN1395")
				Next
				logit("NE1396")
			EndIf
			logit("EN1397")
			ConsoleWrite("CXRW: End" & @LF)
		EndIf
		ConsoleWrite("CXSW21" & @LF)
		ConsoleWrite("CXSW22" & @LF)
		logit("EN1398")
		logit("EN1399")
	EndFunc

	Func closewaitlisterrorwin()
		logit("FU2171")
		ConsoleWrite("CWLEW" & @LF)
		logit("IF2172")
		Local $title = ""
		If GUICtrlRead($cmbsite) == "WillHill" Then
			$title = "William Hill"
		ElseIf GUICtrlRead($cmbsite) == "Titan" Then
			$title = "Titan"
		ElseIf GUICtrlRead($cmbsite) == "Ladbrokes" Then
			$title = "Ladbrokes"
		ElseIf GUICtrlRead($cmbsite) == "Betfred" Then
			$title = "Betfred"
		ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
			$title = "Betfair"
		ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
			$title = "Sisal"
		ElseIf GUICtrlRead($cmbsite) == "Bet365" Then
			$title = "Bet365"
		ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
			$title = "Paddy"
		ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
			$title = "Netbet"
		ElseIf GUICtrlRead($cmbsite) == "BNG" Then
			$title = "Betngo"
		ElseIf GUICtrlRead($cmbsite) == "Everest" Then
			$title = "Everest"
		EndIf
		If $title <> "" Then
			If WinExists("[REGEXPTITLE:\A" & $title & ".*\z]") Then
			EndIf
		EndIf
		logit("EN2189")
		ConsoleWrite("CWLEW21" & @LF)
		ConsoleWrite("CWLEW22" & @LF)
		Return False
		logit("EN2190")
	EndFunc

	Func addtableipoker()
		logit("FU876")
		Local $lobposx, $lobposy
		Local $atwinlist = tablelist()
		$nam1 = "BNG"
		If IsArray($atwinlist) Then
			If $atwinlist[0][0] >= Number(GUICtrlRead($numbotscmb)) Then
				Return
			EndIf
		EndIf
		If $1stbegad == 0 Then
			handlebegad()
			$1stbegad += 1
		EndIf
		clearoldavoidtables()
		Local $buyinscrape
		$buyinscrape = ""
		Local $noname
		$noname = 0
		Local $tablename = ""
		Local $seated, $entries
		logit("IF877")
		$hlobby = getlobbyhnd()
		logit("EN958")
		movelobby($hlobby)
		Local $lobbypos = WinGetPos($hlobby)
		logit("IF959")
		If NOT IsArray($lobbypos) Then
			fconsolewrite("AT: NOT ARRAY LOBBYPOS")
			Return
		EndIf
		logit("EN960")
		$lobposx = $lobbypos[0]
		$lobposy = $lobbypos[1]
		Sleep(500)
		Local $userminavgpot = GUICtrlRead($txtminavgpot)
		Local $usermaxavgpot = GUICtrlRead($txtmaxavgpot)
		Local $userminplrflop = GUICtrlRead($txtminplrflop)
		Local $usermaxplrflop = GUICtrlRead($txtmaxplrflop)
		Local $userminhands = GUICtrlRead($txtminhands)
		Local $usermaxhands = GUICtrlRead($txtmaxhands)
		Sleep(500)
		Send("{HOME}")
		Local $scantoptables
		logit("IF963")
		If GUICtrlRead($txtscantop) == 0 OR GUICtrlRead($txtscantop) == "" Then
			logit("IF964")
			If GUICtrlRead($chkspeedpoker) == $gui_checked Then
				$scantoptables = 6
			Else
				$scantoptables = 12
			EndIf
			logit("EN965")
		Else
			$scantoptables = GUICtrlRead($txtscantop)
			fconsolewrite("AT: ScanTopTables = " & $scantoptables)
		EndIf
		logit("EN966")
		Local $userbuyin
		logit("IF967")
		logit("EN972")
		logit("FO973")
		For $line = 0 To 20
			fconsolewrite("AT: Scanning Lobby: " & WinGetTitle($hlobby))
			$lobbypos = WinGetPos($hlobby)
			logit("IF974")
			If NOT IsArray($lobbypos) Then
				fconsolewrite("AT: NOT ARRAY LOBBYPOS")
				Return
			EndIf
			logit("EN975")
			$lobposx = $lobbypos[0]
			$lobposy = $lobbypos[1]
			Local $tablelist = tablelist()
			logit("IF976")
			If IsArray($tablelist) Then
				logit("IF977")
				If $tablelist[0][0] >= GUICtrlRead($numbotscmb) Then
					Return
				EndIf
				logit("EN978")
			EndIf
			Sleep(500)
			checknewtablescash()
			logit("IF985")
			logit("EN986")
			logit("IF987")
			If closebeginnerwin() Then
				ConsoleWrite("AT: Close Beginner Window First" & @LF)
				ContinueLoop
			EndIf
			logit("EN988")
			logit("IF989")
			If seatavailable() Then
				checkwaitinglist()
				Return
			EndIf
			Local $textcolor = PixelGetColor($lobbypos[0] + 684, $lobbypos[1] + 270 + (33 * $a), $hlobby)
			logit("EN990")
			logit("EN994")
			logit("IF995")
			$tablename = _scanstringwithoutscreenshot(45, 265 + (33 * $a), 216, 261 + (33 * $a), $textcolor, -0.01, $hlobby)
			ConsoleWrite("Tablename: " & $tablename & @LF)
			$tablename = StringRegExpReplace($tablename, "\s", "")
			logit("EN1036")
			$buyinscrape = _scanstringwithoutscreenshot(278, 265 + (33 * $a), 347, 261 + (33 * $a), $textcolor, -0.01, $hlobby)
			ConsoleWrite("Buyin: " & $buyinscrape & @LF)
			$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
			If StringInStr($buyinscrape, "€") Then $buyinscrape = StringReplace($buyinscrape, "€", "$")
			logit("IF1105")
			If StringInStr($buyinscrape, "£") Then $buyinscrape = StringReplace($buyinscrape, "£", "$")
			logit("IF1106")
			If StringInStr($buyinscrape, ",") Then $buyinscrape = StringReplace($buyinscrape, ",", ".")
			logit("IF1107")
			If GUICtrlRead($chkspeedpoker) == $gui_checked Then
				logit("IF1108")
				If StringInStr($buyinscrape, "$0.02/") OR StringInStr($buyinscrape, "$0.02$0") Then
					$buyinscrape = "$0.02/$0.05"
				ElseIf StringInStr($buyinscrape, "$0.05/") OR StringInStr($buyinscrape, "$0.05$0") Then
					$buyinscrape = "$0.05/$0.10"
				ElseIf StringInStr($buyinscrape, "$0.10/") OR StringInStr($buyinscrape, "$0.10$0") Then
					$buyinscrape = "$0.10/$0.20"
				ElseIf StringInStr($buyinscrape, "$0.25/") OR StringInStr($buyinscrape, "$0.25$0") Then
					$buyinscrape = "$0.25/$0.50"
				ElseIf StringInStr($buyinscrape, "$0.50/") OR StringInStr($buyinscrape, "$0.50$0") Then
					$buyinscrape = "$0.50/$1"
				EndIf
				logit("EN1109")
			EndIf
			Local $maxbuyin
			If StringInStr($buyinscrape, "$") Then
				$maxbuyin = StringStripWS(StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 2), 3)
			Else
				$maxbuyin = StringStripWS(StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 1), 3)
			EndIf
			Local $gametype = _scanstringwithoutscreenshot(355, 265 + (33 * $a), 423, 261 + (33 * $a), $textcolor, -0.01, $hlobby)
			ConsoleWrite("Gametype/limit: " & $gametype & @LF)
			Local $players
			If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
				$players = _scanstringwithoutscreenshot(456, 265 + (33 * $a), 490, 261 + (33 * $a), $textcolor, -0.01, $hlobby)
				ConsoleWrite("Players: " & $players & @LF)
				$seated = StringLeft($players, StringInStr($players, "/") - 1)
				$entries = StringMid($players, StringInStr($players, "/") + 1)
			Else
				$players = 6
				$seated = 5
				$entries = 6
			EndIf
			Local $waitinglistscrape
			Local $avgpot = _scanstringwithoutscreenshot(505, 265 + (33 * $a), 564, 261 + (33 * $a), $textcolor, -0.01, $hlobby)
			ConsoleWrite("AvgPot: " & $avgpot & @LF)
			$avgpot = StringRegExpReplace($avgpot, "\s", "")
			Local $plrflop = _scanstringwithoutscreenshot(582, 265 + (33 * $a), 621, 261 + (33 * $a), $textcolor, -0.01, $hlobby)
			ConsoleWrite("Plr/Flop: " & $plrflop & @LF)
			$plrflop = StringRegExpReplace($plrflop, "\s", "")
			Local $handshour = _scanstringwithoutscreenshot(640, 265 + (33 * $a), 686, 261 + (33 * $a), $textcolor, -0.01, $hlobby)
			ConsoleWrite("Hands/Hr: " & $handshour & @LF)
			$handshour = StringRegExpReplace($handshour, "\s", "")
			logit("IF1037")
			Local $split
			Local $rawtoplay
			$rawtoplay = IniReadSection($inifile, "toplayCash")
			For $x = 1 To UBound($rawtoplay) - 1
				$split = StringSplit($rawtoplay[$x][0], "~")
				If IsArray($split) Then
					If StringInStr($entries, $split[2]) AND StringInStr($buyinscrape, $split[1]) Then
						$userbuyin = $buyinscrape
						ExitLoop
					Else
						ContinueLoop
					EndIf
				Else
					ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
					Sleep(1000)
					MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
					Return
				EndIf
			Next
			If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
				logit("IF1038")
				If $tablename == "" Then
					logit("IF1039")
					If closebeginnerwin() Then
						ContinueLoop
					EndIf
					logit("EN1040")
					logit("IF1041")
					If handleppwindow() Then
						ContinueLoop
					EndIf
					logit("EN1042")
					logit("IF1043")
					If seatavailable() Then
						If checkwaitinglist() Then
						EndIf
						ContinueLoop
					EndIf
					logit("EN1044")
					logit("IF1045")
					logit("EN1046")
					fconsolewrite("AT: Nothing scanned.. checking next line")
					fconsolewrite("AT: LOBBYPOS: " & $lobposx & ", " & $lobposy)
					$noname += 1
					logit("IF1047")
					If $noname >= 10 Then
						fconsolewrite("Not Scanning Lobby Properly... Taking a screenshot now")
						checknewtablescash()
						_screencapture_capture(@ScriptDir & "\screenCapt.jpg")
						$noname = 0
						ExitLoop
					EndIf
					logit("EN1048")
					ContinueLoop
				Else
					fconsolewrite("AT: TableName: " & $tablename)
				EndIf
				logit("EN1051")
			EndIf
			logit("EN1052")
			If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
				If NOT checkplayer($players) Then
					ContinueLoop
				EndIf
			EndIf
			logit("IF1081")
			logit("EN1089")
			logit("EN1120")
			logit("IF1121")
			If $userbuyin <> $buyinscrape Then
				fconsolewrite("BuyinScrape: " & $buyinscrape & " <> " & "$userbuyin " & $userbuyin)
				$biscount += 1
				ContinueLoop
			Else
				$biscount = 0
			EndIf
			logit("EN1122")
			logit("IF1123")
			If $biscount >= 100 Then
				MsgBox(1, "Lobby not reading", "The lobby is not being read correctly... Please refer to the manual and make sure that your columns are matching the ones in the manual.  Also check and make sure you have the correct buyin selected in the hopper. Then press OK")
			EndIf
			logit("EN1124")
			logit("IF1125")
			If Number($maxbuyin) > Number(GUICtrlRead($txtmaxbuyin)) Then
				fconsolewrite("Max Buyin: " & $maxbuyin & " is > user entered: " & GUICtrlRead($txtmaxbuyin) & " ...Closing Table")
				ContinueLoop
			EndIf
			logit("EN1126")
			Local $newbb
			logit("IF1127")
			If StringInStr($buyinscrape, "$") OR StringInStr($buyinscrape, "€") OR StringInStr($buyinscrape, "£") Then
				$newbb = StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 2)
			Else
				$newbb = StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 1)
			EndIf
			logit("EN1128")
			logit("IF1129")
			If (StringInStr($newbb, " ") > 0) Then
				$newbb = StringLeft($newbb, StringInStr($newbb, " ") - 1)
			EndIf
			logit("EN1130")
			logit("IF1131")
			If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
				logit("IF1132")
				If StringInStr($avgpot, "$") Then $avgpot = StringReplace($avgpot, "$", "")
				logit("IF1135")
				If StringInStr($avgpot, "€") Then $avgpot = StringReplace($avgpot, "€", "")
				logit("IF1136")
				If StringInStr($avgpot, "£") Then $avgpot = StringReplace($avgpot, "£", "")
				logit("IF1137")
				If $avgpot == "-" Then $avgpot = 0
				logit("IF1138")
				If Number($avgpot) < Number($userminavgpot) * Number($newbb) Then
					fconsolewrite("AT: AvgPot is less than Minimum AvgPot entered by user: " & ($avgpot) & " < " & ($userminavgpot) * Number($newbb))
					ContinueLoop
				EndIf
				logit("EN1139")
				logit("IF1140")
				If Number($avgpot) > Number($usermaxavgpot) * Number($newbb) Then
					fconsolewrite("AT: AvgPot is greater than Maximum AvgPot entered by user: " & ($avgpot) & " > " & ($usermaxavgpot) * Number($newbb))
					ContinueLoop
				EndIf
				logit("EN1141")
				$plrflop = StringReplace($plrflop, "%", "")
				logit("IF1144")
				If Number($plrflop) < Number($userminplrflop) Then
					fconsolewrite("AT: Plyr/Flop is less than Minimum Plyr/Flop entered by user: " & ($plrflop) & " < " & ($userminplrflop))
					ContinueLoop
				EndIf
				logit("EN1145")
				logit("IF1146")
				If Number($plrflop) > Number($usermaxplrflop) Then
					fconsolewrite("AT: Plyr/Flop is greater than Maximum Plyr/Flop entered by user: " & ($plrflop) & " > " & ($usermaxplrflop))
					ContinueLoop
				EndIf
				logit("EN1147")
				logit("IF1148")
				$handshour = StringRegExpReplace($handshour, "\s", "")
				logit("IF1150")
				If Number($handshour) < Number($userminhands) Then
					fconsolewrite("AT: Hands/hr is less than Minimum Hands/hr entered by user: " & ($handshour) & " < " & ($userminhands))
					ContinueLoop
				EndIf
				logit("EN1151")
				logit("IF1152")
				If Number($handshour) > Number($usermaxhands) Then
					fconsolewrite("AT: Hands/hr is greater than Maximum Hands/hr entered by user: " & ($handshour) & " > " & ($usermaxhands))
					ContinueLoop
				EndIf
				logit("EN1153")
			EndIf
			logit("EN1154")
			logit("IF1155")
			Local $templist = tablelist()
			Local $title
			If ((_arraysearch($avoidtables, $tablename) == -1 AND _arraysearch($satattables, $tablename) == -1 AND (GUICtrlRead($chkspeedpoker) == $gui_unchecked)) OR (GUICtrlRead($chkspeedpoker) == $gui_checked) AND $templist[0][0] < GUICtrlRead($numbotscmb)) Then
				fconsolewrite("AT: Found: " & $tablename)
				logit("IF1156")
				logit("IF1157")
				If StringInStr($tablename, "-") Then
					$title = StringStripWS(StringLeft($tablename, StringInStr($tablename, "-") - 2), 3)
					$title = StringStripWS(StringMid($title, StringInStr($title, ":") + 2), 3)
					$title = StringRegExpReplace($title, "\s", "")
				Else
					$title = StringRegExpReplace($tablename, "\s", "")
				EndIf
				logit("EN1158")
				logit("EN1159")
				WinActivate($hlobby)
				logit("IF1160")
				Local $winlist = WinList("[REGEXPTITLE:\A.*-.*/.*\z]")
				tableresize()
				Local $ntables
				Local $noldtables
				logit("IF1162")
				If IsArray($winlist) AND $winlist[0][0] > 0 Then
					$ntables = $winlist[0][0]
					$noldtables = $winlist[0][0]
				EndIf
				logit("EN1163")
				fconsolewrite("AT: Clicking table line to highlight before clicking Go To Table")
				$bwaitinglist = False
				Local $totplayers
				$templist = tablelist()
				If NOT IsArray($templist) Then
					Sleep(3000)
				EndIf
				If $firstclick == 0 Then
					Sleep(4000)
					$firstclick = 1
				EndIf
				logit("IF1164")
				If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
					$totplayers = StringStripWS(StringMid($players, StringInStr($players, "/") + 1), 3)
					$seated = StringStripWS(StringLeft($players, StringInStr($players, "/") - 1), 3)
					logit("IF1165")
					If $seated == $totplayers Then
						logit("IF1166")
						If GUICtrlRead($chkwaitinglist) == 1 AND detectwaitinglistbutton() == 1 AND (GUICtrlRead($ssenable) = $gui_checked OR GUICtrlRead($jenable) = $gui_checked OR GUICtrlRead($aenable) = $gui_checked) Then
							Sleep(4000)
							logit("IF1167")
							If thepawncash(Number($newbb)) = 1 AND detectwaitinglistbutton() == 1 Then
								fconsolewrite("AT: using Waiting List Pawn")
								logit("IF1168")
								If GUICtrlRead($cmbsite) == "BNG" Then
									WinActivate($hlobby)
									MouseMove($lobposx + 723, $lobposy + 518, 1)
									Sleep(250)
									WinActivate($hlobby)
									MouseDown("left")
									Sleep(300)
									MouseUp("left")
								ElseIf GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Netbet" Then
									WinActivate($hlobby)
									MouseMove($lobposx + 885, $lobposy + 500, 1)
									Sleep(250)
									WinActivate($hlobby)
									MouseDown("left")
									Sleep(300)
									MouseUp("left")
								Else
									WinActivate($hlobby)
									MouseMove($lobposx + 723, $lobposy + 499, 1)
									Sleep(250)
									WinActivate($hlobby)
									MouseDown("left")
									Sleep(300)
									MouseUp("left")
								EndIf
								logit("EN1169")
								Sleep(500)
								logit("IF1170")
								If checkalreadyseatedipoker() Then
									ContinueLoop
								EndIf
								logit("EN1171")
								$winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
								logit("IF1172")
								Local $winpos2
								If $winlist[0][0] > 0 AND IsArray($winlist) Then
									logit("FO1173")
									For $x = 1 To $winlist[0][0]
										$winpos = WinGetPos($winlist[$x][1])
										logit("IF1174")
										If IsArray($winpos) Then
											logit("IF1175")
											If $winpos[2] == 454 AND $winpos[3] == 352 AND iswindowvisible($winlist[$x][1]) Then
												For $z = 0 To 10
													fconsolewrite("AT: Clicking 'Join Waiting List'.")
													WinActivate($winlist[$x][1])
													$winpos2 = WinGetPos($winlist[$x][1])
													logit("IF1176")
													If GUICtrlRead($cmbsite) == "Bet365" Then
														MouseMove($winpos2[0] + 403, $winpos2[1] + 324, 1)
													Else
														MouseMove($winpos2[0] + 316, $winpos2[1] + 324, 1)
													EndIf
													logit("EN1177")
													Sleep(250)
													MouseDown("left")
													Sleep(300)
													MouseUp("left")
													If WinExists($winlist[$x][1]) AND iswindowvisible($winlist[$x][1]) Then
														WinActivate($winlist[$x][1])
														If GUICtrlRead($cmbsite) == "Bet365" Then
															MouseClick("left", $winpos2[0] + 403, $winpos2[1] + 324, 1, 0)
														Else
															MouseClick("left", $winpos2[0] + 316, $winpos2[1] + 324, 1, 0)
														EndIf
													EndIf
													If NOT iswindowvisible($winlist[$x][1]) OR NOT WinExists($winlist[$x][1]) Then ExitLoop
													Sleep(1000)
												Next
												logit("IF1178")
												If WinExists($winlist[$x][1]) AND iswindowvisible($winlist[$x][1]) Then
													logit("IF1179")
													If seatavailable() Then WinClose($winlist[$x][1])
													Return
												EndIf
												logit("EN1180")
												logit("IF1181")
												If handleppwindow() Then
													ContinueLoop
												EndIf
												logit("EN1182")
												logit("IF1183")
												If closebeginnerwin() Then
													Return
												EndIf
												logit("EN1184")
												logit("IF1185")
												If NOT seatavailable() Then
													For $q = 0 To 10
														logit("IF1186")
														If seatavailable() Then
															If checkwaitinglist($tablename) Then
															EndIf
															Return
														EndIf
														logit("EN1187")
														logit("IF1188")
														If closewaitlisterrorwin() Then
															Return
														EndIf
														logit("EN1189")
														logit("IF1190")
														If checkalreadyseatedipoker() Then
															$title = StringRegExpReplace($title, "\s", "")
															fconsolewrite("AT: Already Seated... Pushing " & $title & " to TABSEAT")
															tablesseated($title)
															checknewtablescash()
															Return
														EndIf
														logit("EN1191")
														logit("IF1192")
														If handleppwindow() Then
															ContinueLoop
														EndIf
														logit("EN1193")
														logit("IF1194")
														If closebeginnerwin() Then
															Return
														EndIf
														logit("EN1195")
														If detectwaitinglistbutton() == 0 OR seatavailable() Then ExitLoop
														Sleep(1000)
													Next
												EndIf
												logit("EN1196")
											EndIf
											logit("EN1197")
										EndIf
										logit("EN1198")
									Next
									logit("NE1199")
									logit("IF1200")
									If seatavailable() Then
										If checkwaitinglist($tablename) Then
										EndIf
									EndIf
									logit("IF1201")
									If detectwaitinglistbutton() <> 0 Then
										fconsolewrite("AT:  Waiting List Click was unsuccessful")
										logit("IF1202")
										If handleppwindow() Then
											ContinueLoop
										EndIf
										logit("EN1203")
										logit("IF1204")
										If closebeginnerwin() Then
											ContinueLoop
										EndIf
										logit("EN1205")
										logit("IF1206")
										If seatavailable() Then
											If checkwaitinglist($tablename) Then
											EndIf
										EndIf
										$bwaitinglist = False
										checknewtablescash()
										ContinueLoop
									Else
										$bwaitinglist = True
										$waitinglistcount += 1
										fconsolewrite("AT: Add Successful: " & $waitinglistcount & " waiting lists added")
										$title = StringRegExpReplace($title, "\s", "")
										logit("IF1207")
										If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then updateavoidfulltables($title)
										logit("IF1208")
										If seatavailable() Then
											If checkwaitinglist($tablename) Then
											EndIf
										EndIf
										checknewtablescash()
										Return
									EndIf
									logit("EN1209")
								EndIf
								logit("EN1210")
							Else
								ContinueLoop
							EndIf
							logit("EN1211")
						ElseIf GUICtrlRead($chkwaitinglist) == 1 AND detectwaitinglistbutton() == 1 Then
							fconsolewrite("AT: using Waiting List")
							checknewtablescash()
							logit("IF1212")
							If GUICtrlRead($cmbsite) == "BNG" Then
								WinActivate($hlobby)
								MouseMove($lobposx + 723, $lobposy + 518, 1)
								Sleep(250)
								WinActivate($hlobby)
								MouseDown("left")
								Sleep(300)
								MouseUp("left")
							ElseIf GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Netbet" Then
								WinActivate($hlobby)
								MouseMove($lobposx + 885, $lobposy + 500, 1)
								Sleep(250)
								WinActivate($hlobby)
								MouseDown("left")
								Sleep(300)
								MouseUp("left")
							Else
								WinActivate($hlobby)
								MouseMove($lobposx + 723, $lobposy + 499, 1)
								Sleep(250)
								WinActivate($hlobby)
								MouseDown("left")
								Sleep(300)
								MouseUp("left")
							EndIf
							logit("EN1213")
							Sleep(400)
							logit("IF1214")
							If checkalreadyseatedipoker() Then
								ConsoleWrite("AT: Already Seated" & @LF)
								ContinueLoop
							EndIf
							logit("EN1215")
							$winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
							logit("IF1216")
							If $winlist[0][0] > 0 AND IsArray($winlist) Then
								logit("FO1217")
								For $x = 1 To $winlist[0][0]
									$winpos = WinGetPos($winlist[$x][1])
									logit("IF1218")
									If IsArray($winpos) Then
										logit("IF1219")
										If $winpos[2] == 454 AND $winpos[3] == 352 AND iswindowvisible($winlist[$x][1]) Then
											ConsoleWrite("Found Join Waitlist Window" & @LF)
											For $z = 0 To 10
												WinActivate($winlist[$x][1])
												$winpos2 = WinGetPos($winlist[$x][1])
												logit("IF1220")
												If GUICtrlRead($cmbsite) == "Bet365" Then
													MouseMove($winpos2[0] + 403, $winpos2[1] + 324, 1)
												Else
													MouseMove($winpos2[0] + 316, $winpos2[1] + 324, 1)
												EndIf
												logit("EN1221")
												Sleep(250)
												MouseDown("left")
												Sleep(300)
												MouseUp("left")
												winwaitnotvisible($winlist[$x][1], 2)
												If NOT iswindowvisible($winlist[$x][1]) Then
													ConsoleWrite("AT: Not Visible 1" & @LF)
													ExitLoop
												EndIf
												Sleep(1000)
											Next
											If iswindowvisible($winlist[$x][1]) Then
												ConsoleWrite("AT: Still Visible" & @LF)
												WinClose($winlist[$x][1])
												Return
											EndIf
											logit("IF1222")
											If handleppwindow() Then
												ConsoleWrite("AT: PP Window Visible" & @LF)
												ContinueLoop
											EndIf
											logit("EN1223")
											logit("IF1224")
											If closebeginnerwin() Then
												ConsoleWrite("AT: Beginner Window Visible" & @LF)
												Return
											EndIf
											logit("EN1225")
											logit("IF1226")
											If NOT seatavailable() Then
												For $z = 0 To 10
													logit("IF1227")
													If seatavailable() Then
														If checkwaitinglist($tablename) Then
														EndIf
														ConsoleWrite("AT: Return 1" & @LF)
														Return
													EndIf
													logit("EN1228")
													logit("IF1229")
													If closewaitlisterrorwin() Then
														ConsoleWrite("AT: Return 2" & @LF)
														Return
													EndIf
													logit("EN1230")
													logit("IF1231")
													If checkalreadyseatedipoker() Then
														$title = StringRegExpReplace($title, "\s", "")
														tablesseated($title)
														fconsolewrite("AT: Already Seated... Pushing " & $title & " to TABSEAT")
														checknewtablescash()
														ConsoleWrite("AT: Return 3" & @LF)
														Return
													EndIf
													logit("EN1232")
													logit("IF1233")
													If handleppwindow() Then
														ConsoleWrite("AT: Cont 1" & @LF)
														ContinueLoop
													EndIf
													logit("EN1234")
													logit("IF1235")
													If closebeginnerwin() Then
														ConsoleWrite("AT: Return 4" & @LF)
														Return
													EndIf
													logit("EN1236")
													If detectwaitinglistbutton() == 0 OR seatavailable() Then ExitLoop
													Sleep(1000)
												Next
											Else
												If checkwaitinglist($tablename) Then
												EndIf
												ConsoleWrite("AT: Return 5" & @LF)
												Return
											EndIf
											logit("EN1237")
										EndIf
										logit("EN1238")
									EndIf
									logit("EN1239")
								Next
								logit("NE1240")
								logit("IF1241")
								If seatavailable() Then
									If checkwaitinglist($tablename) Then
									EndIf
									ConsoleWrite("AT: Return 6" & @LF)
									Return
								EndIf
								logit("EN1242")
								logit("IF1243")
								If detectwaitinglistbutton() <> 0 Then
									fconsolewrite("AT:  Waiting List Click was unsuccessful")
									ConsoleWrite("DWL: " & detectwaitinglistbutton() & @LF)
									$bwaitinglist = False
									checknewtablescash()
									ContinueLoop
								Else
									$bwaitinglist = True
									$waitinglistcount += 1
									fconsolewrite("AT: Add Successful: " & $waitinglistcount & " waiting lists added")
									$title = StringRegExpReplace($title, "\s", "")
									logit("IF1244")
									logit("IF1245")
									If seatavailable() Then
										If checkwaitinglist($tablename) Then
										EndIf
										Return
									EndIf
									logit("EN1246")
									Return
								EndIf
								logit("EN1247")
							EndIf
							logit("EN1248")
						Else
							fconsolewrite("Already on the waiting list for: " & $tablename)
							logit("IF1249")
							If detectwaitinglistbutton() == 0 Then
								ConsoleWrite("DTW = 0" & @LF)
							EndIf
							logit("EN1250")
							ContinueLoop
						EndIf
						logit("EN1251")
					EndIf
					logit("EN1252")
				EndIf
				logit("EN1253")
				logit("IF1254")
				If ((GUICtrlRead($ssenable) = $gui_checked OR GUICtrlRead($jenable) = $gui_checked OR GUICtrlRead($aenable) = $gui_checked) AND (Number($waitinglistscrape) == 0)) OR GUICtrlRead($chkspeedpoker) == $gui_checked Then
					logit("IF1255")
					If thepawncash($newbb) = 1 Then
						fconsolewrite("AT: The Pawn")
						WinActivate($hlobby)
						WinWaitActive($hlobby, "", 3)
						checknewtablescash()
						logit("IF1256")
						If GUICtrlRead($cmbsite) == "BNG" Then
							fmouseclick("left", 719 + $lobposx, 488 + $lobposy, 1, 0)
						ElseIf GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Netbet" Then
							logit("IF1257")
							If GUICtrlRead($chkspeedpoker) == $gui_checked Then
								fmouseclick("left", 883 + $lobposx, 495 + $lobposy, 1, 0)
							Else
								fmouseclick("left", 883 + $lobposx, 462 + $lobposy, 1, 0)
							EndIf
							logit("EN1258")
						Else
							fmouseclick("left", 719 + $lobposx, 467 + $lobposy, 1, 0)
						EndIf
						logit("EN1259")
						logit("IF1260")
						If checkalreadyseatedipoker() Then
							ContinueLoop
						EndIf
						logit("EN1261")
					Else
						fconsolewrite("AT: Not Pawn")
						ContinueLoop
					EndIf
					logit("EN1262")
				ElseIf (($waitinglistscrape == "" OR Number($waitinglistscrape) == 0) AND ($entries <> $seated)) OR GUICtrlRead($chkspeedpoker) == $gui_checked Then
					fconsolewrite("AT: No Pawn")
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 3)
					checknewtablescash()
					logit("IF1263")
					If GUICtrlRead($cmbsite) == "BNG" Then
						fmouseclick("left", 888 + $lobposx, 496 + $lobposy, 1, 0)
					ElseIf GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Netbet" Then
						logit("IF1264")
						If GUICtrlRead($chkspeedpoker) == $gui_checked Then
							fmouseclick("left", 883 + $lobposx, 495 + $lobposy, 1, 0)
						Else
							fmouseclick("left", 883 + $lobposx, 462 + $lobposy, 1, 0)
						EndIf
						logit("EN1265")
					Else
						fmouseclick("left", 719 + $lobposx, 467 + $lobposy, 1, 0)
					EndIf
					logit("EN1266")
					logit("IF1267")
					If checkalreadyseatedipoker() Then
						ContinueLoop
					EndIf
					logit("EN1268")
				Else
					logit("IF1269")
					If $waitinglistscrape == "" Then
						fconsolewrite("WaitingList Scrape is empty")
						ContinueLoop
					ElseIf Number($waitinglistscrape) == 0 Then
						fconsolewrite("WaitingList Scrape is 0")
						ContinueLoop
					Else
						fconsolewrite("Seats are full")
						ContinueLoop
					EndIf
					logit("EN1270")
				EndIf
				logit("EN1271")
				Sleep(2000)
				For $z = 0 To 10
					$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*\z]")
					tableresize()
					logit("IF1274")
					If IsArray($winlist) AND $winlist[0][0] > 0 Then
						$ntables = $winlist[0][0]
					EndIf
					logit("EN1275")
					If $ntables <> $noldtables Then ExitLoop
					Sleep(1000)
				Next
				logit("IF1276")
				If $ntables == $noldtables Then
					fconsolewrite("AT: Timed out waiting for table to start up - restarting scan")
					logit("IF1277")
					If handleppwindow() Then
						ContinueLoop
					EndIf
					logit("EN1278")
					logit("IF1279")
					If closebeginnerwin() Then
						ContinueLoop
					EndIf
					logit("EN1280")
					logit("IF1281")
					If WinExists($tablename) AND $tablename <> "" Then
						Local $tnpos = WinGetPos($tablename)
						logit("IF1282")
						If IsArray($tnpos) AND $tnpos[2] < 900 Then
							fconsolewrite("AT: Table still open...  WClose: " & $tablename)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								checkdeadtablescash()
							Else
								checkdeadtables()
							EndIf
							Sleep(500)
							logit("IF1283")
							If WinExists($tablename) AND $tablename <> "" Then
								WinClose($tablename)
							EndIf
							logit("EN1284")
						EndIf
						logit("EN1285")
					EndIf
					logit("EN1286")
					ExitLoop
				EndIf
				logit("EN1287")
				Local $tableassigned
				$tableassigned = False
				$hactive = -10
				Local $b
				$b = 0
				$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*\z]")
				tableresize()
				logit("IF1290")
				If IsArray($winlist) AND $winlist[0][0] > 0 Then
					logit("FO1291")
					For $b = 1 To $winlist[0][0]
						fconsolewrite("Table Count = " & $winlist[0][0])
						logit("IF1292")
						If _arraysearch($htable, $winlist[$b][1]) == -1 Then
							$title = $winlist[$b][0]
							logit("IF1293")
							If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
								logit("IF1294")
								If StringInStr($title, "-") Then
									$title = StringStripWS(StringLeft($title, StringInStr($title, "-") - 2), 3)
									$title = StringStripWS(StringMid($title, StringInStr($title, ":") + 2), 3)
									Local $maxsafety = StringStripWS(StringMid($title, StringInStr($title, "/") + 1), 3)
									$maxsafety = StringReplace($maxsafety, "$", "")
									$title = StringRegExpReplace($title, "\s", "")
								Else
									$title = StringRegExpReplace($title, "\s", "")
								EndIf
								logit("EN1295")
								logit("IF1296")
								If Number($maxsafety) > GUICtrlRead($txtmaxbuyin) Then
									fconsolewrite("Closing table: " & $title & "... table stakes: " & $maxsafety & " > user maxbuyin stake: " & GUICtrlRead($txtmaxbuyin))
									WinClose($winlist[$b][1])
									WinWaitClose($winlist[$b][1], "", 2)
									ContinueLoop
								EndIf
								logit("EN1297")
							EndIf
							logit("EN1298")
							$title = StringRegExpReplace($title, "\s", "")
							fconsolewrite("AT: Spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [OpenHoldemStore.com]"))
							logit("FO1299")
							For $c = 0 To 21
								logit("IF1300")
								If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR $htable[$c] == "") Then
									$htable[$c] = $winlist[$b][1]
									$tableassigned = True
									$hactive = $c
									fconsolewrite("AT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "")
									ExitLoop
								EndIf
								logit("EN1301")
							Next
							logit("NE1302")
							logit("IF1303")
							If NOT $tableassigned Then
								fconsolewrite("AT: Couldn't find an empty handle. Closing window")
								WinClose($winlist[$b][1])
							EndIf
							logit("EN1304")
							ExitLoop
						EndIf
						logit("EN1305")
					Next
					logit("NE1306")
					logit("IF1307")
					If NOT $tableassigned Then
						fconsolewrite("Table not assigned. Restarting scan for table from the top.")
						ExitLoop
					EndIf
					logit("EN1308")
				EndIf
				logit("EN1309")
				logit("IF1310")
				If NOT $tableassigned Then
					fconsolewrite("AT: Table not assigned. Restarting scan for table from the top.")
					ExitLoop
				EndIf
				logit("EN1311")
				$tablename = StringRegExpReplace($tablename, "\s", "")
				$x = IniRead($inifile, "settings", "$x" & ($hactive) & "Txt" & GUICtrlRead($cmbsite), 0)
				Local $y = IniRead($inifile, "settings", "$y" & ($hactive) & "Txt" & GUICtrlRead($cmbsite), 0)
				For $z = 0 To 10
					Local $tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
					logit("IF1312")
					If IsArray($tablepos) Then
						logit("IF1313")
						If NOT ($tablepos[0] == $x AND $tablepos[1] == $y) Then
							fconsolewrite("AT: Moving table# " & $hactive & ": " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), " as .*\z", " as [OpenHoldemStore.com]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
							WinActivate(arrayget("FMTS2119z", $htable, $hactive))
							WinWaitActive(arrayget("FMTS2119z", $htable, $hactive), "", 2)
							logit("IF1314")
							If GUICtrlRead($cmbsite) == "Titan" Then
								$tablewidth = 765
								$tableheight = 562
							ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
								$tablewidth = 747
								$tableheight = 562
							EndIf
							logit("EN1315")
							logit("IF1316")
							If $x == 0 AND $y == 0 Then
								$x = 1
								$y = 1
							EndIf
							logit("EN1317")
							If GUICtrlRead($cmbsite) == "Titan" Then
								WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 765, 562, 1)
							Else
								WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 747, 562, 1)
							EndIf
							Sleep(200)
						Else
							fconsolewrite("AT: No need to move table- it's in the right position")
							Sleep(200)
							ExitLoop
						EndIf
						logit("EN1318")
					EndIf
					logit("EN1319")
					If (IsArray($tablepos) AND $tablepos[0] == $x AND $tablepos[1] == $y) Then ExitLoop
					Sleep(1000)
				Next
				logit("IF1320")
				Local $sittingattable
				Local $sattable = False
				$sittingattable = False
				If NOT $bwaitinglist Then
					For $z = 0 To 10
						logit("IF13201")
						If sitattable(arrayget("FMTS2119z", $htable, $hactive), $split[3]) Then
							logit("IF13202")
							$sattable = True
							$sittingattable = True
							ExitLoop
						EndIf
						logit("IF132013")
						$sittingattable = sittingattable(arrayget("FMTS2120z", $htable, $hactive))
						logit("IF132014")
						If $sittingattable OR NOT WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then ExitLoop
						Sleep(1000)
					Next
					logit("IF1321")
					If NOT $sittingattable AND NOT $sattable Then
						logit("IF132015")
						fconsolewrite("AT: Unable to sit at table")
						If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
							WinClose(arrayget("FMTS2121z", $htable, $hactive))
							WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
						EndIf
						If arrayget("FMTS2121z", $htable, $hactive) <> -10 Then
							$htable[$hactive] = -10
						EndIf
						Return
					Else
						Local $tabname = WinGetTitle(arrayget("FMTS2121z", $htable, $hactive))
						logit("IF1322")
						If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
							logit("IF1323")
							If StringInStr($tabname, "-") Then
								$tabname = StringStripWS(StringLeft($tabname, StringInStr($tabname, "-") - 2), 3)
								$tabname = StringStripWS(StringMid($tabname, StringInStr($tabname, ":") + 2), 3)
								$tabname = StringRegExpReplace($tabname, "\s", "")
							Else
								$tabname = StringRegExpReplace($tabname, "\s", "")
							EndIf
							logit("EN1324")
						EndIf
						logit("EN1325")
					EndIf
					logit("EN1326")
				EndIf
				logit("EN1327")
				logit("IF1328")
				If NOT StringInStr($buyinscrape, "$") Then $sittingattable = True
				logit("IF1329")
				If NOT $sittingattable Then
					fconsolewrite("Unable to sit at table")
					WinClose(arrayget("FMTS2119z", $htable, $hactive))
					ExitLoop
				EndIf
				logit("EN1330")
				logit("EN1362")
				logit("IF1363")
				If seatavailable() Then
					If checkwaitinglist($title) Then
					EndIf
				EndIf
				checkxtrasisalwin()
				Return
			ElseIf $templist[0][0] >= GUICtrlRead($numbotscmb) Then
				fconsolewrite("AT: Too many tables open..  Tables Open: " & $templist[0][0] & " / max tables to open: " & GUICtrlRead($numbotscmb))
				Return
			ElseIf _arraysearch($avoidtables, $tablename) > -1 Then
				fconsolewrite("AT: Avoid Tables is false")
				logit("NE1365")
				ContinueLoop
			ElseIf _arraysearch($satattables, $tablename) > -1 Then
				fconsolewrite("AT: Sat at Tables is false")
				ContinueLoop
			Else
				fconsolewrite("AT: Players are false")
				ContinueLoop
			EndIf
			logit("EN1374")
		Next
		logit("NE1378")
		ConsoleWrite("AT: End" & @LF)
		logit("EN1379")
	EndFunc

	Func checktableexists()
		fconsolewrite("CTE: Func Begin")
		Local $list = tablelist()
		Local $newtitle
		If IsArray($list) Then
			For $a = 1 To $list[0][0]
				Local $title = $list[$a][0]
				If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
					$newtitle = StringMid($title, StringInStr($title, "-") + 2)
					$newtitle = StringRegExpReplace($newtitle, "\s", "")
				ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "TruePoker" Then
					If StringInStr($title, "No Limit") Then
						If StringInStr($title, "- -") Then
							$newtitle = StringLeft($title, StringInStr($title, ("- - ") + 2))
						Else
							$newtitle = StringLeft($title, StringInStr($title, "No Limit") - 2)
							$newtitle = StringStripWS($newtitle, 1)
						EndIf
					Else
						If StringInStr($title, "- -") Then
							$newtitle = StringLeft($title, StringInStr($title, ("- - ") + 2))
						Else
							$newtitle = StringLeft($title, StringInStr($title, "Fixed") - 2)
							$newtitle = StringStripWS($newtitle, 1)
						EndIf
					EndIf
					$newtitle = StringRegExpReplace($newtitle, "\s", "")
				ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
					Local $titlearr
					$titlearr = StringSplit($title, " ")
					$newtitle = $titlearr[1]
					$newtitle = StringRegExpReplace($newtitle, "\s", "")
				Else
					$newtitle = StringStripWS(StringLeft($title, StringInStr($title, "-") - 2), 3)
					$newtitle = StringStripWS(StringMid($newtitle, StringInStr($newtitle, ":") + 2), 3)
					$newtitle = StringRegExpReplace($newtitle, "\s", "")
				EndIf
				tablesseated($newtitle)
			Next
		EndIf
		fconsolewrite("CTE: Func End")
	EndFunc

	Func chklobbyalreadyrunning()
		If WinExists("", "is already running.") Then
			Local $hnd = WinGetHandle("", "is already running.")
			Local $pos = WinGetPos($hnd)
			If IsArray($pos) Then
				If $pos[3] == 145 Then
					WinActivate($hnd)
					WinWaitActive($hnd, "", 2)
					MouseClick("left", $pos[0] + 216, $pos[1] + 120, 1, 0)
				EndIf
			EndIf
		EndIf
	EndFunc

	Func seatavailable()
		If GUICtrlRead($cmbsite) == "Carbon" Then
			If WinExists("Seat Available") Then
				Return True
			Else
				Return False
			EndIf
		EndIf
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		Local $xcoor
		Local $ycoor
		Local $sacolor
		If GUICtrlRead($cmbsite) == "WillHill" Then
			$sacolor = 16777215
			$xcoor = 78
			$ycoor = 8
		ElseIf GUICtrlRead($cmbsite) == "Poker770" Then
			$sacolor = 16777215
			$xcoor = 79
			$ycoor = 8
		Else
			$sacolor = 16777215
			$xcoor = 82
			$ycoor = 13
		EndIf
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				If iswindowvisible($winlist[$x][1]) Then
					$winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If $winpos[2] == 402 AND (WinGetState($winlist[$x][1]) == 7 OR WinGetState($winlist[$x][1]) == 15) Then
							WinActivate($winlist[$x][1])
							WinWaitActive($winlist[$x][1], "", 2)
							If PixelGetColor($winpos[0] + $xcoor, $winpos[1] + $ycoor, $winlist[$x][1]) == $sacolor Then
								ConsoleWrite("Seat Available is true" & @LF)
								Return True
							EndIf
						EndIf
					EndIf
				EndIf
				Sleep(10)
			Next
		EndIf
		Return False
	EndFunc

	Func handleppwindow()
		logit("FU2021")
		Local $color
		logit("IF2022")
		If GUICtrlRead($cmbsite) == "Titan" Then
			$color = 0
		Else
			$color = 16777215
		EndIf
		logit("EN2023")
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		logit("IF2024")
		If IsArray($winlist) Then
			logit("FO2025")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF2026")
				If IsArray($winpos) AND $winpos[2] == 402 AND iswindowvisible($winlist[$x][1]) Then
					WinActivate($winlist[$x][1])
					WinWaitActive($winlist[$x][1], "", 2)
					logit("IF2027")
					If (PixelGetColor($winpos[0] + 96, $winpos[1] + 82, $winlist[$x][1]) == $color) AND (PixelGetColor($winpos[0] + 162, $winpos[1] + 81, $winlist[$x][1]) == $color) AND (PixelGetColor($winpos[0] + 240, $winpos[1] + 86, $winlist[$x][1]) == $color) AND (PixelGetColor($winpos[0] + 293, $winpos[1] + 106, $winlist[$x][1]) == $color) AND (PixelGetColor($winpos[0] + 190, $winpos[1] + 143, $winlist[$x][1]) == $color) AND NOT StringInStr(WinGetClassList($winlist[$x][1]), "Shell Embedding") AND NOT StringInStr(WinGetClassList($winlist[$x][1]), "Shell DocObject View") Then
						fconsolewrite("HPP: Password Protected Window found")
						MouseClick("left", $winpos[0] + 239, $winpos[1] + 244, 1, 0)
						Return True
					EndIf
					logit("EN2028")
				EndIf
				logit("EN2029")
			Next
			logit("NE2030")
		EndIf
		logit("EN2031")
		Return False
		logit("EN2032")
	EndFunc

	Func closewarningtablesstillopen()
		logit("FU1470")
		logit("IF1471")
		If WinExists("Warning") AND (WinGetState("Warning") == 7 OR WinGetState("Warning") == 15) Then
			Local $warnwinlist = WinList("Warning")
			logit("IF1472")
			If IsArray($warnwinlist) Then
				logit("FO1473")
				For $s = 1 To $warnwinlist[0][0]
					Local $warnpos = WinGetPos($warnwinlist[$s][1])
					logit("IF1474")
					If IsArray($warnpos) Then
						logit("IF1475")
						If $warnpos[2] == 455 AND $warnpos[3] == 122 AND (WinGetState($warnwinlist[$s][1]) == 7 OR WinGetState($warnwinlist[$s][1]) == 15) Then
							ConsoleWrite("Close Warning window now..." & @LF)
							WinClose($warnwinlist[$s][1])
							ExitLoop
						EndIf
						logit("EN1476")
					EndIf
					logit("EN1477")
				Next
				logit("NE1478")
			EndIf
			logit("EN1479")
		EndIf
		logit("EN1480")
		logit("EN1481")
	EndFunc

	Func sittingattable($handle)
		logit("FU536")
		Local $offset, $text, $cdtarray2, $cdtarray, $cdtcolor2, $cdtcolor, $title
		Local $rv = False
		logit("IF537")
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			logit("IF1364")
			If WinExists($handle) Then
				$offset = WinGetPos($handle)
				logit("IF1365")
				If IsArray($offset) Then
					logit("IF1366")
					If IsArray(PixelSearch(655 + $offset[0], 460 + $offset[1], 655 + $offset[0], 460 + $offset[1], 16645629, 2, 1, $handle)) Then
						$rv = True
					Else
						$rv = False
					EndIf
					logit("EN1367")
				EndIf
				logit("EN1368")
				WinSetOnTop($handle, "", 0)
				Return $rv
			Else
				Return 0
			EndIf
			logit("EN1369")
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			logit("IF1364")
			If WinExists($handle) Then
				$offset = WinGetPos($handle)
				logit("IF1365")
				If IsArray($offset) Then
					logit("IF1366")
					If IsArray(PixelSearch(8 + $offset[0], 249 + $offset[1], 8 + $offset[0], 249 + $offset[1], 12303291, 2, 1, $handle)) Then
						$rv = True
					Else
						$rv = False
					EndIf
					logit("EN1367")
				EndIf
				logit("EN1368")
				WinSetOnTop($handle, "", 0)
				Return $rv
			Else
				Return 0
			EndIf
			logit("EN1369")
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			logit("IF1364")
			If WinExists($handle) Then
				$text = ControlGetText($handle, "", "[ID:9999]")
				If StringInStr($text, "Please take a seat") Then
					$rv = False
				Else
					$rv = True
				EndIf
				logit("EN1368")
				WinSetOnTop($handle, "", 0)
				Return $rv
			Else
				Return 0
			EndIf
			logit("EN1369")
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			logit("IF1370")
			If WinExists($handle) Then
				$offset = WinGetPos($handle)
				logit("IF1371")
				If PixelGetColor(334 + $offset[0], 512 + $offset[1], $handle) <> 0 Then
					If IsArray(PixelSearch(347 + $offset[0], 554 + $offset[1], 382 + $offset[0], 562 + $offset[1], 16777215, 5, 1, $handle)) Then
						$rv = True
					Else
						$rv = False
					EndIf
				Else
					$rv = True
				EndIf
				logit("EN1374")
				WinSetOnTop($handle, "", 0)
				Return $rv
			Else
				Return 0
			EndIf
			logit("EN1375")
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
			logit("IF1370")
			If WinExists($handle) Then
				$offset = WinGetPos($handle)
				If IsArray($offset) Then
					logit("IF539")
					If $offset[2] <> 1008 OR $offset[3] <> 747 Then
						fconsolewrite("SgAT: Table is wrong size - resizing")
						ConsoleWrite("SAT MouseWinMove 1" & @CRLF)
						WinMove($handle, "", Default, Default, 1008, 747, 1)
					EndIf
					logit("EN540")
				EndIf
				logit("IF1371")
				If IsArray($offset) Then
					logit("IF1372")
					If (IsArray(PixelSearch(22 + $offset[0], 595 + $offset[1], 22 + $offset[0], 595 + $offset[1], 8224125, 5, 1, $handle))) Then
						$rv = True
					Else
						$rv = False
					EndIf
					logit("EN1373")
				EndIf
				logit("EN1374")
				WinSetOnTop($handle, "", 0)
				Return $rv
			Else
				Return 0
			EndIf
			logit("EN1375")
		Else
			If WinExists($handle) Then
				$offset = WinGetPos($handle)
				logit("IF538")
				If IsArray($offset) Then
					logit("IF539")
					If $offset[2] <> 486 OR $offset[3] <> 366 Then
						fconsolewrite("SgAT: Table is wrong size - resizing")
						ConsoleWrite("SAT MouseWinMove 1" & @CRLF)
						WinMove($handle, "", Default, Default, 486, 366, 1)
					EndIf
					logit("EN540")
				EndIf
				logit("EN541")
				$title = WinGetTitle($handle)
				$title = StringLeft($title, StringInStr($title, ":") - 1)
				checkgetchips($handle)
				logit("IF542")
				If IsArray($offset) Then
					logit("IF543")
					$cdtcolor = 16777215
					$cdtcolor2 = 8618883
					$cdtarray = PixelSearch($offset[0] + 354, $offset[1] + 351, $offset[0] + 380, $offset[1] + 357, $cdtcolor, 0, 1, $handle)
					$cdtarray2 = PixelSearch($offset[0] + 354, $offset[1] + 351, $offset[0] + 380, $offset[1] + 357, $cdtcolor2, 0, 1, $handle)
					If IsArray($cdtarray) OR IsArray($cdtarray2) Then
						$rv = True
					Else
						fconsolewrite("Not sitting at table: " & WinGetTitle($handle))
						$rv = False
					EndIf
					logit("EN547")
				EndIf
				logit("EN548")
				Sleep(1000)
				Return $rv
			Else
				Return 0
			EndIf
		EndIf
		logit("EN549")
		logit("EN550")
	EndFunc

	Func sitattable($handle, $players = "")
		Local $title = WinGetTitle($handle)
		logit("IF552")
		Local $newtitle
		Local $tabletit, $maxbuyin
		If $players == "" Then
			Local $split
			Local $rawtoplay
			$rawtoplay = IniReadSection($inifile, "toplayCash")
			For $x = 1 To UBound($rawtoplay) - 1
				$split = StringSplit($rawtoplay[$x][0], "~")
				If IsArray($split) Then
					$players = $split[3]
				EndIf
				ExitLoop
			Next
		EndIf
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			If StringInStr($title, "-") Then
				$tabletit = StringMid($title, StringInStr($title, "-") + 2)
				$newtitle = StringRegExpReplace($tabletit, "\s", "")
			Else
				$newtitle = StringRegExpReplace($title, "\s", "")
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			If StringInStr($title, " ") Then
				$tabletit = StringSplit($title, " ")
				If IsArray($tabletit) Then
					$newtitle = $tabletit[1]
					$newtitle = StringRegExpReplace($newtitle, "\s", "")
				Else
					$newtitle = $title
					$newtitle = StringRegExpReplace($newtitle, "\s", "")
				EndIf
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			$newtitle = StringLeft($title, StringInStr($title, "(") - 2)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
			$newtitle = StringLeft($title, StringInStr($title, "-", 0, 2) - 1)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			$newtitle = StringLeft($title, StringInStr($title, "-") - 2)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		Else
			If StringInStr($title, "-") Then
				$tabletit = StringMid($title, StringInStr($title, ":") + 2)
				$tabletit = StringLeft($tabletit, StringInStr($tabletit, "-") - 2)
				$newtitle = StringRegExpReplace($tabletit, "\s", "")
			Else
				$newtitle = StringRegExpReplace($title, "\s", "")
			EndIf
		EndIf
		logit("EN553")
		logit("IF554")
		If NOT WinExists($handle) Then
			fconsolewrite("Window doesn't exit (Sit At Table): " & StringRegExpReplace($title, "As .*\z", "As [OpenHoldemStore.com]"))
			Return 0
		EndIf
		logit("EN555")
		logit("IF556")
		If StringInStr($title, "$") Then
			$maxbuyin = StringStripWS(StringMid($title, StringInStr($title, "/") + 2), 3)
		Else
			$maxbuyin = StringStripWS(StringMid($title, StringInStr($title, "/") + 1), 3)
		EndIf
		logit("EN557")
		$maxbuyin = StringStripWS(StringMid($title, StringInStr($title, "/") + 2), 3)
		logit("IF558")
		If Number($maxbuyin) > Number(GUICtrlRead($txtmaxbuyin)) Then
			fconsolewrite("Max Buyin: " & $maxbuyin & " is > user entered: " & GUICtrlRead($txtmaxbuyin) & " ,Closing Table")
			WinClose($handle)
			Return 0
		EndIf
		logit("EN559")
		logit("IF560")
		If sittingattable($handle) Then
			fconsolewrite("Already sitting at " & StringRegExpReplace($title, "As .*\z", "As [OpenHoldemStore.com]"))
			ConsoleWrite("SAT: End" & @LF)
			$mslastwaitinglist = _timer_init()
			$counthops += 1
			Return 1
		EndIf
		If GUICtrlRead($cmbsite) == "888Poker" Then
			If Number($players) == "10" Then
				fconsolewrite("Take 10 player seat EEE")
				takeseat($handle, $xcoords10maxeee, $xcolors10maxeee)
			ElseIf Number($players) == "9" Then
				fconsolewrite("Take 9 player seat EEE")
				takeseat($handle, $xcoords9maxeee, $xcolors9maxeee)
			ElseIf Number($players) == "6" Then
				fconsolewrite("Take 6 player seat EEE")
				takeseat($handle, $xcoords6maxeee, $xcolors6maxeee)
			ElseIf Number($players) == "2" Then
				fconsolewrite("Take 2 player seat EEE")
				takeseat($handle, $xcoords2maxeee, $xcolors2maxeee)
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			fconsolewrite("Take seat Party")
			takeseatparty($handle)
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			If Number($players) == "9" Then
				fconsolewrite("Take 9 player seat Merge")
				takeseat($handle, $xcoords9maxmerge, $xcolors9maxmerge)
			ElseIf Number($players) == "6" Then
				fconsolewrite("Take 6 player seat Merge")
				takeseat($handle, $xcoords6maxmerge, $xcolors6maxmerge)
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			If Number($players) == "9" Then
				fconsolewrite("Take 9 player seat BD")
				takeseat($handle, $xcoords9maxbodog, $xcolors9maxbodog)
			ElseIf Number($players) == "6" Then
				fconsolewrite("Take 6 player seat BD")
				takeseat($handle, $xcoords6maxbodog, $xcolors6maxbodog)
			ElseIf Number($players) == "2" Then
				fconsolewrite("Take 2 player seat BD")
				takeseat($handle, $xcoords2maxbodog, $xcolors2maxbodog)
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
			If Number($players) == "9" Then
				fconsolewrite("Take 9 player seat ACR")
				takeseat($handle, $xcoords9maxacr, $xcolors9maxacr)
			ElseIf Number($players) == "6" Then
				fconsolewrite("Take 6 player seat ACR")
				takeseat($handle, $xcoords6maxacr, $xcolors6maxacr)
			ElseIf Number($players) == "2" Then
				fconsolewrite("Take 2 player seat ACR")
				takeseat($handle, $xcoords2maxacr, $xcolors2maxacr)
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
			ConsoleWrite("SAT: WH" & @LF)
			$xcolors10max = $whxcolors10max
			$xcolors8max = $whxcolors8max
			$xcolors6max = $whxcolors6max
			$xcolors2max = $whxcolors2max
		EndIf
		If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Poker770" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfair" Then
			If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
				If Number($players) == "10" Then
					ConsoleWrite("TS: 10 Max" & @LF)
					takeseat($handle, $xcoords10maxoh, $xcolors10max)
				ElseIf Number($players) == "9" Then
					ConsoleWrite("TS: 9 Max" & @LF)
					takeseat($handle, $xcoords10maxoh, $xcolors10max)
				ElseIf Number($players) == "6" Then
					ConsoleWrite("TS: 6 Max" & @LF)
					takeseat($handle, $xcoords6maxoh, $xcolors6max)
				EndIf
			EndIf
		EndIf
		logit("EN567")
		Sleep(500)
		logit("IF568")
		If ($handle <> 0 AND $handle <> "" AND $handle <> -10 AND sittingattable($handle)) Then
			fconsolewrite("SAT: Sat down at " & StringRegExpReplace($title, "As .*\z", "As [OpenHoldemStore.com]"))
			Local $winpos = WinGetPos($handle)
			checksitouttabisselected($handle, $winpos)
			Return 1
		ElseIf $handle == 0 Then
			fconsolewrite("TS: handle = 0")
		ElseIf $handle == "" Then
			fconsolewrite("TS: handle = empty")
		ElseIf $handle == -10 Then
			fconsolewrite("TS: handle = -10")
		Else
			fconsolewrite("TS: (Unknown) Unable to sit at " & StringRegExpReplace($title, "As .*\z", "As [OpenHoldemStore.com]"))
			WinClose($handle)
			WinWaitClose($handle, "", 2)
			closeanyareyousurewindows()
			logit("IF861")
			logit("EN864")
			logit("IF865")
			Return 0
		EndIf
		Return 0
		logit("EN569")
		logit("EN570")
	EndFunc

	Func checksitouttabisselected($table = -1, $position = -1)
		WinActivate($table)
		WinWaitActive($table, "", 1)
		If NOT IsArray(PixelSearch($position[0] + 16, $position[1] + 274, $position[0] + 16, $position[1] + 274, 16777215, 2, 1, $table)) Then
			ConsoleWrite("Enabling sitout tab" & @LF)
			MouseClick("left", $position[0] + 16, $position[1] + 274, 1, 0)
		EndIf
	EndFunc

	Func bodogcheckdeadtablealertwin()
		logit("FU1258")
		logit("IF1259")
		If WinExists("Alert") Then
			Local $winlist = WinList("Alert")
			logit("IF1260")
			If IsArray($winlist) Then
				logit("FO1261")
				For $x = 1 To $winlist[0][0]
					logit("IF1262")
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF1263")
					If IsArray($winpos) Then
						logit("IF1264")
						If $winpos[2] == 468 OR $winpos == 227 Then
							WinActivate($winlist[$x][1])
							MouseClick("left", $winpos[0] + 401, $winpos[1] + 203, 1, 0)
							WinWaitClose($winlist[$x][1], "", 2)
							logit("IF1265")
							If WinExists($winlist[$x][1]) Then
								WinKill($winlist[$x][1])
							EndIf
							logit("EN1266")
						EndIf
						logit("EN1267")
					EndIf
					logit("EN1268")
					logit("EN1269")
				Next
				logit("NE1270")
			EndIf
			logit("EN1271")
		EndIf
		logit("EN1272")
		logit("EN1273")
	EndFunc

	Func checkhoptimer()
		logit("FU1131")
		logit("FO1132")
		For $a = 0 To 21
			logit("IF1133")
			If WinExists($htable[$a]) AND $htable[$a] <> "" AND Number($htable[$a]) > -10 AND $timetable[$a] > -10 AND (_timer_diff($timetable[$a]) / 60000) >= Number(GUICtrlRead($timehoptxt)) Then
				logit("IF1134")
				If ($lasttry[$a] == -10 OR _timer_diff($lasttry) > $msbetweencloseattempts) AND NOT havecards($htable[$a]) Then
					fconsolewrite("Time to hop from table " & WinGetTitle($htable[$a]))
					handletopupwins()
					logit("IF1135")
					If NOT havecards($htable[$a]) Then
						Local $xcount = 0
						While $xcount < 10 AND WinExists($htable[$a])
							closetable($htable[$a], $a)
							$xcount += 1
							Sleep(300)
							If NOT WinExists($htable[$a]) Then ExitLoop
						WEnd
						closeanyareyousurewindows()
						$hoh[$a] = -10
						$timetable[$a] = -10
						$lasttry[$a] = -10
					EndIf
					logit("EN1136")
				Else
					ConsoleWrite("Leave table " & $a & " as soon as this hand is over." & @LF)
					$lasttry[$a] = _timer_init()
				EndIf
				logit("EN1137")
			ElseIf WinExists($htable[$a]) AND $htable[$a] <> "" AND Number($htable[$a]) > -10 AND $timetable[$a] > -10 Then
			EndIf
			logit("EN1138")
		Next
		logit("NE1139")
		logit("EN1140")
	EndFunc

	Func handleydnait()
		logit("FU1171")
		Local $winlist = WinList()
		logit("IF1172")
		If IsArray($winlist) Then
			logit("FO1173")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF1174")
				If IsArray($winpos) Then
					logit("IF1175")
					If $winpos[3] == 103 AND WinExists($winlist[$x][1]) AND (WinGetState($winlist[$x][1]) == 7 OR WinGetState($winlist[$x][1]) == 15) Then
						WinClose($winlist[$x][1])
					EndIf
					logit("EN1176")
				EndIf
				logit("EN1177")
			Next
			logit("NE1178")
		EndIf
		logit("EN1179")
		logit("EN1180")
	EndFunc

	Func checkmisseddeadtables()
		logit("FU1181")
		Local $tablelist = WinList($tabletitle)
		logit("IF1182")
		If NOT IsArray($tablelist) Then Return
		logit("FO1183")
		For $a = 0 To UBound($tablelist) - 1
			logit("IF1184")
			If _timer_diff($cmdttimer) < 60000 Then
				Return
			Else
				Local $tabpos = WinGetPos($tablelist[$a][1])
				logit("IF1185")
				If IsArray($tabpos) Then
					logit("IF1186")
					If NOT sittingattable($tablelist[$a][1]) AND $tabpos[2] < 750 AND $tabpos[3] < 550 Then
						WinClose($tablelist[$a][1])
					EndIf
					logit("EN1187")
				EndIf
				logit("EN1188")
				$cmdttimer = _timer_init()
			EndIf
			logit("EN1189")
		Next
		logit("NE1190")
		logit("EN1191")
	EndFunc

	Func closetablecash($hwin, $a = -1)
		logit("FU1081")
		logit("IF1082")
		Local $title = WinGetTitle($hwin)
		Local $newtitle
		Local $titlearr
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$newtitle = StringMid($title, StringInStr($title, "-") + 2)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			$titlearr = StringSplit($title, " ")
			$newtitle = $titlearr[1]
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			$newtitle = StringLeft($title, StringInStr($title, "(") - 2)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			$newtitle = StringLeft($title, StringInStr($title, "-") - 2)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
			$newtitle = StringLeft($title, StringInStr($title, "-", 0, 2) - 1)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		Else
			$newtitle = StringStripWS(StringLeft($title, StringInStr($title, "-") - 2), 3)
			$newtitle = StringStripWS(StringMid($newtitle, StringInStr($newtitle, ":") + 2), 3)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		EndIf
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			logit("IF1083")
			If WinExists($getchipstitlebodog) Then
				WinKill($getchipstitlebodog)
			EndIf
			logit("EN1084")
			logit("WH1085")
			For $y = 0 To 10
				If NOT winvisibleandexists($hwin) Then ExitLoop
				handletopupwins()
				fconsolewrite("Close Table " & StringRegExpReplace($newtitle, "As .*\z", "As [OpenHoldemStore.com]"), $hwin)
				If NOT havecards($hwin) Then
					WinClose($hwin)
					closeanyareyousurewindows()
					WinWaitClose($hwin, "", 1)
				EndIf
				Sleep(1000)
			Next
			logit("WE1088")
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			logit("IF1091")
			If WinExists($hwin) AND $hwin <> 0 AND $hwin <> "" Then
				logit("IF1096")
				If $newtitle <> "" Then
					logit("WH1097")
					For $y = 0 To 10
						fconsolewrite("CT: Close Table " & StringRegExpReplace($newtitle, "As .*\z", "As [OpenHoldemStore.com]"))
						If NOT havecards($hwin) Then
							WinClose($hwin)
							WinWaitClose($hwin, "", 1)
						EndIf
						closeanyareyousurewindows()
						Sleep(1000)
						If NOT WinExists($hwin) AND NOT iswindowvisible($hwin) Then ExitLoop
					Next
					logit("WE1098")
				EndIf
				logit("EN1099")
			EndIf
			logit("EN1110")
		Else
			If WinExists($hwin) AND $hwin <> 0 AND $hwin <> "" Then
				logit("WH741")
				For $y = 0 To 10
					fconsolewrite("WClose Table " & StringRegExpReplace($newtitle, "As .*\z", "As [OpenHoldemStore.com]"))
					WinClose($hwin)
					closeanyareyousurewindows()
					WinWaitClose($hwin, "", 1)
					Sleep(1000)
					If NOT WinExists($hwin) AND NOT iswindowvisible($hwin) Then ExitLoop
				Next
			EndIf
		EndIf
		If NOT WinExists($hwin) Then
			logit("IF744")
			If $a > -1 Then
				$htable[$a] = -10
				$timetable[$a] = -10
				$lasttry[$a] = -10
			EndIf
			logit("EN745")
			Local $arraysearch = farraysearch($satattables, $newtitle, 0, (UBound($satattables) - 1))
			logit("IF746")
			If farraysearch($satattables, $newtitle, 0, (UBound($satattables) - 1)) <> -1 Then
				$satattables[$arraysearch] = ""
				logit("NE750")
			EndIf
			logit("EN751")
			updateavoidtables($newtitle)
			fconsolewrite("Number of hops: " & $counthops & "/" & GUICtrlRead($numhopstxt))
		EndIf
		logit("EN752")
		logit("EN1129")
		Return NOT WinExists($hwin)
		logit("EN1130")
	EndFunc

	Func clearoldavoidtables()
		logit("FU722")
		Local $timestamp
		Local $safename, $newname
		logit("FO723")
		If UBound($avoidtables) > 1 Then
			For $a = 0 To UBound($avoidtables) - 1
				If $avoidtables[$a] == "" Then
					ContinueLoop
				EndIf
				$timestamp = $avoidtables[$a]
				logit("IF724")
				If $avoidtables[$a] == "" AND UBound($avoidtables) > 1 Then
					ContinueLoop
				EndIf
				logit("EN725")
				logit("IF726")
				If StringInStr($timestamp, ",") > 0 Then
					$timestamp = StringMid($timestamp, StringInStr($timestamp, ",") + 1)
					logit("IF728")
					If _timer_diff($timestamp) / 60000 >= GUICtrlRead($txtavoidmins) Then
						If StringInStr($avoidtables[$a], ",") Then
							$newname = StringSplit($avoidtables[$a], ",")
							$safename = $newname[1]
						Else
							$safename = ""
						EndIf
						logit("IF729")
						If StringLen($safename) > 1 Then
							logit("IF730")
							If StringLen($timestamp) > 1 Then
								fconsolewrite("Done avoiding table " & $safename & " " & Int(_timer_diff($timestamp) / 60000) & "mins")
							Else
								fconsolewrite("Done avoiding table " & $safename & " (missing mins)")
							EndIf
							logit("EN731")
						EndIf
						logit("EN732")
						$avoidtables[$a] = ""
						If $avoidtables[$a] == "" AND UBound($avoidtables) > 1 Then
							ContinueLoop
						EndIf
					Else
						If StringInStr($avoidtables[$a], ",") Then
							$newname = StringSplit($avoidtables[$a], ",")
							$safename = $newname[1]
						Else
							$safename = ""
						EndIf
						fconsolewrite("Still avoiding table " & $safename & " " & Int(_timer_diff($timestamp) / 60000) & "mins")
					EndIf
					logit("EN733")
				Else
					ContinueLoop
				EndIf
				logit("EN734")
			Next
		EndIf
		logit("NE735")
		logit("EN736")
	EndFunc

	Func chkavoidtables()
		Local $safename
		If UBound($avoidtables) > 1 Then
			For $a = 0 To UBound($avoidtables) - 1
				If $avoidtables[$a] == "" Then
					ContinueLoop
				EndIf
				Local $timestamp = $avoidtables[$a]
				If $avoidtables[$a] == "" AND UBound($avoidtables) > 1 Then
					ContinueLoop
				EndIf
				If StringInStr($avoidtables[$a], ",") Then
					Local $newname = StringSplit($avoidtables[$a], ",")
					$safename = $newname[1]
				Else
					$safename = ""
				EndIf
				fconsolewrite("Still avoiding table " & $safename & " for " & Number($avoidmins) - Int(_timer_diff($timestamp) / 60000) & " more mins")
			Next
		EndIf
	EndFunc

	Func updateavoidtables($tablename, $scanname = "")
		logit("FU684")
		Local $arraysearch
		logit("IF685")
		If $tablename = "" Then
			fconsolewrite("UAT: Tablename empty... exiting function")
			Return
		EndIf
		$arraysearch = _arraysearch($avoidtables, $tablename, 0, 0, 0, 1)
		logit("IF686")
		If $arraysearch > -1 Then
			Local $temp
			ConsoleWrite("UAT SUBS: " & $arraysearch & @LF)
			$temp = $avoidtables[$arraysearch]
			ConsoleWrite("UAT Temp: " & $temp & @LF)
			For $y = 0 To 10
				Local $commaat = StringInStr($temp, ",")
				logit("IF687")
				If $commaat > 0 Then $temp = StringLeft($temp, $commaat - 1)
				Sleep(500)
				If $commaat == 0 Then ExitLoop
			Next
			$avoidtables[$arraysearch] = $temp & "," & _timer_init()
			logit("NE689")
		Else
			$tablename = $tablename & "," & $scanname & _timer_init()
			Sleep(50)
			logit("IF690")
			If UBound($avoidtables) == 1 AND NOT $avoidtables[0] Then
				fconsolewrite("Pushing tablename: " & $tablename & " to array")
				_arraypush($avoidtables, $tablename)
			Else
				fconsolewrite("Adding tablename: " & $tablename & " to array")
				_arrayadd($avoidtables, $tablename)
				Local $airesult = _arrayfindall($avoidtables, "")
				If UBound($airesult) >= 1 Then
					For $x = 0 To UBound($airesult) - 1
						_arraydelete($avoidtables, $x)
					Next
				EndIf
			EndIf
			logit("EN691")
			Sleep(50)
		EndIf
		logit("EN694")
		logit("EN695")
		Sleep(5)
	EndFunc

	Func addtableparty()
		logit("FU876")
		Local $lobposx, $lobposy
		Local $atwinlist = tablelist()
		If IsArray($atwinlist) Then
			If $atwinlist[0][0] >= Number(GUICtrlRead($numbotscmb)) Then
				Return
			EndIf
		EndIf
		clearoldavoidtables()
		Local $buyinscrape
		$buyinscrape = ""
		Local $noname
		Local $cnt = 0
		$noname = 0
		Local $tablename = ""
		Local $seated, $entries
		logit("IF877")
		$hlobby = WinGetHandle($partylobbyname)
		logit("EN958")
		Local $lobbypos = WinGetPos($hlobby)
		logit("IF959")
		If NOT IsArray($lobbypos) Then
			fconsolewrite("AT: NOT ARRAY LOBBYPOS")
			Return
		EndIf
		logit("EN960")
		$lobposx = $lobbypos[0]
		$lobposy = $lobbypos[1]
		Local $userminhands = GUICtrlRead($txtminhands)
		Local $usermaxhands = GUICtrlRead($txtmaxhands)
		Send("{HOME}")
		Local $scantoptables
		logit("IF963")
		Local $listviewhandle = ControlGetHandle($hlobby, "", "SysListView321")
		Local $count = ControlListView($hlobby, "", "SysListView321", "GetItemCount")
		If GUICtrlRead($txtscantop) == 0 OR NOT GUICtrlRead($txtscantop) Then
			$scantoptables = $count
		Else
			$scantoptables = GUICtrlRead($txtscantop)
			fconsolewrite("AT: ScanTopTables = " & $scantoptables)
		EndIf
		logit("EN966")
		Local $userbuyin
		logit("IF967")
		logit("EN972")
		logit("FO973")
		For $line = 0 To $scantoptables - 1 Step +1
			fconsolewrite("AT: Scanning Lobby: " & WinGetTitle($hlobby))
			$lobbypos = WinGetPos($hlobby)
			logit("IF974")
			If NOT IsArray($lobbypos) Then
				fconsolewrite("AT: NOT ARRAY LOBBYPOS")
				Return
			EndIf
			logit("EN975")
			$lobposx = $lobbypos[0]
			$lobposy = $lobbypos[1]
			Local $tablelist = tablelist()
			logit("IF976")
			If IsArray($tablelist) Then
				logit("IF977")
				If $tablelist[0][0] >= GUICtrlRead($numbotscmb) Then
					Return
				EndIf
				logit("EN978")
			EndIf
			logit("IF989")
			If seatavailable() Then
				checkwaitinglist()
				Return
			EndIf
			logit("EN990")
			logit("EN994")
			logit("IF995")
			$tablename = ControlListView($hlobby, "", "SysListView321", "GetText", $line, 0)
			ConsoleWrite("Tablename: " & $tablename & @LF)
			$tablename = StringRegExpReplace($tablename, "\s", "")
			logit("EN1036")
			If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
				logit("FO1061")
				For $d = 0 To UBound($avoidtables) - 1
					logit("IF1062")
					If StringInStr($avoidtables[$d], $tablename) > 0 Then
						$cnt += 1
						ExitLoop
					EndIf
					logit("EN1063")
					Sleep(10)
				Next
				logit("NE1064")
				logit("IF1065")
				If $cnt >= 1 Then
					fconsolewrite("Avoiding table: " & $tablename & @LF)
					ContinueLoop
				EndIf
				logit("EN1066")
				$cnt = 0
				logit("FO1067")
				For $d = 0 To UBound($satattables) - 1
					logit("IF1068")
					If StringInStr($satattables[$d], $tablename) > 0 Then
						If WinExists($tablename) Then
							$cnt = 1
							ExitLoop
						EndIf
					EndIf
					logit("EN1069")
					Sleep(10)
				Next
				logit("NE1070")
				logit("IF1071")
				If $cnt >= 1 Then
					fconsolewrite("Already sitting at table: " & $tablename & @LF)
					ContinueLoop
				EndIf
			EndIf
			$buyinscrape = ControlListView($hlobby, "", "SysListView321", "GetText", $line, 2)
			ConsoleWrite("Buyin: " & $buyinscrape & @LF)
			$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
			If StringInStr($buyinscrape, "?") Then $buyinscrape = StringReplace($buyinscrape, "?", "$")
			logit("IF1105")
			If StringInStr($buyinscrape, "?") Then $buyinscrape = StringReplace($buyinscrape, "?", "$")
			logit("IF1106")
			If StringInStr($buyinscrape, ",") Then $buyinscrape = StringReplace($buyinscrape, ",", ".")
			logit("IF1107")
			Local $maxbuyin
			If StringInStr($buyinscrape, "$") Then
				$maxbuyin = StringStripWS(StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 2), 3)
			Else
				$maxbuyin = StringStripWS(StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 1), 3)
			EndIf
			Local $players
			$players = ControlListView($hlobby, "", "SysListView321", "GetText", $line, 3)
			ConsoleWrite("Players: " & $players & @LF)
			$seated = StringLeft($players, StringInStr($players, "/") - 1)
			$entries = StringMid($players, StringInStr($players, "/") + 1)
			Local $waitinglistscrape = ControlListView($hlobby, "", "SysListView321", "GetText", $line, 4)
			ConsoleWrite("Waitlist: " & $waitinglistscrape & @LF)
			If Number($waitinglistscrape) > Number(GUICtrlRead($txtwlml)) AND GUICtrlRead($chkwaitinglist) == $gui_checked Then
				fconsolewrite("AT: " & $waitinglistscrape & " players in Waiting List, checking next line")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1078")
			logit("IF1079")
			If GUICtrlRead($chkwaitinglist) == $gui_unchecked AND Number($waitinglistscrape) > 0 AND $waitinglistscrape <> "" Then
				fconsolewrite("AT 2: " & $waitinglistscrape & " players in Waiting List, checking next line")
				Sleep(10)
				ContinueLoop
			EndIf
			Local $handshour = ControlListView($hlobby, "", "SysListView321", "GetText", $line, 5)
			ConsoleWrite("Hands/Hr: " & $handshour & @LF)
			$handshour = StringRegExpReplace($handshour, "\s", "")
			logit("IF1037")
			Local $split
			Local $rawtoplay
			$rawtoplay = IniReadSection($inifile, "toplayCash")
			For $x = 1 To UBound($rawtoplay) - 1
				$split = StringSplit($rawtoplay[$x][0], "~")
				If IsArray($split) Then
					If StringInStr($entries, $split[3]) AND StringInStr($buyinscrape, $split[2]) Then
						$userbuyin = $buyinscrape
						ExitLoop
					Else
						Sleep(10)
						ContinueLoop
					EndIf
				Else
					ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
					MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
					Return
				EndIf
				Sleep(10)
			Next
			If NOT $tablename Then
				logit("IF1043")
				If seatavailable() Then
					If checkwaitinglist() Then
					EndIf
					Sleep(10)
					ContinueLoop
				EndIf
				logit("EN1044")
				fconsolewrite("AT: Nothing scanned, checking next line")
				fconsolewrite("AT: LOBBYPOS: " & $lobposx & ", " & $lobposy)
				$noname += 1
				logit("IF1047")
				If $noname >= 10 Then
					fconsolewrite("Not Scanning Lobby Properly, Taking a screenshot now")
					_screencapture_capture(@ScriptDir & "\screenCapt.jpg")
					$noname = 0
					ExitLoop
				EndIf
				logit("EN1048")
				Sleep(10)
				ContinueLoop
			Else
				fconsolewrite("AT: TableName: " & $tablename)
			EndIf
			logit("EN1051")
			If NOT checkplayer($players) Then
				Sleep(10)
				ContinueLoop
			EndIf
			logit("IF1121")
			If $userbuyin <> $buyinscrape Then
				fconsolewrite("BuyinScrape: " & $buyinscrape & " <> " & "$userbuyin: " & $userbuyin)
				$biscount += 1
				Sleep(10)
				ContinueLoop
			Else
				$biscount = 0
			EndIf
			logit("EN1122")
			logit("IF1123")
			If $biscount >= 100 Then
				MsgBox(1, "Lobby not reading", "The lobby is not being read correctly, Please refer to the manual and make sure that your columns are matching the ones in the manual.  Also check and make sure you have the correct buyin selected in the hopper. Then press OK")
			EndIf
			logit("EN1124")
			logit("IF1125")
			If Number($maxbuyin) > Number(GUICtrlRead($txtmaxbuyin)) Then
				fconsolewrite("Max Buyin: " & $maxbuyin & " is > user entered: " & GUICtrlRead($txtmaxbuyin) & " ,Closing Table")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1126")
			Local $newbb
			logit("IF1127")
			If StringInStr($buyinscrape, "$") OR StringInStr($buyinscrape, "?") OR StringInStr($buyinscrape, "?") Then
				$newbb = StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 2)
			Else
				$newbb = StringMid($buyinscrape, StringInStr($buyinscrape, "/") + 1)
			EndIf
			logit("EN1128")
			logit("IF1129")
			If (StringInStr($newbb, " ") > 0) Then
				$newbb = StringLeft($newbb, StringInStr($newbb, " ") - 1)
			EndIf
			logit("EN1130")
			logit("IF1131")
			$handshour = StringRegExpReplace($handshour, "\s", "")
			logit("IF1150")
			If Number($handshour) < Number($userminhands) Then
				fconsolewrite("AT: Hands/hr is less than Minimum Hands/hr entered by user: " & ($handshour) & " < " & ($userminhands))
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1151")
			logit("IF1152")
			If Number($handshour) > Number($usermaxhands) Then
				fconsolewrite("AT: Hands/hr is greater than Maximum Hands/hr entered by user: " & ($handshour) & " > " & ($usermaxhands))
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1153")
			logit("EN1154")
			logit("IF1155")
			Local $templist = tablelist()
			Local $title
			If (_arraysearch($avoidtables, $tablename) == -1 AND _arraysearch($satattables, $tablename) == -1 AND $templist[0][0] < GUICtrlRead($numbotscmb)) Then
				fconsolewrite("AT: Found: " & $tablename)
				logit("IF1156")
				If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
					logit("IF1157")
					If StringInStr($tablename, "-") Then
						$title = StringStripWS(StringLeft($tablename, StringInStr($tablename, "-") - 2), 3)
						$title = StringRegExpReplace($title, "\s", "")
					Else
						$title = StringRegExpReplace($tablename, "\s", "")
					EndIf
					logit("EN1158")
				EndIf
				logit("EN1159")
				WinActivate($hlobby)
				logit("IF1160")
				Local $winlist = WinList("[REGEXPTITLE:\A.*-/*\z]")
				tableresize()
				Local $ntables
				Local $noldtables
				logit("IF1162")
				If IsArray($winlist) AND $winlist[0][0] > 0 Then
					$ntables = $winlist[0][0]
					$noldtables = $winlist[0][0]
				EndIf
				logit("EN1163")
				WinActivate($hlobby)
				WinWaitActive($hlobby, "", 2)
				fconsolewrite("AT: Clicking table line to highlight before clicking Go To Table")
				_guictrllistview_clickitem($listviewhandle, $line, "left", True, 1)
				$bwaitinglist = False
				Local $totplayers
				$templist = tablelist()
				logit("IF1164")
				$totplayers = StringStripWS(StringMid($players, StringInStr($players, "/") + 1), 3)
				$seated = StringStripWS(StringLeft($players, StringInStr($players, "/") - 1), 3)
				logit("IF1165")
				If $seated == $totplayers Then
					logit("IF1166")
					If GUICtrlRead($chkwaitinglist) == 1 AND detectwaitinglistbutton() == 1 Then
						fconsolewrite("AT: using Waiting List")
						logit("IF1168")
						WinActivate($hlobby)
						MouseClick("left", $lobposx + 770, $lobposy + 611, 1, 0)
						For $z = 0 To 10
							Local $isvisibleleave = ControlCommand($hlobby, "", "[ID:3567]", "IsVisible", "")
							If $isvisibleleave == 1 Then ExitLoop
							Sleep(500)
						Next
						If detectwaitinglistbutton() <> 0 Then
							fconsolewrite("AT:  Waiting List Click was unsuccessful")
							If seatavailable() Then
								If checkwaitinglist($tablename) Then
								EndIf
							EndIf
							$bwaitinglist = False
							Sleep(10)
							ContinueLoop
						Else
							$bwaitinglist = True
							$waitinglistcount += 1
							fconsolewrite("AT: Add Successful: " & $waitinglistcount & " waiting lists added")
							$title = StringRegExpReplace($title, "\s", "")
							logit("IF1207")
							logit("IF1208")
							If seatavailable() Then
								If checkwaitinglist($tablename) Then
								EndIf
							EndIf
							Return
						EndIf
						logit("EN1211")
					Else
						fconsolewrite("Already on the waiting list for: " & $tablename)
						logit("IF1249")
						If detectwaitinglistbutton() == 0 Then
							ConsoleWrite("DTW = 0" & @LF)
						EndIf
						logit("EN1250")
						Sleep(10)
						ContinueLoop
					EndIf
					logit("EN1251")
				EndIf
				logit("EN1252")
				logit("IF1254")
				If ((NOT $waitinglistscrape OR Number($waitinglistscrape) == 0) AND ($entries <> $seated)) Then
					fconsolewrite("AT: No Pawn")
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 3)
					logit("IF1263")
					fmouseclick("left", 925 + $lobposx, 610 + $lobposy, 1, 0)
					logit("EN1266")
				Else
					logit("IF1269")
					If NOT $waitinglistscrape Then
						fconsolewrite("WaitingList Scrape is empty")
						Sleep(10)
						ContinueLoop
					ElseIf Number($waitinglistscrape) == 0 Then
						fconsolewrite("WaitingList Scrape is 0")
						Sleep(10)
						ContinueLoop
					Else
						fconsolewrite("Seats are full")
						Sleep(10)
						ContinueLoop
					EndIf
					logit("EN1270")
				EndIf
				logit("EN1271")
				Sleep(2000)
				Local $counter
				$counter = 0
				Do
					$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*\z]")
					tableresize()
					logit("IF1274")
					If IsArray($winlist) AND $winlist[0][0] > 0 Then
						$ntables = $winlist[0][0]
					EndIf
					logit("EN1275")
					Sleep(100)
					$counter += 1
				Until $ntables <> $noldtables OR $counter > 20
				logit("IF1276")
				If $ntables == $noldtables Then
					fconsolewrite("AT: Timed out waiting for table to start up - restarting scan")
					logit("IF1281")
					If WinExists($tablename) AND $tablename <> "" Then
						Local $tnpos = WinGetPos($tablename)
						logit("IF1282")
						If IsArray($tnpos) AND $tnpos[2] < 900 Then
							fconsolewrite("AT: Table still open,  WClose: " & $tablename)
							checkdeadtables()
							Sleep(500)
							logit("IF1283")
							If WinExists($tablename) AND $tablename <> "" Then
								WinClose($tablename)
							EndIf
							logit("EN1284")
						EndIf
						logit("EN1285")
					EndIf
					logit("EN1286")
					ExitLoop
				EndIf
				logit("EN1287")
				Local $tableassigned
				$tableassigned = False
				$hactive = -10
				Local $b
				$b = 0
				$winlist = tablelist()
				tableresize()
				logit("IF1290")
				If IsArray($winlist) AND $winlist[0][0] > 0 Then
					logit("FO1291")
					For $b = 1 To $winlist[0][0]
						fconsolewrite("Table Count = " & $winlist[0][0])
						logit("IF1292")
						If _arraysearch($htable, $winlist[$b][1]) == -1 Then
							$title = $winlist[$b][0]
							logit("IF1293")
							logit("IF1294")
							If StringInStr($title, "-") Then
								$title = StringStripWS(StringLeft($title, StringInStr($title, "-") - 2), 3)
								Local $maxsafety = StringStripWS(StringMid($title, StringInStr($title, "/") + 1), 3)
								$maxsafety = StringReplace($maxsafety, "$", "")
								$title = StringRegExpReplace($title, "\s", "")
							Else
								$title = StringRegExpReplace($title, "\s", "")
							EndIf
							logit("EN1295")
							logit("IF1296")
							If Number($maxsafety) > GUICtrlRead($txtmaxbuyin) Then
								fconsolewrite("Closing table: " & $title & ", table stakes: " & $maxsafety & " > user maxbuyin stake: " & GUICtrlRead($txtmaxbuyin))
								WinClose($winlist[$b][1])
								WinWaitClose($winlist[$b][1], "", 2)
								Sleep(10)
								ContinueLoop
							EndIf
							logit("EN1297")
							logit("EN1298")
							$title = StringRegExpReplace($title, "\s", "")
							fconsolewrite("AT: Spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [OpenHoldemStore]"))
							logit("FO1299")
							For $c = 0 To 18
								logit("IF1300")
								If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
									$htable[$c] = $winlist[$b][1]
									$tableassigned = True
									$hactive = $c
									fconsolewrite("AT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "")
									ExitLoop
								EndIf
								logit("EN1301")
								Sleep(10)
							Next
							logit("NE1302")
							logit("IF1303")
							If NOT $tableassigned Then
								fconsolewrite("AT: Couldn't find an empty handle, Closing window")
								WinClose($winlist[$b][1])
							EndIf
							logit("EN1304")
							ExitLoop
						EndIf
						logit("EN1305")
						Sleep(10)
					Next
					logit("NE1306")
					logit("IF1307")
					If NOT $tableassigned Then
						fconsolewrite("Table not assigned, Restarting scan for table from the top")
						ExitLoop
					EndIf
					logit("EN1308")
				ElseIf NOT IsArray($winlist) Then
					ConsoleWrite("Not Winlist" & @LF)
				Else
					ConsoleWrite("Winlist < 0" & @LF)
				EndIf
				logit("EN1309")
				logit("IF1310")
				If NOT $tableassigned Then
					fconsolewrite("AT: Table not assigned, Restarting scan for table from the top")
					ExitLoop
				EndIf
				logit("EN1311")
				$tablename = StringRegExpReplace($tablename, "\s", "")
				$counter = 0
				Local $sittingattable = False
				$x = IniRead($inifile, "Settings", "$tbl" & $hactive & "x", 0)
				Local $y = IniRead($inifile, "Settings", "$tbl" & $hactive & "y", 0)
				Do
					$counter += 1
					Local $tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
					logit("IF1312")
					If IsArray($tablepos) Then
						logit("IF1313")
						If NOT ($tablepos[0] == $x AND $tablepos[1] == $y) Then
							fconsolewrite("AT: Moving table# " & $hactive & ": " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), " as .*\z", " as [OpenHoldemStore]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
							logit("IF1314")
							logit("EN1315")
							logit("IF1316")
							If $x == 0 AND $y == 0 Then
								$x = 1
								$y = 1
							EndIf
							logit("EN1317")
							WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, $tablewidth, $tableheight, 1)
							Sleep(200)
						Else
							fconsolewrite("AT: No need to move table- it's in the right position")
							Sleep(200)
							ExitLoop
						EndIf
						logit("EN1318")
					EndIf
					Sleep(100)
					logit("EN1319")
				Until (IsArray($tablepos) AND $tablepos[0] == $x AND $tablepos[1] == $y) OR $counter > 5
				$counter = 0
				logit("IF1320")
				Local $sattable = False
				If NOT $bwaitinglist Then
					For $x = 0 To 10
						If $hactive > 6 Then Return
						If sitattable(arrayget("FMTS2119z", $htable, $hactive), $split[3]) Then
							$sattable = True
							$sittingattable = True
							ExitLoop
						EndIf
						Sleep(10)
						$sittingattable = sittingattable(arrayget("FMTS2119z", $htable, $hactive))
						Sleep(1000)
						If $sattable OR $sittingattable OR NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then ExitLoop
					Next
					logit("IF1881")
					If NOT $sittingattable AND NOT $sattable Then
						fconsolewrite("AT: Unable to sit at table")
						If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
							WinClose(arrayget("FMTS2121z", $htable, $hactive))
							WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
						EndIf
						closeanyareyousurewindows()
						Return
					Else
						$timetable[$hactive] = _timer_init()
						Local $tabname = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
						logit("IF1322")
						If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
							logit("IF1323")
							If StringInStr($tabname, "-") Then
								$tabname = StringStripWS(StringLeft($tabname, StringInStr($tabname, "-") - 2), 3)
								$tabname = StringRegExpReplace($tabname, "\s", "")
							Else
								$tabname = StringRegExpReplace($tabname, "\s", "")
							EndIf
							logit("EN1324")
						EndIf
						tablesseated($tabname)
						logit("EN1325")
					EndIf
					logit("EN1326")
				EndIf
				logit("EN1327")
				logit("IF1328")
				If NOT StringInStr($buyinscrape, "$") Then $sittingattable = True
				logit("IF1329")
				If NOT $sittingattable Then
					fconsolewrite("Unable to sit at table")
					WinClose(arrayget("FMTS2119z", $htable, $hactive))
					ExitLoop
				EndIf
				logit("EN1330")
				$counter = 0
				logit("EN1362")
				logit("IF1363")
				If seatavailable() Then
					If checkwaitinglist($title) Then
					EndIf
				EndIf
				checkxtrasisalwin()
				Return
			ElseIf $templist[0][0] >= GUICtrlRead($numbotscmb) Then
				fconsolewrite("AT: Too many tables open,  Tables Open: " & $templist[0][0] & " / max tables to open: " & GUICtrlRead($numbotscmb))
				Return
			ElseIf _arraysearch($avoidtables, $tablename) > -1 Then
				fconsolewrite("AT: Avoid Tables is false")
				Sleep(10)
				ContinueLoop
			ElseIf _arraysearch($satattables, $tablename) > -1 Then
				fconsolewrite("AT: Sat at Tables is false")
				Local $newtablename = "[REGEXPTITLE:\A.*" & $tablename & ".*\z]"
				logit("IF1366")
				If NOT WinExists($newtablename) Then
					Local $arraysearch = _arraysearch($satattables, $tablename)
					logit("IF1367")
					If _arraysearch($satattables, $tablename) > -1 Then
						fconsolewrite(" {CT: SATATTABLES} ")
						fconsolewrite("CT: Clearing from array: " & $satattables[$arraysearch])
						logit("NE1369")
					EndIf
					logit("EN1370")
				EndIf
				Sleep(10)
				ContinueLoop
			Else
				fconsolewrite("AT: Players are false")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1374")
		Next
		logit("NE1378")
		ConsoleWrite("AT: End" & @LF)
		logit("EN1379")
	EndFunc

	Func tablesseated($tablename)
		fconsolewrite("Func Begin TS")
		logit("FU696")
		logit("IF697")
		If $tablename = "" Then Return
		Local $arraysearch = _arraysearch($satattables, $tablename)
		logit("IF698")
		If $arraysearch == -1 Then
			logit("IF699")
			If UBound($satattables) == 1 AND NOT $satattables[0] Then
				fconsolewrite("Pushing tablename: " & $tablename & " to array")
				_arraypush($satattables, $tablename)
			Else
				If WinExists($tablename) Then
					fconsolewrite("Adding tablename: " & $tablename & " to array")
					_arrayadd($satattables, $tablename)
					Local $airesult = _arrayfindall($satattables, "")
					If UBound($airesult) >= 1 Then
						For $x = 0 To UBound($airesult) - 1
							_arraydelete($satattables, $x)
						Next
					EndIf
				EndIf
			EndIf
			Sleep(50)
		Else
			If NOT WinExists($tablename) Then
				_arraydelete($satattables, $arraysearch)
			EndIf
		EndIf
		fconsolewrite("Func End TS")
		logit("EN703")
		logit("EN704")
	EndFunc

	Func tableswl($tablename)
		logit("FU696")
		logit("IF697")
		If $tablename = "" Then Return
		Local $arraysearch = _arraysearch($wlarray, $tablename)
		logit("IF698")
		If $arraysearch == -1 Then
			logit("IF699")
			If UBound($wlarray) == 1 AND $wlarray[0] == "" Then
				_arraypush($wlarray, $tablename)
			Else
				_arrayadd($wlarray, $tablename)
			EndIf
			logit("EN700")
			logit("NE702")
			Sleep(50)
		EndIf
		logit("EN703")
		logit("EN704")
	EndFunc

	Func havecards($hwnd)
		Local $offset, $found, $xcor1, $ycor1, $xcor2, $ycor2, $xcor3, $ycor3, $hccolor
		logit("FU389")
		logit("IF390")
		If NOT WinExists($hwnd) Then
			Sleep(10)
			Return 0
		EndIf
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			logit("IF936")
			If NOT WinExists($hwnd) Then
				Sleep(10)
				Return 0
			EndIf
			logit("EN937")
			Sleep(10)
			$offset = WinGetPos($hwnd)
			logit("IF938")
			If NOT @error Then
				$found = False
				logit("IF939")
				logit("EN940")
				logit("IF941")
				If PixelGetColor($offset[0] + 447, $offset[1] + 433) == 16645629 Then
					fconsolewrite("Have Cards: " & StringRegExpReplace(WinGetTitle($hwnd), "As .*\z", "As [OpenHoldemStore.com]"))
					WinSetOnTop($hwnd, "", 0)
					Sleep(10)
					Return True
				Else
					WinSetOnTop($hwnd, "", 0)
					Sleep(10)
					Return False
				EndIf
				logit("EN961")
			EndIf
			logit("EN962")
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			logit("IF936")
			If NOT WinExists($hwnd) Then
				Sleep(10)
				Return 0
			EndIf
			logit("EN937")
			Sleep(10)
			$offset = WinGetPos($hwnd)
			logit("IF938")
			If NOT @error Then
				$found = False
				logit("IF939")
				logit("EN940")
				logit("IF941")
				If PixelGetColor($offset[0] + 278, $offset[1] + 27) == 16777215 Then
					fconsolewrite("Have Cards: " & StringRegExpReplace(WinGetTitle($hwnd), "As .*\z", "As [OpenHoldemStore.com]"))
					WinSetOnTop($hwnd, "", 0)
					Sleep(10)
					Return True
				Else
					WinSetOnTop($hwnd, "", 0)
					Sleep(10)
					Return False
				EndIf
				logit("EN961")
			EndIf
			logit("EN962")
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			logit("IF936")
			If NOT WinExists($hwnd) Then
				Sleep(10)
				Return 0
			EndIf
			logit("EN937")
			Sleep(500)
			$offset = WinGetPos($hwnd)
			logit("IF938")
			If NOT @error Then
				$found = False
				logit("IF939")
				logit("EN940")
				logit("IF941")
				If PixelGetColor($offset[0] + 337, $offset[1] + 38) == 16777215 Then
					fconsolewrite("Have Cards: " & StringRegExpReplace(WinGetTitle($hwnd), "As .*\z", "As [OpenHoldemStore.com]"))
					WinSetOnTop($hwnd, "", 0)
					Sleep(10)
					Return True
				Else
					WinSetOnTop($hwnd, "", 0)
					Sleep(10)
					Return False
				EndIf
				logit("EN961")
			EndIf
			logit("EN962")
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			logit("IF963")
			If NOT WinExists($hwnd) Then
				Sleep(10)
				Return 0
			EndIf
			logit("EN964")
			$offset = WinGetPos($hwnd)
			logit("IF965")
			If IsArray($offset) Then
				$found = False
				logit("IF966")
				logit("EN967")
				logit("IF968")
				If GUICtrlRead($numplyrscmb) == "10" OR GUICtrlRead($numplyrscmb) == "9" OR GUICtrlRead($numplyrscmb) == "2" Then
					logit("IF969")
					If PixelGetColor($offset[0] + 276, $offset[1] + 217) == 16777215 Then $found = True
				ElseIf GUICtrlRead($numplyrscmb) == "6" Then
					logit("IF970")
					If PixelGetColor($offset[0] + 388, $offset[1] + 238) == 16777215 Then $found = True
				EndIf
				logit("EN971")
				logit("IF972")
				If $found Then
					fconsolewrite("Have Cards: " & StringRegExpReplace(WinGetTitle($hwnd), "As .*\z", "As [OpenHoldemStore.com]"))
					WinSetOnTop($hwnd, "", 0)
					Sleep(10)
					Return 1
				Else
					WinSetOnTop($hwnd, "", 0)
					Sleep(10)
					Return 0
				EndIf
				logit("EN973")
			EndIf
			logit("EN974")
		Else
			$hccolor = 16777215
			$xcor1 = 320
			$ycor1 = 227
			$xcor2 = 389
			$ycor2 = 229
			$xcor3 = 173
			$ycor3 = 332
			logit("EN391")
			$offset = WinGetPos($hwnd)
			logit("IF392")
			If IsArray($offset) Then
				logit("IF393")
				If $offset[2] <> $tablewidth OR $offset[3] <> $tableheight Then
					fconsolewrite("HC: Table is wrong size - resizing")
					fconsolewrite("HC MouseWinMove 1")
					WinMove($hwnd, "", Default, Default, $tablewidth, $tableheight, 1)
				EndIf
				logit("EN394")
				logit("IF395")
				If GUICtrlRead($numplyrscmb) == "10" OR GUICtrlRead($numplyrscmb) == "8" OR GUICtrlRead($numplyrscmb) == "9" Then
					logit("IF396")
					If PixelGetColor($offset[0] + $xcor1, $offset[1] + $ycor1, $hwnd) == $hccolor Then
						fconsolewrite("Have Cards: " & StringRegExpReplace(WinGetTitle($hwnd), " as .*\z", " as [OpenHoldemStore.com]"))
						Sleep(10)
						Return True
					Else
						Sleep(10)
						Return False
					EndIf
					logit("EN397")
				ElseIf GUICtrlRead($numplyrscmb) == "6" Then
					logit("IF398")
					If PixelGetColor($offset[0] + $xcor2, $offset[1] + $ycor2, $hwnd) == $hccolor Then
						fconsolewrite("Have Cards: " & StringRegExpReplace(WinGetTitle($hwnd), " as .*\z", " as [OpenHoldemStore.com]"))
						Sleep(10)
						Return True
					Else
						Sleep(10)
						Return False
					EndIf
					logit("EN399")
				Else
					logit("IF400")
					If PixelGetColor($offset[0] + $xcor3, $offset[1] + $ycor3, $hwnd) == $hccolor Then
						fconsolewrite("Have Cards: " & StringRegExpReplace(WinGetTitle($hwnd), " as .*\z", " as [OpenHoldemStore.com]"))
						Sleep(10)
						Return 1
					Else
						Sleep(10)
						Return 0
					EndIf
					logit("EN401")
				EndIf
				logit("EN402")
			EndIf
		EndIf
		logit("EN403")
		logit("EN404")
	EndFunc

	Func handlemissedbbwindow()
		logit("FU872")
		Local $alerttitle = "[REGEXPTITLE:\AAlert\z]"
		Local $tablelist = WinList($alerttitle)
		logit("IF873")
		If IsArray($tablelist) Then
			logit("FO874")
			For $a = 1 To $tablelist[0][0]
				Local $alertpos = WinGetPos($tablelist[$a][1])
				WinActivate($tablelist[$a][1])
				logit("IF875")
				If IsArray($alertpos) AND $alertpos[2] == 468 AND $alertpos[3] == 227 Then
					fconsolewrite("Missed BB/Out of Chips window found... closing now")
					MouseClick("left", $alertpos[0] + 397, $alertpos[1] + 201, 1, 0)
					ExitLoop
				EndIf
				logit("EN876")
			Next
			logit("NE877")
		EndIf
		logit("EN878")
		logit("EN879")
	EndFunc

	Func closeanyareyousurewindows()
		Local $alertpos, $alerttitle, $tablelist, $leavehnd, $leavepos
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$alerttitle = "[REGEXPTITLE:\AInfo\z]"
			$tablelist = WinList($alerttitle)
			logit("IF882")
			If IsArray($tablelist) Then
				logit("FO883")
				For $a = 1 To $tablelist[0][0]
					$alertpos = WinGetPos($tablelist[$a][1])
					logit("IF884")
					If IsArray($alertpos) AND $alertpos[2] == 468 AND $alertpos[3] == 227 Then
						logit("IF885")
						WinActivate($tablelist[$a][1])
						fconsolewrite("Are you sure you want to leave window found, closing now")
						MouseClick("left", $alertpos[0] + 285, $alertpos[1] + 201, 1, 0)
						ExitLoop
						logit("EN886")
					EndIf
					logit("EN887")
					Sleep(10)
				Next
				logit("NE888")
			EndIf
			logit("EN889")
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			$alerttitle = "[REGEXPCLASS:\A#32770\z]"
			$tablelist = WinList($alerttitle, "OK")
			If IsArray($tablelist) Then
				logit("FO891")
				For $a = 1 To $tablelist[0][0]
					$alertpos = WinGetPos($tablelist[$a][1])
					WinActivate($tablelist[$a][1])
					logit("IF892")
					If IsArray($alertpos) AND $alertpos[2] == 303 AND $alertpos[3] == 132 AND (WinGetState($tablelist[$a][1]) == 7 OR WinGetState($tablelist[$a][1]) == 15) Then
						MouseClick("left", $alertpos[0] + 175, $alertpos[1] + 106, 1, 0)
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			$alerttitle = "[REGEXPTITLE:\AMember Message\z]"
			$tablelist = WinList($alerttitle)
			logit("IF890")
			If IsArray($tablelist) Then
				logit("FO891")
				For $a = 1 To $tablelist[0][0]
					$alertpos = WinGetPos($tablelist[$a][1])
					WinActivate($tablelist[$a][1])
					logit("IF892")
					If IsArray($alertpos) AND $alertpos[2] == 383 AND $alertpos[3] == 153 AND (WinGetState($tablelist[$a][1]) == 7 OR WinGetState($tablelist[$a][1]) == 15) Then
						logit("IF893")
						If IsArray(PixelSearch($alertpos[0] + 76, $alertpos[1] + 87, $alertpos[0] + 76, $alertpos[1] + 87, 16777215, 3, 1, $tablelist[$a][1])) Then
							fconsolewrite("Are you sure you want to leave window found, closing now")
							MouseClick("left", $alertpos[0] + 113, $alertpos[1] + 124, 1, 0)
							ExitLoop
						EndIf
						logit("EN894")
					ElseIf IsArray($alertpos) AND $alertpos[2] == 383 AND $alertpos[3] == 166 AND (WinGetState($tablelist[$a][1]) == 7 OR WinGetState($tablelist[$a][1]) == 15) Then
						logit("IF893")
						If IsArray(PixelSearch($alertpos[0] + 283, $alertpos[1] + 106, $alertpos[0] + 283, $alertpos[1] + 106, 16777215, 3, 1, $tablelist[$a][1])) Then
							fconsolewrite("Are you sure you want to leave window found, closing now")
							MouseClick("left", $alertpos[0] + 113, $alertpos[1] + 136, 1, 0)
							ExitLoop
						EndIf
						logit("EN894")
					EndIf
					logit("EN895")
					Sleep(10)
				Next
				logit("NE896")
			EndIf
			logit("EN897")
		ElseIf GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Poker770" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "WillHill" Then
			logit("IF977")
			If WinExists("Confirm leaving tournament") Then
				$leavehnd = WinGetHandle("Confirm leaving tournament")
				If (WinGetState($leavehnd) == 7 OR WinGetState($leavehnd) == 15) Then
					fconsolewrite("Are you sure window found")
					$leavepos = WinGetPos($leavehnd)
					WinActivate($leavehnd)
					WinWaitActive($leavehnd, "", 3)
					If IsArray($leavepos) Then
						MouseClick("left", $leavepos[0] + 270, $leavepos[1] + 242, 1, 0)
					EndIf
					Return
				EndIf
			EndIf
			Return
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			logit("IF977")
			If WinExists("Leave Game") Then
				$leavehnd = WinGetHandle("Leave Game")
				If (WinGetState($leavehnd) == 7 OR WinGetState($leavehnd) == 15) Then
					fconsolewrite("Are you sure window found")
					$leavepos = WinGetPos($leavehnd)
					WinActivate($leavehnd)
					WinWaitActive($leavehnd, "", 3)
					If IsArray($leavepos) Then
						MouseClick("left", $leavepos[0] + 118, $leavepos[1] + 161, 1, 0)
					EndIf
					Return
				EndIf
			EndIf
			Return
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
			logit("IF977")
			If WinExists("Leave table ?") Then
				$leavehnd = WinGetHandle("Leave table ?")
				If (WinGetState($leavehnd) == 7 OR WinGetState($leavehnd) == 15) Then
					fconsolewrite("Are you sure window found")
					$leavepos = WinGetPos($leavehnd)
					WinActivate($leavehnd)
					WinWaitActive($leavehnd, "", 3)
					If IsArray($leavepos) Then
						MouseClick("left", $leavepos[0] + 169, $leavepos[1] + 122, 1, 0)
					EndIf
					Return
				EndIf
			EndIf
			Return
		EndIf
		logit("EN984")
		logit("EN985")
	EndFunc

	Func checkgetchips($hwnd = "")
		logit("FU512")
		Local $gctitle = "Choose your buy-in amount"
		Local $gctitlemerge = "Buy-In"
		Local $getchipstitlebodog = "[REGEXPTITLE:\ABUY IN\z]"
		Local $htemp, $buystring, $split, $newbuyin, $wintitle, $buysearch, $buycolor, $htemppos, $winlist
		logit("IF513")
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			If satdowntoosoon() Then
				fconsolewrite("TakeS: Sat down too soon at table ")
				WinClose($hwnd)
				WinWaitClose($hwnd, "", 2)
				Return
			EndIf
			WinWait($getchipstitlebodog, "", 2)
			If WinExists($getchipstitlebodog) Then
				$htemp = WinGetHandle($getchipstitlebodog)
				$winpos = WinGetPos($htemp)
				Local $bb = Number(ControlGetText($maingui, "", $buyintxt))
				logit("IF680")
				logit("WH681")
				fconsolewrite("CGC: Buying in")
				For $y = 0 To 30
					If WinGetState($htemp) == 5 OR $y > 30 Then ExitLoop
					WinActivate($htemp)
					If GUICtrlRead($chkmaxbuyin) == $gui_checked OR ($bb >= 100 AND GUICtrlRead($cmblimit) <> "Fixed") Then
						MouseClick("left", $winpos[0] + 46, $winpos[1] + 264, 1, 0)
						Sleep(200)
						MouseClick("left", $winpos[0] + 71, $winpos[1] + 394, 1, 0)
					Else
						WinActivate($htemp)
						MouseClick("left", $winpos[0] + 71, $winpos[1] + 394, 1, 0)
					EndIf
					Sleep(10)
				Next
				If WinExists($htemp) AND (WinGetState($htemp) == 7 OR WinGetState($htemp) == 15) Then
					logit("WH686")
					fconsolewrite("CGC: Unable to buyin using specified amount, going with maximum")
					For $y = 0 To 20
						If NOT WinExists($htemp) OR BitAND(WinGetState($htemp), 2) <> 2 OR $y > 20 Then ExitLoop
						WinActivate($htemp)
						MouseClick("left", $winpos[0] + 46, $winpos[1] + 264, 1, 0)
						Sleep(10)
						WinActivate($htemp)
						MouseClick("left", $winpos[0] + 71, $winpos[1] + 394, 1, 0)
					Next
					logit("WE687")
				EndIf
				logit("EN688")
				Sleep(300)
				logit("IF689")
				If WinExists($htemp) AND (WinGetState($htemp) == 7 OR WinGetState($htemp) == 15) Then
					WinClose($htemp)
					logit("IF690")
					If WinExists($htemp) Then
						WinKill($htemp)
					EndIf
					logit("EN691")
					Return False
				Else
					Return True
				EndIf
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			WinWait($gctitle, "", 2)
			If WinExists($gctitle) AND iswindowvisible($gctitle) Then
				fconsolewrite("CGC: Buy In window visible")
				$htemp = WinGetHandle($gctitle)
				$winpos = WinGetPos($htemp)
				$bb = Number(ControlGetText($maingui, "", $buyintxt))
				Local $parentwindowtitle = WinGetTitle(parentwindow($htemp))
				Local $parentwindowtitle2 = StringMid($parentwindowtitle, StringInStr($parentwindowtitle, "/") + 1)
				logit("IF697")
				If NOT StringInStr($parentwindowtitle2, "$") Then
					$buystring = StringTrimRight($parentwindowtitle2, 1)
					$buystring = Number($buystring) * 0.01
					ConsoleWrite($buystring & @LF)
				ElseIf StringInStr($parentwindowtitle2, "$") Then
					$buystring = StringReplace($parentwindowtitle2, "$", "")
					ConsoleWrite($buystring & @LF)
				Else
					$buystring = $parentwindowtitle2
				EndIf
				logit("EN698")
				Local $finalbuy = $buystring * $bb
				logit("WH699")
				fconsolewrite("CGC: Buying in for: $" & $finalbuy)
				For $y = 0 To 30
					If $y > 30 OR NOT winvisibleandexists($htemp) Then ExitLoop
					WinActivate($htemp)
					If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
						If GUICtrlRead($chkmaxbuyin) == $gui_checked Then
							MouseClick("left", $winpos[0] + 42, $winpos[1] + 186, 1, 0)
							Sleep(300)
						Else
							MouseClick("left", $winpos[0] + 41, $winpos[1] + 205, 1, 0)
							Sleep(300)
							MouseClickDrag("left", $winpos[0] + 171, $winpos[1] + 204, $winpos[0] + 228, $winpos[1] + 205, 1)
							WinActivate($htemp)
							SendKeepActive($htemp)
							$split = StringSplit($finalbuy, "")
							logit("FO701")
							For $a = 1 To $split[0]
								Send($split[$a])
								Sleep(10)
							Next
							logit("NE702")
							logit("IF703")
						EndIf
					EndIf
					If GUICtrlRead($chkautotopup) == $gui_checked Then
						WinActivate($htemp)
						logit("IF704")
						If PixelGetColor($winpos[0] + 40, $winpos[1] + 248) <> 0 Then
							MouseClick("left", $winpos[0] + 40, $winpos[1] + 248, 1, 0)
						EndIf
						logit("EN705")
						Sleep(300)
						WinActivate($htemp)
						logit("IF706")
						If PixelGetColor($winpos[0] + 83, $winpos[1] + 275) <> 361173 Then
							MouseClick("left", $winpos[0] + 83, $winpos[1] + 275, 1, 0)
						EndIf
						logit("EN707")
					EndIf
					logit("EN708")
					logit("EN709")
					WinActivate($htemp)
					MouseClick("left", $winpos[0] + 88, $winpos[1] + 450, 1, 0)
					Sleep(10)
				Next
				logit("WE710")
				WinWait("Member Message", "", 2)
				logit("IF711")
				waitforbigblindwin()
				If WinExists("Member Message") Then
					Local $mmlist = WinList("Member Message")
					logit("IF712")
					If IsArray($mmlist) Then
						logit("FO713")
						For $g = 1 To $mmlist[0][0]
							If WinGetState($mmlist[$g][1]) == 5 Then ContinueLoop
							Local $eepos = WinGetPos($mmlist[$g][1])
							logit("IF714")
							If IsArray($eepos) Then
								logit("IF715")
								If $eepos[2] == 482 AND $eepos[3] == 205 AND (WinGetState($mmlist[$g][1]) == 7 OR WinGetState($mmlist[$g][1]) == 15 OR WinGetState($mmlist[$g][1]) == 23) Then
									WinActivate($mmlist[$g][1])
									logit("IF716")
									If PixelGetColor($eepos[0] + 20, $eepos[1] + 96, $mmlist[$g][1]) == 16777215 Then
										fconsolewrite("CGCEEE: Sat Down too soon at: " & $parentwindowtitle)
										MouseClick("left", $eepos[0] + 238, $eepos[1] + 243, 1, 0)
										WinWaitClose($mmlist[$g][1], "", 1)
										WinClose($parentwindowtitle)
										Sleep(10)
										ExitLoop
									ElseIf WinExists($mmlist[$g][1]) Then
										fconsolewrite("CGCEEE: Rat Holing window found, closing now,")
										MouseClick("left", $eepos[0] + 145, $eepos[1] + 174, 1, 0)
										WinWaitClose($mmlist[$g][1], "", 1)
										Sleep(10)
										ExitLoop
									EndIf
									logit("EN717")
								ElseIf $eepos[2] == 334 AND $eepos[3] == 202 AND (WinGetState($mmlist[$g][1]) == 7 OR WinGetState($mmlist[$g][1]) == 15 OR WinGetState($mmlist[$g][1]) == 23) Then
									WinActivate($mmlist[$g][1])
									fconsolewrite("CGCEEE: Seat is already reserved: " & $parentwindowtitle)
									MouseClick("left", $eepos[0] + 167, $eepos[1] + 164, 1, 0)
									WinWaitClose($mmlist[$g][1], "", 1)
									logit("IF718")
									If WinExists($mmlist[$g][1]) Then
										WinClose($mmlist[$g][1])
										Sleep(200)
									EndIf
									logit("EN719")
									WinClose($parentwindowtitle)
									Sleep(10)
									ExitLoop
								EndIf
								logit("EN720")
							EndIf
							logit("EN721")
							Sleep(10)
						Next
						logit("NE722")
					EndIf
					logit("EN723")
				EndIf
				logit("EN724")
				Sleep(300)
				logit("IF725")
				If WinExists($htemp) AND (WinGetState($htemp) == 7 OR WinGetState($htemp) == 15 OR WinGetState($htemp) == 23) Then
					WinClose($htemp)
					logit("IF726")
					If WinExists($htemp) Then
						WinKill($htemp)
					EndIf
					logit("EN727")
				EndIf
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			WinWait($gctitlemerge, "", 2)
			If WinExists($gctitlemerge) Then
				fconsolewrite("CGC: Buy In window visible")
				$htemp = WinGetHandle($gctitlemerge)
				$winpos = WinGetPos($htemp)
				If iswindowvisible($htemp) Then
					WinActivate($htemp)
					MouseClick("left", $winpos[0] + 235, $winpos[1] + 306, 1, 0)
				EndIf
				logit("EN724")
				Sleep(1000)
				logit("IF725")
				If WinExists($htemp) AND iswindowvisible($htemp) Then
					WinClose($htemp)
					logit("IF726")
					If WinExists($htemp) Then
						WinKill($htemp)
					EndIf
					logit("EN727")
				EndIf
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
			WinWait("Buy-in money", "", 2)
			If WinExists("Buy-in money") Then
				fconsolewrite("CGC: Buy In window visible")
				$htemp = WinGetHandle("Buy-in money")
				$winpos = WinGetPos($htemp)
				If iswindowvisible($htemp) Then
					WinActivate($htemp)
					MouseClick("left", $winpos[0] + 408, $winpos[1] + 309, 1, 0)
					Sleep(300)
					MouseClick("left", $winpos[0] + 325, $winpos[1] + 347, 1, 0)
				EndIf
				logit("EN724")
				Sleep(1000)
				logit("IF725")
				If WinExists($htemp) AND iswindowvisible($htemp) Then
					WinClose($htemp)
					logit("IF726")
					If WinExists($htemp) Then
						WinKill($htemp)
					EndIf
					logit("EN727")
				EndIf
			EndIf
		Else
			logit("FO514")
			Sleep(1000)
			$winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					If WinGetState($winlist[$x][1]) == 5 Then ContinueLoop
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF515")
					If IsArray($winpos) AND $winpos[2] == 450 AND $winpos[3] == 320 AND WinGetState($winlist[$x][1]) <> 5 Then
						fconsolewrite("CGC: Buyin window found")
						$htemp = WinGetHandle($winlist[$x][1])
						logit("IF516")
						If tablecount() > GUICtrlRead($numbotscmb) Then
							WinActivate($htemp)
							fconsolewrite("CGC: Too many tables open, closing")
							WinClose($htemp)
						EndIf
						logit("EN517")
						WinActivate($htemp)
						logit("WH518")
						For $z = 0 To 10
							fconsolewrite("CGC: Buying in")
							WinActivate($htemp)
							$htemppos = WinGetPos($htemp)
							logit("IF519")
							If IsArray($htemppos) Then
								logit("IF520")
								$buycolor = 16777215
								$buysearch = PixelSearch($htemppos[0] + 55, $htemppos[1] + 190, $htemppos[0] + 124, $htemppos[1] + 197, $buycolor, 0, 1, $htemp)
								If GUICtrlRead($chkmaxbuyin) == $gui_checked OR NOT IsArray($buysearch) Then
									fconsolewrite("Clicking Max Buyin")
									logit("IF521")
									If GUICtrlRead($cmbsite) == "BNG" AND PixelGetColor($htemppos[0] + 40, $htemppos[1] + 170, $htemp) == 14474460 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 40, $htemppos[1] + 170, 1, 0)
									ElseIf GUICtrlRead($cmbsite) == "WillHill" AND PixelGetColor($htemppos[0] + 39, $htemppos[1] + 169, $htemp) == 137257 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 169, 1, 0)
									ElseIf GUICtrlRead($cmbsite) == "Betfred" AND PixelGetColor($htemppos[0] + 39, $htemppos[1] + 169, $htemp) == 14540253 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 169, 1, 0)
									ElseIf GUICtrlRead($cmbsite) == "Betfair" AND PixelGetColor($htemppos[0] + 39, $htemppos[1] + 169, $htemp) == 14540253 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 169, 1, 0)
									ElseIf GUICtrlRead($cmbsite) == "Bet365" AND PixelGetColor($htemppos[0] + 29, $htemppos[1] + 170, $htemp) == 16777215 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 29, $htemppos[1] + 170, 1, 0)
									ElseIf GUICtrlRead($cmbsite) == "Everest" AND PixelGetColor($htemppos[0] + 41, $htemppos[1] + 170, $htemp) == 14540253 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 41, $htemppos[1] + 170, 1, 0)
									ElseIf GUICtrlRead($cmbsite) == "Turbo.fr" AND PixelGetColor($htemppos[0] + 41, $htemppos[1] + 170, $htemp) == 14540253 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 41, $htemppos[1] + 170, 1, 0)
									ElseIf GUICtrlRead($cmbsite) == "Poker770" AND PixelGetColor($htemppos[0] + 40, $htemppos[1] + 170, $htemp) == 15409179 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 169, 1, 0)
									ElseIf GUICtrlRead($cmbsite) == "Paddy" AND PixelGetColor($htemppos[0] + 39, $htemppos[1] + 171, $htemp) == 15409179 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 171, 1, 0)
									ElseIf GUICtrlRead($cmbsite) == "Titan" AND PixelGetColor($htemppos[0] + 40, $htemppos[1] + 169, $htemp) == 16382457 Then
										fconsolewrite("CGC: Clicking max amount")
										fmouseclick("left", $htemppos[0] + 40, $htemppos[1] + 169, 1, 0)
									EndIf
									logit("EN522")
								Else
									$bb = ControlGetText($maingui, "", $buyintxt)
									$wintitle = parenttitleforbuyin()
									logit("IF523")
									If $wintitle <> "" Then
										$wintitle = StringMid($wintitle, StringInStr($wintitle, "/") + 2)
										$newbuyin = $bb * $wintitle
										logit("IF524")
										MouseClick("left", $htemppos[0] + 225, $htemppos[1] + 193, 2, 1)
										logit("EN525")
										Sleep(200)
										If GUICtrlRead($buyintxt) <> "" Then
											SendKeepActive($htemp)
											$split = StringSplit($newbuyin, "")
											logit("FO339")
											For $a = 1 To $split[0]
												Send($split[$a])
												Sleep(10)
											Next
										EndIf
										logit("NE527")
										Sleep(250)
									EndIf
									logit("EN528")
								EndIf
								logit("EN529")
								Sleep(600)
								WinActivate($htemp)
								logit("IF530")
								MouseClick("left", $htemppos[0] + 183, $htemppos[1] + 298, 1, 0)
								logit("IF532")
							EndIf
							logit("EN534")
							WinWaitClose($htemp, "", 2)
							Sleep(10)
							If NOT WinExists($htemp) OR WinGetState($htemp) == 5 Then ExitLoop
							If checkminbuyinwindow() Then
								WinActivate($htemppos)
								MouseMove($htemppos[0] + 272, $htemppos[1] + 293)
								MouseDown("left")
								Sleep(300)
								MouseUp("left")
								Sleep(500)
								Sleep(10)
								Return
							EndIf
							logit("EN533")
							checkinvalidbuyinwindow()
							Sleep(1000)
						Next
						logit("WE535")
						Sleep(10)
						Return True
					EndIf
					logit("EN536")
					Sleep(10)
				Next
			EndIf
		EndIf
		logit("NE537")
		Return False
		logit("EN538")
		Sleep(10)
	EndFunc

	Func youhavebeenremovedfromwleee()
		logit("FU833")
		logit("IF834")
		If WinExists("Member Message") Then
			Local $msghnd = WinGetHandle("Member Message")
			WinActivate($msghnd)
			$winpos = WinGetPos($msghnd)
			logit("IF835")
			If IsArray($winpos) AND $winpos[3] == 186 AND iswindowvisible($msghnd) Then
				If PixelGetColor($winpos[0] + 39, $winpos[1] + 95, $msghnd) == 16777215 Then
					MouseClick("left", $winpos[1] + 165, $winpos[2] + 147, 1, 0)
					winwaitnotvisible($msghnd, 2)
					If iswindowvisible($msghnd) Then
						WinClose($msghnd)
					EndIf
				EndIf
			EndIf
			logit("EN836")
		EndIf
		logit("EN837")
		logit("EN838")
	EndFunc

	Func checkwaitinglist($tablename = "")
		logit("FU318")
		Global $timerwaitinglistidle
		Local $cwlcolor, $handle, $arraysearch
		Local $xcor
		Local $ycor
		If GUICtrlRead($cmbsite) == "Carbon" Then
			If NOT WinExists("Seat Available") Then
				Return False
			EndIf
			logit("IF248")
			$handle = WinGetHandle("Seat Available")
			logit("IF249")
			If _timer_diff($mslastwaitinglist) > ($secondsbetweenwaitinglist * 1000) Then
				logit("IF250")
				If winvisibleandexists($handle) Then
					fconsolewrite("CWL: WLOpt Found")
					$winpos = WinGetPos($handle)
					logit("IF251")
					If NOT IsArray($winpos) Then
						Return False
					EndIf
					logit("IF252")
					If tablecount() < GUICtrlRead($numbotscmb) Then
						fconsolewrite("CWL: Waiting List Options Detected - Joining.")
						logit("WH253")
						For $z = 0 To 10
							WinSetOnTop($handle, "", 1)
							WinActivate($handle)
							MouseClick("left", $winpos[0] + 107, $winpos[1] + 242, 1, 0)
							winwaitnotvisible($handle, 2)
							logit("IF254")
							If NOT winvisibleandexists($handle) Then
								$waitinglistcount -= 1
								logit("IF255")
								If $waitinglistcount < 0 Then $waitinglistcount = 0
								fconsolewrite("CWL: New Waiting List Count = " & $waitinglistcount)
								Return
							EndIf
							logit("EN256")
							Sleep(10)
							$mslastwaitinglist = _timer_init()
							If NOT winvisibleandexists($handle) Then ExitLoop
							Sleep(500)
						Next
						logit("WE257")
					Else
						fconsolewrite("CWL: Waiting List Options Detected - Enough tables open, closing.")
						logit("WH258")
						For $z = 0 To 10
							WinSetOnTop($handle, "", 1)
							WinActivate($handle)
							MouseClick("left", $winpos[0] + 34, $winpos[1] + 117, 1, 0)
							WinActivate($handle)
							MouseClick("left", $winpos[0] + 239, $winpos[1] + 242, 1, 0)
							winwaitnotvisible($handle, 2)
							logit("IF259")
							If NOT winvisibleandexists($handle) Then
								If $tablename <> "" Then
									$arraysearch = _arraysearch($satattables, $tablename, 0, (UBound($satattables) - 1), 0, 1)
									logit("IF260")
									If _arraysearch($satattables, $tablename, 0, (UBound($satattables) - 1), 0, 1) <> -1 Then
										logit("NE262")
										fconsolewrite("CWT: Clearing from array: " & $satattables[$arraysearch])
										ConsoleWrite(" {SATATTABLES Cleared} " & @LF)
										$satattables[$arraysearch] = ""
										logit("NE264")
									EndIf
								EndIf
								logit("EN265")
								$waitinglistcount -= 1
								logit("IF266")
								If $waitinglistcount < 0 Then $waitinglistcount = 0
								fconsolewrite("CWL: New Waiting List Count = " & $waitinglistcount)
								Return
							EndIf
							logit("EN267")
							If NOT winvisibleandexists($handle) Then ExitLoop
							Sleep(500)
						Next
						logit("WE268")
					EndIf
					logit("EN269")
				EndIf
				logit("EN270")
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
			If NOT WinExists("Seat Available") Then
				Return False
			EndIf
			logit("IF248")
			$handle = WinGetHandle("Seat Available")
			logit("IF249")
			If _timer_diff($mslastwaitinglist) > ($secondsbetweenwaitinglist * 1000) Then
				logit("IF250")
				If winvisibleandexists($handle) Then
					fconsolewrite("CWL: WLOpt Found")
					$winpos = WinGetPos($handle)
					logit("IF251")
					If NOT IsArray($winpos) Then
						Return False
					EndIf
					logit("IF252")
					If tablecount() < GUICtrlRead($numbotscmb) Then
						fconsolewrite("CWL: Waiting List Options Detected - Joining.")
						logit("WH253")
						For $z = 0 To 10
							WinSetOnTop($handle, "", 1)
							WinActivate($handle)
							MouseClick("left", $winpos[0] + 114, $winpos[1] + 175, 1, 0)
							winwaitnotvisible($handle, 2)
							logit("IF254")
							If NOT winvisibleandexists($handle) Then
								$waitinglistcount -= 1
								logit("IF255")
								If $waitinglistcount < 0 Then $waitinglistcount = 0
								fconsolewrite("CWL: New Waiting List Count = " & $waitinglistcount)
								Return
							EndIf
							logit("EN256")
							$mslastwaitinglist = _timer_init()
							If NOT winvisibleandexists($handle) Then ExitLoop
							Sleep(500)
						Next
						logit("WE257")
					Else
						fconsolewrite("CWL: Waiting List Options Detected - Enough tables open, closing.")
						logit("WH258")
						For $z = 0 To 10
							WinSetOnTop($handle, "", 1)
							WinActivate($handle)
							MouseClick("left", $winpos[0] + 256, $winpos[1] + 175, 1, 0)
							winwaitnotvisible($handle, 2)
							logit("IF259")
							If NOT winvisibleandexists($handle) Then
								If $tablename <> "" Then
									$arraysearch = _arraysearch($satattables, $tablename, 0, (UBound($satattables) - 1), 0, 1)
									logit("IF260")
									If _arraysearch($satattables, $tablename, 0, (UBound($satattables) - 1), 0, 1) <> -1 Then
										$satattables[$arraysearch] = ""
										logit("NE264")
									EndIf
								EndIf
								logit("EN265")
								$waitinglistcount -= 1
								logit("IF266")
								If $waitinglistcount < 0 Then $waitinglistcount = 0
								fconsolewrite("CWL: New Waiting List Count = " & $waitinglistcount)
								Return
							EndIf
							logit("EN267")
							If NOT winvisibleandexists($handle) Then ExitLoop
							Sleep(500)
						Next
						logit("WE268")
					EndIf
					logit("EN269")
				EndIf
				logit("EN270")
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			If NOT WinExists($waitinglisttitlebodog) Then
				Return False
			EndIf
			$handle = WinGetHandle($waitinglisttitlebodog)
			If _timer_diff($mslastwaitinglist) > ($secondsbetweenwaitinglist * 1000) Then
				If winvisibleandexists($handle) Then
					fconsolewrite("CWL: WLOpt Found")
					$winpos = WinGetPos($handle)
					logit("IF817")
					If NOT IsArray($winpos) Then
						Return False
					EndIf
					logit("IF818")
					If tablecount() < GUICtrlRead($numbotscmb) Then
						fconsolewrite("CWL: Waiting List Options Detected - Joining.")
						logit("WH819")
						For $z = 0 To 10
							WinSetOnTop($handle, "", 1)
							WinActivate($handle)
							ControlClick($handle, "", "[CLASS:Button; INSTANCE:1]", "left", 1)
							winwaitnotvisible($handle, 2)
							logit("IF820")
							If NOT winvisibleandexists($handle) Then
								$waitinglistcount -= 1
								logit("IF821")
								If $waitinglistcount < 0 Then $waitinglistcount = 0
								fconsolewrite("CWL: New Waiting List Count = " & $waitinglistcount)
								Return
							EndIf
							logit("EN822")
							If NOT winvisibleandexists($handle) Then ExitLoop
							Sleep(500)
						Next
						logit("WE823")
						$mslastwaitinglist = _timer_init()
					Else
						fconsolewrite("CWL: Waiting List Options Detected - Enough tables open, closing.")
						logit("WH824")
						For $z = 0 To 10
							WinSetOnTop($handle, "", 1)
							WinActivate($handle)
							ControlClick($handle, "", "[CLASS:Button; INSTANCE:2]", "left", 1)
							winwaitnotvisible($handle, 2)
							logit("IF825")
							If NOT winvisibleandexists($handle) Then
								$waitinglistcount -= 1
								logit("IF826")
								If $waitinglistcount < 0 Then $waitinglistcount = 0
								fconsolewrite("CWL: New Waiting List Count = " & $waitinglistcount)
								Return
							EndIf
							logit("EN827")
							If NOT winvisibleandexists($handle) Then ExitLoop
							Sleep(500)
						Next
						logit("WE828")
					EndIf
					logit("EN829")
				EndIf
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			youhavebeenremovedfromwleee()
			Local $wlt = "Join table?"
			logit("IF840")
			If WinExists($wlt) AND BitAND(WinGetState($wlt), 2) == 2 Then
				Local $wlthnd = WinGetHandle($wlt)
				logit("IF842")
				WinActivate($wlthnd)
			Else
				Return
			EndIf
			If _timer_diff($mslastwaitinglist) > ($secondsbetweenwaitinglist * 1000) Then
				logit("IF847")
				If WinExists($wlthnd) Then
					fconsolewrite("CWL: WLOpt Found")
					Local $winpos = WinGetPos($wlthnd)
					logit("IF848")
					If NOT IsArray($winpos) Then
						Return False
					EndIf
					logit("IF849")
					If tablecount() < GUICtrlRead($numbotscmb) Then
						fconsolewrite("CWL: Waiting List Options Detected - Joining.")
						logit("WH850")
						For $y = 0 To 75
							WinSetOnTop($wlthnd, "", 1)
							WinActivate($wlthnd)
							MouseClick("left", $winpos[0] + 101, $winpos[1] + 241, 1, 0)
							WinWaitClose($wlthnd, "", 2)
							logit("IF851")
							If NOT WinExists($wlthnd) OR (BitAND(WinGetState($wlthnd), 2) <> 2) Then
								$waitinglistcount -= 1
								logit("IF852")
								If $waitinglistcount < 0 Then $waitinglistcount = 0
								fconsolewrite("CWL: New Waiting List Count = " & $waitinglistcount)
								checknewtablescash()
								ExitLoop
							EndIf
							checknewtablescash()
							checkremovedwlwindow()
							logit("EN853")
							Sleep(10)
							If $y > 75 Then
								ExitLoop
							EndIf
						Next
						checknewtablescash()
						logit("WE854")
						Sleep(200)
						$mslastwaitinglist = _timer_init()
					Else
						fconsolewrite("CWL: Waiting List Options Detected - Enough tables open, closing.")
						logit("WH855")
						For $y = 0 To 75
							WinSetOnTop($wlthnd, "", 1)
							WinActivate($wlthnd)
							MouseClick("left", $winpos[0] + 260, $winpos[1] + 239, 1, 0)
							WinWaitClose($wlthnd, "", 2)
							logit("IF856")
							If NOT WinExists($wlthnd) OR (BitAND(WinGetState($wlthnd), 2) <> 2) Then
								$waitinglistcount -= 1
								logit("IF857")
								If $waitinglistcount < 0 Then $waitinglistcount = 0
								fconsolewrite("CWL: New Waiting List Count = " & $waitinglistcount)
								ExitLoop
							EndIf
							checkremovedwlwindow()
							logit("EN858")
							WinSetOnTop($wlthnd, "", 0)
							Sleep(10)
							If $y > 75 Then ExitLoop
						Next
						logit("WE859")
					EndIf
					logit("EN860")
				EndIf
				logit("EN861")
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
			$cwlcolor = 16777215
			$xcor = 78
			$ycor = 8
		ElseIf GUICtrlRead($cmbsite) == "Poker770" Then
			$cwlcolor = 16777215
			$xcor = 79
			$ycor = 8
		Else
			$cwlcolor = 16777215
			$xcor = 82
			$ycor = 13
		EndIf
		logit("EN324")
		logit("IF325")
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		logit("IF326")
		Local $tablecount = tablecount()
		If IsArray($winlist) AND $winlist[0][0] > 0 Then
			logit("FO327")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) Then
					If $winpos[2] == 402 AND (WinGetState($winlist[$x][1]) == 7 OR WinGetState($winlist[$x][1]) == 15) Then
						WinActivate($winlist[$x][1])
						WinWaitActive($winlist[$x][1], "", 2)
						If PixelGetColor($winpos[0] + $xcor, $winpos[1] + $ycor, $winlist[$x][1]) == $cwlcolor Then
							fconsolewrite("Seat Available window found")
							WinActivate($winlist[$x][1])
							logit("IF331")
							fconsolewrite("CWL: WLOpt Found")
							$winpos = WinGetPos($winlist[$x][1])
							logit("IF332")
							If NOT IsArray($winpos) Then
								Return False
							EndIf
							fconsolewrite("Current Waiting List Count " & $waitinglistcount)
							logit("IF333")
							If $waitinglistcount < 0 Then $waitinglistcount = 0
							logit("IF334")
							If $tablecount < GUICtrlRead($numbotscmb) Then
								If _timer_diff($mslastwaitinglist) > ($secondsbetweenwaitinglist * 1000) Then
									fconsolewrite("CWL: TableCount: " & $tablecount & " < # of max tables: " & GUICtrlRead($numbotscmb))
									fconsolewrite("Waiting List Options Detected - Joining. new count: " & $waitinglistcount)
									$waitinglistcount -= 1
									logit("IF335")
									If $waitinglistcount < 0 Then $waitinglistcount = 0
									fconsolewrite("Waiting List Count = " & $waitinglistcount)
									logit("WH336")
									For $z = 0 To 10
										WinActivate($winlist[$x][1])
										WinWaitActive($winlist[$x][1], "", 1)
										MouseClick("left", $winpos[0] + 271, $winpos[1] + 242, 1, 0)
										Sleep(200)
										If (WinGetState($winlist[$x][1]) <> 7 OR WinGetState($winlist[$x][1]) <> 15) Then ExitLoop
									Next
									Sleep(3000)
									logit("WE337")
									logit("IF338")
									Return
								Else
									ConsoleWrite("CWL: Timer not reached yet," & @LF)
									ConsoleWrite("TIMER: " & _timer_diff($mslastwaitinglist) & " <= " & ($secondsbetweenwaitinglist * 1000) & @LF)
								EndIf
							Else
								fconsolewrite("CWL: TableCount: " & $tablecount & " = # of max tables: " & GUICtrlRead($numbotscmb))
								fconsolewrite("Waiting List Options Detected - Enough tables open, closing. new count: " & $waitinglistcount)
								$waitinglistcount -= 1
								logit("IF346")
								If $waitinglistcount < 0 Then $waitinglistcount = 0
								fconsolewrite("Waiting List Count = " & $waitinglistcount)
								logit("WH347")
								For $z = 0 To 10
									WinActivate($winlist[$x][1])
									WinWaitActive($winlist[$x][1], "", 1)
									MouseClick("left", $winpos[0] + 356, $winpos[1] + 240, 1, 0)
									Sleep(200)
									If (WinGetState($winlist[$x][1]) <> 7 OR WinGetState($winlist[$x][1]) <> 15) Then ExitLoop
								Next
								If WinGetState($winlist[$x][1]) <> 7 AND WinGetState($winlist[$x][1]) <> 15 Then
									If $tablename <> "" Then
										Local $title = StringStripWS(StringLeft($tablename, StringInStr($tablename, "-") - 2), 3)
										$title = StringStripWS(StringMid($title, StringInStr($title, ":") + 2), 3)
										$arraysearch = farraysearch($satattables, $title, 0, (UBound($satattables) - 1))
										logit("IF339")
										If farraysearch($satattables, $title, 0, (UBound($satattables) - 1)) <> -1 Then
											logit("FO340")
											logit("NE341")
											fconsolewrite("CWT: Clearing from array: " & $satattables[$arraysearch])
											$satattables[$arraysearch] = ""
											logit("FO342")
											logit("NE343")
										EndIf
									EndIf
									logit("EN344")
									fconsolewrite("CWL: New Waiting List Count = " & $waitinglistcount)
									$mslastwaitinglist = _timer_init()
									Sleep(500)
									Return
								EndIf
								logit("EN345")
								logit("WE348")
							EndIf
							logit("EN349")
							logit("EN350")
						EndIf
						logit("EN351")
					EndIf
					logit("EN352")
				EndIf
				logit("EN353")
				Sleep(10)
			Next
			logit("NE354")
		EndIf
		Sleep(10)
		logit("EN357")
	EndFunc

	Func checkremovedwlwindow()
		logit("FU1910")
		logit("IF1911")
		If WinExists("Member Message") Then
			Local $winlist = WinList("Member Message")
			logit("IF1912")
			If IsArray($winlist) Then
				logit("FO1913")
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF1914")
					If IsArray($winpos) Then
						logit("IF1915")
						If $winpos[3] == 173 Then
							WinActivate($winlist[$x][1])
							WinWaitActive($winlist[$x][1], "", 2)
							If PixelGetColor($winpos[0] + 63, $winpos[1] + 86, $winlist[$x][1]) == 16777215 AND PixelGetColor($winpos[0] + 20, $winpos[1] + 152, $winlist[$x][1]) == 16777215 Then
								fconsolewrite("YILW: You have been removed window found")
								WinActivate($winlist[$x][1])
								WinWaitActive($winlist[$x][1], "", 1)
								MouseClick("left", $winpos[0] + 20, $winpos[1] + 152, 1, 0)
								Sleep(500)
								MouseClick("left", $winpos[0] + 188, $winpos[1] + 125, 1, 0)
								Return True
							EndIf
						EndIf
						logit("EN1916")
					EndIf
					logit("EN1917")
					Sleep(10)
				Next
				logit("NE1918")
			EndIf
			logit("EN1919")
		EndIf
		logit("EN1920")
		Return False
		logit("EN1921")
	EndFunc

	Func waitforbigblindwin()
		logit("FU864")
		logit("IF865")
		If WinExists("Member Message") Then
			Local $msghnd = WinGetHandle("Member Message")
			WinActivate($msghnd)
			Local $winpos = WinGetPos($msghnd)
			logit("IF866")
			If IsArray($winpos) AND $winpos[2] == 383 AND $winpos[3] == 212 Then
				MouseClick("left", $winpos[0] + 19, $winpos[1] + 192, 1, 0)
				Sleep(500)
				logit("IF867")
				MouseClick("left", $winpos[0] + 190, $winpos[1] + 162, 1, 0)
				logit("EN868")
			EndIf
			logit("EN869")
		EndIf
		logit("EN870")
		logit("EN871")
	EndFunc

	Func checkmessagewin()
		logit("FU864")
		logit("IF865")
		If WinExists("Member Message") Then
			Local $msghnd = WinGetHandle("Member Message")
			WinActivate($msghnd)
			Local $winpos = WinGetPos($msghnd)
			logit("IF866")
			If IsArray($winpos) Then
				MouseClick("left", $winpos[0] + 166, $winpos[1] + 147, 1, 0)
				Sleep(500)
				logit("IF867")
				If WinExists($msghnd) AND $winpos[3] == 266 AND iswindowvisible($msghnd) Then
					fconsolewrite("CMW: Rat Holing window found... closing now...")
					Sleep(500)
					If WinExists($msghnd) Then
						WinActivate($msghnd)
						If WinExists($msghnd) Then
							WinClose($msghnd)
						EndIf
					EndIf
				EndIf
				logit("EN868")
			EndIf
			logit("EN869")
		EndIf
		logit("EN870")
		logit("EN871")
	EndFunc

	Func startnow2cash()
		logit("FU731")
		_reducememory()
		DllCall("kernel32.dll", "int", "WritePrivateProfileString", "ptr", 0, "ptr", 0, "ptr", 0, "str", $inifile)
		logit("IF132")
		If GUICtrlRead($cmbsite) == "888Poker" Then
			$lobbyname = $eeelobbyname
		ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
			$lobbyname = $whlobbyname
		ElseIf GUICtrlRead($cmbsite) == "Poker770" Then
			$lobbyname = $770lobbyname
		ElseIf GUICtrlRead($cmbsite) == "Titan" Then
			$lobbyname = $titanlobbyname
		ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
			$lobbyname = "[REGEXPTITLE:\ABetfair.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$lobbyname = $bodoglobbyname
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			$lobbyname = "[REGEXPTITLE:\A.*Connected.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
			$lobbyname = "[REGEXPTITLE:\A.*Poker Lobby.*-.*\z]"
		EndIf
		If $bscheduleactive == False Then
			fconsolewrite("Scheduler not activated")
		ElseIf scheduledtorun($lobbyname) Then
			fconsolewrite("Hopper has reached the start of the first schedule,  Starting now")
		Else
			fconsolewrite("Not scheduled to run yet,  Hopper will auto start when the scheduled time begins")
		EndIf
		logit("IF142")
		Local $maxwaitinglist = GUICtrlRead($txtmaxwaitinglist)
		logit("EN143")
		$secondsbetweenlaunch = GUICtrlRead($txtsecondsbetweenlaunch)
		$avoidmins = GUICtrlRead($txtavoidmins)
		logit("IF144")
		ConsoleWrite("LobbyName: " & $lobbyname & @LF)
		logit("EN145")
		savesettings()
		Local $timetorun = True
		fconsolewrite("Starting " & $productname & $version)
		Local $osbit = @OSArch
		Local $osver = @OSVersion
		Local $osserpack = @OSServicePack
		fconsolewrite("Computer info: " & $osbit & @LF & $osver & @LF & $osserpack & @LF)
		If NOT WinExists($lobbyname, "") Then
			fconsolewrite("Hopper is not recognizing the lobby")
			logit("IF264")
			If GUICtrlRead($chk888autologin) == $gui_checked OR GUICtrlRead($chkipautologin) == $gui_checked OR GUICtrlRead($chkbodogautologin) == $gui_checked Then
				fconsolewrite("Auto Login is activated, Opening Site")
				autologin()
				Sleep(10)
			Else
				MsgBox(0, $productname & $version, "You have to start or log into the" & GUICtrlRead($cmbsite) & "Poker Site to continue")
				Return
			EndIf
			logit("EN265")
		EndIf
		ConsoleWrite("Finished checking/loading Lobby" & @LF)
		If StringInStr(GUICtrlRead($txtminavgpot), ".") OR StringInStr(GUICtrlRead($txtmaxavgpot), ".") Then
			MsgBox(1, $productname & $version, "Please enter AvgPot values in Big blinds and not in $$ amounts")
			Return
		EndIf
		logit("EN108")
		logit("IF109")
		ConsoleWrite("Finished checking AvgPot" & @LF)
		Local $playempty = getplaylinevaluescash()
		Sleep(10)
		logit("IF110")
		If NOT IsArray($playempty) Then
			MsgBox(0, "Error", "No entries in the 'to play' list, Or don't match the current site and is enabled.")
			fconsolewrite("Please add an entry to the toPlay list by setting all your Table Criteria in the Hopper Preferences tab of the hopper")
			fconsolewrite("Then make sure it added an entry correctly, by checking the Schedular tab in the hopper")
			Return
		EndIf
		ConsoleWrite("Finished checking toPlayList" & @LF)
		logit("IF146")
		logit("EN151")
		GUICtrlSetState($startbtn, $gui_hide)
		logit("IF155")
		If $tabletitle = " " AND $trial = 1 Then
			MsgBox(0, $productname & $version, "Trial Expired.")
		EndIf
		If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Poker770" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" Then
			$hlobby = getlobbyhnd()
		Else
			$hlobby = WinGetHandle($lobbyname)
		EndIf
		movelobby($hlobby)
		ConsoleWrite("Finished Moving Lobby" & @LF)
		Sleep(10)
		logit("EN157")
		hide()
		Local $brunonce
		$brunonce = True
		Local $brunning
		$brunning = False
		Local $tablecount
		$tablecount = 0
		$waittimer = _timer_init()
		logit("WH161")
		Global $hbacount = 0
		Local $stdnecount = 0
		If GUICtrlRead($cmbsite) <> "888Poker" AND GUICtrlRead($cmbsite) <> "Party" AND GUICtrlRead($cmbsite) <> "Bwin" AND GUICtrlRead($cmbsite) <> "Ignition" AND GUICtrlRead($cmbsite) <> "Bodog/Bovada" AND GUICtrlRead($cmbsite) <> "Carbon" Then
			$hlobby = getlobbyhnd()
			Sleep(10)
		EndIf
		Local $memstats = MemGetStats()
		fconsolewrite(@LF & "% in use: " & $memstats[0])
		While $bscheduleactive OR (NOT $bscheduleactive AND $brunonce)
			Local $lastaddmsg
			$lastaddmsg = ""
			Local $lastaddmsg2
			$lastaddmsg2 = ""
			$counthops = 0
			$waitinglistcount = 0
			$brunonce = False
			While $timetorun AND ((scheduledtorun($lobbyname) AND $bscheduleactive) OR (NOT $bscheduleactive))
				If GUICtrlRead($cmbsite) <> "888Poker" AND GUICtrlRead($cmbsite) <> "Party" AND GUICtrlRead($cmbsite) <> "Bwin" AND GUICtrlRead($cmbsite) <> "Ignition" AND GUICtrlRead($cmbsite) <> "Bodog/Bovada" AND GUICtrlRead($cmbsite) <> "Carbon" Then
					handlebegad()
					Sleep(10)
					handlecashier()
					Sleep(10)
					If $stdnecount >= 7 Then
						Sleep(10)
						$stdnecount = 0
					Else
						$stdnecount += 1
					EndIf
				EndIf
				ohcheckbotstotables()
				If _timer_diff($statstimer) >= 40 * 1000 Then
					$memstats = MemGetStats()
					fconsolewrite(@LF & "% in use: " & $memstats[0])
					If Number($memstats[0]) >= 42 Then
						_reducememory()
					EndIf
					$statstimer = _timer_init()
				EndIf
				Sleep(10)
				$tablecount = tablecount()
				Sleep(10)
				Local $botcount = botcount()
				Sleep(10)
				If $bscheduleactive AND scheduledtorun($lobbyname) Then
					TraySetToolTip("Scheduler On   " & "Hops: " & $counthops & "/" & GUICtrlRead($numhopstxt) & "  WaitList: " & $waitinglistcount & "/" & GUICtrlRead($txtmaxwaitinglist) & " Bots running: " & $botcount & "/" & "Tables open: " & $tablecount)
				ElseIf $bscheduleactive Then
					TraySetToolTip("Scheduler Off   " & "Hops: " & $counthops & "/" & GUICtrlRead($numhopstxt) & "  WaitList: " & $waitinglistcount & "/" & GUICtrlRead($txtmaxwaitinglist) & " Bots running: " & $botcount & "/" & "Tables open: " & $tablecount)
				Else
					ControlSetText($maingui, "", $lblschstatus, "Scheduler not running")
					TraySetToolTip("Hops: " & $counthops & "/" & GUICtrlRead($numhopstxt) & "  WaitList: " & $waitinglistcount & "/" & GUICtrlRead($txtmaxwaitinglist) & "Tables open: " & $tablecount)
				EndIf
				$brunning = True
				ConsoleWrite(".:.")
				Sleep(10)
				updatestatusbar()
				Sleep(10)
				If checkalreadyseated() Then
				EndIf
				If GUICtrlRead($cmbsite) == "888Poker" Then
					If checkremovedwlwindow() Then
					EndIf
				EndIf
				eeehandlextrawin()
				checkeeepopups()
				Sleep(10)
				Local $totaltables
				If GUICtrlRead($chkspeedpoker) == $gui_checked Then
					If GUICtrlRead($cmbsite) == "888Poker" Then
						$totaltables = 2
					Else
						$totaltables = GUICtrlRead($numbotscmb)
					EndIf
				Else
					$totaltables = GUICtrlRead($numbotscmb)
				EndIf
				checknewtablescash()
				If tablecount() < $totaltables Then
					If GUICtrlRead($cmbsite) <> "888Poker" AND GUICtrlRead($cmbsite) <> "Party" AND GUICtrlRead($cmbsite) <> "Bwin" AND GUICtrlRead($cmbsite) <> "Party" AND GUICtrlRead($cmbsite) <> "Ignition" AND GUICtrlRead($cmbsite) <> "Bodog/Bovada" AND GUICtrlRead($cmbsite) <> "Carbon" Then
						$hlobby = getlobbyhnd()
						Sleep(10)
						If $hbacount >= 8 Then
							handlebegad()
							Sleep(10)
							$hbacount = 0
						Else
							$hbacount += 1
						EndIf
						handlecashier()
						Sleep(10)
					ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
						$hlobby = WinGetHandle($eeelobbyname)
					ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
						$hlobby = WinGetHandle($lobbyname)
					ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
						$hlobby = WinGetHandle($partylobbyname)
					ElseIf GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "ACR" Then
						$hlobby = WinGetHandle("[REGEXPTITLE:\A.*Poker Lobby Logged in as.*\z]")
					Else
						$hlobby = WinGetHandle($bodoglobbyname)
					EndIf
					If $tablecount <= GUICtrlRead($numbotscmb) Then
						If $counthops < GUICtrlRead($numhopstxt) Then
							Sleep(10)
							tableresize()
							Sleep(10)
							If $tslastlaunch == -10 OR _timer_diff($tslastlaunch) / 1000 >= Number($secondsbetweenlaunch) OR $tablecount == 0 Then
								If $waitinglistcount < GUICtrlRead($txtmaxwaitinglist) OR GUICtrlRead($chkwaitinglist) <> 1 Then
									$lastaddmsg = "Main: Adding new table"
									If $waitinglistcount > $maxwaitinglist Then $waitinglistcount = $maxwaitinglist
									If $tablecount < GUICtrlRead($numbotscmb) Then
										If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
											addtablebodog()
											Sleep(10)
										ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
											addtableeee()
											Sleep(10)
										ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
											addtablemerge()
											Sleep(10)
										ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
											addtableparty()
										ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
											addtableacr()
										Else
											addtableipoker()
											Sleep(10)
										EndIf
									EndIf
									$tslastlaunch = _timer_init()
								Else
									$lastaddmsg = "Main: Not adding to waiting list " & $waitinglistcount & " of " & $maxwaitinglist & " reached"
								EndIf
							Else
								$lastaddmsg = "Not adding table yet - timer delay " & $secondsbetweenlaunch & " secs"
							EndIf
						Else
							$lastaddmsg = "Not adding table - We have reached # of hops"
						EndIf
					Else
						$lastaddmsg = "Not adding table - We have more tables than bots open " & $tablecount & ">" & $botcount
					EndIf
				Else
					$lastaddmsg = "Not adding table - We have reached max tables " & $tablecount & "/" & GUICtrlRead($numbotscmb)
					If GUICtrlRead($numbotscmb) == $tablecount AND WinGetState($hlobby) <> 23 Then
					EndIf
					$waitinglistcount = 0
				EndIf
				If GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
					checkwaitinglist()
				EndIf
				If GUICtrlRead($cmbsite) == "Carbon" Then
					checkwaitinglistjoin()
					Sleep(10)
					checkwaitinglist()
					Sleep(10)
					If seatavailable() Then
						Sleep(10)
						checkwaitinglist()
						Sleep(10)
					EndIf
				EndIf
				If GUICtrlRead($cmbsite) == "888Poker" Then
					jackpotwinhandle()
					Sleep(10)
					Sleep(10)
					If checkwaitinglist() Then
					EndIf
					Sleep(10)
					Sleep(10)
					Sleep(10)
				EndIf
				If GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Poker770" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Winner" OR GUICtrlRead($cmbsite) == "WillHill" Then
					checkfullwaitlisterror()
					Sleep(10)
					If $hbacount >= 8 Then
						handlebegad()
						Sleep(10)
						$hbacount = 0
					Else
						$hbacount += 1
					EndIf
					joinwaitinglist()
					Sleep(10)
					If seatavailable() Then
						Sleep(10)
						checkwaitinglist()
						Sleep(10)
					Else
						checkwaitinglist()
						Sleep(10)
					EndIf
					closeanyextrawindows()
					Sleep(10)
					clearinvalidwaitinglistcount()
					Sleep(10)
					closescwindow()
					Sleep(10)
					Sleep(10)
					handlesitoutwindow()
					Sleep(10)
				EndIf
				Sleep(10)
				closeanyareyousurewindows()
				Sleep(10)
				If $lastaddmsg <> $lastaddmsg2 Then
					$lastaddmsg2 = $lastaddmsg
					fconsolewrite($lastaddmsg)
					Sleep(10)
				EndIf
				If $counthops >= GUICtrlRead($numhopstxt) AND numtablesactive() == 0 Then
					$timetorun = False
					ExitLoop
				EndIf
				checkhoptimer()
				Sleep(10)
				checkbotstotables()
				Sleep(10)
				checkdeadtablescash()
				Sleep(10)
				clearoldavoidtables()
				Sleep(400)
			WEnd
			logit("WE194")
			logit("IF195")
			If $brunning Then
				fconsolewrite("Schedule or session is done Hopper will now exit all tables")
				$waitinglistcount = 0
				$counthops = 0
				leavealltables()
				$brunning = False
			Else
				Sleep(5000)
			EndIf
			logit("EN196")
			Sleep(10)
		WEnd
		logit("EN199")
		Sleep(10)
		Exit
		logit("EN200")
		logit("EN791")
	EndFunc

	Func checkwaitinglistjoin()
		logit("FU281")
		logit("IF282")
		If WinExists("Joined waitlist for") Then
			fconsolewrite("CWLJ: Clicking 'Join Waiting List'")
			Local $hwaitinglist = WinGetHandle("Joined waitlist for")
			WinSetOnTop($hwaitinglist, "", 1)
			WinActivate($hwaitinglist)
			Local $hwaitpos = WinGetPos($hwaitinglist)
			logit("IF283")
			If IsArray($hwaitpos) Then
				MouseClick("left", $hwaitpos[0] + 286, $hwaitpos[1] + 166, 1, 0)
				WinWaitClose($hwaitinglist, "", 2)
			EndIf
			logit("EN284")
		EndIf
		logit("EN285")
		logit("EN286")
	EndFunc

	Func addtablemerge()
		logit("FU1958")
		$nam1 = "CB"
		$hlobby = WinGetHandle($lobbyname)
		fconsolewrite("AT: Add Table Begin")
		clearoldavoidtables()
		Local $userminavgpot = ControlGetText($maingui, "", $txtminavgpot)
		Local $usermaxavgpot = ControlGetText($maingui, "", $txtmaxavgpot)
		Local $userminplrflop = ControlGetText($maingui, "", $txtminplrflop)
		Local $usermaxplrflop = ControlGetText($maingui, "", $txtmaxplrflop)
		Local $userminhands = ControlGetText($maingui, "", $txtminhands)
		Local $usermaxhands = ControlGetText($maingui, "", $txtmaxhands)
		checkdeadtables()
		logit("IF1959")
		logit("EN1962")
		fconsolewrite("AT: Scanning Lobby:" & StringRegExpReplace(WinGetTitle($hlobby), "As .*\z", "As [OpenHoldemStore]"))
		Sleep(500)
		WinActivate($hlobby)
		Local $lobbypos = WinGetPos($hlobby)
		Local $range = -0.1
		Local $tablename = ""
		Local $buyin
		Local $players
		Local $title
		logit("IF1963")
		$trn = getplaylinevaluescash()
		logit("IF1964")
		If NOT IsArray($trn) Then
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled")
			Return
		EndIf
		logit("EN1968")
		Local $scantoptables
		logit("IF1969")
		If GUICtrlRead($txtscantop) == 0 OR NOT GUICtrlRead($txtscantop) Then
			$scantoptables = 23
		Else
			$scantoptables = GUICtrlRead($txtscantop)
			fconsolewrite("AT: ScanTopTables = " & $scantoptables)
		EndIf
		logit("EN1970")
		logit("FO1971")
		For $a = 0 To $scantoptables - 1
			logit("IF1974")
			If IsArray($lobbypos) Then
				Local $sitting = PixelSearch($lobbypos[0] + 279, $lobbypos[1] + 206 + (22 * $a), $lobbypos[0] + 279, $lobbypos[1] + 206 + (22 * $a), 24735, 3, 1, $hlobby)
				Local $wlchk = PixelSearch($lobbypos[0] + 285, $lobbypos[1] + 206 + (22 * $a), $lobbypos[0] + 285, $lobbypos[1] + 206 + (22 * $a), 10005171, 3, 1, $hlobby)
				logit("IF1975")
				If IsArray($sitting) Then
					fconsolewrite("Already seated, checking next table")
					Sleep(10)
					ContinueLoop
				ElseIf IsArray($wlchk) Then
					fconsolewrite("Already on Waitlist, checking next table")
					Sleep(10)
					ContinueLoop
				EndIf
				logit("EN1976")
			EndIf
			logit("EN1977")
			Local $textcolor = PixelGetColor($lobbypos[0] + 492, $lobbypos[1] + 208 + (22 * $a), $hlobby)
			$tablename = _scanstringwithoutscreenshot(277, 202 + (22 * $a), 428, 214 + (22 * $a), $textcolor, $range, $hlobby)
			$tablename = StringRegExpReplace($tablename, "\s", "")
			fconsolewrite("TableName = " & $tablename)
			$buyin = _scanstringwithoutscreenshot(586, 202 + (22 * $a), 677, 214 + (22 * $a), $textcolor, $range, $hlobby)
			$buyin = StringRegExpReplace($buyin, "\s", "")
			Local $maxbuyin = StringStripWS(StringMid($buyin, StringInStr($buyin, "/") + 2), 3)
			logit("IF1980")
			If Number($maxbuyin) > Number(GUICtrlRead($txtmaxbuyin)) Then
				fconsolewrite("Table: " & $tablename & "Max Buyin: " & $maxbuyin & " is greater than user entered: " & GUICtrlRead($txtmaxbuyin) & ", checking next line")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1981")
			If StringInStr($buyin, "004") Then
				$buyin = StringReplace($buyin, "004", "0.04")
			EndIf
			If StringInStr($buyin, "002") Then
				$buyin = StringReplace($buyin, "002", "0.02")
			EndIf
			fconsolewrite("Buyin = " & $buyin)
			$players = _scanstringwithoutscreenshot(679, 202 + (22 * $a), 741, 214 + (22 * $a), $textcolor, $range, $hlobby)
			$players = StringRegExpReplace($players, "\s", "")
			fconsolewrite("Players = " & $players)
			If StringInStr($players, "/") Then
				Local $newplayers = StringSplit($players, "/")
			Else
				Return
			EndIf
			Local $newseated = ""
			Local $maxseated = ""
			logit("IF1820")
			If IsArray($newplayers) Then
				$newseated = $newplayers[1]
				$maxseated = $newplayers[2]
				fconsolewrite("players seated: " & $newseated)
				fconsolewrite("seats: " & $maxseated)
			Else
				fconsolewrite("Players NA: " & $players)
				Return
			EndIf
			Local $userbuyin
			Local $split
			Local $rawtoplay = IniReadSection($inifile, "toplayCash")
			For $x = 1 To UBound($rawtoplay) - 1
				$split = StringSplit($rawtoplay[$x][0], "~")
				If IsArray($split) Then
					If StringInStr($maxseated, $split[3]) AND StringInStr($buyin, $split[2]) Then
						fconsolewrite("*1*: seated: " & $maxseated & " == " & $split[3])
						fconsolewrite("*1*: buyin: " & $buyin & " == " & $split[2])
						$userbuyin = $buyin
						ExitLoop
					Else
						fconsolewrite("*2*: newseated: " & $maxseated & " <> " & $split[3])
						fconsolewrite("*2*: buyin: " & $buyin & " <> " & $split[2])
						Sleep(10)
						ContinueLoop
					EndIf
				Else
					ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
					Sleep(1000)
					MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled")
					Return
				EndIf
				Sleep(10)
			Next
			logit("IF1990")
			If NOT $userbuyin Then
				fconsolewrite("UserBuyin is False")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1991")
			logit("IF1992")
			Local $newbuyin = StringMid($userbuyin, StringInStr($userbuyin, "/") + 2)
			logit("EN1993")
			ConsoleWrite("AT $newBuyIn: " & $newbuyin & @LF)
			logit("IF1996")
			Local $avgpot = _scanstringwithoutscreenshot(743, 202 + (22 * $a), 805, 214 + (22 * $a), $textcolor, $range, $hlobby)
			$avgpot = StringRegExpReplace($avgpot, "\s", "")
			logit("IF1997")
			If StringInStr($avgpot, ",") Then
				$avgpot = StringReplace($avgpot, ",", "")
			EndIf
			logit("EN1998")
			ConsoleWrite("AvgPot = " & $avgpot & @LF)
			logit("IF1999")
			$avgpot = StringStripWS(StringTrimLeft($avgpot, 1), 8)
			logit("EN2000")
			ConsoleWrite("AvgPot = " & $avgpot & @LF)
			logit("IF2001")
			If Number($avgpot) < Number($userminavgpot) * Number($newbuyin) Then
				fconsolewrite("Table: " & $tablename & "AT: AvgPot is less than Minimum AvgPot entered by user: " & ($avgpot) & " < " & ($userminavgpot) * Number($newbuyin))
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN2002")
			logit("IF2003")
			If Number($avgpot) > Number($usermaxavgpot) * Number($newbuyin) Then
				fconsolewrite("Table: " & $tablename & "AT: AvgPot is greater than Maximum AvgPot entered by user: " & ($avgpot) & " > " & ($usermaxavgpot) * Number($newbuyin))
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN2004")
			Local $plrflop = _scanstringwithoutscreenshot(807, 202 + (22 * $a), 869, 214 + (22 * $a), $textcolor, $range, $hlobby)
			$plrflop = StringStripWS(StringTrimRight($plrflop, 1), 8)
			$plrflop = StringRegExpReplace($plrflop, "\s", "")
			ConsoleWrite("Players/Flop = " & $plrflop & @LF)
			logit("IF2005")
			If Number($plrflop) < Number($userminplrflop) Then
				fconsolewrite("Table: " & $tablename & "AT: Plyr/Flop is less than Minimum Plyr/Flop entered by user: " & ($plrflop) & " < " & ($userminplrflop))
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN2006")
			logit("IF2007")
			If Number($plrflop) > Number($usermaxplrflop) Then
				fconsolewrite("Table: " & $tablename & "AT: Plyr/Flop is greater than Maximum Plyr/Flop entered by user: " & ($plrflop) & " > " & ($usermaxplrflop))
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN2008")
			Local $handshour = _scanstringwithoutscreenshot(871, 202 + (22 * $a), 933, 214 + (22 * $a), $textcolor, $range, $hlobby)
			$handshour = StringRegExpReplace($handshour, "\s", "")
			logit("IF1814")
			If Number($handshour) < Number($userminhands) Then
				fconsolewrite("AT: Hands/hr is less than Minimum Hands/hr entered by user: " & ($handshour) & " < " & ($userminhands))
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN1815")
			logit("IF1816")
			If Number($handshour) > Number($usermaxhands) Then
				fconsolewrite("AT: Hands/hr is greater than Maximum Hands/hr entered by user: " & ($handshour) & " > " & ($usermaxhands))
				Sleep(10)
				ContinueLoop
			EndIf
			logit("IF2010")
			If NOT $tablename Then
				fconsolewrite("AT: Nothing scanned, checking next line")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN2011")
			Local $cnt = 0
			logit("FO2012")
			For $d = 0 To UBound($avoidtables) - 1
				logit("IF2013")
				If StringInStr($avoidtables[$d], $tablename) > 0 Then
					fconsolewrite("Avoiding " & $tablename)
					$cnt = 1
					ExitLoop
				EndIf
				logit("EN2014")
				Sleep(10)
			Next
			logit("NE2015")
			logit("IF2016")
			If $cnt > 0 Then
				ConsoleWrite("Cnt > 0" & @LF)
				Sleep(10)
				ContinueLoop
			EndIf
			logit("IF2017")
			If $buyin == $userbuyin Then ConsoleWrite("Buyin matches ," & @LF)
			logit("IF2018")
			If $buyin == $userbuyin AND checkplayer($players) AND _arraysearch($avoidtables, $tablename) == -1 Then
				fconsolewrite("AT: Found: " & $tablename)
				WinActivate($hlobby)
				Local $winlist = tablelist()
				Local $ntables = $winlist[0][0]
				Local $noldtables = $winlist[0][0]
				$bwaitinglist = False
				logit("IF2019")
				fconsolewrite("AT: Clicking Go To Table")
				WinActivate($hlobby)
				$winpos = WinGetPos($hlobby)
				logit("IF623")
				WinActivate($hlobby)
				WinWaitActive($hlobby, "", 2)
				Opt("MouseClickDownDelay", 50)
				Sleep(500)
				$bwaitinglist = False
				logit("IF657")
				Local $totplayers = $newplayers[2]
				Local $seated = $newplayers[1]
				MouseClick("left", $winpos[0] + 533, 207 + $winpos[1] + (22 * $a), 1, 1)
				MouseClick("right", $winpos[0] + 533, 207 + $winpos[1] + (22 * $a), 1, 1)
				WinWait("[REGEXPCLASS:\A#32768\z]", "", 2)
				Local $menupos
				If Number($seated) == Number($totplayers) Then
					logit("IF658")
					ConsoleWrite("Full Table Merge" & @LF)
					If GUICtrlRead($chkwaitinglist) == 1 AND detectwaitinglistbutton() == 1 Then
						fconsolewrite("AT: using Waiting List")
						If WinExists("[REGEXPCLASS:\A#32768\z]") Then
							$menupos = WinGetPos("[REGEXPCLASS:\A#32768\z]")
							If IsArray($menupos) Then
								MouseMove($menupos[0] + 61, $menupos[1] + 57, 1)
								MouseDown("left")
								Sleep(300)
								MouseUp("left")
							EndIf
						EndIf
						Sleep(400)
						logit("IF659")
						WinWait("Joined waitlist for", "", 2)
						If WinExists("Joined waitlist for") Then
							checkwaitinglistjoin()
							Sleep(500)
							If NOT WinExists("Joined waitlist for") Then
								$bwaitinglist = True
								$waitinglistcount += 1
								fconsolewrite("AT: Add Successful: " & $waitinglistcount & " waiting lists added")
								logit("IF673")
								$title = StringRegExpReplace($tablename, "\s", "")
								logit("IF675")
								Return
							EndIf
						EndIf
						If NOT seatavailable() Then
							For $x = 0 To 10
								Sleep(1000)
								If seatavailable() Then
									checkwaitinglist($tablename)
									Return
								EndIf
								If detectwaitinglistbutton() == 0 OR seatavailable() Then ExitLoop
							Next
						EndIf
						Sleep(1000)
						If detectwaitinglistbutton() <> 0 Then
							fconsolewrite("AT:  Waiting List Click was unsuccessful")
							$bwaitinglist = False
							Sleep(10)
							ContinueLoop
						Else
							$bwaitinglist = True
							$waitinglistcount += 1
							fconsolewrite("AT: Add Successful: " & $waitinglistcount & " waiting lists added")
							logit("IF673")
							$title = StringRegExpReplace($tablename, "\s", "")
							logit("IF675")
							Return
						EndIf
						logit("EN676")
						logit("EN677")
					ElseIf GUICtrlRead($chkwaitinglist) == 1 AND detectwaitinglistbutton() == 0 Then
						fconsolewrite("Already on the waiting list for: " & $tablename)
						Sleep(10)
						ContinueLoop
					Else
						fconsolewrite("Could Not Find Waitlist button for " & $tablename)
						windowdump()
						Sleep(10)
						ContinueLoop
					EndIf
					logit("EN678")
				Else
					ConsoleWrite("Seats Open Merge" & @LF)
					fconsolewrite("AT: No Pawn")
					If WinExists("[REGEXPCLASS:\A#32768\z]") Then
						$menupos = WinGetPos("[REGEXPCLASS:\A#32768\z]")
						If IsArray($menupos) Then
							$menupos = WinGetPos("[REGEXPCLASS:\A#32768\z]")
							ConsoleWrite("Clicking join Table" & @LF)
							MouseMove($menupos[0] + 58, $menupos[1] + 40, 1)
							MouseDown("left")
							Sleep(300)
							MouseUp("left")
						EndIf
					Else
						fconsolewrite("Could not find Join Table Window")
						windowdump()
					EndIf
					logit("IF687")
				EndIf
				logit("EN2038")
				Sleep(200)
				WinSetOnTop($hlobby, "", 0)
				For $z = 0 To 10
					$winlist = tablelist()
					$ntables = $winlist[0][0]
					Sleep(1000)
					If $ntables <> $noldtables Then ExitLoop
				Next
				logit("IF2039")
				If $ntables == $noldtables Then
					fconsolewrite("AT: Timed out waiting for table to start up - restarting scan")
					ExitLoop
				EndIf
				logit("EN2040")
				Local $tableassigned = False
				$hactive = -10
				Local $b = 0
				logit("FO2041")
				For $b = 1 To $winlist[0][0]
					logit("IF2042")
					If _arraysearch($htable, $winlist[$b][1]) == -1 Then
						fconsolewrite("AT: Spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [OpenHoldemStore]"))
						logit("FO2043")
						For $c = 0 To 18
							logit("IF2044")
							If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
								$htable[$c] = $winlist[$b][1]
								$tableassigned = True
								$hactive = $c
								fconsolewrite("AT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "")
								ExitLoop
							EndIf
							logit("EN2045")
							Sleep(10)
						Next
						logit("NE2046")
						logit("IF2047")
						If $tableassigned Then
						Else
							fconsolewrite("AT: Couldn't find an empty handle, Closing window")
							WinClose($winlist[$b][1])
							WinWaitClose($winlist[$b][1], "", 2)
						EndIf
						logit("EN2048")
						ExitLoop
					EndIf
					logit("EN2049")
					Sleep(10)
				Next
				logit("NE2050")
				logit("IF2051")
				If NOT $tableassigned Then
					fconsolewrite("AT: Table not assigned, Restarting scan for table from the top")
					ExitLoop
				EndIf
				logit("EN2052")
				$x = IniRead($inifile, "settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
				Local $y = IniRead($inifile, "settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
				Local $sittingattable = False
				For $z = 0 To 10
					Local $tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
					logit("IF2053")
					If IsArray($tablepos) Then
						logit("IF2054")
						If NOT ($tablepos[0] == $x AND $tablepos[1] == $y) Then
							fconsolewrite("AT: Moving table " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), "As .*\z", "As [OpenHoldemStore]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
							WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 808, 644, 1)
							Sleep(500)
						Else
							fconsolewrite("AT: No need to move table - it's in the right position")
							WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
							ExitLoop
						EndIf
						logit("EN2055")
					EndIf
					logit("EN2056")
					If ($tablepos[0] == $x AND $tablepos[1] == $y) Then ExitLoop
					Sleep(1000)
				Next
				WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 1)
				Sleep(1000)
				logit("IF2057")
				Local $sattable = False
				If NOT $bwaitinglist Then
					For $z = 0 To 10
						logit("IF2058")
						If $hactive > 6 Then ExitLoop
						If sitattable(arrayget("FMTS2119z", $htable, $hactive), $split[3]) Then
							$sattable = True
							$sittingattable = True
							ExitLoop
						EndIf
						$sittingattable = sittingattable(arrayget("FMTS2119z", $htable, $hactive))
						If $sittingattable OR NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then ExitLoop
						Sleep(1000)
					Next
					logit("IF2059")
					If NOT $sittingattable AND NOT $sattable Then
						fconsolewrite("AT: Unable to sit at table")
						If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
							WinClose(arrayget("FMTS2121z", $htable, $hactive))
							WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
						EndIf
						ExitLoop
					Else
						$title = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
						Local $newtitle = StringLeft($title, StringInStr($title, "(") - 2)
						$newtitle = StringRegExpReplace($newtitle, "\s", "")
						$counthops += 1
						tablesseated($newtitle)
						$timetable[$hactive] = _timer_init()
					EndIf
					logit("EN2060")
				EndIf
				logit("EN2061")
				WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
				logit("IF2066")
				logit("IF2081")
				If $nohidebot == 0 Then hidebot(arrayget("FMTS2119z", $hoh, $hactive))
				$tslastlaunch = _timer_init()
				Sleep(500)
				$winpos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
				logit("IF2082")
				If IsArray($winpos) AND WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)) <> "" AND $autopost == 1 Then
					logit("IF2083")
					If PixelGetColor($winpos[0] + 646, $winpos[1] + 466, arrayget("FMTS2119z", $htable, $hactive)) <> 789516 Then
						MouseMove($winpos[0] + 646, $winpos[1] + 464, 1)
						MouseDown("left")
						Sleep(300)
						MouseUp("left")
					EndIf
					logit("EN2084")
				EndIf
				logit("EN2085")
				logit("IF2086")
				If IsArray($winpos) AND WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)) <> "" Then
					MouseClick("left", $winpos[0] + 43, $winpos[1] + 463, 1, 0)
				EndIf
				logit("EN2087")
				logit("EN2092")
				Return
			ElseIf NOT checkplayer($players) Then
				fconsolewrite("Check Players = False")
				Sleep(10)
				ContinueLoop
			EndIf
			logit("EN2093")
			Sleep(10)
		Next
		logit("NE2094")
		logit("EN2095")
	EndFunc

	Func checkalreadyseated()
		logit("FU1997")
		If GUICtrlRead($cmbsite) == "Carbon" Then
			If WinExists("Error", "OK") Then
				Local $errpos = WinGetPos("Error", "OK")
				If IsArray($errpos) Then
					If $errpos[2] == 471 AND $errpos[3] == 245 Then
						fconsolewrite("Carbon: Already playing window found, closing now...")
						WinActivate("Error", "OK")
						WinWaitActive("Error", "OK", 1)
						MouseClick("left", $errpos[0] + 405, $errpos[1] + 221, 1, 0)
						WinWaitClose("Error", "OK", 1)
						Return True
					EndIf
				EndIf
			EndIf
		Else
			Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
			logit("IF1998")
			If IsArray($winlist) Then
				logit("FO1999")
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					logit("IF2000")
					If IsArray($winpos) Then
						logit("IF2001")
						If $winpos[2] == 402 AND $winpos[3] == 265 AND (WinGetState($winlist[$x][1]) == 7 OR WinGetState($winlist[$x][1]) == 15) Then
							logit("IF2002")
							If GUICtrlRead($cmbsite) == "Titan" Then
								logit("IF2003")
								If PixelGetColor($winpos[0] + 101, $winpos[1] + 104, $winlist[$x][1]) == 0 AND PixelGetColor($winpos[0] + 185, $winpos[1] + 111, $winlist[$x][1]) == 0 AND PixelGetColor($winpos[0] + 305, $winpos[1] + 110, $winlist[$x][1]) == 0 Then
									fconsolewrite("Already seated window found, closing now")
									WinClose($winlist[$x][1])
									Sleep(500)
									logit("IF2004")
									If WinExists($winlist[$x][1]) Then
										WinActivate($winlist[$x][1])
										MouseClick("left", $winpos[0] + 200, $winpos[1] + 241, 1, 0)
									EndIf
									logit("EN2005")
									Return True
								Else
									handlesitoutwindow()
									Sleep(10)
									ContinueLoop
								EndIf
								logit("EN2006")
							EndIf
							logit("EN2015")
						EndIf
						logit("EN2016")
					EndIf
					logit("EN2017")
					Sleep(10)
				Next
				logit("NE2018")
			EndIf
		EndIf
		logit("EN2019")
		Return False
		logit("EN2020")
	EndFunc

	Func checknewtablescash($hwnd = -1)
		logit("FU640")
		Local $tableassigned = False
		$hactive = -10
		Local $b = 0
		Local $winlist = tablelist()
		Local $gctitle
		Local $tablename, $x, $y, $tablepos, $sattable, $temptitle, $newtitle, $sittingattable, $titlearr, $newbotlist, $split, $newbuyin, $wintitle
		Local $buysearch, $buycolor, $htemppos, $hndbuyin, $cgcwinlist, $title, $maxsafety
		tableresize()
		logit("IF407")
		If IsArray($winlist) AND $winlist[0][0] > 0 Then
			logit("FO408")
			For $b = 1 To $winlist[0][0]
				If StringInStr($winlist[$b][0], "SciTE") OR StringInStr($winlist[$b][0], ".au3") OR StringInStr($winlist[$b][0], ".ohf") OR StringInStr($winlist[$b][0], ".oppl") Then ContinueLoop
				If GUICtrlRead($cmbsite) == "888Poker" Then
					$gctitle = "Choose your buy-in amount"
					$tablename = WinGetTitle($winlist[$b][1])
					logit("IF642")
					If _arraysearch($htable, $winlist[$b][1]) == -1 AND (WinGetState($winlist[$b][1]) == 7 OR WinGetState($winlist[$b][1]) == 15) Then
						fconsolewrite("New table spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [OpenHoldemStore]"))
						logit("FO643")
						For $c = 0 To 18
							logit("IF644")
							If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
								$htable[$c] = $winlist[$b][1]
								$hwnd = $winlist[$b][1]
								$tableassigned = True
								$hactive = $c
								fconsolewrite("Assigning h(" & $winlist[$b][1] & ") to table " & $c & "")
								ExitLoop
							EndIf
							logit("EN645")
							Sleep(10)
						Next
						logit("NE646")
						logit("IF647")
						If $tableassigned Then
							fconsolewrite("Handle Assigned")
							logit("IF648")
							If $tableassigned Then
								ConsoleWrite("x" & $hactive & "Txt" & GUICtrlRead($cmbsite) & @LF)
								$x = IniRead($inifile, "Settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								$y = IniRead($inifile, "Settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								For $z = 0 To 20
									$tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
									logit("IF649")
									If NOT IsArray($tablepos) Then
										Return False
									EndIf
									logit("IF650")
									If $tablepos[0] <> $x OR $tablepos[1] <> $y Then
										fconsolewrite("CNT: Moving table " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), "As .*\z", "As [OpenHoldemStore]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
										WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 562, 387, 1)
										Sleep(10)
									Else
										WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
										ExitLoop
									EndIf
									logit("EN651")
									Sleep(500)
									If $tablepos[0] == $x AND $tablepos[1] == $y Then ExitLoop
								Next
							EndIf
							logit("EN652")
							logit("IF653")
							$sattable = False
							If sittingattable(arrayget("FMTS2119z", $htable, $hactive)) Then
								$temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
								$titlearr = StringSplit($temptitle, " ")
								$newtitle = $titlearr[1]
								$newtitle = StringRegExpReplace($newtitle, "\s", "")
								$timetable[$hactive] = _timer_init()
								tablesseated($newtitle)
							Else
								$sittingattable = False
								For $y = 0 To 20
									logit("IF654")
									If $hactive > 6 Then
										Return
									EndIf
									If sitattable(arrayget("FMTS2119z", $htable, $hactive)) Then
										$sattable = True
										$sittingattable = True
										ExitLoop
									EndIf
									Sleep(500)
									$sittingattable = sittingattable(arrayget("FMTS2119z", $htable, $hactive))
									If $sattable OR $sittingattable OR NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then ExitLoop
								Next
								logit("IF655")
								If NOT $sittingattable AND NOT $sattable Then
									fconsolewrite("CNT: Unable to sit at table for an unknown reason  Closing table now")
									If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
										WinClose(arrayget("FMTS2121z", $htable, $hactive))
										WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
									EndIf
									closeanyareyousurewindows()
									Return
								Else
									$timetable[$hactive] = _timer_init()
									$temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
									$titlearr = StringSplit($temptitle, " ")
									$newtitle = $titlearr[1]
									$newtitle = StringRegExpReplace($newtitle, "\s", "")
									$timetable[$hactive] = _timer_init()
									tablesseated($newtitle)
									ConsoleWrite("CNT: Sitting at table" & @LF)
								EndIf
								logit("EN656")
							EndIf
							logit("EN657")
							checkgetchips($hwnd)
						Else
							fconsolewrite("CNT: Couldn't find an empty handle Closing window")
							logit("IF658")
							If WinExists($gctitle) Then
								SendKeepActive($gctitle)
								Send("{ESC}")
							EndIf
							logit("EN659")
							Sleep(10)
							WinClose($winlist[$b][1])
							WinWaitClose($winlist[$b][1], "", 2)
							closeanyareyousurewindows()
						EndIf
						logit("EN660")
						ExitLoop
					Else
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
					$gctitle = "Buy-In"
					$tablename = WinGetTitle($winlist[$b][1])
					logit("IF642")
					If _arraysearch($htable, $winlist[$b][1]) == -1 AND (WinGetState($winlist[$b][1]) == 7 OR WinGetState($winlist[$b][1]) == 15) Then
						fconsolewrite("New table spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [OpenHoldemStore]"))
						logit("FO643")
						If $winlist[0][0] > GUICtrlRead($numbotscmb) Then
							WinClose($winlist[$b][1])
							Return
						EndIf
						For $c = 0 To 18
							logit("IF644")
							If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
								$htable[$c] = $winlist[$b][1]
								$hwnd = $winlist[$b][1]
								$tableassigned = True
								$hactive = $c
								fconsolewrite("CNT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "")
								ExitLoop
							EndIf
							logit("EN645")
							Sleep(10)
						Next
						logit("NE646")
						logit("IF647")
						If $tableassigned Then
							logit("IF648")
							If $tableassigned Then
								$x = IniRead($inifile, "settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								$y = IniRead($inifile, "settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								For $z = 0 To 10
									$tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
									If ($tablepos[0] == $x AND $tablepos[1] == $y) Then ExitLoop
									$tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
									logit("IF649")
									If NOT IsArray($tablepos) Then
										Return False
									EndIf
									logit("IF650")
									If NOT ($tablepos[0] == $x AND $tablepos[1] == $y) Then
										fconsolewrite("CNT: Moving table " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), "As .*\z", "As [OpenHoldemStore]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
										WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 412, 305, 1)
										Sleep(10)
									Else
										WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
										ExitLoop
									EndIf
									Sleep(1000)
									logit("EN651")
								Next
							EndIf
							logit("EN652")
							logit("IF653")
							$sattable = False
							If sittingattable(arrayget("FMTS2119z", $htable, $hactive)) Then
								$temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
								$newtitle = StringLeft($temptitle, StringInStr($temptitle, "(") - 2)
								$newtitle = StringRegExpReplace($newtitle, "\s", "")
								$timetable[$hactive] = _timer_init()
								tablesseated($newtitle)
							Else
								For $x = 0 To 10
									If $hactive > 6 Then
										Return
									EndIf
									If sitattable(arrayget("FMTS2119z", $htable, $hactive)) Then
										$sattable = True
										$sittingattable = True
										ExitLoop
									EndIf
									Sleep(10)
									$sittingattable = sittingattable(arrayget("FMTS2119z", $htable, $hactive))
									Sleep(1000)
									If $sattable OR $sittingattable OR NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then ExitLoop
								Next
								logit("IF655")
								If NOT $sittingattable AND NOT $sattable Then
									fconsolewrite("CNT: Unable to sit at table for an unknown reason  Closing table now,")
									If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
										WinClose(arrayget("FMTS2121z", $htable, $hactive))
										WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
									EndIf
									closeanyareyousurewindows()
									Return
								Else
									$temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
									$newtitle = StringLeft($temptitle, StringInStr($temptitle, "(") - 2)
									$newtitle = StringRegExpReplace($newtitle, "\s", "")
									$timetable[$hactive] = _timer_init()
									tablesseated($newtitle)
									ConsoleWrite("CNT: Successfully sitting at table" & @LF)
								EndIf
								logit("EN656")
							EndIf
							logit("EN657")
							checkgetchips($hwnd)
						Else
							fconsolewrite("CNT: Couldn't find an empty handle Closing table.")
							logit("IF658")
							If WinExists($gctitle) Then
								SendKeepActive($gctitle)
								Send("{ESC}")
							EndIf
							logit("EN659")
							Sleep(10)
							WinClose($winlist[$b][1])
							WinWaitClose($winlist[$b][1], "", 2)
							closeanyareyousurewindows()
						EndIf
						logit("EN660")
						ExitLoop
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
					$tablename = WinGetTitle($winlist[$b][1])
					logit("IF642")
					If _arraysearch($htable, $winlist[$b][1]) == -1 AND (WinGetState($winlist[$b][1]) == 7 OR WinGetState($winlist[$b][1]) == 15) Then
						fconsolewrite("New table spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [www.openholdemstore.com]"))
						logit("FO643")
						For $c = 0 To 18
							logit("IF644")
							If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
								$htable[$c] = $winlist[$b][1]
								$hwnd = $winlist[$b][1]
								$tableassigned = True
								$hactive = $c
								fconsolewrite("CNT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "")
								ExitLoop
							EndIf
							logit("EN645")
							Sleep(10)
						Next
						logit("NE646")
						logit("IF647")
						If $tableassigned Then
							logit("IF648")
							If $tableassigned Then
								$x = IniRead($inifile, "settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								$y = IniRead($inifile, "settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								For $z = 0 To 10
									$tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
									logit("IF649")
									If NOT IsArray($tablepos) Then
										Return False
									EndIf
									logit("IF650")
									If NOT ($tablepos[0] == $x AND $tablepos[1] == $y) Then
										fconsolewrite("CNT: Moving table " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), "As .*\z", "As [OpenHoldemStore.com]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
										WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 486, 355, 1)
										Sleep(10)
									Else
										WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
										ExitLoop
									EndIf
									Sleep(1000)
									If ($tablepos[0] == $x AND $tablepos[1] == $y) Then ExitLoop
								Next
							EndIf
							logit("EN652")
							logit("IF653")
							$sattable = False
							If sittingattable(arrayget("FMTS2119z", $htable, $hactive)) Then
								$temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
								$newtitle = StringLeft($temptitle, StringInStr($temptitle, "-") - 2)
								$newtitle = StringRegExpReplace($newtitle, "\s", "")
								$timetable[$hactive] = _timer_init()
								tablesseated($newtitle)
							Else
								$sittingattable = False
								For $x = 0 To 10
									If $hactive > 6 Then
										Return
									EndIf
									If sitattable(arrayget("FMTS2119z", $htable, $hactive)) Then
										$sattable = True
										$sittingattable = True
										ExitLoop
									EndIf
									Sleep(10)
									$sittingattable = sittingattable(arrayget("FMTS2119z", $htable, $hactive))
									Sleep(1000)
									If $sattable OR $sittingattable OR NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then ExitLoop
								Next
								logit("IF655")
								If NOT $sittingattable AND NOT $sattable Then
									fconsolewrite("CNT: Unable to sit at table for an unknown reason,  Closing table now.")
									If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
										WinClose(arrayget("FMTS2121z", $htable, $hactive))
										WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
									EndIf
									closeanyareyousurewindows()
									Return
								Else
									$temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
									$newtitle = StringLeft($temptitle, StringInStr($temptitle, "-") - 2)
									$newtitle = StringRegExpReplace($newtitle, "\s", "")
									$timetable[$hactive] = _timer_init()
									tablesseated($newtitle)
									ConsoleWrite("CNT: Sitting at table" & @LF)
								EndIf
								logit("EN656")
							EndIf
							logit("EN657")
						Else
							fconsolewrite("CNT: Couldn't find an empty handle. Closing window")
							logit("IF658")
							logit("EN659")
							Sleep(10)
							WinClose($winlist[$b][1])
							WinWaitClose($winlist[$b][1], "", 2)
							closeanyareyousurewindows()
						EndIf
						logit("EN660")
						ExitLoop
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
					$tablename = WinGetTitle($winlist[$b][1])
					logit("IF642")
					If _arraysearch($htable, $winlist[$b][1]) == -1 AND (WinGetState($winlist[$b][1]) == 7 OR WinGetState($winlist[$b][1]) == 15) Then
						fconsolewrite("New table spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [www.openholdemstore.com]"))
						logit("FO643")
						For $c = 0 To 18
							logit("IF644")
							If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
								$htable[$c] = $winlist[$b][1]
								$hwnd = $winlist[$b][1]
								$tableassigned = True
								$hactive = $c
								fconsolewrite("CNT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "")
								ExitLoop
							EndIf
							logit("EN645")
							Sleep(10)
						Next
						logit("NE646")
						logit("IF647")
						If $tableassigned Then
							logit("IF648")
							If $tableassigned Then
								$x = IniRead($inifile, "settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								$y = IniRead($inifile, "settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								For $z = 0 To 10
									$tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
									logit("IF649")
									If NOT IsArray($tablepos) Then
										Return False
									EndIf
									logit("IF650")
									If NOT ($tablepos[0] == $x AND $tablepos[1] == $y) Then
										fconsolewrite("CNT: Moving table " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), "As .*\z", "As [OpenHoldemStore.com]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
										WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 486, 355, 1)
										Sleep(10)
									Else
										WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
										ExitLoop
									EndIf
									Sleep(1000)
									If ($tablepos[0] == $x AND $tablepos[1] == $y) Then ExitLoop
								Next
							EndIf
							logit("EN652")
							logit("IF653")
							$sattable = False
							If sittingattable(arrayget("FMTS2119z", $htable, $hactive)) Then
								$temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
								$newtitle = StringLeft($temptitle, StringInStr($temptitle, "-", 0, 2) - 1)
								$newtitle = StringRegExpReplace($newtitle, "\s", "")
								$timetable[$hactive] = _timer_init()
								tablesseated($newtitle)
							Else
								$sittingattable = False
								For $x = 0 To 10
									If $hactive > 6 Then
										Return
									EndIf
									If sitattable(arrayget("FMTS2119z", $htable, $hactive)) Then
										$sattable = True
										$sittingattable = True
										ExitLoop
									EndIf
									Sleep(10)
									$sittingattable = sittingattable(arrayget("FMTS2119z", $htable, $hactive))
									Sleep(1000)
									If $sattable OR $sittingattable OR NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then ExitLoop
								Next
								logit("IF655")
								If NOT $sittingattable AND NOT $sattable Then
									fconsolewrite("CNT: Unable to sit at table for an unknown reason,  Closing table now.")
									If WinExists(arrayget("FMTS2121z", $htable, $hactive)) Then
										WinClose(arrayget("FMTS2121z", $htable, $hactive))
										WinWaitClose(arrayget("FMTS2121z", $htable, $hactive), "", 2)
									EndIf
									closeanyareyousurewindows()
									Return
								Else
									$temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
									$newtitle = StringLeft($temptitle, StringInStr($temptitle, "-") - 2)
									$newtitle = StringRegExpReplace($newtitle, "\s", "")
									$timetable[$hactive] = _timer_init()
									tablesseated($newtitle)
									ConsoleWrite("CNT: Sitting at table" & @LF)
								EndIf
								logit("EN656")
							EndIf
							logit("EN657")
						Else
							fconsolewrite("CNT: Couldn't find an empty handle. Closing window")
							logit("IF658")
							logit("EN659")
							Sleep(10)
							WinClose($winlist[$b][1])
							WinWaitClose($winlist[$b][1], "", 2)
							closeanyareyousurewindows()
						EndIf
						logit("EN660")
						ExitLoop
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
					$tablename = WinGetTitle($winlist[$b][1])
					logit("IF623")
					If _arraysearch($htable, $winlist[$b][1]) == -1 AND (WinGetState($winlist[$b][1]) == 7 OR WinGetState($winlist[$b][1]) == 15) Then
						fconsolewrite("New table spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [www.openholdemstore.com]"))
						logit("FO624")
						For $c = 0 To 18
							logit("IF625")
							If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
								$htable[$c] = $winlist[$b][1]
								$hwnd = $winlist[$b][1]
								$tableassigned = True
								$hactive = $c
								fconsolewrite("CNT: Assigning h(" & $winlist[$b][1] & ") to table " & $c & "")
								ExitLoop
							EndIf
							logit("EN626")
							Sleep(10)
						Next
						logit("NE627")
						logit("IF628")
						If $tableassigned Then
							logit("IF629")
							If $tableassigned Then
								$x = IniRead($inifile, "settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								$y = IniRead($inifile, "settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								For $z = 0 To 10
									$tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
									logit("IF630")
									If NOT IsArray($tablepos) Then
										Return False
									EndIf
									logit("IF631")
									If NOT ($tablepos[0] == $x AND $tablepos[1] == $y) Then
										fconsolewrite("CNT: Moving table " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), "As .*\z", "As [OpenHoldemStore.com]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
										WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 808, 644, 1)
										Sleep(10)
									Else
										WinSetOnTop(arrayget("FMTS2119z", $htable, $hactive), "", 0)
										ExitLoop
									EndIf
									logit("EN632")
									If ($tablepos[0] == $x AND $tablepos[1] == $y) Then ExitLoop
								Next
							EndIf
							logit("EN633")
							checkgetchips($hwnd)
						Else
							fconsolewrite("CNT: Couldn't find an empty handle. Closing window")
							logit("IF634")
							If WinExists($getchipstitlebodog) Then
								SendKeepActive($getchipstitlebodog)
								Send("{ESC}")
							EndIf
							logit("EN635")
							Sleep(10)
							WinClose($winlist[$b][1])
							WinWaitClose($winlist[$b][1], "", 2)
							closeanyareyousurewindows()
						EndIf
						If sittingattable($winlist[$b][1]) Then
							$temptitle = $winlist[$b][0]
							$newtitle = StringMid($temptitle, StringInStr($temptitle, "-") + 2)
							$newtitle = StringRegExpReplace($newtitle, "\s", "")
							tablesseated($newtitle)
							$timetable[$hactive] = _timer_init()
						EndIf
						logit("EN636")
						ExitLoop
					EndIf
				Else
					$tablename = WinGetTitle($winlist[$b][1])
					$maxsafety = StringStripWS(StringMid($tablename, StringInStr($tablename, "/") + 1), 3)
					$maxsafety = StringReplace($maxsafety, "$", "")
					logit("IF409")
					If Number($maxsafety) > GUICtrlRead($txtmaxbuyin) Then
						fconsolewrite("Closing table: " & $tablename & ", table stakes: " & $maxsafety & " > user maxbuyin stake: " & GUICtrlRead($txtmaxbuyin))
						WinClose($winlist[$b][1])
						WinWaitClose($winlist[$b][1], "", 2)
						Sleep(10)
						ContinueLoop
					EndIf
					logit("EN410")
					logit("IF411")
					logit("IF412")
					If _arraysearch($htable, $winlist[$b][1]) == -1 AND WinExists($winlist[$b][1]) Then
						logit("IF413")
						If $winlist[0][0] > GUICtrlRead($numbotscmb) Then
							WinClose($winlist[$b][1])
							Return
						EndIf
						logit("EN414")
						$title = $winlist[$b][0]
						logit("IF415")
						If StringInStr($title, "-") Then
							$title = StringStripWS(StringLeft($title, StringInStr($title, "-") - 2), 3)
							$title = StringStripWS(StringMid($title, StringInStr($title, ":") + 2), 3)
							$title = StringRegExpReplace($title, "\s", "")
						Else
							$title = StringRegExpReplace($title, "\s", "")
						EndIf
						logit("EN416")
						fconsolewrite("New table spotted " & StringRegExpReplace($winlist[$b][0], "As .*\z", "As [www.openholdemstore.com]"))
						logit("FO417")
						For $c = 0 To 18
							logit("IF418")
							If (NOT WinExists($htable[$c])) OR ($htable[$c] == -10 OR NOT $htable[$c]) Then
								$htable[$c] = $winlist[$b][1]
								$hwnd = $winlist[$b][1]
								$tableassigned = True
								$hactive = $c
								fconsolewrite("CNT: Assigning h(" & $winlist[$b][1] & ") to table " & $hactive & "")
								ExitLoop
							EndIf
							logit("EN419")
							Sleep(10)
						Next
						logit("NE420")
						logit("IF421")
						If $tableassigned Then
							$cgcwinlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
							logit("IF422")
							If IsArray($cgcwinlist) Then
								logit("FO423")
								For $x = 1 To $cgcwinlist[0][0]
									$winpos = WinGetPos($cgcwinlist[$x][1])
									logit("IF424")
									If IsArray($winpos) AND $winpos[2] == 450 AND $winpos[3] == 320 AND (WinGetState($cgcwinlist[$x][1]) == 7 OR WinGetState($cgcwinlist[$x][1]) == 15) AND WinGetTitle(parentwindow($cgcwinlist[$x][1])) == $winlist[$b][0] Then
										fconsolewrite("CNT: Buy-in window found")
										logit("IF425")
										If GUICtrlRead($cmbsite) == "BNG" AND PixelGetColor($winpos[0] + 177, $winpos[1] + 302, $cgcwinlist[$x][1]) == 6513507 Then
											fmouseclick("left", $winpos[0] + 256, $winpos[1] + 300, 1, 0)
											fconsolewrite("CNT: Buyin disabled, exiting buyin")
											Return
										ElseIf GUICtrlRead($cmbsite) == "WillHill" AND PixelGetColor($winpos[0] + 177, $winpos[1] + 296, $cgcwinlist[$x][1]) == 6388877 Then
											fmouseclick("left", $winpos[0] + 270, $winpos[1] + 293, 1, 0)
											fconsolewrite("CNT: Buyin disabled, exiting buyin")
											Return
										ElseIf GUICtrlRead($cmbsite) == "Titan" AND PixelGetColor($winpos[0] + 178, $winpos[1] + 301, $cgcwinlist[$x][1]) == 10263708 Then
											fmouseclick("left", $winpos[0] + 256, $winpos[1] + 300, 1, 0)
											fconsolewrite("CNT: Buyin disabled, exiting buyin")
											Return
										Else
											$hndbuyin = WinGetHandle($cgcwinlist[$x][1])
											$htemppos = WinGetPos($hndbuyin)
											WinActivate($cgcwinlist[$x][1])
											logit("IF426")
											If IsArray($htemppos) Then
												logit("IF427")
												$buycolor = 16777215
												$buysearch = PixelSearch($htemppos[0] + 55, $htemppos[1] + 190, $htemppos[0] + 124, $htemppos[1] + 197, $buycolor, 0, 1, $hndbuyin)
												If GUICtrlRead($chkmaxbuyin) == $gui_checked OR NOT IsArray($buysearch) Then
													logit("IF428")
													If GUICtrlRead($cmbsite) == "BNG" AND PixelGetColor($htemppos[0] + 40, $htemppos[1] + 170, $hndbuyin) == 14474460 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 40, $htemppos[1] + 170, 1, 0)
													ElseIf GUICtrlRead($cmbsite) == "WillHill" AND PixelGetColor($htemppos[0] + 39, $htemppos[1] + 169, $hndbuyin) == 137257 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 169, 1, 0)
													ElseIf GUICtrlRead($cmbsite) == "Betfred" AND PixelGetColor($htemppos[0] + 39, $htemppos[1] + 169, $hndbuyin) == 14540253 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 169, 1, 0)
													ElseIf GUICtrlRead($cmbsite) == "Betfair" AND PixelGetColor($htemppos[0] + 39, $htemppos[1] + 169, $hndbuyin) == 14540253 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 169, 1, 0)
													ElseIf GUICtrlRead($cmbsite) == "Everest" AND PixelGetColor($htemppos[0] + 41, $htemppos[1] + 170, $hndbuyin) == 14540253 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 41, $htemppos[1] + 170, 1, 0)
													ElseIf GUICtrlRead($cmbsite) == "Turbo.fr" AND PixelGetColor($htemppos[0] + 41, $htemppos[1] + 170, $hndbuyin) == 14540253 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 41, $htemppos[1] + 170, 1, 0)
													ElseIf GUICtrlRead($cmbsite) == "Poker770" AND PixelGetColor($htemppos[0] + 40, $htemppos[1] + 170, $hndbuyin) == 15409179 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 169, 1, 0)
													ElseIf GUICtrlRead($cmbsite) == "Paddy" AND PixelGetColor($htemppos[0] + 39, $htemppos[1] + 171, $hndbuyin) == 15409179 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 39, $htemppos[1] + 171, 1, 0)
													ElseIf GUICtrlRead($cmbsite) == "Bet365" AND PixelGetColor($htemppos[0] + 29, $htemppos[1] + 170, $hndbuyin) == 16777215 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 29, $htemppos[1] + 170, 1, 0)
													ElseIf GUICtrlRead($cmbsite) == "Titan" AND PixelGetColor($htemppos[0] + 40, $htemppos[1] + 169, $hndbuyin) == 16382457 Then
														fconsolewrite("CNT: Clicking max buyin amount")
														fmouseclick("left", $htemppos[0] + 40, $htemppos[1] + 169, 1, 0)
													EndIf
													logit("EN429")
												Else
													Local $bb = ControlGetText($maingui, "", $buyintxt)
													ConsoleWrite("CNT: Buying in" & @LF)
													$wintitle = parenttitleforbuyin()
													logit("IF430")
													If $wintitle <> "" Then
														$wintitle = StringMid($wintitle, StringInStr($wintitle, "/") + 2)
														$newbuyin = $bb * $wintitle
														MouseClick("left", $htemppos[0] + 225, $htemppos[1] + 193, 2, 1)
														Sleep(200)
														If GUICtrlRead($buyintxt) <> "" Then
															WinActivate($hndbuyin)
															$split = StringSplit($newbuyin, "")
															logit("FO339")
															For $a = 1 To $split[0]
																Send($split[$a])
																Sleep(10)
															Next
														EndIf
														logit("NE432")
														Sleep(250)
													EndIf
													logit("EN433")
												EndIf
												logit("EN434")
												Sleep(10)
												WinActivate($cgcwinlist[$x][1])
												If GUICtrlRead($cmbsite) == "Bet365" Then
													MouseMove($htemppos[0] + 268, $htemppos[1] + 301)
												Else
													MouseMove($htemppos[0] + 183, $htemppos[1] + 298)
												EndIf
												MouseDown("left")
												Sleep(300)
												MouseUp("left")
												Sleep(500)
												logit("IF435")
												WinWaitClose($cgcwinlist[$x][1], "", 2)
												If NOT WinExists($cgcwinlist[$x][1]) AND NOT iswindowvisible($cgcwinlist[$x][1]) Then
													ExitLoop
												EndIf
												If checkminbuyinwindow() Then
													WinActivate($cgcwinlist[$x][1])
													MouseMove($htemppos[0] + 272, $htemppos[1] + 293)
													MouseDown("left")
													Sleep(300)
													MouseUp("left")
													Sleep(500)
													Return
												EndIf
												logit("EN436")
												checkinvalidbuyinwindow()
											EndIf
											logit("EN437")
										EndIf
										logit("EN438")
									EndIf
									logit("EN439")
									Sleep(10)
								Next
								logit("NE440")
							EndIf
							logit("EN441")
							logit("IF442")
							If $tableassigned Then
								$sittingattable = False
								logit("WH443")
								For $y = 0 To 10
									If checkalreadyseated() OR sittingattable(arrayget("FMTS2119z", $htable, $hactive)) Then
										ExitLoop
									EndIf
									Sleep(500)
								Next
								logit("WE446")
								logit("IF447")
								If NOT sittingattable(arrayget("FMTS2119z", $htable, $hactive)) Then
									WinClose(arrayget("FMTS2119z", $htable, $hactive))
									WinWaitClose(arrayget("FMTS2119z", $htable, $hactive), "", 2)
									Return
								EndIf
								logit("EN448")
								$x = IniRead($inifile, "settings", "$x" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								$y = IniRead($inifile, "settings", "$y" & $hactive & "Txt" & GUICtrlRead($cmbsite), 0)
								For $z = 0 To 10
									$tablepos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
									logit("IF449")
									If NOT IsArray($tablepos) Then
										Return False
									EndIf
									logit("IF450")
									If IsArray($tablepos) Then
										logit("IF451")
										logit("EN452")
										logit("IF453")
										If NOT (Abs($tablepos[0] - $x) <= 3 AND Abs($tablepos[1] - $y) <= 3) Then
											fconsolewrite("CNT: Moving table# " & $hactive & ": " & StringRegExpReplace(WinGetTitle(arrayget("FMTS2119z", $htable, $hactive)), " as .*\z", " as [www.openholdemstore.com]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
											WinMove(arrayget("FMTS2119z", $htable, $hactive), "", $x, $y, 486, 366, 1)
											Sleep(10)
										Else
											fconsolewrite("CNT: No need to move table - it's in the right position: " & $x & ", " & $y)
											WinMove(arrayget("FMTS2119z", $htable, $hactive), "", Default, Default, 486, 366, 1)
											ExitLoop
										EndIf
										logit("EN454")
									EndIf
									logit("EN455")
									If ($tablepos[0] == $x AND $tablepos[1] == $y) OR NOT IsArray($tablepos) Then ExitLoop
									Sleep(1000)
								Next
								logit("IF456")
								If sittingattable(arrayget("FMTS2119z", $htable, $hactive)) Then
									$title = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
									logit("IF457")
									If StringInStr($title, "-") Then
										$title = StringStripWS(StringLeft($title, StringInStr($title, "-") - 2), 3)
										$title = StringStripWS(StringMid($title, StringInStr($title, ":") + 2), 3)
										$title = StringRegExpReplace($title, "\s", "")
									Else
										$title = StringRegExpReplace($title, "\s", "")
									EndIf
									logit("EN458")
									fconsolewrite("Sat down at " & StringRegExpReplace($tablename, "As .*\z", "As [OpenHoldemStore.com]"))
									$timetable[$hactive] = _timer_init()
									$counthops += 1
									tablesseated($title)
									$mslastwaitinglist = _timer_init()
								Else
									fconsolewrite("CNT: (Unknown) Unable to sit at " & StringRegExpReplace($tablename, "As .*\z", "As [OpenHoldemStore.com]"))
									WinClose(arrayget("FMTS2119z", $htable, $hactive))
									WinWaitClose(arrayget("FMTS2119z", $htable, $hactive), "", 2)
									Return
								EndIf
								logit("EN459")
								logit("IF460")
								If NOT WinExists(arrayget("FMTS2119z", $htable, $hactive)) Then
									Return False
								EndIf
								logit("EN461")
								$temptitle = WinGetTitle(arrayget("FMTS2119z", $htable, $hactive))
								$newtitle = StringStripWS(StringLeft($temptitle, StringInStr($temptitle, "-") - 2), 3)
								$newtitle = StringStripWS(StringMid($newtitle, StringInStr($newtitle, ":") + 2), 3)
								$newtitle = StringRegExpReplace($newtitle, "\s", "")
								logit("IF485")
								logit("IF486")
								If _arraysearch($satattables, $newtitle) == -1 Then
									fconsolewrite("CNT: Already Seated, Pushing " & $newtitle & " to TABSEAT")
									tablesseated($newtitle)
								EndIf
								logit("EN487")
								$tslastlaunch = _timer_init()
								Sleep(10)
								$winpos = WinGetPos(arrayget("FMTS2119z", $htable, $hactive))
							EndIf
							logit("EN495")
							$newbotlist = botwinlist($bottitle)
							logit("IF496")
							If IsArray($newbotlist) Then
								logit("IF497")
								If $newbotlist[0][0] == 6 Then
									logit("FO498")
									For $x = 1 To $newbotlist[0][0]
										logit("IF499")
										If iswindowvisible($newbotlist[$x][1]) Then
											logit("IF500")
											If $nohidebot == 0 Then hidebot($newbotlist[$x][1])
										EndIf
										logit("EN501")
										Sleep(10)
									Next
									logit("NE502")
								EndIf
								logit("EN503")
							EndIf
							logit("EN504")
						Else
							fconsolewrite("CNT: Couldn't find an empty handle. Closing window")
							Sleep(10)
							WinClose($winlist[$b][1])
							WinWaitClose($winlist[$b][1], "", 2)
							closeanyareyousurewindows()
						EndIf
						logit("EN505")
						ExitLoop
					EndIf
				EndIf
				logit("EN506")
				Sleep(10)
			Next
			logit("NE507")
		Else
		EndIf
		logit("EN508")
		Sleep(10)
	EndFunc

	Func autotopup()
		logit("FU405")
		Local $tablelist
		$tablelist = tablelist()
		logit("IF406")
		If $tablelist[0][0] > 0 Then
			logit("FO407")
			For $x = 1 To $tablelist[0][0]
				WinActivate($tablelist[$x][1])
				WinWaitActive($tablelist[$x][1], "", 2)
				logit("IF408")
				If NOT havecards($tablelist[$x][1]) Then
					fconsolewrite("AR: AutoRebuy on: " & $tablelist[$x][0])
					$winpos = WinGetPos($tablelist[$x][1])
					logit("IF409")
					If IsArray($winpos) Then
						MouseMove($winpos[0] + 302, $winpos[1] + 539, 0)
						MouseDown("left")
						Sleep(400)
						MouseUp("left")
					EndIf
					logit("EN410")
					WinWait("ADD CHIPS", "", 3)
					logit("IF411")
					If WinExists("ADD CHIPS") Then
						Local $winlist = WinList("ADD CHIPS")
						logit("IF412")
						If $winlist[0][0] > 0 Then
							logit("FO413")
							For $a = 1 To $winlist[0][0]
								logit("IF414")
								If WinGetState($winlist[$a][1]) <> 5 OR WinGetState($winlist[$a][1]) == 7 Then
									WinActivate($winlist[$a][1])
									Sleep(300)
									Local $getchipspos = WinGetPos($winlist[$a][1])
									logit("IF415")
									If IsArray(PixelSearch($getchipspos[0] + 70, $getchipspos[1] + 394, $getchipspos[0] + 70, $getchipspos[1] + 394, 7829367, 3, 1, $winlist[$a][1])) Then
										fconsolewrite("AR: Already topped up on: " & $tablelist[$x][0])
										WinClose($winlist[$a][1])
									EndIf
									logit("EN416")
									logit("IF417")
									If IsArray($getchipspos) Then
										MouseClick("left", $getchipspos[0] + 68, $getchipspos[1] + 394, 1, 0)
									EndIf
									logit("EN418")
								EndIf
								logit("EN419")
							Next
							logit("NE420")
						EndIf
						logit("EN421")
					EndIf
					logit("EN422")
				Else
					ContinueLoop
				EndIf
				logit("EN423")
			Next
			logit("NE424")
		EndIf
		logit("EN425")
		logit("EN426")
	EndFunc

	Func handletopupwins()
		logit("FU427")
		logit("IF428")
		If WinExists("ADD CHIPS") Then
			Local $winlist = WinList("ADD CHIPS")
			logit("IF429")
			If $winlist[0][0] > 0 Then
				logit("FO430")
				For $a = 1 To $winlist[0][0]
					logit("IF431")
					If WinGetState($winlist[$a][1]) <> 5 OR WinGetState($winlist[$a][1]) == 7 Then
						WinActivate($winlist[$a][1])
						Sleep(300)
						Local $getchipspos = WinGetPos($winlist[$a][1])
						logit("IF432")
						If IsArray(PixelSearch($getchipspos[0] + 70, $getchipspos[1] + 394, $getchipspos[0] + 70, $getchipspos[1] + 394, 7829367, 3, 1, $winlist[$a][1])) Then
							WinClose($winlist[$a][1])
						EndIf
						logit("EN433")
						logit("IF434")
						If IsArray($getchipspos) Then
							WinActivate($winlist[$a][1])
							MouseClick("left", $getchipspos[0] + 68, $getchipspos[1] + 394, 1, 0)
						EndIf
						logit("EN435")
					EndIf
					logit("EN436")
				Next
				logit("NE437")
			EndIf
			logit("EN438")
		EndIf
		logit("EN439")
		logit("EN440")
	EndFunc

	Func checktablegone()
		Local $list = WinList("User Message")
		If IsArray($list) Then
			For $x = 1 To $list[0][0]
				Local $pos = WinGetPos($list[$x][1])
				If IsArray($pos) AND $pos[2] == 383 AND $pos[3] == 166 Then
					fconsolewrite("Table no longer exists window found...")
					MouseClick("left", $pos[0] + 191, $pos[1] + 135, 1, 0)
				EndIf
			Next
		EndIf
	EndFunc

	Func takeseat($hwnd, $xcoords, $xcolors)
		Local $newtitle
		Local $tabletit
		Sleep(1000)
		tableresize()
		WinActivate($hwnd)
		WinWaitActive($hwnd, "", 2)
		logit("IF316")
		If sittingattable($hwnd) Then Return
		If GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
			If WinExists("", "Connecting...") Then
				WinWaitClose("", "Connecting...", 10)
			Else
				Sleep(2200)
			EndIf
		EndIf
		logit("EN317")
		Local $title = WinGetTitle($hwnd)
		logit("IF318")
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			If StringInStr($title, "-") Then
				$tabletit = StringMid($title, StringInStr($title, "-") + 2)
				$newtitle = StringRegExpReplace($tabletit, "\s", "")
			Else
				$newtitle = StringRegExpReplace($title, "\s", "")
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			$newtitle = StringLeft($title, StringInStr($title, "-") - 2)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
			$newtitle = StringLeft($title, StringInStr($title, "-", 0, 2) - 1)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			If StringInStr($title, " ") Then
				$tabletit = StringSplit($title, " ")
				If IsArray($tabletit) Then
					$newtitle = $tabletit[1]
					$newtitle = StringRegExpReplace($newtitle, "\s", "")
				Else
					$newtitle = $title
					$newtitle = StringRegExpReplace($newtitle, "\s", "")
				EndIf
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			$newtitle = StringLeft($title, StringInStr($title, "(") - 2)
			$newtitle = StringRegExpReplace($newtitle, "\s", "")
		Else
			If StringInStr($title, "-") Then
				$tabletit = StringMid($title, StringInStr($title, ":") + 2)
				$tabletit = StringLeft($tabletit, StringInStr($tabletit, "-") - 2)
				$newtitle = StringRegExpReplace($tabletit, "\s", "")
			Else
				$newtitle = StringRegExpReplace($title, "\s", "")
			EndIf
		EndIf
		logit("EN319")
		logit("IF320")
		logit("EN321")
		fconsolewrite("Attempting to take a seat at table: " & WinGetTitle($hwnd))
		Local $color = False
		Local $coords
		$coords = StringSplit($xcoords, ",")
		Local $colors
		$colors = StringSplit($xcolors, ",")
		Local $seat[$colors[0] + 1]
		Local $colorpos
		$colorpos = WinGetPos($hwnd)
		logit("IF322")
		If IsArray($colorpos) Then
			logit("FO323")
			For $a = 1 To $colors[0]
				WinActivate($hwnd)
				$seat[$a] = PixelGetColor(arrayget("FMTS2119a", $colorpos, 0) + arrayget("FMTS2119b", $coords, (($a - 1) * 2) + 1), arrayget("FMTS2119c", $colorpos, 1) + arrayget("FMTS2119d", $coords, (($a - 1) * 2) + 2), $hwnd)
				Sleep(20)
			Next
			logit("NE324")
			For $y = 0 To 20
				If $color OR NOT WinExists($hwnd) Then ExitLoop
				logit("FO325")
				For $a = 1 To $colors[0]
					logit("IF326")
					If $seat[$a] == $colors[$a] Then
						ConsoleWrite("Empty Seat Found at seat: " & $a & @LF)
						logit("IF327")
						If GUICtrlRead($cmbsite) <> "888Poker" AND GUICtrlRead($cmbsite) <> "Bwin" AND GUICtrlRead($cmbsite) <> "Ignition" AND GUICtrlRead($cmbsite) <> "Bodog/Bovada" AND GUICtrlRead($cmbsite) <> "Party" Then
							If seatavailable() Then checkwaitinglist($title)
						EndIf
						$color = True
						fmouseclick("left", arrayget("FMTS2119e", $colorpos, 0) + arrayget("FMTS2119f", $coords, (($a - 1) * 2) + 1), arrayget("FMTS2119g", $colorpos, 1) + arrayget("FMTS2119h", $coords, (($a - 1) * 2) + 2), 2, 0)
						If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
							Sleep(2000)
							Local $temppos = WinGetPos($hwnd)
							If IsArray($temppos) Then
								If PixelGetColor($temppos[0] + 246, $temppos[1] + 507, $hwnd) == 16777215 AND PixelGetColor($temppos[0] + 218, $temppos[1] + 166, $hwnd) == 12378520 Then
									ConsoleWrite("Buy in Title Found... Exiting loop" & @LF)
									Sleep(1000)
									WinActivate($hwnd)
									WinWaitActive($hwnd, "", 1)
									Local $buypos1 = WinGetPos($hwnd)
									If PixelGetColor($buypos1[0] + 234, $buypos1[1] + 337, $hwnd) <> 0 AND GUICtrlRead($chkmaxbuyin) == $gui_checked Then
										MouseClick("left", $buypos1[0] + 233, $buypos1[1] + 335, 1, 0)
									EndIf
									Sleep(300)
									MouseClick("left", $buypos1[0] + 250, $buypos1[1] + 511, 1, 0)
									ExitLoop
								Else
									ConsoleWrite("Buy in Title Not Found..." & @LF)
									If PixelGetColor($temppos[0] + 212, $temppos[1] + 225, $hwnd) == 13092807 AND PixelGetColor($temppos[0] + 255, $temppos[1] + 233, $hwnd) == 13092807 Then
										fconsolewrite("Sat down too soon" & @LF)
										WinActivate($hwnd)
										WinWaitActive($hwnd)
										MouseClick("left", $temppos[0] + 572, $temppos[1] + 413, 1, 0)
										Sleep(500)
										WinClose($hwnd)
										Return
									EndIf
								EndIf
							EndIf
						EndIf
						If GUICtrlRead($cmbsite) <> "Bodog/Bovada" AND GUICtrlRead($cmbsite) <> "Ignition" Then checkgetchips()
						logit("EN351")
						$winpos = WinGetPos($hwnd)
						If GUICtrlRead($cmbsite) == "888Poker" Then
							ratholingwin()
						EndIf
						logit("IF352")
						If GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
						EndIf
						If WinExists($hwnd) Then ExitLoop
					EndIf
					logit("EN353")
					Sleep(10)
				Next
				logit("NE354")
				logit("IF355")
				If NOT $color Then
					WinActivate($hwnd)
					WinWaitActive($hwnd, "", 2)
					logit("IF356")
					If sittingattable($hwnd) Then
						fconsolewrite("Already seated at table: " & WinGetTitle($hwnd))
						$color = True
					Else
						fconsolewrite("No Seats available at: " & WinGetTitle($hwnd) & ",  Closing table now")
						logit("IF357")
						If checkalreadyseatedeee() Then
						EndIf
						If yourinluckwin() Then
						EndIf
						WinClose($hwnd)
						WinWaitClose($hwnd, "", 2)
					EndIf
					logit("EN358")
				EndIf
				logit("EN359")
				Sleep(1000)
			Next
		EndIf
		logit("EN360")
		Sleep(10)
	EndFunc

	Func updateavoidfulltables($tablename, $scanname = "")
		logit("FU684")
		Local $arraysearch
		logit("IF685")
		If $tablename = "" Then Return
		Local $commaat
		$arraysearch = _arraysearch($avoidfulltables, $tablename, 0, 0, 0, 1)
		logit("IF686")
		If $arraysearch > -1 Then
			Local $temp
			$temp = $avoidfulltables[$arraysearch]
			For $z = 0 To 10
				$commaat = StringInStr($temp, ",")
				logit("IF687")
				If $commaat > 0 Then $temp = StringLeft($temp, $commaat - 1)
				If $commaat == 0 Then ExitLoop
				Sleep(1000)
			Next
			$avoidfulltables[$arraysearch] = $temp & "," & _timer_init()
			logit("NE689")
		Else
			$tablename = $tablename & "," & $scanname & _timer_init()
			Sleep(50)
			logit("IF690")
			If UBound($avoidfulltables) == 1 AND $avoidfulltables[0] == "" Then
				fconsolewrite("Pushing tablename: " & $tablename & " to array")
				_arraypush($avoidfulltables, $tablename)
			Else
				_arrayadd($avoidfulltables, $tablename)
			EndIf
			logit("EN691")
			Sleep(50)
		EndIf
		logit("EN694")
		logit("EN695")
	EndFunc

	Func eeealreadyseated()
		logit("FU163")
		logit("IF164")
		If WinExists("User Message") Then
			Local $winlist = WinList("User Message")
			logit("IF165")
			If IsArray($winlist) Then
				logit("FO166")
				For $x = 1 To $winlist[0][0]
					Local $winpos = WinGetPos($winlist[$x][1])
					logit("IF167")
					If IsArray($winpos) Then
						logit("IF168")
						If $winpos[2] == 334 AND $winpos[3] == 202 AND iswindowvisible($winlist[$x][1]) Then
							fconsolewrite("EEECAS: Exists")
							logit("IF169")
							If WinExists($winlist[$x][1]) Then
								WinClose($winlist[$x][1])
							EndIf
							logit("EN170")
							Return True
						EndIf
						logit("EN171")
					EndIf
					logit("EN172")
					Sleep(5)
				Next
				logit("NE173")
			EndIf
			logit("EN174")
		EndIf
		logit("EN175")
		logit("EN176")
	EndFunc

	Func checkjoinwaitlist($tablename = "")
		logit("FU240")
		Local $wlpos
		logit("IF241")
		If WinExists("Join Wait List") AND WinGetState("Join Wait List") <> 5 Then
			fconsolewrite("Join Wait List window found..")
			Sleep(300)
			$wlpos = WinGetPos("Join Wait List")
			logit("IF242")
			If IsArray($wlpos) Then
				WinActivate("Join Wait List")
				MouseClick("left", 318 + $wlpos[0], 568 + $wlpos[1], 1, 0)
				WinWaitClose("Join Wait List", "", 3)
				Sleep(300)
				WinClose("Join Wait List")
				WinWaitClose("Join Wait List", "", 3)
			EndIf
			logit("EN243")
		ElseIf WinExists("Join wait list") Then
			fconsolewrite("Join Wait List window found..")
			Sleep(300)
			$wlpos = WinGetPos("Join wait list")
			If IsArray($wlpos) Then
				WinActivate("Join wait list")
				MouseClick("left", 349 + $wlpos[0], 121 + $wlpos[1], 1, 0)
				WinWaitClose("Join wait list", "", 3)
				If WinExists("Join wait list") Then
					WinClose("Join wait list")
					WinWaitClose("Join wait list", "", 3)
				EndIf
				If NOT WinExists("Join wait list") Then
					tableswl($tablename)
				EndIf
			EndIf
		EndIf
		logit("EN244")
		logit("EN245")
	EndFunc

	Func checkleavewaitlist($tablename = "")
		If WinExists("Leave wait list ?") Then
			fconsolewrite("Leave wait list window found..")
			Sleep(300)
			Local $wlpos = WinGetPos("Leave wait list ?")
			If IsArray($wlpos) Then
				WinActivate("Leave wait list ?")
				MouseClick("left", 143 + $wlpos[0], 81 + $wlpos[1], 1, 0)
				WinWaitClose("Leave wait list ?", "", 3)
				If WinExists("Leave wait list ?") Then
					WinClose("Leave wait list ?")
					WinWaitClose("Leave wait list ?", "", 3)
				EndIf
				If NOT WinExists("Leave wait list ?") Then
					tableswl($tablename)
				EndIf
			EndIf
		EndIf
	EndFunc

	Func handleloginwin()
		If WinExists("[REGEXPTITLE:\A.*login\z]") Then
			Local $list = WinList("[REGEXPTITLE:\A.*login\z]")
			For $a = 1 To $list[0][0]
				Local $pos = WinGetPos($list[$a][1])
				If IsArray($pos) AND $pos[2] == 420 AND $pos[3] == 320 Then
					If iswindowvisible($list[$a][1]) Then
						WinActivate($list[$a][1])
						fconsolewrite("Login window found... Handling now...")
						MouseClick("left", $pos[0] + 352, $pos[1] + 221, 1, 0)
						Sleep(15000)
						handlebegad()
						$hlobby = getlobbyhnd()
						WinActivate($hlobby)
						WinSetState($hlobby, "", @SW_RESTORE)
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Func eeehandlefavoriteswin()
		logit("FU126")
		logit("IF127")
		If WinExists("User Message") Then
			Local $hnd = WinGetHandle("User Message")
			$winpos = WinGetPos($hnd)
			logit("IF128")
			If IsArray($winpos) AND $winpos[2] == 334 AND $winpos[3] == 266 AND iswindowvisible($hnd) Then
				fconsolewrite("My Favourites Window Found")
				WinClose($hnd)
				WinWaitClose($hnd, "", 2)
				logit("IF129")
				If WinExists($hnd) Then
					WinActivate($hnd)
					MouseClick("left", $winpos[0] + 166, $winpos[1] + 228, 1, 0)
				EndIf
				logit("EN130")
			EndIf
			logit("EN131")
		EndIf
		logit("EN132")
		logit("EN133")
	EndFunc

	Func eeehandlextrawin()
		logit("FU126")
		logit("IF127")
		If WinExists("User Message") Then
			Local $hnd = WinGetHandle("User Message")
			$winpos = WinGetPos($hnd)
			logit("IF128")
			If IsArray($winpos) AND $winpos[2] == 334 AND $winpos[3] == 218 AND iswindowvisible($hnd) AND WinGetState($hnd) <> 5 Then
				fconsolewrite("888 Xtra window found... closing now")
				WinClose($hnd)
				WinWaitClose($hnd, "", 2)
				logit("IF129")
				If WinExists($hnd) Then
					WinActivate($hnd)
					MouseClick("left", $winpos[0] + 166, $winpos[1] + 180, 1, 0)
				EndIf
				logit("EN130")
			EndIf
			logit("EN131")
		EndIf
		logit("EN132")
		logit("EN133")
	EndFunc

	Func showtablearray()
		_arraydisplay($htable)
	EndFunc

	Func showbotarray()
		_arraydisplay($hoh)
	EndFunc

	Func showavoidarray()
		_arraydisplay($avoidtables)
	EndFunc

	Func showseatedarray()
		_arraydisplay($satattables)
	EndFunc

	Func thepawncash($buyin)
		logit("FU1636")
		Local $hwinlobby, $pst, $pname, $color
		Local $plr[3]
		Local $usersharks
		Local $userfish
		If GUICtrlRead($alimitinp) == "" Then
			$usersharks = 0
		Else
			$usersharks = Number(GUICtrlRead($alimitinp))
		EndIf
		If GUICtrlRead($jlimitinp) == "" Then
			$userfish = 0
		Else
			$userfish = Number(GUICtrlRead($jlimitinp))
		EndIf
		logit("IF1637")
		If GUICtrlRead($cmbsite) == "888Poker" Then
			$hwinlobby = "[REGEXPTITLE:\A.*Lobby.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$hwinlobby = $lobbyname
		ElseIf GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Poker770" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "WillHill" Then
			$hwinlobby = getlobbyhnd()
		EndIf
		WinActivate($hwinlobby)
		WinSetState($hwinlobby, "", @SW_RESTORE)
		logit("EN1718")
		logit("IF1719")
		WinActivate($hwinlobby)
		WinWaitActive($hwinlobby, "", 2)
		logit("IF1720")
		Local $nx1, $ny1, $nx2, $ny2
		If GUICtrlRead($ssenable) = $gui_checked OR GUICtrlRead($jenable) = $gui_checked OR GUICtrlRead($aenable) = $gui_checked Then
			Local $stk = Number($buyin)
			fconsolewrite("TP: bb " & $stk)
			Local $v[20]
			$v[0] = 9
			logit("IF1721")
			If GUICtrlRead($cmbsite) == "WillHill" Then
				$color = 16777215
				$nx1 = 787
				$ny1 = 231
				$nx2 = 787
				$ny2 = 231
			ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
				$color = 1907997
				$nx1 = 653
				$ny1 = 237
				$nx2 = 757
				$ny2 = 253
			ElseIf GUICtrlRead($cmbsite) == "Poker770" Then
				$color = 1907997
				$nx1 = 653
				$ny1 = 237
				$nx2 = 757
				$ny2 = 253
			ElseIf GUICtrlRead($cmbsite) == "Titan" Then
				$color = 0
				$nx1 = 653
				$ny1 = 237
				$nx2 = 757
				$ny2 = 253
			ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
				$color = 16777215
				$nx1 = 893
				$ny1 = 584
				$nx2 = 893
				$ny2 = 584
			ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
				$color = 0
				$nx1 = 653
				$ny1 = 237
				$nx2 = 757
				$ny2 = 253
			EndIf
			logit("EN1722")
			Local $pixcount
			$winpos = WinGetPos($hwinlobby)
			logit("IF1723")
			If IsArray($winpos) Then
				logit("WH1724")
				For $y = 0 To 20
					Sleep(500)
					If IsArray(PixelSearch($winpos[0] + $nx1, $winpos[1] + $ny1, $winpos[0] + $nx2, $winpos[1] + $ny2, $color, 0, 1, $hwinlobby)) Then ExitLoop
				Next
				logit("WE1725")
				logit("IF1726")
				If $pixcount >= 20 Then
					fconsolewrite("TPawn: Pix not found")
				Else
					ConsoleWrite("+TPawn: Pix Found!!" & @LF)
				EndIf
				logit("EN1727")
			EndIf
			logit("EN1728")
			logit("FO1729")
			For $ii = 0 To GUICtrlRead($numplyrscmb) - 1
				logit("IF1730")
				If GUICtrlRead($cmbsite) == "888Poker" Then
					$pname = _scanstringwithoutscreenshot(793, 358 + (18 * $ii), 929, 375 + (18 * $ii), 16777215, 0, $hwinlobby)
				ElseIf GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Poker770" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "WillHill" Then
					$pname = _scanstringwithoutscreenshot(824, 228 + (20 * $ii), 889, 239 + (20 * $ii), 16777215, -0.1, $hwinlobby)
				EndIf
				logit("EN1731")
				logit("IF1732")
				If StringInStr($pname, "(") Then
					$pname = StringLeft($pname, StringInStr($pname, "(") - 1)
				EndIf
				logit("EN1733")
				$pname = StringRegExpReplace($pname, "\s", "")
				fconsolewrite("Name: *" & $pname & "*")
				logit("IF1734")
				$v[$ii + 1] = $pname
				logit("IF1735")
				If GUICtrlRead($cmbsite) == "888Poker" Then
					$pst = _scanstringwithoutscreenshot(935, 358 + (18 * $ii), 997, 375 + (18 * $ii), 16777215, 0, $hwinlobby)
					If StringInStr($pst, "$") Then
						$pst = StringTrimLeft($pst, 1)
					Else
						Local $newb1 = $pst
						$newb1 = StringRegExpReplace($newb1, "\s", "")
						Local $temp4 = ($newb1 * 0.01)
						$pst = StringFormat("%.2f", $temp4)
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Poker770" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "WillHill" Then
					$pst = _scanstringwithoutscreenshot(925, 228 + (20 * $ii), 975, 239 + (20 * $ii), 16777215, -0.1, $hwinlobby)
				EndIf
				logit("EN1736")
				$pst = StringRegExpReplace($pst, "\s", "")
				fconsolewrite($pname & "'s Stack: *" & $pst & "*")
				$v[$ii + 1] = $v[$ii + 1] & " " & $pst
				Sleep(10)
			Next
			logit("NE1737")
			Local $stklimit = GUICtrlRead($ssdefinp)
			logit("IF1738")
			If IsArray($v) Then
				Local $wlfishs = 0
				Local $wlsharks = 0
				Local $ss = 0
				Local $v1[10]
				Local $v2[10]
				$v1[0] = 0
				$v2[0] = 0
				logit("FO1739")
				For $i = 1 To $v[0]
					ConsoleWrite("$v[" & $i & "]: " & $v[$i] & @LF)
					$plr[1] = StringLeft($v[$i], StringInStr($v[$i], " ") - 1)
					$plr[2] = StringMid($v[$i], StringInStr($v[$i], " ") + 1)
					If StringInStr($plr[2], "€") Then $plr[2] = StringReplace($plr[2], "$", "")
					If StringInStr($plr[2], "$") Then $plr[2] = StringReplace($plr[2], "$", "")
					If StringInStr($plr[2], "£") Then $plr[2] = StringReplace($plr[2], "$", "")
					If StringInStr($plr[2], ",") Then $plr[2] = StringReplace($plr[2], ",", ".")
					logit("IF1740")
					If NOT IsArray($plr) Then
						Sleep(10)
						ContinueLoop
					EndIf
					logit("IF1741")
					If $plr[2] <> "" AND $plr[2] <> "Sitout" Then
						logit("IF1742")
						If Number(StringStripWS($plr[2], 8)) <= $stk * Number($stklimit) AND Number(StringStripWS($plr[2], 8)) > 0 Then
							$ss = $ss + 1
						EndIf
						logit("EN1743")
						$v1[$i] = StringReplace(StringTrimRight($plr[1], 1), "'", "`")
						$v1[0] = $v1[0] + 1
						$v2[$i] = $plr[2]
						$v2[0] = $v2[0] + 1
					EndIf
					logit("EN1744")
					Sleep(10)
				Next
				logit("NE1745")
				fconsolewrite("TP: Short stacks at table: " & $ss)
				If $ss >= Number(GUICtrlRead($ssavinp)) AND GUICtrlRead($ssenable) = $gui_checked Then
					Return 0
				EndIf
				logit("IF1746")
				If Number($ss) >= Number(GUICtrlRead($ssavinp)) AND GUICtrlRead($ssenable) = $gui_checked Then
					fconsolewrite("TP : ssRet0 " & $ss & " " & Number(GUICtrlRead($ssavinp)))
					Return 0
				ElseIf GUICtrlRead($jenable) == $gui_unchecked AND GUICtrlRead($aenable) == $gui_unchecked Then
					Return 1
				EndIf
				Local $playertest
				If GUICtrlRead($jenable) == $gui_checked OR GUICtrlRead($aenable) == $gui_checked Then
					For $i = 1 To 10 Step +1
						ConsoleWrite("$v[$i]: " & $v[$i] & @LF)
						$plr[1] = StringLeft($v[$i], StringInStr($v[$i], " ") - 1)
						If GUICtrlRead($jenable) == $gui_checked AND GUICtrlRead($jlimitinp) > 0 AND GUICtrlRead($jlimitinp) <> "" Then
							$playertest = _fishtest($plr[1])
							If $playertest Then
								$wlfishs = $wlfishs + 1
								fconsolewrite("Fish Found")
							EndIf
						EndIf
						If GUICtrlRead($aenable) == $gui_checked AND GUICtrlRead($alimitinp) > 0 AND GUICtrlRead($alimitinp) <> "" Then
							$playertest = _sharktest($plr[1])
							If $playertest Then
								$wlsharks = $wlsharks + 1
								fconsolewrite("Shark Found")
							EndIf
						EndIf
					Next
				EndIf
				If GUICtrlRead($jenable) == $gui_checked AND GUICtrlRead($aenable) == $gui_checked Then
					fconsolewrite("Number of Fish: " & $wlfishs)
					fconsolewrite("Number of Sharks: " & $wlsharks)
					If Number($wlfishs) >= Number($userfish) AND Number($wlsharks) < Number($usersharks) Then
						Return 1
					Else
						fconsolewrite("TP : Ret1")
						Return 0
					EndIf
				ElseIf GUICtrlRead($jenable) == $gui_checked Then
					fconsolewrite("Number of Fish: " & $wlfishs)
					If Number($wlfishs) >= Number($userfish) Then
						Return 1
					Else
						fconsolewrite("TP : Ret2")
						Return 0
					EndIf
				ElseIf GUICtrlRead($aenable) == $gui_checked Then
					fconsolewrite("Number of Sharks: " & $wlsharks)
					If Number($wlsharks) < Number($usersharks) Then
						Return 1
					Else
						fconsolewrite("TP : Ret3")
						Return 0
					EndIf
				EndIf
			Else
				fconsolewrite("TP : Ret1")
				Return 1
			EndIf
			logit("EN1117")
		Else
			fconsolewrite("TP : Ret1")
			Return 1
		EndIf
		logit("EN1118")
		logit("EN1119")
	EndFunc

	Func winwaitvisible($hnd, $secs)
		For $z = 0 To $secs
			If iswindowvisible($hnd) Then ExitLoop
			Sleep(1000)
		Next
	EndFunc

	Func closescwindow()
		If WinExists("Support chat") Then
			Local $sphandle = WinGetHandle("Support chat")
			If WinGetState($sphandle) == 7 OR WinGetState($sphandle) == 15 Then
				WinClose($sphandle)
			EndIf
		EndIf
	EndFunc

	Func minutessince($timestamp)
		Local $rv = 0
		If $timestamp > 0 Then
			$rv = _timer_diff($timestamp) / 60000
		EndIf
		Return $rv
	EndFunc

	Func visible($hnd)
		logit("FU2486")
		logit("IF2487")
		If WinGetState($hnd) == 7 OR WinGetState($hnd) == 15 Then
			Return True
		Else
			Return False
		EndIf
		logit("EN2488")
		logit("EN2489")
	EndFunc

	Func fmouseclick($button, $x, $y, $clicks = 1, $speed = 0, $duration = 300)
		logit("FU1448")
		MouseMove($x, $y, $speed)
		logit("FO1449")
		For $a = 1 To $clicks
			MouseDown($button)
			Sleep($duration)
			MouseUp($button)
			Sleep($speed)
		Next
		logit("NE1450")
		logit("EN1451")
	EndFunc

	Func winwaitnotvisible($handle, $seconds)
		For $a = 1 To ($seconds * 10)
			If NOT WinExists($handle) OR NOT iswindowvisible($handle) Then Return True
			Sleep(100)
		Next
		Return False
	EndFunc

	Func farraysearch($arraytosearch, $searchfor, $start = 0, $end = 0)
		logit("FU541")
		logit("IF542")
		If $end == 0 Then $end = UBound($arraytosearch) - 1
		logit("FO543")
		For $a = $start To $end
			logit("IF544")
			If StringInStr(StringUpper($arraytosearch[$a]), StringUpper($searchfor)) > 0 Then Return $a
		Next
		logit("NE545")
		Return -1
		logit("EN546")
	EndFunc

	Func tablelist()
		logit("FU2328")
		Local $winlist
		If GUICtrlRead($cmbsite) == "888Poker" Then
			$winlist = WinList("[REGEXPTITLE:\A.*LH.*/.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$winlist = bodogtablelist()
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*-.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Poker770" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "WillHill" Then
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Hold'em.*-.*/.*\z]")
		Else
			$winlist = WinList("[REGEXPTITLE:\A.*Hold'em.*Money in play.*\z]")
		EndIf
		Local $rv[1][2]
		Local $count = 0
		Local $tempsize
		For $a = 1 To $winlist[0][0]
			$tempsize = WinGetPos($winlist[$a][1])
			If NOT StringInStr($winlist[$a][0], "ohf") AND NOT StringInStr($winlist[$a][0], "dll") AND NOT StringInStr($winlist[$a][0], "OpenHoldem") AND NOT StringInStr($winlist[$a][0], "openholdem") AND NOT StringInStr($winlist[$a][0], "Openholdem") Then
				If IsArray($tempsize) AND ($winlist[$a][0] <> "[REGEXPTITLE:.*www.holdemmanager.com.*]") Then
					$count += 1
					ReDim $rv[$count + 2][2]
					$rv[$count][0] = $winlist[$a][0]
					$rv[$count][1] = $winlist[$a][1]
					$rv[0][0] = $count
				EndIf
			EndIf
			Sleep(10)
		Next
		Return $rv
		logit("EN2335")
	EndFunc

	Func bodogtablelist()
		Local $winlist = WinList("[REGEXPCLASS:\AQt5QWindowIcon\z]")
		Local $rv[1][2]
		$rv[0][0] = 0
		Local $count = 0
		For $a = 1 To $winlist[0][0]
			Local $tempsize = WinGetPos($winlist[$a][1])
			If IsArray($tempsize) Then
				If iswindowvisible($winlist[$a][1]) Then
					If NOT StringInStr($winlist[$a][0], "Alert") AND NOT StringInStr($winlist[$a][0], "SciTE") AND NOT StringInStr($winlist[$a][0], "Lobby") Then
						If $tempsize[2] >= 641 Then
							$count += 1
							ReDim $rv[$count + 2][2]
							$rv[$count][0] = $winlist[$a][0]
							$rv[$count][1] = $winlist[$a][1]
							$rv[0][0] = $count
						EndIf
					EndIf
				EndIf
			EndIf
		Next
		Return $rv
	EndFunc

	Func numtablesactive()
		logit("FU1053")
		Local $rv
		logit("IF1054")
		$rv = tablelist()
		logit("EN1055")
		logit("IF1056")
		If IsArray($rv) Then Return $rv[0][0]
		logit("EN1057")
	EndFunc

	Func checkbotstotables()
		Local $winlist = tablelist()
		Local $botlist = botwinlist($bottitle)
		If $winlist[0][0] > $botlist[0][0] Then
			Return 0
		Else
			Return 1
		EndIf
	EndFunc

	Func leavealltables()
		fconsolewrite("Leave All Tables - No Cards")
		For $a = 0 To 22
			If winvisibleandexists($htable[$a]) Then
				If NOT botconnected($hoh[$a]) Then
					closetable($htable[$a], $a)
					If closeanyareyousurewindows() Then
					EndIf
				EndIf
				If $htournreg > 0 Then
					$htournreg -= 1
					fconsolewrite("Tourneys Registered *4* in queue: " & $htournreg & "/" & GUICtrlRead($numbotscmb))
				EndIf
				$htable[$a] = -10
			EndIf
		Next
	EndFunc

	Func _sqlconnect($sserver, $sdatabase, $fauthmode = 0, $susername = "", $spassword = "", $sdriver = "{SQL Server}")
		Local $stemp = StringMid($sdriver, 2, StringLen($sdriver) - 2)
		Local $skey = "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers", $sval = RegRead($skey, $stemp)
		If @error OR $sval = "" Then Return SetError(2, 0, 0)
		Local $oconn = ObjCreate("ADODB.Connection")
		If NOT IsObj($oconn) Then Return SetError(3, 0, 0)
		If $fauthmode Then $oconn.open("DRIVER=" & $sdriver & ";SERVER=" & $sserver & ";DATABASE=" & $sdatabase & ";UID=" & $susername & ";PWD=" & $spassword & ";")
		If NOT $fauthmode Then $oconn.open("DRIVER=" & $sdriver & ";SERVER=" & $sserver & ";DATABASE=" & $sdatabase)
		If @error Then Return SetError(1, 0, 0)
		Return $oconn
	EndFunc

	Func updatelistviewtoplaysng()
		_guictrllistview_deleteallitems(GUICtrlGetHandle($listtoplaysng))
		Local $rawtoplay = IniReadSection($inifile, "toplaySng")
		_arraysort($rawtoplay, 0, 1)
		If @error == 0 Then
			For $a = 1 To $rawtoplay[0][0]
				Local $tvalue = StringSplit($rawtoplay[$a][0], "~")
				_guictrllistview_additem($listtoplaysng, "")
				_guictrllistview_addsubitem($listtoplaysng, $a - 1, $tvalue[1], 1)
				_guictrllistview_addsubitem($listtoplaysng, $a - 1, $tvalue[2], 2)
				_guictrllistview_addsubitem($listtoplaysng, $a - 1, $tvalue[3], 3)
				_guictrllistview_addsubitem($listtoplaysng, $a - 1, $tvalue[4], 4)
				_guictrllistview_addsubitem($listtoplaysng, $a - 1, $tvalue[5], 5)
				_guictrllistview_addsubitem($listtoplaysng, $a - 1, $tvalue[6], 6)
				_guictrllistview_addsubitem($listtoplaysng, $a - 1, $tvalue[7], 7)
				If $rawtoplay[$a][1] = 1 Then
					_guictrllistview_setitemchecked($listtoplaysng, $a - 1, 1)
				EndIf
			Next
		EndIf
	EndFunc

	Func btndeletetoplayclicksng()
		Local $delflag
		$delflag = 0
		Local $si = _guictrllistview_getselectedindices($listtoplaysng, True)
		If $si[0] > 0 Then
			Local $selecteditem = _guictrllistview_getitemtextstring($listtoplaysng, $si[1])
			If StringLen($selecteditem) > 0 Then
				Local $sitem = StringSplit($selecteditem, "|")
				If $sitem[0] >= 4 Then
					IniDelete($inifile, "toplaySng", $sitem[2] & "~" & $sitem[3] & "~" & $sitem[4] & "~" & $sitem[5] & "~" & $sitem[6] & "~" & $sitem[7] & "~" & $sitem[8])
					$delflag = 1
				Else
					MsgBox(0, "Selection", "Nothing Selected")
				EndIf
			EndIf
		Else
			MsgBox(0, "Selection", "Nothing Selected")
		EndIf
		updatelistviewtoplaysng()
		Return $delflag
	EndFunc

	Func btnaddtoplayclicksng()
		Global $aitems = _guictrllistbox_getselitemstext($buyincmb)
		$aitems = GUICtrlRead($buyincmb)
		Local $newvalue = GUICtrlRead($cmbsite) & "~" & $aitems & "~" & GUICtrlRead($cmbgametype) & "~" & GUICtrlRead($numplyrscmbsng) & "~" & GUICtrlRead($typecmb) & "~" & GUICtrlRead($txttourneypercless) & "~" & GUICtrlRead($txttourneypercgreat)
		IniWrite($inifile, "toplaySng", $newvalue, 1)
		updatelistviewtoplaysng()
	EndFunc

	Func listtoplaysng($ix)
		logit("FU2298")
		Local $selecteditem = _guictrllistview_getitemtextstring($listtoplaysng, $ix)
		logit("IF2299")
		If StringLen($selecteditem) > 0 Then
			Local $sitem = StringSplit($selecteditem, "|")
			logit("IF2300")
			If $sitem[0] >= 4 Then
				logit("IF2301")
				If _guictrllistview_getitemchecked($listtoplaysng, $ix) = 1 Then
					IniWrite($inifile, "toplaySng", $sitem[2] & "~" & $sitem[3] & "~" & $sitem[4] & "~" & $sitem[5] & "~" & $sitem[6] & "~" & $sitem[7] & "~" & $sitem[8], "1")
				Else
					IniWrite($inifile, "toplaySng", $sitem[2] & "~" & $sitem[3] & "~" & $sitem[4] & "~" & $sitem[5] & "~" & $sitem[6] & "~" & $sitem[7] & "~" & $sitem[8], "0")
				EndIf
				logit("EN2302")
			EndIf
			logit("EN2303")
		EndIf
		logit("EN2304")
		logit("EN2305")
	EndFunc

	Func detectregsuccessful()
		Local $success = False
		ConsoleWrite("DRS: Begin Func" & @LF)
		Local $winlist = WinList("[REGEXPTITLE:\ARegistration summary\z]")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) Then
					If iswindowvisible($winlist[$x][1]) Then
						If PixelGetColor($winpos[0] + 21, $winpos[1] + 174, $winlist[$x][1]) == 16768795 Then
							$success = True
						Else
							$success = False
						EndIf
					EndIf
				EndIf
			Next
		EndIf
		If $success == True Then
			fconsolewrite("Tournament Regsitration Successful")
			ConsoleWrite("DRS: End Func" & @LF)
			Return True
		Else
			fconsolewrite("Tournament Regsitration Successful Window not visible")
			ConsoleWrite("DRS: End Func" & @LF)
			$waitingfortournament = False
			Return False
		EndIf
	EndFunc

	Func closextraregwindow()
		ConsoleWrite("CXRW: Begin" & @LF)
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
			Next
		EndIf
		ConsoleWrite("CXRW: End" & @LF)
	EndFunc

	Func closefullbuyinwin()
		Local $winlist = WinList()
		logit("IF1029")
		If IsArray($winlist) Then
			logit("FO1030")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF1031")
				If IsArray($winpos) Then
					logit("IF1032")
					If $winpos[2] == 480 AND iswindowvisible($winlist[$x][1]) Then
						fconsolewrite("Full Buyin Window closing now...")
						WinClose($winlist[$x][1])
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Func detectbuyin()
		Local $winlist = WinList("[REGEXPTITLE:\ATournament registration\z]")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) Then
					If iswindowvisible($winlist[$x][1]) Then
						WinActivate($winlist[$x][1])
						WinWaitActive($winlist[$x][1], "", 2)
						If GUICtrlRead($cmbsite) == "Bet365" AND GUICtrlRead($chkdanish) == $gui_checked Then
							MouseMove($winpos[0] + 361, $winpos[1] + 313, 0)
						ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
							MouseMove($winpos[0] + 346, $winpos[1] + 241, 0)
						Else
							MouseMove($winpos[0] + 197, $winpos[1] + 241, 0)
						EndIf
						MouseDown("left")
						Sleep(300)
						MouseUp("left")
						Sleep(500)
						If NOT iswindowvisible($winlist[$x][1]) Then
							Return True
						Else
							fconsolewrite("Couldnt click the register button")
							If GUICtrlRead($cmbsite) == "Paddy" Then
								MouseMove($winpos[0] + 343, $winpos[1] + 241, 0)
							Else
								MouseMove($winpos[0] + 286, $winpos[1] + 241, 0)
							EndIf
							MouseDown("left")
							Sleep(300)
							MouseUp("left")
							Sleep(500)
						EndIf
					EndIf
				EndIf
			Next
		EndIf
		Return False
	EndFunc

	Func isdetectbuyin()
		logit("FU1028")
		Local $winlist = WinList("[REGEXPTITLE:\ATournament registration\z]")
		logit("IF1029")
		If IsArray($winlist) Then
			logit("FO1030")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF1031")
				If IsArray($winpos) Then
					logit("IF1032")
					If iswindowvisible($winlist[$x][1]) Then
						logit("IF1033")
						ConsoleWrite("Tournament Regsitration Window visible" & @LF)
						fconsolewrite("IDB return")
						Return True
						logit("EN1034")
					EndIf
					logit("EN1035")
				EndIf
				logit("EN1036")
			Next
			logit("NE1037")
		EndIf
		ConsoleWrite("Tournament Regsitration Window not visible" & @LF)
		Return False
		logit("EN1038")
		logit("EN1039")
	EndFunc

	Func detectregfull()
		logit("FU1028")
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		logit("IF1029")
		If IsArray($winlist) Then
			logit("FO1030")
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF1031")
				If IsArray($winpos) Then
					logit("IF1032")
					If $winpos[2] == 402 AND iswindowvisible($winlist[$x][1]) Then
						logit("IF1033")
						If IsArray(PixelSearch($winpos[0] + 21, $winpos[1] + 104, $winpos[0] + 21, $winpos[1] + 104, 0, 5, 1, $winlist[$x][1])) AND IsArray(PixelSearch($winpos[0] + 278, $winpos[1] + 123, $winpos[0] + 278, $winpos[1] + 123, 0, 5, 1, $winlist[$x][1])) Then
							ConsoleWrite("Tournament Full Window visible" & @LF)
							Return True
							logit("EN1034")
						EndIf
					EndIf
					logit("EN1035")
				EndIf
				logit("EN1036")
			Next
			logit("NE1037")
		EndIf
		Return False
	EndFunc

	Func detectregclosed($hwin)
		logit("FU2333")
		Local $offset = WinGetPos($hwin)
		Local $getchipsrules = StringSplit("18,128,16777215,275,144,16777215", ",")
		Local $pass
		$pass = True
		logit("FO2334")
		If IsArray($offset) Then
			For $a = 1 To UBound($getchipsrules) - 1 Step 3
				Local $x = $getchipsrules[$a]
				Local $y = $getchipsrules[$a + 1]
				Local $color = $getchipsrules[$a + 2]
				logit("IF2335")
				If parentwindowfrompoint($x + $offset[0], $y + $offset[1]) <> $hwin Then
					$pass = False
					ExitLoop
				EndIf
				logit("EN2336")
				logit("IF2337")
				If PixelGetColor($x + $offset[0], $y + $offset[1]) <> $color Then
					$pass = False
					ExitLoop
				EndIf
				logit("EN2338")
			Next
		EndIf
		logit("NE2339")
		logit("IF2340")
		If $pass Then
			fconsolewrite("GCR: Tourney Reg closed detected")
			fconsolewrite("DRC Return")
			Return True
		EndIf
		logit("EN2341")
		Return False
		logit("EN2342")
	EndFunc

	Func gettournmentsng()
		logit("FU2306")
		Local $rawtoplay = IniReadSection($inifile, "toplaySng")
		logit("IF2307")
		If IsArray($rawtoplay) Then
			Local $k = $rawtoplay[0][0]
			logit("FO2308")
			For $i = 1 To $k
				logit("IF2309")
				If $i > $k Then ExitLoop
				logit("IF2310")
				If $rawtoplay[$i][1] == 0 Then
					_arraydelete($rawtoplay, $i)
					$k = $k - 1
					$i = $i - 1
				EndIf
				logit("EN2311")
			Next
			logit("NE2312")
			Local $result2 = _arrayfindall($rawtoplay, GUICtrlRead($cmbsite), 1, $rawtoplay[0][0], 1, 1, 0)
			logit("IF2313")
			If IsArray($result2) Then
				Local $x = Random(0, _arraymaxindex($result2), 1)
				Return $rawtoplay[$result2[$x]][0]
			Else
				Return ""
			EndIf
			logit("EN2314")
		EndIf
		logit("EN2315")
		logit("EN2316")
	EndFunc

	Func gettourneyvaluessng()
		logit("FU2317")
		Local $trv[8]
		Local $tv
		$tv = gettournmentsng()
		logit("IF2318")
		If StringInStr($tv, "~") Then
			$trv = StringSplit($tv, "~")
			logit("IF2319")
			If $trv[0] >= 5 Then
				Return $trv
			Else
				Return ""
			EndIf
			logit("EN2320")
		Else
			Return ""
		EndIf
		logit("EN2321")
		logit("EN2322")
	EndFunc

	Func thepawnsng()
		logit("FU1056")
		Local $server = GUICtrlRead($input_server)
		Local $database = GUICtrlRead($input_db)
		Local $authmode = 1
		Local $username = GUICtrlRead($input_uid)
		Local $password = GUICtrlRead($input_pwd)
		Local $driver = $input_dr
		Local $usersharks
		Local $userfish
		If GUICtrlRead($alimitinp) == "" Then
			$usersharks = 0
		Else
			$usersharks = Number(GUICtrlRead($alimitinp))
		EndIf
		If GUICtrlRead($jlimitinp) == "" Then
			$userfish = 0
		Else
			$userfish = Number(GUICtrlRead($jlimitinp))
		EndIf
		ConsoleWrite("Server: " & $server & @LF)
		ConsoleWrite("$Database: " & $database & @LF)
		ConsoleWrite("$AuthMode: " & $authmode & @LF)
		ConsoleWrite("$Username: " & $username & @LF)
		ConsoleWrite("$Password: " & $password & @LF)
		ConsoleWrite("$Driver: " & $driver & @LF)
		Local $color
		Local $xpos1, $xpos2, $ypos1, $ypos2, $flipy, $hwin, $pname, $count
		If GUICtrlRead($jenable) = $gui_checked OR GUICtrlRead($aenable) = $gui_checked Then
			Sleep(1100)
			Local $v[200]
			$v[0] = 180
			logit("FO1059")
			$color = 0
			If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" Then
				$nam1 = "BNG"
				$xpos1 = 705
				$xpos2 = 793
				$ypos1 = 169
				$ypos2 = 181
				$flipy = 18
			ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
				$nam1 = "BD"
				$xpos1 = 545
				$xpos2 = 642
				$ypos1 = 189
				$ypos2 = 199
				$flipy = 16
			Else
				$nam1 = "BNG"
				$xpos1 = 602
				$xpos2 = 693
				$ypos1 = 143
				$ypos2 = 153
				$flipy = 17
			EndIf
			If GUICtrlRead($cmbsite) == "888Poker" Then
				$hwin = WinGetHandle("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]")
			ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "TruePoker" OR GUICtrlRead($cmbsite) == "5Dimes" Then
				$hwin = WinGetHandle("[REGEXPCLASS:\A.*ATL:.*\z]")
			Else
				If GUICtrlRead($cmbsite) == "Sisal" Then
					$hwin = WinGetHandle("[REGEXPTITLE:\ATorneo.*principale\z]")
				Else
					$hwin = WinGetHandle("[REGEXPTITLE:\ATournament.*lobby\z]")
				EndIf
				WinActivate($hwin)
			EndIf
			If GUICtrlRead($cmbsite) = "BNG" OR GUICtrlRead($cmbsite) = "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) = "WillHill" OR GUICtrlRead($cmbsite) = "Ladbrokes" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) = "Bet365" OR GUICtrlRead($cmbsite) = "Sisal" Then
				$count = ControlListView($hwin, "", "SysListView322", "GetItemCount")
				ConsoleWrite("Count: " & $count & @LF)
				For $ii = 0 To $count - 1 Step +1
					$pname = ControlListView($hwin, "", "SysListView322", "GetText", $ii, 1)
					$pname = StringRegExpReplace($pname, "\s", "")
					If $pname == "" Then ExitLoop
					$v[$ii + 1] = $pname
				Next
			ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
				$count = ControlListView($hwin, "", "SysListView322", "GetItemCount")
				ConsoleWrite("Count: " & $count & @LF)
				For $ii = 0 To $count - 1 Step +1
					$pname = ControlListView($hwin, "", "SysListView322", "GetText", $ii, 0)
					$pname = StringRegExpReplace($pname, "\s", "")
					If $pname == "" Then ExitLoop
					$v[$ii + 1] = $pname
				Next
			ElseIf GUICtrlRead($cmbsite) == "ACR" Then
				$count = ControlListView($hwin, "", "IGListCtrl3", "GetItemCount")
				ConsoleWrite("Count: " & $count & @LF)
				For $ii = 0 To $count - 1 Step +1
					$pname = ControlListView($hwin, "", "IGListCtrl3", "GetText", $ii, 0)
					$pname = StringRegExpReplace($pname, "\s", "")
					If $pname == "" Then ExitLoop
					$v[$ii + 1] = $pname
				Next
			Else
				$count = 10
				For $ii = 0 To $count - 1
					$pname = _scanstringwithoutscreenshot($xpos1, $ypos1 + ($flipy * $ii), $xpos2, $ypos2 + ($flipy * $ii), $color, 0, $hwin)
					If StringInStr($pname, "(") Then
						$pname = StringLeft($pname, StringInStr($pname, "(") - 2)
					EndIf
					$pname = StringRegExpReplace($pname, "\s", "")
					If $pname == "" Then ExitLoop
					$v[$ii + 1] = $pname
				Next
			EndIf
			logit("IF1061")
			If IsArray($v) Then
				Local $wlfishs = 0
				Local $wlsharks = 0
				logit("FO1062")
				For $i = 1 To $count Step +1
					ConsoleWrite("$v[$i]: " & $v[$i] & @LF)
					$v[$i] = StringRegExpReplace($v[$i], "\s", "")
					If $v[$i] == "" Then ExitLoop
				Next
				logit("NE1068")
				Local $playertest
				If $v[0] > 0 Then
					For $i = 1 To $count Step +1
						If GUICtrlRead($jlimitinp) > 0 AND GUICtrlRead($jlimitinp) <> "" Then
							$playertest = _fishtest($v[$i])
							If $playertest Then
								$wlfishs = $wlfishs + 1
								fconsolewrite("Fish Found")
							EndIf
						EndIf
						If GUICtrlRead($alimitinp) > 0 AND GUICtrlRead($alimitinp) <> "" Then
							$playertest = _sharktest($v[$i])
							If $playertest Then
								fconsolewrite("Shark Found")
							EndIf
						EndIf
					Next
				EndIf
				If GUICtrlRead($jenable) == $gui_checked AND GUICtrlRead($aenable) == $gui_checked Then
					fconsolewrite("Number of Fish: " & $wlfishs)
					fconsolewrite("Number of Sharks: " & $wlsharks)
					If $wlfishs >= $userfish AND $wlsharks < $usersharks Then
						Return 1
					Else
						fconsolewrite("TP : Ret1")
						Return 0
					EndIf
				ElseIf GUICtrlRead($jenable) == $gui_checked Then
					fconsolewrite("Number of Fish: " & $wlfishs)
					If $wlfishs >= $userfish Then
						Return 1
					Else
						fconsolewrite("TP : Ret2")
						Return 0
					EndIf
				ElseIf GUICtrlRead($aenable) == $gui_checked Then
					fconsolewrite("Number of Sharks: " & $wlsharks)
					If $wlsharks < $usersharks Then
						Return 1
					Else
						fconsolewrite("TP : Ret3")
						Return 0
					EndIf
				EndIf
				fconsolewrite("TP : Ret1")
				Return 0
			Else
				fconsolewrite("TP : Ret1")
				Return 0
			EndIf
			logit("EN1117")
		Else
			fconsolewrite("TP : Ret1")
			Return 0
		EndIf
		logit("EN1118")
		logit("EN1119")
	EndFunc

	Func handletourneystartwin()
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			If WinExists("TOURNAMENT START") Then
				fconsolewrite("Tournament Started Window Found... closing now")
				WinClose("TOURNAMENT START")
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			If WinExists("User Message") Then
				Local $hnd = WinGetHandle("User Message")
				$winpos = WinGetPos($hnd)
				If IsArray($winpos) Then
					If $winpos[2] == 334 AND $winpos[3] == 186 AND iswindowvisible($hnd) Then
						fconsolewrite("Tournament Started Window Found... closing now")
						WinClose($hnd)
					EndIf
				EndIf
			EndIf
		EndIf
	EndFunc

	Func bodoghandletourneyfinishedwin()
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			Local $winlist = tablelistsng()
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If PixelGetColor($winpos[0] + 254, $winpos[1] + 291, $winlist[$x][1]) == 11664023 AND iswindowvisible($winlist[$x][1]) Then
							$endscreenshot += 1
							_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $winlist[$x][1])
							$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
							fconsolewrite("Tournament Finished Window Found 1... closing now")
							If GUICtrlRead($chknotifyend) == $gui_checked Then
								emailnotification($endpic, "Tourney Finished")
							EndIf
							MouseClick("left", $winpos[0] + 425, $winpos[1] + 471, 1, 0)
							WinWaitClose($winlist[$x][1], "", 3)
							If iswindowvisible($winlist[$x][1]) Then
								MouseClick("left", $winpos[0] + 405, $winpos[1] + 471, 1, 0)
								WinWaitClose($winlist[$x][1], "", 5)
							EndIf
							Return
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func bodogregistertourneysng()
		fconsolewrite("BDGRT Begin")
		Sleep(500)
		Local $gametype = ""
		Local $bovpos, $bovlist
		$tourneyregok = False
		Local $range = -0.1
		Local $tablename = ""
		Local $limit = ""
		Local $sitting
		Local $sitting2
		Local $buyin
		$hlobby = WinGetHandle("[REGEXPTITLE:\A.*Lobby.*\z]")
		Sleep(1000)
		$trn = gettourneyvaluessng()
		If NOT IsArray($trn) Then
			ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
			Sleep(1000)
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
			Return
		EndIf
		closelobbies()
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		_winapi_setforegroundwindow($hlobby)
		WinWaitActive($hlobby, "", 1)
		Local $temppos = WinGetPos($hlobby)
		If $temppos[0] <> 0 OR $temppos[1] <> 0 Then
			WinMove($hlobby, "", 0, 0, Default, Default, 1)
		EndIf
		Local $off = WinGetCaretPos()
		Local $idstart = PixelSearch(227 + $off[0], 229 + $off[1], 999 + $off[0], 229 + $off[1], 16768942, 0, 1, $hlobby)
		If NOT IsArray($idstart) Then Return
		ConsoleWrite("ID Bar start = " & $idstart[0] & ", " & $idstart[1] & @LF)
		Local $idfinish = PixelSearch($idstart[0] + 2, $idstart[1], 999 + $off[0], $idstart[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("ID Bar finish = " & $idfinish[0] & ", " & $idfinish[1] & @LF)
		Local $idx2 = $idfinish[0] - 1
		Local $startstart = PixelSearch($idx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($startstart) Then Return
		ConsoleWrite("Start Bar start = " & $startstart[0] & ", " & $startstart[1] & @LF)
		Local $startfinish = PixelSearch($startstart[0] + 2, $startstart[1], 999 + $off[0], $startstart[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Start Bar finish = " & $startfinish[0] & ", " & $startfinish[1] & @LF)
		Local $startx2 = $startfinish[0] - 1
		Local $tablecolumnbar = PixelSearch($startx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($tablecolumnbar) Then Return
		ConsoleWrite("Table Bar start = " & $tablecolumnbar[0] & ", " & $tablecolumnbar[1] & @LF)
		Local $tablepixsearchid = PixelSearch($tablecolumnbar[0] + 2, $tablecolumnbar[1], 999 + $off[0], $tablecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Table Bar finish = " & $tablepixsearchid[0] & ", " & $tablepixsearchid[1] & @LF)
		Local $tablex1 = $tablecolumnbar[0] + 1
		Local $tablex2 = $tablepixsearchid[0] - 1
		Local $gamecolumnbar = PixelSearch($tablex2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($gamecolumnbar) Then Return
		ConsoleWrite("Game Bar start = " & $gamecolumnbar[0] & ", " & $gamecolumnbar[1] & @LF)
		Local $gamepixsearchid = PixelSearch($gamecolumnbar[0] + 2, $gamecolumnbar[1], 999 + $off[0], $gamecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Game Bar finish = " & $gamepixsearchid[0] & ", " & $gamepixsearchid[1] & @LF)
		Local $gamex2 = $gamepixsearchid[0] - 1
		Local $limitcolumnbar = PixelSearch($gamex2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($limitcolumnbar) Then Return
		ConsoleWrite("Limit Bar start = " & $limitcolumnbar[0] & ", " & $limitcolumnbar[1] & @LF)
		Local $limitpixsearchid = PixelSearch($limitcolumnbar[0] + 2, $limitcolumnbar[1], 999 + $off[0], $gamecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Limit Bar finish = " & $limitpixsearchid[0] & ", " & $limitpixsearchid[1] & @LF)
		Local $limitx1 = $limitcolumnbar[0] + 1
		Local $limitx2 = $limitpixsearchid[0] - 1
		Local $buyincolumnbar = PixelSearch($limitx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($buyincolumnbar) Then Return
		ConsoleWrite("Buyin Bar start = " & $buyincolumnbar[0] & ", " & $buyincolumnbar[1] & @LF)
		Local $buyinpixsearchid = PixelSearch($buyincolumnbar[0] + 2, $buyincolumnbar[1], 999 + $off[0], $gamecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Buyin Bar finish = " & $buyinpixsearchid[0] & ", " & $buyinpixsearchid[1] & @LF)
		Local $buyinx1 = $buyincolumnbar[0] + 1
		Local $buyinx2 = $buyinpixsearchid[0] - 1
		Local $statuscolumnbar = PixelSearch($buyinx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($statuscolumnbar) Then Return
		ConsoleWrite("Status Bar start = " & $statuscolumnbar[0] & ", " & $statuscolumnbar[1] & @LF)
		Local $statuspixsearchid = PixelSearch($statuscolumnbar[0] + 2, $statuscolumnbar[1], 999 + $off[0], $gamecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Status Bar finish = " & $statuspixsearchid[0] & ", " & $statuspixsearchid[1] & @LF)
		Local $statusx2 = $statuspixsearchid[0] - 1
		Local $playerscolumnbar = PixelSearch($statusx2 + 1, 229 + $off[1], 999 + $off[0], 229 + $off[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($playerscolumnbar) Then Return
		ConsoleWrite("Players Bar start = " & $playerscolumnbar[0] & ", " & $playerscolumnbar[1] & @LF)
		Local $playerspixsearchid = 996
		ConsoleWrite("Players Bar finish = 996" & @LF)
		Local $playersx1 = $playerscolumnbar[0] - 2
		Local $playersx2 = $playerspixsearchid
		Local $pixy = 0
		Local $pixy2 = 0
		For $a = 0 To 19
			If IsArray($off) Then
				$sitting = PixelSearch($off[0] + 239, $off[1] + 252 + (20 * $a), $off[0] + 239, $off[1] + 252 + (20 * $a), 16250711, 10, 1, $hlobby)
				$sitting2 = PixelSearch($off[0] + 239, $off[1] + 252 + (20 * $a), $off[0] + 239, $off[1] + 252 + (20 * $a), 4635127, 10, 1, $hlobby)
				If IsArray($sitting) OR IsArray($sitting2) Then
					fconsolewrite("Already seated, checking next table")
					ContinueLoop
				EndIf
			EndIf
			Local $textcolor = PixelGetColor($off[0] + 590, $off[1] + 252 + (20 * $a), $hlobby)
			ConsoleWrite("Line: " & $a & "$textColor: " & $textcolor & @LF)
			ConsoleWrite("Coords: " & $off[0] + 590 & ", " & $off[1] + 252 + (20 * $a) & @LF)
			Local $pixsearch = False
			If $a = 0 Then
				For $y = 0 To 9
					For $z = 0 To 60
						If PixelGetColor(601 + $off[0] + $z, 243 + $off[1] + $y, $hlobby) <> $textcolor Then
							$pixsearch = True
							$pixy = 243 + ($y - 1)
							$pixy2 = 243 + ($y - 1) + 12
							ExitLoop
						EndIf
					Next
					If $pixsearch = True Then ExitLoop
				Next
			EndIf
			ConsoleWrite("$pixy: " & $pixy & @LF)
			ConsoleWrite("$pixy2: " & $pixy2 & @LF)
			Local $plrs = _scanstring($playersx1, $pixy + (20 * $a), $playersx2, $pixy2 + (20 * $a), $textcolor, $range, $hlobby)
			If $plrs == "" Then
				fconsolewrite("Incomplete Read - restarting")
				ContinueLoop
			EndIf
			$plrs = StringRegExpReplace($plrs, "\s", "")
			ConsoleWrite("BRT: Players: " & $plrs & @LF)
			Local $totplayers = StringStripWS(StringMid($plrs, StringInStr($plrs, "/") + 1), 3)
			If NOT checkplayer($plrs) Then
				ContinueLoop
			EndIf
			$buyin = _scanstring($buyinx1, $pixy + (20 * $a), $buyinx2, $pixy2 + (20 * $a), $textcolor, $range, $hlobby)
			If $buyin == "" Then
				fconsolewrite("AT: No sng to select on line: " & $a + 1)
				ContinueLoop
			EndIf
			$buyin = StringRegExpReplace($buyin, "\s", "")
			$tablename = _scanstring($tablex1, $pixy + (20 * $a), $tablex2, $pixy2 + (20 * $a), $textcolor, $range, $hlobby)
			$tablename = StringRegExpReplace($tablename, "\s", "")
			If StringInStr($tablename, "PlayPlay") Then
				$tablename = StringReplace($tablename, "PlayPlay", "Play")
			EndIf
			fconsolewrite("Bodog/Bovada Reg TableName: " & $tablename)
			If StringInStr($tablename, "SuperTurbo") Then
				$gametype = "Super Turbo"
			ElseIf StringInStr($tablename, "Double-UpTurbo") Then
				$gametype = "Double-Up Turbo"
			ElseIf StringInStr($tablename, "Triple-UpTurbo") Then
				$gametype = "Triple-Up Turbo"
			ElseIf StringInStr($tablename, "Double-Up") Then
				$gametype = "Double-Up"
			ElseIf StringInStr($tablename, "Triple-Up") Then
				$gametype = "Triple-Up"
			ElseIf StringInStr($tablename, "HyperTurbo") Then
				$gametype = "Hyper Turbo"
			ElseIf StringInStr($tablename, "Satellite") Then
				$gametype = "Satellite"
			ElseIf StringInStr($tablename, "Beginner") Then
				$gametype = "Beginner"
			ElseIf StringInStr($tablename, "Qualifier") Then
				$gametype = "Qualifier"
			ElseIf StringInStr($tablename, "Semifinal") Then
				$gametype = "Semifinal"
			ElseIf StringInStr($tablename, "Turbo") Then
				$gametype = "Turbo"
			Else
				$gametype = "Normal"
			EndIf
			$limit = _scanstring($limitx1, $pixy + (20 * $a), $limitx2, $pixy2 + (20 * $a), $textcolor, $range, $hlobby)
			$limit = StringRegExpReplace($limit, "\s", "")
			If $limit == "Fixed" Then
				$limit = "FL"
			EndIf
			Local $tournylobby = "[REGEXPTITLE:\A#.*\z]"
			Local $split
			Local $rawtoplay
			Local $entrytrue = False
			$rawtoplay = IniReadSection($inifile, "toplaySng")
			For $x = 1 To UBound($rawtoplay) - 1
				$split = StringSplit($rawtoplay[$x][0], "~")
				If IsArray($split) Then
					If StringInStr($totplayers, $split[4]) AND StringInStr($buyin, $split[2]) AND StringInStr($gametype, $split[3]) Then
						$entrytrue = True
						ExitLoop
					ElseIf NOT StringInStr($totplayers, $split[4]) Then
						fconsolewrite("Players: " & $totplayers & " <> " & $split[4] & @LF)
						ContinueLoop
					ElseIf NOT StringInStr($buyin, $split[2]) Then
						fconsolewrite("Buyin: " & $buyin & " <> " & $split[2] & @LF)
						ContinueLoop
					Else
						fconsolewrite("GameType: " & $gametype & " <> " & $split[3] & @LF)
						ContinueLoop
					EndIf
				Else
					If NOT StringInStr($totplayers, $split[4]) Then
						fconsolewrite("Players: " & $totplayers & " <> " & $split[4] & @LF)
					ElseIf NOT StringInStr($buyin, $split[2]) Then
						fconsolewrite("Buyin: " & $buyin & " <> " & $split[2] & @LF)
					Else
						fconsolewrite("GameType: " & $gametype & " <> " & $split[3] & @LF)
					EndIf
					ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
					Sleep(1000)
					MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
					Return
				EndIf
			Next
			If $entrytrue == False Then
				ConsoleWrite($totplayers & ", " & $buyin & ", " & $gametype & ", " & $limit & @LF)
				ContinueLoop
			EndIf
			If $entrytrue == True Then
				WinActivate($hlobby)
				WinWaitActive($hlobby, "", 2)
				MouseClick("left", $off[0] + 590, (252 + (20 * $a)) + $off[1], 1, 0)
				MouseMove($off[0] + 590, (252 + (20 * $a)) + $off[1], 0)
				Sleep(200)
				MouseDown("left")
				MouseUp("left")
				MouseDown("left")
				MouseUp("left")
				Sleep(1000)
				WinWait($tournylobby, "", 3)
				If bodogregfull() Then
					$tourneyregok = False
					Return $tablename
				EndIf
				If NOT WinExists($tournylobby) Then
					$tourneyregok = False
					$tablename = ""
					Return $tablename
				EndIf
				If WinExists($tournylobby) Then
					Local $hnd = WinGetHandle($tournylobby)
					If NOT iswindowvisible($hnd) Then
						ConsoleWrite("Not active" & @LF)
						WinActivate($hnd)
						WinWaitActive($hnd, "", 1)
					EndIf
					If iswindowvisible($hnd) Then
						WinActivate($hnd)
						WinWaitActive($hnd, "", 1)
						ConsoleWrite("Found Tourney Lobby" & @LF)
					EndIf
					Local $trnlobbypos = WinGetPos($hnd)
					Local $tabletit = WinGetTitle($hnd)
					$tabletit = StringMid($tabletit, StringInStr($tabletit, "#") + 9)
					$tabletit = StringRegExpReplace($tabletit, "\s", "")
					If NOT StringInStr($tabletit, $tablename) Then
						fconsolewrite("Tourney lobby title: " & $tabletit)
						fconsolewrite("TableName: " & $tablename)
						fconsolewrite("Opened the wrong Tourney Lobby")
						ConsoleWrite("Closing 6" & @LF)
						WinClose($hnd)
						Return
					EndIf
					Sleep(1000)
					Local $counttourn = 0
					If IsArray($trnlobbypos) Then
						While PixelGetColor($trnlobbypos[0] + 567, $trnlobbypos[1] + 522, $hnd) <> 16777215 AND $counttourn < 10
							Sleep(500)
							$counttourn += 1
							If PixelGetColor($trnlobbypos[0] + 567, $trnlobbypos[1] + 522, $hnd) == 16777215 Then ExitLoop
						WEnd
						WinActivate($hnd)
						MouseClick("left", $trnlobbypos[0] + 586, $trnlobbypos[1] + 522, 1, 0)
					EndIf
				Else
					If WinExists($tournylobby) Then
						WinClose($tournylobby)
						ConsoleWrite("Closing 5" & @LF)
						fconsolewrite("Could not find Tourney Lobby")
						Return
					EndIf
				EndIf
				If bodogalreadyfull() Then
					If WinExists($tournylobby) Then
						WinClose($tournylobby)
						ConsoleWrite("Closing 5" & @LF)
						fconsolewrite("Could not find Tourney Lobby")
						Return
					EndIf
					ContinueLoop
				EndIf
				Sleep(3000)
				WinActivate($hnd)
				WinWaitActive($hnd, "", 1)
				If PixelGetColor($trnlobbypos[0] + 213, $trnlobbypos[1] + 127, $hnd) == 12316313 AND PixelGetColor($trnlobbypos[0] + 384, $trnlobbypos[1] + 72, $hnd) == 16777215 Then
					Sleep(500)
					MouseClick("left", $trnlobbypos[0] + 328, $trnlobbypos[1] + 473, 1, 0)
					WinWait("REGISTRATION COMPLETE", "", 10)
					Local $rccount = 0
					If WinExists("REGISTRATION COMPLETE") Then
						Local $tohwnd = WinGetHandle("REGISTRATION COMPLETE")
						$regscreenshot += 1
						_screencapture_capturewnd(@ScriptDir & "\RegScreenShot" & $regscreenshot & ".jpg", $tohwnd)
						While WinExists("REGISTRATION COMPLETE") AND $rccount < 5
							If WinExists("TOURNAMENT START") Then
								fconsolewrite("Tourney Start Window closing now...")
								WinClose("TOURNAMENT START")
								WinWaitClose("TOURNAMENT START", "", 1)
							EndIf
							Local $regcompos = WinGetPos("REGISTRATION COMPLETE")
							MouseClick("left", $regcompos[0] + 394, $regcompos[1] + 113, 1, 0)
							WinWaitClose("REGISTRATION COMPLETE", "", 1)
							If WinExists("REGISTRATION COMPLETE") Then
								fconsolewrite("Tourney registration completed window found...")
								WinClose("REGISTRATION COMPLETE")
								WinWaitClose("REGISTRATION COMPLETE", "", 1)
								If WinExists("REGISTRATION COMPLETE") Then
									WinClose("REGISTRATION COMPLETE")
									WinWaitClose("REGISTRATION COMPLETE", "", 1)
								EndIf
								If WinExists("REGISTRATION COMPLETE") Then
									checkbodogregsuccwin()
									ExitLoop
								Else
									ExitLoop
								EndIf
							Else
								ExitLoop
							EndIf
							$rccount += 1
							Sleep(600)
						WEnd
						$tourneyregok = True
						If $lobbyminimize == 1 Then WinSetState($hlobby, "", @SW_MINIMIZE)
						If WinExists($tournylobby) Then
							fconsolewrite("Tourney Lobby Window closing now...")
							WinClose($tournylobby)
						EndIf
						ConsoleWrite("Closing 2" & @LF)
						Return $tablename
					Else
						If WinExists($tournylobby) Then
							fconsolewrite("Tourney Lobby Window closing now...")
							WinClose($tournylobby)
						EndIf
						ConsoleWrite("Closing 13" & @LF)
						$tourneyregok = False
						$tablename = ""
						Return $tablename
					EndIf
				Else
					$bovlist = WinList("[REGEXPTITLE:\ABovada\z]")
					If IsArray($bovlist) Then
						For $y = 1 To $bovlist[0][0]
							$bovpos = WinGetPos($bovlist[$y][1])
							If IsArray($bovpos) Then
								If $bovpos[2] == 481 AND $bovpos[3] == 101 AND iswindowvisible($bovlist[$y][1]) Then
									fconsolewrite("Closing 1")
									WinClose($bovlist[$y][1])
									ExitLoop
								EndIf
							EndIf
						Next
					EndIf
					$bovlist = WinList("[REGEXPTITLE:\ABodog\z]")
					If IsArray($bovlist) Then
						For $y = 1 To $bovlist[0][0]
							$bovpos = WinGetPos($bovlist[$y][1])
							If IsArray($bovpos) Then
								If $bovpos[2] == 481 AND $bovpos[3] == 101 AND iswindowvisible($bovlist[$y][1]) Then
									WinClose($bovlist[$y][1])
									fconsolewrite("Closing 2")
									ExitLoop
								EndIf
							EndIf
						Next
					EndIf
					$bovlist = WinList("[REGEXPTITLE:\AIgnition\z]")
					If IsArray($bovlist) Then
						For $y = 1 To $bovlist[0][0]
							$bovpos = WinGetPos($bovlist[$y][1])
							If IsArray($bovpos) Then
								If $bovpos[2] == 481 AND $bovpos[3] == 101 AND iswindowvisible($bovlist[$y][1]) Then
									WinClose($bovlist[$y][1])
									fconsolewrite("Closing 2")
									ExitLoop
								EndIf
							EndIf
						Next
					EndIf
					If WinExists($tournylobby) Then
						fconsolewrite("Tourney Lobby Window closing now...")
						WinClose($tournylobby)
					EndIf
					$tourneyregok = False
					$tablename = ""
					Return $tablename
				EndIf
				Sleep(1000)
				If $tourneyregok = True Then
					Return $tablename
				Else
					$tourneyregok = False
					$tablename = ""
					Return $tablename
				EndIf
			Else
				fconsolewrite("AT: Player check does not match")
			EndIf
		Next
		Sleep(1500)
	EndFunc

	Func bodogalreadyfull()
		Local $bovwinlist, $fullpos
		If WinExists("Bodog.eu") OR WinExists("Bovada.eu") OR WinExists("Ignition.eu") Then
			$bovwinlist = WinList("[REGEXPCLASS:\AQt5QWindowIcon\z]")
			For $z = 1 To $bovwinlist[0][0]
				$fullpos = WinGetPos($bovwinlist[$z][1])
				If IsArray($fullpos) Then
					If $fullpos[2] == 263 AND $fullpos[3] == 101 Then
						WinActivate($bovwinlist[$z][1])
						fconsolewrite("Tourney is full, closing and registering to another")
						MouseClick("left", $fullpos[0] + 199, $fullpos[1] + 79, 1, 0)
						WinWaitClose($bovwinlist[$z][1], "", 1)
						If WinExists($bovwinlist[$z][1]) Then
							WinClose($bovwinlist[$z][1])
						EndIf
						Return True
					EndIf
				EndIf
			Next
		EndIf
		Return False
	EndFunc

	Func bngregistertourneysng()
		logit("FU781")
		fconsolewrite("Starting IPoker RegisterTourney")
		Local $off
		Local $gametype
		Local $buyin
		Local $plrs, $trnlobbyhnd1
		$gametype = ""
		$buyin = ""
		$plrs = ""
		$tourneyregok = False
		Local $nosngfound = 0
		logit("IF782")
		logit("EN784")
		$hlobby = getlobbyhnd()
		Sleep(1000)
		movelobby($hlobby)
		$off = WinGetPos($hlobby)
		If IsArray($off) Then MouseClick("left", $off[0] + 301, $off[1] + 521, 1, 0)
		$trn = gettourneyvaluessng()
		logit("IF785")
		If NOT IsArray($trn) Then
			ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
			Sleep(1000)
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
			Return
		EndIf
		$lmt = $trn[6]
		$typ = $trn[3]
		$gmtp = $trn[5]
		$plr = $trn[4]
		logit("EN786")
		logit("IF787")
		closelobbies()
		If IsArray($off) Then
			For $a = 0 To 12
				Local $textcolor = PixelGetColor($off[0] + 37, $off[1] + 270 + ($a * 33), $hlobby)
				$plrs = _scanstringwithoutscreenshot(485, 264 + ($a * 33), 540, 279 + ($a * 33), $textcolor, -0.01, $hlobby)
				$plrs = StringRegExpReplace($plrs, "\s", "")
				logit("IF801")
				If $plrs == "" Then
					fconsolewrite("No Sng found on line " & $a + 1)
					$nosngfound += 1
					If $nosngfound >= 3 Then Return
					ContinueLoop
				Else
					$nosngfound = 0
				EndIf
				Local $entry = StringMid($plrs, StringInStr($plrs, "/") + 1)
				Local $seated = StringStripWS(StringLeft($plrs, StringInStr($plrs, "/") - 1), 3)
				Local $thisbuyin
				If NOT checkplayer($plrs) Then
					ConsoleWrite("Not check player: " & $plrs & @LF)
					ContinueLoop
				EndIf
				$buyin = _scanstringwithoutscreenshot(425, 264 + ($a * 33), 479, 279 + ($a * 33), $textcolor, -0.01, $hlobby)
				logit("IF796")
				If StringInStr($buyin, " ") Then $buyin = StringReplace($buyin, " ", "")
				If StringInStr($buyin, ",") Then $buyin = StringReplace($buyin, ",", ".")
				If StringInStr($buyin, "€") Then $buyin = StringReplace($buyin, "€", "$")
				If StringInStr($buyin, "£") Then $buyin = StringReplace($buyin, "£", "$")
				$buyin = StringRegExpReplace($buyin, "\s", "")
				logit("IF797")
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					$nosngfound += 1
					If $nosngfound >= 3 Then
						$tourneyregok = False
						Return False
					EndIf
					ContinueLoop
				EndIf
				logit("EN798")
				logit("IF799")
				Local $tablename = _scanstringwithoutscreenshot(44, 264 + ($a * 33), 226, 279 + ($a * 33), $textcolor, -0.01, $hlobby)
				If StringInStr($tablename, '"') Then
					$tablename = StringReplace($tablename, '"', "")
				EndIf
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("BNG Reg TableName: " & $tablename)
				If GUICtrlRead($chkshortstack) == $gui_checked AND StringInStr($tablename, "Short") Then
					fconsolewrite("Avoiding short stack table")
					ContinueLoop
				ElseIf GUICtrlRead($chkbeginner) == $gui_checked AND StringInStr($tablename, "Beginner") Then
					fconsolewrite("Avoiding beginner table")
					ContinueLoop
				ElseIf $avoiddblstck == 1 AND StringInStr($tablename, "Double") Then
					fconsolewrite("Avoiding double stack table")
					ContinueLoop
				EndIf
				If StringInStr($tablename, "Doub") AND (StringInStr($tablename, "SUPER") OR StringInStr($tablename, "Super")) Then
					$gametype = "SuperTurbo Double"
				ElseIf StringInStr($tablename, "Doub") AND (StringInStr($tablename, "TURBO") OR StringInStr($tablename, "Turbo") OR StringInStr($tablename, "Trb")) Then
					$gametype = "Turbo Double"
				ElseIf StringInStr($tablename, "Step1") Then
					$gametype = "Step 1"
				ElseIf StringInStr($tablename, "OnTap") Then
					$gametype = "On Tap"
				ElseIf StringInStr($tablename, "Knockout") Then
					$gametype = "Knockout"
				ElseIf StringInStr($tablename, "Step2") Then
					$gametype = "Step 2"
				ElseIf StringInStr($tablename, "Step3") Then
					$gametype = "Step 3"
				ElseIf StringInStr($tablename, "Step4") Then
					$gametype = "Step 4"
				ElseIf StringInStr($tablename, "Step5") Then
					$gametype = "Step 5"
				ElseIf StringInStr($tablename, "Step6") Then
					$gametype = "Step 6"
				ElseIf StringInStr($tablename, "ShortStac") Then
					$gametype = "Short Stack"
				ElseIf StringInStr($tablename, "DoubleStac") Then
					$gametype = "Double Stack"
				ElseIf StringInStr($tablename, "Doub") Then
					$gametype = "Double Or Nothing"
				ElseIf StringInStr($tablename, "Winner") Then
					$gametype = "Winner Takes All"
				ElseIf StringInStr($tablename, "SUPER") OR StringInStr($tablename, "Super") AND NOT StringInStr($tablename, "Doub") Then
					$gametype = "SuperTurbo"
				ElseIf StringInStr($tablename, "Jackpot") Then
					$gametype = "Jackpot"
				ElseIf (StringInStr($tablename, "TURBO") OR StringInStr($tablename, "Turbo") OR StringInStr($tablename, "Trb")) AND NOT StringInStr($tablename, "SUPER") AND NOT StringInStr($tablename, "Doub") Then
					$gametype = "Turbo"
				Else
					$gametype = "Normal"
				EndIf
				logit("EN793")
				logit("IF794")
				Local $split
				Local $rawtoplay
				Local $entrytrue = False
				$rawtoplay = IniReadSection($inifile, "toplaySng")
				For $x = 1 To UBound($rawtoplay) - 1
					$split = StringSplit($rawtoplay[$x][0], "~")
					If IsArray($split) Then
						If StringInStr($entry, $split[4]) AND StringInStr($buyin, $split[2]) AND StringInStr($gametype, $split[3]) AND $seated <= $split[6] AND $seated >= $split[7] Then
							$entrytrue = True
							fconsolewrite("Entry: " & $entry & " = " & $split[4])
							fconsolewrite("BuyIn: " & $buyin & " = " & $split[2])
							fconsolewrite("GameType: " & $gametype & " = " & $split[3])
							fconsolewrite("Seated: " & $seated & " <= " & $split[6])
							fconsolewrite("Seated: " & $seated & " >= " & $split[7])
							ExitLoop
						Else
							fconsolewrite("Entry: " & $entry & " = " & $split[4])
							fconsolewrite("BuyIn: " & $buyin & " = " & $split[2])
							fconsolewrite("GameType: " & $gametype & " = " & $split[3])
							fconsolewrite("Seated: " & $seated & " <= " & $split[6])
							fconsolewrite("Seated: " & $seated & " >= " & $split[7])
							ContinueLoop
						EndIf
					Else
						ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
						Sleep(1000)
						MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
						Return
					EndIf
				Next
				If $entrytrue == False Then
					$gtmcount += 1
					ContinueLoop
				Else
					$gtmcount = 0
					If StringInStr($buyin, "+") Then
						Local $newbuyin = StringSplit($buyin, "+")
						$newbuyin[1] = StringReplace($newbuyin[1], "$", "")
						$newbuyin[2] = StringReplace($newbuyin[2], "$", "")
						$thisbuyin = Number($newbuyin[1]) + Number($newbuyin[2])
					Else
						$thisbuyin = $buyin
					EndIf
				EndIf
				If $gtmcount >= 100 Then
					fconsolewrite("The lobby is not being read correctly... Please refer to the manual and make sure that your columns are matching the ones in the manual.  Also check and make sure you have the correct buyin selected in the hopper.")
				EndIf
				logit("EN800")
				logit("EN802")
				logit("IF803")
				If $entrytrue == True Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $off[0] + 381, $off[1] + 269 + ($a * 33), 1, 0)
					Sleep(500)
					MouseClick("left", $off[0] + 867, $off[1] + 603, 1, 0)
					If GUICtrlRead($cmbsite) == "Sisal" Then
						WinWait("[REGEXPTITLE:\ATorneo.*principale\z]", "", 3)
					Else
						WinWait("[REGEXPTITLE:\ATournament.*-.*\z]", "", 3)
					EndIf
					Local $hnd
					If WinExists("[REGEXPTITLE:\ATournament.*-.*\z]") OR WinExists("[REGEXPTITLE:\ATorneo.*principale\z]") Then
						If GUICtrlRead($cmbsite) == "Sisal" Then
							$hnd = WinGetHandle("[REGEXPTITLE:\ATorneo.*principale\z]")
						Else
							$hnd = WinGetHandle("[REGEXPTITLE:\ATournament.*-.*\z]")
						EndIf
						If iswindowvisible($hnd) Then
							fconsolewrite("Found Tourney Lobby")
							WinMove($hnd, "", 1, 1)
							WinActivate($hnd)
							WinWaitActive($hnd, "", 5)
							Local $trnlobbypos = WinGetPos($hnd)
							Local $tabletit = WinGetTitle($hnd)
							If StringInStr($tabletit, '"') Then
								$tabletit = StringReplace($tabletit, '"', "")
							EndIf
							$tabletit = StringRegExpReplace($tabletit, "\s", "")
							$tabletit = StringLeft($tabletit, StringInStr($tabletit, "-") - 1)
							$tabletit = StringReplace($tabletit, '"', "")
							$tabletit = StringRegExpReplace($tabletit, "\s", "")
							Local $newtablename
							$newtablename = $tablename
							If GUICtrlRead($cmbsite) <> "Sisal" Then
								If $tabletit == $newtablename Then
									fconsolewrite("TableName match: " & $newtablename & " = " & $tabletit)
								Else
									fconsolewrite("TableName: " & $newtablename & " <> " & $tabletit)
									closelobbies()
									Return
								EndIf
							EndIf
							Sleep(1000)
							If IsArray($trnlobbypos) Then
								MouseMove($trnlobbypos[0] + 344, $trnlobbypos[1] + 172, 1)
								MouseDown("left")
								Sleep(250)
								MouseUp("left")
							EndIf
						EndIf
					Else
						closelobbies()
						fconsolewrite("Could not find Tourney Lobby")
						Return
					EndIf
					For $z = 0 To 10
						If isdetectbuyin() OR detectregclosed($hlobby) Then ExitLoop
						Sleep(300)
					Next
					logit("IF804")
					Local $buyinsucc = False
					If isdetectbuyin() Then
						For $z = 0 To 10
							$buyinsucc = detectbuyin()
							If $buyinsucc == True Then ExitLoop
							Sleep(300)
						Next
						If $buyinsucc == False Then
							$tourneyregok = False
							closelobbies()
							Return
						EndIf
					ElseIf detectregclosed($hlobby) Then
						fconsolewrite("Registration closed window found")
						WinActivate($hlobby)
						If GUICtrlRead($cmbsite) == "Titan" Then
							MouseClick("left", $off[0] + 285, $off[1] + 240, 1, 0)
						Else
							MouseClick("left", $off[0] + 247, $off[1] + 243, 1, 0)
						EndIf
						$tourneyregok = False
						closelobbies()
						Return
					Else
						fconsolewrite("Registration closed & Buyin window not found")
						closelobbies()
						If GUICtrlRead($cmbsite) == "Sisal" Then
							If WinExists("[REGEXPTITLE:\ATorneo.*principale\z]") Then
								fconsolewrite("Closing BNG/WH tourney lobby")
								$trnlobbyhnd1 = WinGetHandle("[REGEXPTITLE:\ATorneo.*principale\z]")
								WinClose($trnlobbyhnd1)
							EndIf
						Else
							If WinExists("[REGEXPTITLE:\ATournament.*-.*\z]") Then
								fconsolewrite("Closing BNG/WH tourney lobby")
								$trnlobbyhnd1 = WinGetHandle("[REGEXPTITLE:\ATournament.*-.*\z]")
								WinClose($trnlobbyhnd1)
							EndIf
						EndIf
						$tourneyregok = False
						Return
					EndIf
					logit("EN806")
					Sleep(2000)
					logit("IF807")
					For $z = 0 To 10
						If detectregsuccessful() Then
							$tourneyregok = True
							ExitLoop
						EndIf
						Sleep(1000)
					Next
					If $tourneyregok = True Then
						$tourneyregok = True
						If GUICtrlRead($cmbsite) == "Sisal" Then
							If WinExists("[REGEXPTITLE:\ATorneo.*principale\z]") Then
								fconsolewrite("Closing BNG/WH tourney lobby")
								$trnlobbyhnd1 = WinGetHandle("[REGEXPTITLE:\ATorneo.*principale\z]")
								WinClose($trnlobbyhnd1)
							EndIf
						Else
							If WinExists("[REGEXPTITLE:\ATournament.*-.*\z]") Then
								fconsolewrite("Closing BNG/WH tourney lobby")
								$trnlobbyhnd1 = WinGetHandle("[REGEXPTITLE:\ATournament.*-.*\z]")
								WinClose($trnlobbyhnd1)
							EndIf
						EndIf
						closelobbies()
						If $lobbyminimize == 1 Then WinSetState($hlobby, "", @SW_MINIMIZE)
						$totalbuyin = Number($totalbuyin) + Number($thisbuyin)
						Return True
					Else
						closelobbies()
						$tourneyregok = False
						Return False
					EndIf
					logit("EN808")
					Sleep(1000)
					logit("IF809")
					If $tourneyregok = True Then
						Return True
					Else
						$tourneyregok = False
						Return False
					EndIf
					logit("EN812")
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
				logit("EN813")
			Next
			logit("NE814")
		EndIf
		logit("EN815")
		logit("EN816")
	EndFunc

	Func eeechecklogin()
		Local $winpos
		If WinExists("[REGEXPTITLE:\ALogin\z]") Then
			Local $winlist = WinList("[REGEXPTITLE:\ALogin\z]")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					If $winpos[2] == 506 AND $winpos[3] == 465 AND iswindowvisible($winlist[$x][1]) Then
						WinActivate($winlist[$x][1])
						WinWaitActive($winlist[$x][1], "", 1)
						MouseClick("left", $winpos[0] + 84, $winpos[1] + 323, 1, 0)
						Sleep(5000)
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func eeehandletourneystartwin()
		If WinExists("User Message") Then
			Local $tshand = WinGetHandle("User Message")
			Local $tspos = WinGetPos($tshand)
			WinActivate($tshand)
			If iswindowvisible($tshand) AND IsArray($tspos) Then
				fconsolewrite("Tournament Started Window Found... closing now")
				WinClose($tshand)
			EndIf
		EndIf
	EndFunc

	Func betonlineregistertourney()
		fconsolewrite("BetOnline RT Begin")
		$nam1 = "BW"
		Sleep(500)
		$tourneyregok = False
		Local $tablename = ""
		Local $buyin
		$hlobby = WinGetHandle("[REGEXPTITLE:\A.*BetOnline Poker version.*\z]")
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		WinWaitActive($hlobby, "", 2)
		Local $off = WinGetPos($hlobby)
		WinActivate($hlobby)
		$trn = gettourneyvaluessng()
		If NOT IsArray($trn) Then
			ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
			Sleep(1000)
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
			Return
		EndIf
		SendKeepActive($hlobby)
		Send("{^HOME}")
		Local $textcolor
		Local $plrs, $gametype
		Local $plrcount
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $a = 0 To 19
				WinActivate($hlobby)
				$textcolor = PixelGetColor($off[0] + 496, $off[1] + 252 + (19 * $a), $hlobby)
				$plrs = _scanstringwithoutscreenshot(177, 249 + (19 * $a), 252, 261 + (19 * $a), $textcolor, -0.01, $hlobby)
				$plrs = StringRegExpReplace($plrs, "\s", "")
				If $plrs == "" Then
					fconsolewrite("No sng found on line: " & $a + 1)
					$plrcount += 1
					If $plrcount >= 3 Then
						$tourneyregok = False
						Return False
					EndIf
					ContinueLoop
				ElseIf NOT StringInStr($plrs, "of") Then
					ConsoleWrite("Plrs: *" & $plrs & "*" & @LF)
					fconsolewrite("Sng already full, checking next line")
					ContinueLoop
				Else
					$plrcount = 0
				EndIf
				Local $entry = StringMid($plrs, StringInStr($plrs, "of") + 2)
				Local $seated = StringLeft($plrs, StringInStr($plrs, "of") - 2)
				If NOT checkplayer($plrs) Then
					ConsoleWrite("Check Player not working plyrs: " & $plrs & @LF)
					ContinueLoop
				EndIf
				$buyin = _scanstringwithoutscreenshot(309, 249 + ($a * 19), 379, 261 + ($a * 19), $textcolor, -0.01, $hlobby)
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					ConsoleWrite("Text Color: " & $textcolor & @LF)
					ContinueLoop
				EndIf
				$buyin = StringRegExpReplace($buyin, "\s", "")
				$tablename = _scanstringwithoutscreenshot(19, 249 + ($a * 19), 173, 261 + ($a * 19), $textcolor, -0.01, $hlobby)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("BetOnline Reg TableName: " & $tablename)
				If StringInStr($tablename, "Express") Then
					$gametype = "Express"
				ElseIf StringInStr($tablename, "Turbo") AND StringInStr($tablename, "1-Up") Then
					$gametype = "Turbo 1-Up"
				ElseIf StringInStr($tablename, "NoFee") Then
					$gametype = "No Fee"
				ElseIf StringInStr($tablename, "S/lite") Then
					$gametype = "Satellite"
				ElseIf StringInStr($tablename, "Turbo") Then
					$gametype = "Turbo"
				ElseIf StringInStr($tablename, "1-Up") Then
					$gametype = "1-Up"
				ElseIf StringInStr($tablename, "Super") Then
					$gametype = "Super"
				ElseIf StringInStr($tablename, "Qualifier") Then
					$gametype = "Qualifier"
				ElseIf StringInStr($tablename, "All-in") Then
					$gametype = "All-in"
				ElseIf StringInStr($tablename, "Step") Then
					$gametype = "Step"
				Else
					$gametype = "Normal"
				EndIf
				Local $split
				Local $rawtoplay
				Local $entrytrue = False
				$rawtoplay = IniReadSection($inifile, "toplaySng")
				For $x = 1 To UBound($rawtoplay) - 1
					$split = StringSplit($rawtoplay[$x][0], "~")
					If IsArray($split) Then
						If StringInStr($entry, $split[4]) AND StringInStr($buyin, $split[2]) AND $gametype == $split[3] AND $seated <= $split[9] AND $seated >= $split[10] Then
							$entrytrue = True
							fconsolewrite("Entry: " & $entry & " = " & $split[4])
							fconsolewrite("BuyIn: " & $buyin & " = " & $split[2])
							fconsolewrite("GameType: " & $gametype & " = " & $split[3])
							ExitLoop
						Else
							fconsolewrite("Entry: " & $entry & " = " & $split[4])
							fconsolewrite("BuyIn: " & $buyin & " = " & $split[2])
							fconsolewrite("GameType: " & $gametype & " = " & $split[3])
							ContinueLoop
						EndIf
					Else
						ConsoleWrite("Not array split" & @LF)
						Sleep(1000)
						MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
						Return
					EndIf
				Next
				If $entrytrue == False Then
					ContinueLoop
				EndIf
				If $entrytrue == True Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $off[0] + 318, (253 + (19 * $a)) + $off[1], 2, 0)
					WinWait("[REGEXPTITLE:\ATourney Lobby\z]", "", 5)
					If WinExists("[REGEXPTITLE:\ATourney Lobby\z]") Then
						Local $tourneyhnd = WinGetHandle("[REGEXPTITLE:\ATourney Lobby\z]")
						Local $tourpos = WinGetPos($tourneyhnd)
						fconsolewrite("Tourney Lobby found")
						If IsArray($tourpos) Then
							WinActivate($tourneyhnd)
							WinWaitActive($tourneyhnd, "", 1)
							Sleep(500)
							MouseClick("left", $tourpos[0] + 709, 60 + $tourpos[1], 1, 0)
							WinWait("[REGEXPTITLE:\ATournament Registration\z]", "", 5)
							If WinExists("[REGEXPTITLE:\ATournament Registration\z]") Then
								Local $reghnd = WinGetHandle("[REGEXPTITLE:\ATournament Registration\z]")
								Local $regpos = WinGetPos($reghnd)
								fconsolewrite("Tourney Registration Window found")
								If IsArray($regpos) Then
									WinActivate($reghnd)
									WinWaitActive($reghnd, "", 1)
									If $regpos[3] = 260 Then
										MouseClick("left", $regpos[0] + 58, 224 + $regpos[1], 1, 0)
									ElseIf $regpos[3] = 538 Then
										MouseClick("left", $regpos[0] + 58, 502 + $regpos[1], 1, 0)
									Else
										MouseClick("left", $regpos[0] + 58, 363 + $regpos[1], 1, 0)
									EndIf
									WinWait("[REGEXPTITLE:\AJoin Tourney Result\z]", "", 5)
									If WinExists("[REGEXPTITLE:\AJoin Tourney Result\z]") Then
										Local $regsucchnd = WinGetHandle("[REGEXPTITLE:\AJoin Tourney Result\z]")
										Local $regsuccpos = WinGetPos($regsucchnd)
										fconsolewrite("Tourney Registration Successful Window found")
										If IsArray($regsuccpos) Then
											WinActivate($regsucchnd)
											WinWaitActive($regsucchnd, "", 1)
											MouseClick("left", $regsuccpos[0] + 309, 123 + $regsuccpos[1], 1, 0)
											$tourneyregok = True
											WinClose($tourneyhnd)
											WinWaitClose($tourneyhnd, "", 1)
											Return True
										EndIf
									EndIf
								Else
									WinClose($reghnd)
									WinWaitClose($reghnd, "", 1)
									WinClose($tourneyhnd)
									WinWaitClose($tourneyhnd, "", 1)
									$tourneyregok = False
									$tablename = ""
								EndIf
							Else
								WinClose($tourneyhnd)
								WinWaitClose($tourneyhnd, "", 1)
								$tourneyregok = False
								$tablename = ""
							EndIf
						Else
							WinClose($tourneyhnd)
							WinWaitClose($tourneyhnd, "", 1)
							$tourneyregok = False
							$tablename = ""
						EndIf
					Else
						$tourneyregok = False
						$tablename = ""
						Return False
					EndIf
				ElseIf $trn[2] <> $buyin Then
					fconsolewrite("AT: Final Buyins do not match")
					ContinueLoop
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
			Next
			Sleep(1500)
		EndIf
		Return False
	EndFunc

	Func checkpartyfull()
		If WinExists("[REGEXPCLASS:\A#32770\z]", "Registrations for this tournament has just closed") Then
			fconsolewrite("Registration closed Window found")
			Local $cwhnd = WinGetHandle("[REGEXPCLASS:\A#32770\z]", "Registrations for this tournament has just closed")
			WinClose($cwhnd)
		EndIf
	EndFunc

	Func bwinregistertourney()
		fconsolewrite("BWinRT Begin")
		Local $cwhnd
		checkpartyfull()
		If WinExists("[REGEXPCLASS:\A#32770\z]", "Registration successful") Then
			fconsolewrite("Registration successful Window found")
			$cwhnd = WinGetHandle("[REGEXPCLASS:\A#32770\z]", "Registration successful")
			WinClose($cwhnd)
		EndIf
		$nam1 = "BW"
		Sleep(500)
		Local $gametype = ""
		$tourneyregok = False
		Local $lobbyitemcount
		Local $tablename = ""
		Local $buyin
		Local $line
		$hlobby = WinGetHandle("[REGEXPTITLE:\A.*Lobby.*\z]")
		WinActivate($hlobby)
		WinWaitActive($hlobby, "", 1)
		Local $off = WinGetPos($hlobby)
		WinActivate($hlobby)
		$trn = gettourneyvaluessng()
		If NOT IsArray($trn) Then
			ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
			Sleep(1000)
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
			Return
		EndIf
		Local $gamelistview
		Local $controlhnd
		Local $isvisible
		Local $isenabled
		Local $listview = "SysListView32"
		For $x = 1 To 100
			$controlhnd = ControlGetHandle($hlobby, "", $listview & $x)
			$isvisible = ControlCommand($hlobby, "", $controlhnd, "IsVisible")
			$isenabled = ControlCommand($hlobby, "", $controlhnd, "IsEnabled")
			If $isvisible == 1 AND $isenabled == 1 Then
				fconsolewrite("Visible: " & $x)
				$gamelistview = $listview & $x
				fconsolewrite("SysListView: " & $gamelistview)
				ExitLoop
			ElseIf $isvisible <> 1 Then
				fconsolewrite("SysListView: " & $listview & " is not visible")
			Else
				fconsolewrite("SysListView: " & $listview & " is not enabled")
			EndIf
		Next
		Local $listviewhandle = ControlGetHandle($hlobby, "", $gamelistview)
		$lobbyitemcount = ControlListView($hlobby, "", $gamelistview, "GetItemCount")
		ConsoleWrite("Count: " & $lobbyitemcount & @LF)
		Local $missedsng = 0
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $line = 0 To $lobbyitemcount - 1 Step +1
				WinActivate($hlobby)
				Local $registered = ControlListView($hlobby, "", $gamelistview, "GetText", $line, 6)
				If StringInStr($registered, "Registered") Then
					fconsolewrite("Already registered... checking next line")
					ContinueLoop
				EndIf
				Local $plrs = ControlListView($hlobby, "", $gamelistview, "GetText", $line, 5)
				If $plrs == "" Then
					fconsolewrite("Incomplete Read - restarting")
					If $missedsng >= 2 Then
						Return
					Else
						$missedsng += 1
						ContinueLoop
					EndIf
				EndIf
				$plrs = StringRegExpReplace($plrs, "\s", "")
				Local $totplayers = StringStripWS(StringMid($plrs, StringInStr($plrs, "/") + 1), 3)
				Local $seated = StringStripWS(StringLeft($plrs, StringInStr($plrs, "/") - 1), 3)
				If NOT checkplayer($plrs) Then
					fconsolewrite("Incomplete CheckPlayer - restarting")
					fconsolewrite("Players: " & $plrs)
					ContinueLoop
				EndIf
				$buyin = ControlListView($hlobby, "", $gamelistview, "GetText", $line, 3)
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					ContinueLoop
				EndIf
				$buyin = StringRegExpReplace($buyin, "\s", "")
				$tablename = ControlListView($hlobby, "", $gamelistview, "GetText", $line, 0)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("Bwin Reg TableName: " & $tablename)
				If StringInStr($tablename, "Double") AND StringInStr($tablename, "Turbo") Then
					$gametype = "Double or Nothing Turbo"
				ElseIf StringInStr($tablename, "Double") Then
					$gametype = "Double or Nothing"
				ElseIf StringInStr($tablename, "Hyper Turbo") Then
					$gametype = "Hyper Turbo"
				ElseIf StringInStr($tablename, "Turbo") OR StringInStr($tablename, "Speed") Then
					$gametype = "Turbo"
				ElseIf StringInStr($tablename, "Coinflip") Then
					$gametype = "Coinflip"
				ElseIf StringInStr($tablename, "Sat") Then
					$gametype = "Satellite"
				Else
					$gametype = "Standard"
				EndIf
				Local $split
				Local $rawtoplay
				Local $entrytrue = False
				$rawtoplay = IniReadSection($inifile, "toplaySng")
				For $x = 1 To UBound($rawtoplay) - 1
					$split = StringSplit($rawtoplay[$x][0], "~")
					If IsArray($split) Then
						If StringInStr($totplayers, $split[4]) AND StringInStr($buyin, $split[2]) AND StringInStr($gametype, $split[3]) AND $seated <= $split[6] AND $seated >= $split[7] Then
							$entrytrue = True
							ExitLoop
						Else
							fconsolewrite("TotPlayers: " & $totplayers & " <> " & $split[4])
							fconsolewrite("Buyin: " & $buyin & " <> " & $split[2])
							fconsolewrite("GameType: " & $gametype & " <> " & $split[3])
							ContinueLoop
						EndIf
					Else
						ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
						Sleep(1000)
						MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
						Return
					EndIf
				Next
				If $entrytrue == False Then
					ContinueLoop
				EndIf
				If $entrytrue == True Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					_guictrllistview_clickitem($listviewhandle, $line, "left", True, 1)
					Local $pos = WinGetPos($hlobby)
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $pos[0] + 782, $pos[1] + 609, 1, 0)
					WinWait("", "Select a buy-in option", 3)
					If WinExists("", "Select a buy-in option") Then
						Sleep(500)
						fconsolewrite("Tournament Registration found")
						Local $treghnd = WinGetHandle("", "Select a buy-in option")
						WinActivate($treghnd)
						Local $tregpos = WinGetPos($treghnd)
						MouseClick("left", $tregpos[0] + 256, 115 + $tregpos[1], 1, 0)
						WinWait("[REGEXPCLASS:\A#32770\z]", "Registration successful", 3)
						If WinExists("[REGEXPCLASS:\A#32770\z]", "Registration successful") Then
							fconsolewrite("Registration successful Window found")
							$cwhnd = WinGetHandle("[REGEXPCLASS:\A#32770\z]", "Registration successful")
							WinClose($cwhnd)
							$tourneyregok = True
							Return True
						EndIf
					Else
						$tourneyregok = False
						$tablename = ""
						Return False
					EndIf
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
			Next
			Sleep(1500)
		EndIf
		Return False
	EndFunc

	Func carbonregistertourneysng()
		fconsolewrite("CarbRT Begin")
		$nam1 = "CB"
		Local $lobbytitle
		If GUICtrlRead($cmbsite) == "Carbon" Then
			$lobbytitle = "[REGEXPTITLE:\A.*CarbonGaming.*-.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Walker" Then
			$lobbytitle = "[REGEXPTITLE:\A.*Walker.*-.*\z]"
		Else
			$lobbytitle = "[REGEXPTITLE:\A.*BlackChip.*-.*\z]"
		EndIf
		$hlobby = WinGetHandle($lobbytitle)
		Sleep(500)
		Local $gametype = ""
		$tourneyregok = False
		Local $range = -0.1
		Local $tablename = ""
		Local $buyin
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		WinWaitActive($hlobby, "", 2)
		Local $off = WinGetPos($hlobby)
		If IsArray($off) Then
			If $off[2] <> GUICtrlRead($txtlobbyposx) OR $off[3] <> GUICtrlRead($txtlobbyposy) Then
				WinMove($hlobby, "", GUICtrlRead($txtlobbyposx), GUICtrlRead($txtlobbyposy), Default, Default, 1)
				Sleep(1000)
				$off = WinGetPos($hlobby)
			EndIf
		EndIf
		WinActivate($hlobby)
		$trn = gettourneyvaluessng()
		If NOT IsArray($trn) Then
			ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
			Sleep(1000)
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
			Return
		EndIf
		SendKeepActive($hlobby)
		Send("{HOME}")
		Local $missedsng = 0
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $a = 0 To 21
				Local $textcolor = PixelGetColor($off[0] + 626, $off[1] + 206 + (22 * $a), $hlobby)
				If IsArray(PixelSearch($off[0] + 285, $off[1] + 206 + (22 * $a), $off[0] + 285, $off[1] + 206 + (22 * $a), 10005171, 5, 1, $hlobby)) Then
					fconsolewrite("Already registered... checking next line")
					ContinueLoop
				EndIf
				Local $plrs = _scanstringwithoutscreenshot(804, 202 + (22 * $a), 852, 214 + (22 * $a), $textcolor, $range, $hlobby)
				If $plrs == "" Then
					fconsolewrite("Nothing on line " & $a + 1 & " - restarting")
					If $missedsng >= 2 Then
						Return
					Else
						$missedsng += 1
						ContinueLoop
					EndIf
				EndIf
				$plrs = StringRegExpReplace($plrs, "\s", "")
				Local $totplayers = StringStripWS(StringMid($plrs, StringInStr($plrs, "/") + 1), 3)
				If NOT checkplayer($plrs) Then
					fconsolewrite("Check Player = False")
					ContinueLoop
				EndIf
				$buyin = _scanstringwithoutscreenshot(749, 202 + (22 * $a), 802, 213 + (22 * $a), $textcolor, $range, $hlobby)
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					ConsoleWrite("Text Color: " & $textcolor & @LF)
					ContinueLoop
				EndIf
				$buyin = StringRegExpReplace($buyin, "\s", "")
				$tablename = _scanstringwithoutscreenshot(277, 202 + (22 * $a), 513, 214 + (22 * $a), $textcolor, $range, $hlobby)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("Carbon Reg TableName: " & $tablename)
				If StringInStr($tablename, "DoubleorNothing") AND StringInStr($tablename, "Turbo") Then
					$gametype = "Double Up"
				ElseIf StringInStr($tablename, "DoubleorNothing") Then
					$gametype = "Double Up"
				ElseIf StringInStr($tablename, "SuperTurbo") Then
					$gametype = "Super Turbo"
				ElseIf StringInStr($tablename, "Bounty") Then
					$gametype = "Bounty"
				ElseIf StringInStr($tablename, "All-InorFold") Then
					$gametype = "Allin or Fold"
				ElseIf StringInStr($tablename, "Turbo") Then
					$gametype = "Turbo"
				Else
					$gametype = "Normal"
				EndIf
				Local $split
				Local $rawtoplay
				Local $entrytrue = False
				$rawtoplay = IniReadSection($inifile, "toplaySng")
				For $x = 1 To UBound($rawtoplay) - 1
					$split = StringSplit($rawtoplay[$x][0], "~")
					If IsArray($split) Then
						If StringInStr($totplayers, $split[4]) AND StringInStr($buyin, $split[2]) AND StringInStr($gametype, $split[3]) Then
							fconsolewrite("CR: entry true")
							$entrytrue = True
							ExitLoop
						Else
							If NOT StringInStr($totplayers, $split[4]) Then
								fconsolewrite("Tot Players: " & $totplayers & " != " & $split[4])
							ElseIf NOT StringInStr($buyin, $split[2]) Then
								fconsolewrite("BuyIn: " & $buyin & " != " & $split[2])
							Else
								fconsolewrite("GameType: " & $gametype & " != " & $split[3])
							EndIf
							ContinueLoop
						EndIf
					Else
						ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
						Sleep(1000)
						MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
						Return
					EndIf
				Next
				If $entrytrue == False Then
					fconsolewrite("CR: entry false")
					ContinueLoop
				EndIf
				Local $winpos
				If $entrytrue == True Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $winpos[0] + 449, 206 + $winpos[1] + (22 * $a), 1, 1)
					MouseClick("right", $winpos[0] + 449, 206 + $winpos[1] + (22 * $a), 1, 1)
					WinWait("[REGEXPCLASS:\ATournament Registration Failed\z]", "", 1)
					If WinExists("[REGEXPCLASS:\ATournament Registration Failed\z]") Then
						Local $rfhnd = WinGetHandle("[REGEXPCLASS:\ATournament Registration Failed\z]")
						Local $rfpos = WinGetPos($rfhnd)
						WinActivate($rfhnd)
						WinWaitActive($rfhnd, "", 1)
						MouseClick("left", $rfpos[0] + 360, $rfpos[1] + 220, 1, 0)
						$tourneyregok = False
						$tablename = ""
						Return False
					EndIf
					WinWait("[REGEXPCLASS:\A#32768\z]", "", 2)
					If WinExists("[REGEXPCLASS:\A#32768\z]") Then
						Local $menupos = WinGetPos("[REGEXPCLASS:\A#32768\z]")
						MouseMove($menupos[0] + 44, $menupos[1] + 41, 1)
						MouseDown("left")
						Sleep(300)
						MouseUp("left")
					Else
						Return
					EndIf
					Sleep(1000)
					Sleep(300)
					WinWait("Tournament Registration", "", 2)
					If WinExists("Tournament Registration") Then
						WinActivate("Tournament Registration")
						Local $buyinpos = WinGetPos("Tournament Registration")
						If IsArray($buyinpos) Then
							MouseClick("left", $buyinpos[0] + 321, $buyinpos[1] + 268, 1, 0)
						EndIf
					Else
						fconsolewrite("Buyin window not found")
						$tourneyregok = False
						$tablename = ""
						Return False
					EndIf
					WinWait("Tournament Registration Success", "", 2)
					If WinExists("Tournament Registration Success") Then
						WinActivate("Tournament Registration Success")
						Local $regpos = WinGetPos("Tournament Registration Success")
						If IsArray($regpos) Then
							MouseClick("left", $regpos[0] + 357, $regpos[1] + 223, 1, 0)
							WinWaitClose("Tournament Registration Success", "", 1)
							If WinExists("Tournament Registration Success") Then
								WinActivate("Tournament Registration Success")
								MouseClick("left", $regpos[0] + 406, $regpos[1] + 223, 1, 0)
								WinWaitClose("Tournament Registration Success", "", 1)
							EndIf
							If WinExists("Tournament Registration Success") Then
								WinClose("Tournament Registration Success")
							EndIf
						EndIf
						$tourneyregok = True
						Return True
					Else
						fconsolewrite("Registration unsuccessful")
						$tourneyregok = False
						Return False
					EndIf
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
			Next
			Sleep(1500)
		EndIf
		Return False
	EndFunc

	Func eeeregistertourney()
		eeechecklogin()
		If _timer_diff($timerhandlelosttables) / 1000 >= 10 Then
			eeehandlelosttables()
			$timerhandlelosttables = _timer_init()
		EndIf
		If WinExists("[REGEXPTITLE:\ATournament Registration.*\z]") Then
			WinClose("[REGEXPTITLE:\ATournament Registration.*\z]")
		EndIf
		fconsolewrite("Starting 888Poker Register Tourney")
		Local $off
		Local $gametype
		Local $buyin
		Local $plrs
		$gametype = ""
		$buyin = ""
		$plrs = ""
		$tourneyregok = False
		closelobbies()
		$hlobby = WinGetHandle($eeelobbyname)
		Local $temppos = WinGetPos($hlobby)
		If $temppos[0] <> 0 OR $temppos[1] <> 0 Then
			WinMove($hlobby, "", 0, 0, Default, Default, 1)
		EndIf
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		_winapi_setforegroundwindow($hlobby)
		WinWaitActive($hlobby, "", 1)
		$off = WinGetCaretPos()
		$trn = gettourneyvaluessng()
		If NOT IsArray($trn) Then
			ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
			Sleep(1000)
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
			Return
		EndIf
		Local $plrcount = 0
		Local $regstatus = 0
		Local $idstart = PixelSearch(1 + $off[0], 210 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		If NOT IsArray($idstart) Then Return
		ConsoleWrite("ID Bar start = " & $idstart[0] & ", " & $idstart[1] & @LF)
		Local $idfinish = PixelSearch($idstart[0] + 2, $idstart[1], 729 + $off[0], $idstart[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("ID Bar finish = " & $idfinish[0] & ", " & $idfinish[1] & @LF)
		Local $idx1 = $idstart[0] - 3
		Local $idx2 = $idfinish[0] - 4
		Local $tablecolumnbar = PixelSearch(3 + $idx2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		If NOT IsArray($tablecolumnbar) Then Return
		ConsoleWrite("Table Bar start = " & $tablecolumnbar[0] & ", " & $tablecolumnbar[1] & @LF)
		Local $tablepixsearchid = PixelSearch($tablecolumnbar[0] + 2, $tablecolumnbar[1], 729 + $off[0], $tablecolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Table Bar finish = " & $tablepixsearchid[0] & ", " & $tablepixsearchid[1] & @LF)
		Local $tablex1 = $tablecolumnbar[0] - 2
		Local $tablex2 = $tablepixsearchid[0]
		Local $typecolumnbar = PixelSearch(3 + $tablex2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		If NOT IsArray($typecolumnbar) Then Return
		ConsoleWrite("Type Bar start = " & $typecolumnbar[0] & ", " & $typecolumnbar[1] & @LF)
		Local $typepixsearchid = PixelSearch($typecolumnbar[0] + 2, $typecolumnbar[1], 729 + $off[0], $typecolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Type Bar finish = " & $typepixsearchid[0] & ", " & $typepixsearchid[1] & @LF)
		Local $typex2 = $typepixsearchid[0]
		Local $gamecolumnbar = PixelSearch(3 + $typex2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		If NOT IsArray($gamecolumnbar) Then Return
		ConsoleWrite("Game Bar start = " & $gamecolumnbar[0] & ", " & $gamecolumnbar[1] & @LF)
		Local $gamepixsearchid = PixelSearch($gamecolumnbar[0] + 2, $gamecolumnbar[1], 729 + $off[0], $gamecolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Game Bar finish = " & $gamepixsearchid[0] & ", " & $gamepixsearchid[1] & @LF)
		Local $gamex2 = $gamepixsearchid[0]
		Local $limitcolumnbar = PixelSearch(3 + $gamex2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		If NOT IsArray($limitcolumnbar) Then Return
		ConsoleWrite("Limit Bar start = " & $limitcolumnbar[0] & ", " & $limitcolumnbar[1] & @LF)
		Local $limitpixsearchid = PixelSearch($limitcolumnbar[0] + 2, $limitcolumnbar[1], 729 + $off[0], $limitcolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Limit Bar finish = " & $limitpixsearchid[0] & ", " & $limitpixsearchid[1] & @LF)
		Local $limitx2 = $limitpixsearchid[0]
		Local $buyincolumnbar = PixelSearch(3 + $limitx2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		If NOT IsArray($buyincolumnbar) Then Return
		ConsoleWrite("Buyin Bar start = " & $buyincolumnbar[0] & ", " & $buyincolumnbar[1] & @LF)
		Local $buyinpixsearchid = PixelSearch($buyincolumnbar[0] + 2, $buyincolumnbar[1], 729 + $off[0], $buyincolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Buyin Bar finish = " & $buyinpixsearchid[0] & ", " & $buyinpixsearchid[1] & @LF)
		Local $buyinx1 = $buyincolumnbar[0] - 2
		Local $buyinx2 = $buyinpixsearchid[0]
		Local $statuscolumnbar = PixelSearch(3 + $buyinx2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		If NOT IsArray($statuscolumnbar) Then Return
		ConsoleWrite("Status Bar start = " & $statuscolumnbar[0] & ", " & $statuscolumnbar[1] & @LF)
		Local $statuspixsearchid = PixelSearch($statuscolumnbar[0] + 2, $statuscolumnbar[1], 729 + $off[0], $statuscolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Status Bar finish = " & $statuspixsearchid[0] & ", " & $statuspixsearchid[1] & @LF)
		Local $statusx2 = $statuspixsearchid[0]
		Local $playerscolumnbar = PixelSearch(3 + $statusx2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		If NOT IsArray($playerscolumnbar) Then Return
		ConsoleWrite("Players Bar start = " & $playerscolumnbar[0] & ", " & $playerscolumnbar[1] & @LF)
		Local $playerspixsearchid = 749
		ConsoleWrite("Players Bar finish = 750" & @LF)
		Local $playersx1 = $playerscolumnbar[0] - 2
		Local $playersx2 = $playerspixsearchid
		Local $pixy = 0
		Local $pixy2 = 0
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $a = 0 To 27
				eeehandletourneystartwin()
				WinActivate($hlobby)
				WinWaitActive($hlobby, "", 2)
				Local $color = PixelGetColor(94 + $off[0], $off[1] + 240 + (13 * $a), $hlobby)
				ConsoleWrite("Color: " & $color & @LF)
				Local $pixsearch = False
				If $a = 0 Then
					For $y = 0 To 9
						For $z = 0 To 60
							If PixelGetColor(658 + $off[0] + $z, 237 + $off[1] + $y, $hlobby) <> $color Then
								$pixsearch = True
								$pixy = 237 + $y
								$pixy2 = 237 + $y + 10
								ExitLoop
							EndIf
						Next
						If $pixsearch = True Then ExitLoop
					Next
				EndIf
				ConsoleWrite("$pixy: " & $pixy & @LF)
				ConsoleWrite("$pixy2: " & $pixy2 & @LF)
				$plrs = _scanstring($playersx1, $pixy + (13 * $a), $playersx2, $pixy2 + (13 * $a), $color, -0.01, $hlobby)
				$plrs = StringRegExpReplace($plrs, "\s", "")
				If $plrs == "" Then
					fconsolewrite("No sng found on line: " & $a + 1)
					$plrcount += 1
					If $plrcount >= 3 Then
						$tourneyregok = False
						Return False
					EndIf
					ContinueLoop
				Else
					$plrcount = 0
				EndIf
				Local $entry = StringMid($plrs, StringInStr($plrs, "/") + 1)
				Local $seated = StringStripWS(StringLeft($plrs, StringInStr($plrs, "/") - 1), 3)
				If NOT checkplayer($plrs) Then
					ConsoleWrite("Check Player not working plyrs: " & $plrs & @LF)
					ContinueLoop
				EndIf
				$buyin = _scanstring($buyinx1, $pixy + (13 * $a), $buyinx2, $pixy2 + (13 * $a), $color, -0.01, $hlobby)
				ConsoleWrite("Raw buyin: " & $buyin & @LF)
				$buyin = StringRegExpReplace($buyin, "\s", "")
				fconsolewrite("Initial Buyin: " & $buyin)
				If StringInStr($buyin, "c") Then
					$buyin = StringReplace($buyin, "c", "¢")
				EndIf
				If StringInStr($buyin, "£") Then
					$buyin = StringReplace($buyin, "£", "$")
				EndIf
				If StringInStr($buyin, "€") Then
					$buyin = StringReplace($buyin, "€", "$")
				EndIf
				If NOT StringInStr($buyin, "c") AND NOT StringInStr($buyin, "¢") AND NOT StringInStr($buyin, "£") AND NOT StringInStr($buyin, "$") AND NOT StringInStr($buyin, "€") Then
					$buyin = $buyin & "¢"
				EndIf
				Local $thisbuyin
				Local $tablename = _scanstring($tablex1 - 5, $pixy + (13 * $a), $tablex2, $pixy2 + (13 * $a), $color, -0.01, $hlobby)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("888 Reg TableName: " & $tablename)
				If StringInStr($tablename, "CAM") Then
					$gametype = "CAM"
				ElseIf StringInStr($tablename, "Knockout") Then
					$gametype = "Knockout"
				ElseIf StringInStr($tablename, "Super") AND StringInStr($tablename, "Doub") Then
					$gametype = "DoN Super Turbo"
				ElseIf StringInStr($tablename, "Super") Then
					$gametype = "Super Turbo"
				ElseIf StringInStr($tablename, "Doub") AND StringInStr($tablename, "Turbo") Then
					$gametype = "Double or Nothing Turbo"
				ElseIf StringInStr($tablename, "Trip") AND StringInStr($tablename, "Turbo") Then
					$gametype = "Triple Up Turbo"
				ElseIf StringInStr($tablename, "All-In") Then
					$gametype = "All-In"
				ElseIf StringInStr($tablename, "Doub") Then
					$gametype = "Double or Nothing"
				ElseIf StringInStr($tablename, "Trip") Then
					$gametype = "Triple Up"
				ElseIf StringInStr($tablename, "Turbo") AND NOT StringInStr($tablename, "Super") AND NOT StringInStr($tablename, "Doub") AND NOT StringInStr($tablename, "Trip") Then
					$gametype = "Turbo"
				ElseIf StringInStr($tablename, "Step") Then
					$gametype = "Step"
				Else
					$gametype = "Normal"
				EndIf
				Local $id = _scanstring($idx1 - 6, $pixy + (13 * $a), $idx2, $pixy2 + (13 * $a), $color, -0.01, $hlobby)
				$id = StringRegExpReplace($id, "\s", "")
				Local $split
				Local $rawtoplay
				Local $entrytrue = False
				fconsolewrite("888 Reg ID: " & $id)
				$rawtoplay = IniReadSection($inifile, "toplaySng")
				For $x = 1 To UBound($rawtoplay) - 1
					$split = StringSplit($rawtoplay[$x][0], "~")
					If IsArray($split) Then
						If StringInStr($entry, $split[4]) AND StringInStr($buyin, $split[2]) AND $gametype == $split[3] AND Number($seated) <= Number($split[6]) AND Number($seated) >= Number($split[7]) Then
							$entrytrue = True
							fconsolewrite("Entry: " & $entry & " = " & $split[4])
							fconsolewrite("BuyIn: " & $buyin & " = " & $split[2])
							fconsolewrite("GameType: " & $gametype & " = " & $split[3])
							ExitLoop
						Else
							fconsolewrite("Something in lobby does not match user criteria")
							fconsolewrite("Entry: " & $entry & " = " & $split[4])
							fconsolewrite("BuyIn: " & $buyin & " = " & $split[2])
							fconsolewrite("GameType: " & $gametype & " = " & $split[3])
							ContinueLoop
						EndIf
					Else
						ConsoleWrite("Not array split" & @LF)
						Sleep(1000)
						MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
						fconsolewrite("8: Total registered in lobby up to line: " & $a + 1 & " Status: " & $regstatus)
						Return
					EndIf
				Next
				If $entrytrue == False Then
					ContinueLoop
				EndIf
				If $entrytrue == True Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", 719 + $off[0], 243 + $off[1] + ($a * 13), 1, 0)
					For $z = 0 To 2
						If PixelGetColor($off[0] + 788, $off[1] + 585, $hlobby) == 0 Then
							ExitLoop
						EndIf
						Sleep(1000)
					Next
					If PixelGetColor($off[0] + 795, $off[1] + 585, $hlobby) == 0 Then
						fconsolewrite("Already registered : " & $id)
						fconsolewrite("Color: " & PixelGetColor($off[0] + 799, $off[1] + 605))
						$regstatus += 1
						$entrytrue = False
						ContinueLoop
					ElseIf PixelGetColor($off[0] + 788, $off[1] + 585, $hlobby) == 0 Then
						fconsolewrite("Register Button is visible: " & $id)
					Else
						fconsolewrite("Register/Unregister btn not visible: " & $id & " / " & WinGetTitle($hlobby))
					EndIf
					If GUICtrlRead($aenable) == $gui_checked OR GUICtrlRead($jenable) == $gui_checked Then
						WinActivate($hlobby)
						WinWaitActive($hlobby, "", 2)
						MouseClick("left", 939 + $off[0], 588 + $off[1], 1, 0)
						WinWait("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]", "", 10)
						If WinExists("[REGEXPTITLE:\A.*-.*#.*\z]") Then
							If WinExists("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]") Then
								WinClose("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]")
								fconsolewrite("7: Total registered in lobby up to line: " & $a + 1 & " Status: " & $regstatus)
								Return
							EndIf
						EndIf
					Else
						Sleep(1000)
						WinActivate($hlobby)
						WinWaitActive($hlobby, "", 2)
						MouseMove($off[0] + 825, $off[1] + 588, 0)
						MouseDown("left")
						Sleep(300)
						MouseUp("left")
						Sleep(300)
					EndIf
					WinWait("[REGEXPTITLE:\ATournament Registration.*\z]", "", 10)
					If WinExists("[REGEXPTITLE:\ATournament Registration.*\z]") Then
						Local $hnd = WinGetHandle("[REGEXPTITLE:\ATournament Registration.*\z]")
						fconsolewrite("Found Tourney Lobby")
						WinActivate($hnd)
						WinWaitActive($hnd, "", 5)
						WinSetOnTop($hnd, "", 1)
						Local $trnlobbypos = WinGetPos($hnd)
						Local $tabletit = WinGetTitle($hnd)
						$tabletit = StringMid($tabletit, StringInStr($tabletit, "#") + 1)
						If NOT StringInStr($id, $tabletit) Then
							fconsolewrite("TableName does not match: " & $id & " = " & $tabletit)
							WinClose($hnd)
							WinWaitActive($hnd, "", 1)
							Return
						Else
							fconsolewrite("TableName match: " & $id & " = " & $tabletit)
						EndIf
						If IsArray($trnlobbypos) Then
							MouseClick("left", $trnlobbypos[0] + 185, $trnlobbypos[1] + 360, 1, 0)
						EndIf
					Else
						If WinExists("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]") Then
							WinClose("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]")
							fconsolewrite("Could not find Tourney Lobby")
							fconsolewrite("6: Total registered in lobby up to line: " & $a + 1 & " Status: " & $regstatus)
							Return
						EndIf
					EndIf
					WinWait("[REGEXPTITLE:\ATournament ID.*\z]", "", 3)
					If WinExists("[REGEXPTITLE:\ATournament Registration.*\z]") Then
						WinClose("[REGEXPTITLE:\ATournament Registration.*\z]")
						fconsolewrite("5: Total registered in lobby up to line: " & $a + 1 & " Status: " & $regstatus)
						WinWait("[REGEXPTITLE:\ATournament ID.*\z]", "", 3)
					EndIf
					Sleep(500)
					If WinExists("[REGEXPTITLE:\ATournament ID.*\z]") AND iswindowvisible("[REGEXPTITLE:\ATournament ID.*\z]") Then
						Local $tohwnd = WinGetHandle("[REGEXPTITLE:\ATournament ID.*\z]")
						$tourneyregok = True
						Local $topos = WinGetPos($tohwnd)
						If IsArray($topos) AND iswindowvisible($tohwnd) Then
							fconsolewrite("Found tourney ID window: " & WinGetTitle($tohwnd))
							WinClose($tohwnd)
							If WinExists($tohwnd) AND iswindowvisible($tohwnd) Then
								WinActivate($tohwnd)
								WinSetOnTop($tohwnd, "", 1)
								MouseClick("left", $topos[0] + 168, $topos[1] + 195, 1, 0)
								WinSetOnTop($tohwnd, "", 0)
							EndIf
						EndIf
						If $lobbyminimize == 1 Then WinSetState($hlobby, "", @SW_MINIMIZE)
						$totalbuyin = Number($totalbuyin) + Number($thisbuyin)
						If WinExists("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]") Then
							WinClose("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]")
						EndIf
						$waitingfortournament = True
						Return True
					Else
						checkwindowfailed()
						If WinExists("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]") Then
							WinClose("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]")
						EndIf
						$tourneyregok = False
						fconsolewrite("3: Total registered in lobby up to line: " & $a + 1 & " Status: " & $regstatus)
						$waitingfortournament = False
						Return False
					EndIf
					If WinExists("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]") Then
						WinClose("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]")
					EndIf
					Sleep(1000)
					If $tourneyregok = True Then
						If WinExists("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]") AND iswindowvisible("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]") Then
							WinClose("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]")
						EndIf
						fconsolewrite("2: Total registered in lobby up to line: " & $a + 1 & " Status: " & $regstatus)
						$waitingfortournament = True
						Return True
					Else
						$tourneyregok = False
						If WinExists("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]") AND iswindowvisible("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]") Then
							WinClose("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]")
						EndIf
						fconsolewrite("1: Total registered in lobby up to line: " & $a + 1 & " Status: " & $regstatus)
						$waitingfortournament = False
						Return False
					EndIf
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
			Next
			fconsolewrite("10: Total registered in lobby up to line: " & $a + 1 & " Status: " & $regstatus)
		EndIf
	EndFunc

	Func acrregistertourney()
		logit("FU781")
		Local $regpic
		fconsolewrite("Starting ACRPoker Register Tourney")
		Local $off
		Local $gametype
		Local $buyin
		Local $plrs
		Local $status
		$numplyrs = ControlGetText($maingui, "", $numplyrscmbsng)
		$gametype = ""
		$buyin = ""
		$plrs = ""
		$tourneyregok = False
		closelobbies()
		$hlobby = WinGetHandle("[REGEXPTITLE:\A.*Tournament Lobby.*\z]")
		If $hlobby == "" OR $hlobby == 0 OR @error == 1 Then
			ConsoleWrite("Lobby not found" & @LF)
			Return
		EndIf
		Sleep(1000)
		movelobby($hlobby)
		logit("IF782")
		logit("EN784")
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		_winapi_setforegroundwindow($hlobby)
		WinWaitActive($hlobby, "", 1)
		$off = WinGetCaretPos()
		If NOT IsArray($off) Then
			fconsolewrite("ATC: NOT ARRAY OFF")
			Return
		EndIf
		$trn = gettourneyvaluessng()
		logit("IF785")
		If NOT IsArray($trn) Then
			Sleep(1000)
			MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
			Return
		EndIf
		$lmt = $trn[6]
		$typ = $trn[3]
		$gmtp = $trn[5]
		$plr = $trn[4]
		logit("EN786")
		logit("IF787")
		Local $listviewhandle = ControlGetHandle($hlobby, "", "IGListCtrl1")
		Local $count = ControlListView($hlobby, "", "IGListCtrl1", "GetItemCount")
		If IsArray($off) Then
			Local $nosng = 0
			ConsoleWrite("Count: " & $count & @LF)
			For $line = 0 To $count - 1 Step +1
				_guictrllistview_clickitem($listviewhandle, $line, "left", True, 1)
				Sleep(500)
				Local $regcolor = PixelGetColor($off[0] + 815, $off[1] + 498, $hlobby)
				If $regcolor = 16777215 Then
					fconsolewrite("Already registered... checking next line")
					ContinueLoop
				EndIf
				$status = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 6)
				$plrs = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 7)
				$plrs = StringRegExpReplace($plrs, "\s", "")
				logit("IF801")
				If $plrs == "" Then
					fconsolewrite("Incomplete Read/ Players not found - restarting")
					ContinueLoop
				EndIf
				Local $entry = StringMid($plrs, StringInStr($plrs, "/") + 1)
				Local $seated = StringStripWS(StringLeft($plrs, StringInStr($plrs, "/") - 1), 3)
				Local $tablename = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 2)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("ACR Reg TableName: " & $tablename)
				If NOT checkplayer($plrs) AND NOT StringInStr($tablename, "OnDemand") Then
					fconsolewrite("Players not matching")
					ContinueLoop
				EndIf
				Local $buyinmod = False
				$buyin = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 5)
				$buyin = StringRegExpReplace($buyin, "\s", "")
				If StringInStr($buyin, "TB") Then
					$buyin = StringReplace($buyin, "TB", "")
					$buyinmod = True
					fconsolewrite("BM True: " & $buyin)
				EndIf
				If StringInStr($buyin, "/") Then
					Local $buyin1 = StringSplit($buyin, "/")
					If IsArray($buyin1) Then
						$buyin = $buyin1[2]
					EndIf
				EndIf
				fconsolewrite("Final Buyin: " & $buyin)
				logit("IF796")
				logit("IF797")
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					$nosng += 1
					If $nosng >= 3 Then
						$tourneyregok = False
						Return False
					EndIf
					ContinueLoop
				EndIf
				logit("EN798")
				logit("IF799")
				If StringInStr($tablename, "Satellite") Then
					$gametype = "Satellite"
				ElseIf StringInStr($tablename, "OnDemand") Then
					$gametype = "On Demand"
				ElseIf StringInStr($tablename, "FinalTable") Then
					$gametype = "Final Table Experience"
				ElseIf StringInStr($tablename, "Hyper") Then
					$gametype = "Hyper Turbo"
				ElseIf StringInStr($tablename, "Doub") AND StringInStr($tablename, "Turbo") Then
					$gametype = "Double or Nothing Turbo"
				ElseIf StringInStr($tablename, "Doub") Then
					$gametype = "Double or Nothing"
				ElseIf StringInStr($tablename, "Turbo") Then
					$gametype = "Turbo"
				Else
					$gametype = "Normal"
				EndIf
				logit("EN793")
				logit("IF803")
				Local $split
				Local $rawtoplay
				Local $entrytrue = False
				$rawtoplay = IniReadSection($inifile, "toplaySng")
				Local $scrapebuy
				For $x = 1 To UBound($rawtoplay) - 1
					$split = StringSplit($rawtoplay[$x][0], "~")
					If IsArray($split) Then
						If $buyinmod == True Then
							$scrapebuy = $split[2]
							$scrapebuy = StringTrimLeft($scrapebuy, 1)
						Else
							$scrapebuy = $split[2]
						EndIf
						If $gametype <> "On Demand" Then
							If StringInStr($entry, $split[4]) AND StringInStr($buyin, $scrapebuy) AND StringInStr($gametype, $split[3]) AND $seated <= $split[6] AND $seated >= $split[7] Then
								$entrytrue = True
								ExitLoop
							ElseIf $entry <> $split[4] Then
								fconsolewrite("Entry: " & $entry & " != " & $split[4] & @LF)
								ContinueLoop
							ElseIf $buyin <> $scrapebuy Then
								fconsolewrite("BuyIn: " & $buyin & " != " & $scrapebuy & @LF)
								ContinueLoop
							Else
								fconsolewrite("GameType: " & $gametype & " != " & $split[3] & @LF)
								ContinueLoop
							EndIf
						Else
							If StringInStr($buyin, $scrapebuy) AND StringInStr($gametype, $split[3]) AND ($status == "Registering" OR $status == "Late Reg.") Then
								$entrytrue = True
								ExitLoop
							ElseIf $status <> "Registering" AND $status <> "Late Reg." Then
								fconsolewrite("Status: " & $status & " != Registering" & @LF)
								ContinueLoop
							ElseIf $buyin <> $scrapebuy Then
								fconsolewrite("BuyIn: " & $buyin & " != " & $scrapebuy & @LF)
								ContinueLoop
							Else
								fconsolewrite("GameType: " & $gametype & " != " & $split[3] & @LF)
								ContinueLoop
							EndIf
						EndIf
					Else
						ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
						Sleep(1000)
						MsgBox(0, "Error", "No entries in the 'to play' list match the current site and is enabled.")
						Return
					EndIf
				Next
				If $entrytrue == False Then
					fconsolewrite("Entry doesnt match")
					ContinueLoop
				EndIf
				If $entrytrue == True Then
					fconsolewrite("Found Tourney match... selecting line in lobby")
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 1)
					_guictrllistview_clickitem($listviewhandle, $line, "left", True, 1)
					Sleep(500)
					If ControlListView($hlobby, "", "IGListCtrl1", "IsSelected", $line) Then
						Local $text = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 2)
						$text = StringRegExpReplace($text, "\s", "")
						If $text <> $tablename Then
							Return False
						EndIf
					ElseIf PixelGetColor($off[0] + 804, $off[1] + 500, $hlobby) == 0 Then
						fconsolewrite("Already registered and playing")
						Return False
					Else
						Return False
					EndIf
					MouseClick("left", $off[0] + 857, $off[1] + 503, 1, 0)
					Sleep(3000)
					For $zt = 1 To 5
						Local $listreg = WinList("[REGEXPCLASS:\A.*ATL:.*\z]")
						If IsArray($listreg) Then
							For $a = 1 To $listreg[0][0]
								Local $posreg = WinGetPos($listreg[$a][1])
								If IsArray($posreg) AND $posreg[2] == 600 AND $posreg[3] == 400 Then
									WinActivate($listreg[$a][1])
									MouseClick("left", $posreg[0] + 213, $posreg[1] + 197, 1, 0)
									ExitLoop
								EndIf
							Next
							ExitLoop
						Else
							If WinExists("", "You are successfully registered.") Then
							Else
								fconsolewrite("Could not find Regsiter window")
								Return
							EndIf
						EndIf
						Sleep(1000)
					Next
					logit("IF804")
					Local $tohwnd
					Local $newcount = 0
					WinWait("", "You are successfully registered.", 10)
					If WinExists("", "You are successfully registered.") Then
						Do
							$tohwnd = WinGetHandle("", "You are successfully registered.")
							Local $topos = WinGetPos($tohwnd)
							Sleep(20)
							$newcount += 1
						Until $topos[0] > 0 OR $topos[1] > 0 OR $newcount >= 20
						$regscreenshot += 1
						If $topos[0] > 0 OR $topos[1] > 0 Then
							WinActivate($tohwnd)
							_winapi_setforegroundwindow($tohwnd)
							WinWaitActive($tohwnd, "", 1)
							$topos = WinGetCaretPos()
							If GUICtrlRead($chknotifyreg) == $gui_checked Then
								_screencapture_capturewnd(@ScriptDir & "\RegScreenShot" & $regscreenshot & ".jpg", $tohwnd)
								$regpic = @ScriptDir & "\RegScreenShot" & $regscreenshot & ".jpg"
								emailnotification($regpic, "Registration")
							EndIf
							fconsolewrite("ACRREG: Found Successfully Registered window")
							Sleep(1500)
							If IsArray($topos) Then
								MouseClick("left", $topos[0] + 157, $topos[1] + 91, 1, 0)
								WinWaitClose($tohwnd, "", 2)
							EndIf
							If WinExists($tohwnd) Then
								WinClose($tohwnd)
							EndIf
							WinSetState($hlobby, "", @SW_MINIMIZE)
							Return True
						Else
							ConsoleWrite("Successfully registered window not found" & @LF)
							$tourneyregok = False
							Return False
						EndIf
					Else
						ConsoleWrite("Successfully registered window not found" & @LF)
						$tourneyregok = False
						Return False
					EndIf
					logit("EN808")
					Sleep(1000)
					logit("IF809")
					If $tourneyregok = True Then
						Return True
					Else
						ConsoleWrite("Successfully registered window not found2" & @LF)
						$tourneyregok = False
						Return False
					EndIf
					logit("EN812")
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
				logit("EN813")
			Next
			If $a >= 26 Then
				WinActivate($hlobby)
				Sleep(300)
				MouseClick("left", 380 + $off[0], 250 + $off[1], 1, 0)
				Sleep(500)
				Send("{PGDN 2}")
			EndIf
			logit("NE814")
		EndIf
		logit("EN815")
		logit("EN816")
	EndFunc

	Func checkwindowfailed()
		If WinExists("[REGEXPTITLE:\ARegistration to tournament.*failed.*\z]") Then
			Local $hnd = WinGetHandle("[REGEXPTITLE:\ARegistration to tournament.*failed.*\z]")
			If iswindowvisible($hnd) Then
				fconsolewrite("Win failed Window closing now...")
				WinClose($hnd)
			EndIf
		EndIf
	EndFunc

	Func closelobbies()
		Local $winlist
		If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan" Then
			$winlist = WinList("[REGEXPTITLE:\ATournament.*-.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
			$winlist = WinList("[REGEXPCLASS:\A.*ATL:03A.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Sit & Go.*-.*#.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Tournament lobby.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$winlist = WinList("[REGEXPTITLE:\A#.*\z]")
		Else
			$winlist = WinList("[REGEXPTITLE:\A.*, No Limit Texas Hold'em.*\z]")
		EndIf
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				If iswindowvisible($winlist[$x][1]) Then
					ConsoleWrite("Closing Tourney Lobby" & @LF)
					If GUICtrlRead($cmbsite) == "WillHill" Then
						Local $winpos = WinGetPos($winlist[$x][1])
						If IsArray($winpos) Then
							WinActivate($winlist[$x][1])
							WinWaitActive($winlist[$x][1], "", 1)
							MouseClick("left", $winpos[0] + 681, $winpos[1] + 17, 1, 0)
							WinWaitClose($winlist[$x][1], "", 1)
						EndIf
					ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
						If StringInStr($winlist[$x][0], " #") Then
							ContinueLoop
						Else
							WinClose($winlist[$x][1])
							WinWaitClose($winlist[$x][1], "", 1)
						EndIf
					Else
						WinClose($winlist[$x][1])
						WinWaitClose($winlist[$x][1], "", 1)
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Func bnghandlelosttables()
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
			Next
			checknewtablessng()
		EndIf
	EndFunc

	Func handlebngcongrats()
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		Local $tablelist = tablelistsng()
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) Then
					If $winpos[2] == 402 AND iswindowvisible($winlist[$x][1]) Then
						If PixelGetColor($winpos[0] + 11, $winpos[1] + 122, $winlist[$x][1]) == 16777215 AND PixelGetColor($winpos[0] + 56, $winpos[1] + 119, $winlist[$x][1]) == 16777215 Then
							fconsolewrite("Congratulations window found... closing now")
							$endscreenshot += 1
							_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $winlist[$x][1])
							$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
							Local $hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							MouseClick("left", $winpos[0] + 254, $winpos[1] + 243, 1, 0)
							Sleep(2000)
							If GUICtrlRead($chknotifyend) == $gui_checked Then
								emailnotification($endpic, "Tourney Finished")
							EndIf
							If WinExists($winlist[$x][1]) Then
								If iswindowvisible($winlist[$x][1]) Then
									WinClose($winlist[$x][1])
								EndIf
								Return
							Else
								Local $tablelist2 = tablelistsng()
								If IsArray($tablelist) AND IsArray($tablelist2) Then
									If $tablelist[0][0] > $tablelist2[0][0] Then
										fconsolewrite("HCGRATS: Congratulations window closed and table closed")
									Else
										fconsolewrite("HCGRATS: Congratulations window")
									EndIf
								EndIf
								Return
							EndIf
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Func eeehandlelosttables()
		handleeeeconnfailedwin()
		handleeeeloginwin()
		Local $hnd
		Local $winpos
		Local $tflist
		Local $tohwnd
		Local $topos
		eeehandletourneystartwin()
		If WinExists("User Message") Then
			$tflist = WinList("User Message")
			For $a = 1 To $tflist[0][0]
				$winpos = WinGetPos($tflist[$a][1])
				$hnd = $tflist[$a][1]
				If IsArray($winpos) AND $winpos[2] == 334 AND $winpos[3] == 250 Then
					If iswindowvisible($hnd) Then
						fconsolewrite("Congrats Window Found")
						Local $title = WinGetTitle($hnd)
						fconsolewrite("Window Title: " & $title)
						fconsolewrite("Window Text: " & WinGetText($hnd))
						fconsolewrite("Window Class List: " & WinGetClassList($hnd))
						fconsolewrite("Window Size: " & $winpos[2] & ", " & $winpos[3])
						fconsolewrite("Window State: " & WinGetState($hnd))
						_screencapture_capturewnd(@ScriptDir & "\WindowScreenShot.jpg", $hnd)
						WinActivate($hnd)
						WinWaitActive($hnd, "", 2)
						If iswindowvisible($hnd) Then
							fconsolewrite("Congrats Window Found")
							MouseClick("left", $winpos[0] + 166, $winpos[1] + 212, 1, 0)
							WinWaitClose($hnd, "", 1)
						Else
							WinClose($hnd)
							WinWaitClose($hnd, "", 1)
						EndIf
						ExitLoop
					Else
						WinClose($hnd)
						WinWaitClose($hnd, "", 1)
						ExitLoop
					EndIf
				EndIf
				If IsArray($winpos) AND $winpos[2] == 334 AND $winpos[3] == 298 Then
					fconsolewrite("Youve achieved window found")
					WinClose($hnd)
				EndIf
				ExitLoop
			Next
		EndIf
		If WinExists("Member Message") Then
			Local $winlist2 = WinList("Member Message")
			For $y = 1 To $winlist2[0][0]
				$hnd = $winlist2[$y][1]
				$winpos = WinGetPos($hnd)
				WinActivate($hnd)
				WinWaitActive($hnd, "", 1)
				If IsArray($winpos) Then
					If iswindowvisible($hnd) Then
						fconsolewrite("Tourney Finished Window Found")
						If GUICtrlRead($chknotifyend) == $gui_checked Then
							$endscreenshot += 1
							_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $hnd)
							$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
							emailnotification($endpic, "Tourney Finished")
						EndIf
						MouseClick("left", $winpos[0] + 265, $winpos[1] + 162, 1, 0)
						WinWaitClose($hnd, "", 1)
						If iswindowvisible($hnd) Then
							WinClose($hnd)
						EndIf
						ExitLoop
					Else
						WinClose($hnd)
						WinWaitClose($hnd, "", 1)
					EndIf
				EndIf
			Next
		EndIf
		If WinExists("[REGEXPTITLE:\ATournament ID.*\z]") Then
			$tohwnd = WinGetHandle("[REGEXPTITLE:\ATournament ID.*\z]")
			$topos = WinGetPos($tohwnd)
			If IsArray($topos) Then
				WinClose($tohwnd)
				If WinExists($tohwnd) AND iswindowvisible($tohwnd) Then
					fconsolewrite("Tourney ID Window Found")
					WinActivate($tohwnd)
					MouseClick("left", $topos[0] + 168, $topos[1] + 195, 1, 0)
					WinWaitClose($tohwnd, "", 2)
					If WinExists($tohwnd) Then
						WinClose($tohwnd)
					EndIf
				EndIf
			EndIf
		EndIf
		If WinExists("[REGEXPTITLE:\Ahttp://promo.888.com.*\z]") Then
			$tohwnd = WinGetHandle("[REGEXPTITLE:\Ahttp://promo.888.com.*\z]")
			WinClose($tohwnd)
		EndIf
		If WinExists("[REGEXPTITLE:\A888poker News.*\z]") Then
			$tohwnd = WinGetHandle("[REGEXPTITLE:\A888poker News.*\z]")
			WinClose($tohwnd)
		EndIf
		If WinExists("[REGEXPTITLE:\ASecurity Alert.*\z]") Then
			$tohwnd = WinGetHandle("[REGEXPTITLE:\ASecurity Alert.*\z]")
			$topos = WinGetPos("[REGEXPTITLE:\ASecurity Alert.*\z]")
			If IsArray($topos) Then
				fconsolewrite("Security Alert window found...")
				WinActivate($tohwnd)
				WinWaitActive($tohwnd, "", 2)
				MouseClick("left", $topos[0] + 174, $topos[1] + 105, 1, 0)
				WinWaitClose($tohwnd, "", 2)
				If WinExists($tohwnd) Then
					WinActivate($tohwnd)
					WinClose($tohwnd)
				EndIf
			EndIf
		EndIf
	EndFunc

	Func acrhandlelosttables()
		Local $winpos2, $hnd
		If WinExists("Player Finished") Then
			$hnd = WinGetHandle("Player Finished")
			$winpos = WinGetPos($hnd)
			If IsArray($winpos) AND iswindowvisible($hnd) Then
				$endscreenshot += 1
				_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $hnd)
				$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
				fconsolewrite("Player Finished Window Found")
				If WinExists($hnd) Then
					WinActivate($hnd)
					$winpos2 = WinGetPos($hnd)
					If IsArray($winpos2) Then
						MouseClick("left", $winpos2[0] + 222, $winpos2[1] + 100, 1, 0)
						WinWaitClose($hnd, "", 2)
						If WinExists($hnd) Then
							WinClose($hnd)
						EndIf
					EndIf
				EndIf
				If GUICtrlRead($chknotifyend) == $gui_checked Then
					emailnotification($endpic, "Tourney Finished")
				EndIf
			EndIf
		EndIf
		If WinExists("Tournament finished.") Then
			$hnd = WinGetHandle("Tournament finished.")
			$winpos = WinGetPos($hnd)
			If IsArray($winpos) AND iswindowvisible($hnd) Then
				$endscreenshot += 1
				_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $hnd)
				$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
				fconsolewrite("Tourney Finished Window Found")
				If WinExists($hnd) Then
					WinActivate($hnd)
					$winpos2 = WinGetPos($hnd)
					If IsArray($winpos2) Then
						MouseClick("left", $winpos2[0] + 159, $winpos2[1] + 262, 1, 0)
						WinWaitClose($hnd, "", 2)
						If WinExists($hnd) Then
							WinClose($hnd)
						EndIf
					EndIf
				EndIf
				If GUICtrlRead($chknotifyend) == $gui_checked Then
					emailnotification($endpic, "Tourney Finished")
				EndIf
			EndIf
		EndIf
		Local $y
		Local $endlist = WinList("[REGEXPCLASS:\A.*ATL:.*\z]")
		If IsArray($endlist) Then
			For $y = 1 To $endlist[0][0]
				Local $endpos = WinGetPos($endlist[$y][1])
				If IsArray($endpos) Then
					If $endpos[2] == 388 AND $endpos[3] == 108 Then
						$endscreenshot += 1
						_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $endlist[$y][1])
						$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
						fconsolewrite("Tourney Finished Window Found")
						If GUICtrlRead($chknotifyend) == $gui_checked Then
							emailnotification($endpic, "Tourney Finished")
						EndIf
						WinClose($endlist[$y][1])
						WinWaitClose($endlist[$y][1], "", 1)
						ExitLoop
					EndIf
				EndIf
			Next
		EndIf
		If WinExists("Table removed") Then
			$hnd = WinGetHandle("Table removed")
			$winpos = WinGetPos($hnd)
			If IsArray($winpos) AND iswindowvisible($hnd) Then
				$endscreenshot += 1
				_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $hnd)
				$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
				fconsolewrite("Table removed Window Found")
				If WinExists($hnd) Then
					WinActivate($hnd)
					$winpos2 = WinGetPos($hnd)
					If IsArray($winpos2) Then
						MouseClick("left", $winpos2[0] + 140, $winpos2[1] + 101, 1, 0)
						WinWaitClose($hnd, "", 2)
						If WinExists($hnd) Then
							WinClose($hnd)
						EndIf
					EndIf
				EndIf
				If GUICtrlRead($chknotifyend) == $gui_checked Then
					emailnotification($endpic, "Tourney Finished")
				EndIf
			EndIf
		EndIf
	EndFunc

	Func movedtonewtablewindowexists()
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
			Next
		EndIf
	EndFunc

	Func checknewtablessng()
		Local $winlist = tablelistsng()
		Local $endtitle
		Local $title
		If GUICtrlRead($cmbsite) == "888Poker" Then
			handletourneystartwin()
			eeehandlelosttables()
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			handletourneystartwin()
		EndIf
		If IsArray($winlist) AND $winlist[0][0] > numtables($htable) Then
			For $a = 1 To $winlist[0][0]
				$title = $winlist[$a][0]
				If GUICtrlRead($cmbsite) == "888Poker" Then
					$endtitle = StringMid($title, StringInStr($title, "#") + 1)
					$endtitle = StringLeft($endtitle, StringInStr($endtitle, " ") - 1)
				ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
					$endtitle = StringLeft($title, StringInStr($title, " ") - 1)
					$endtitle = StringMid($endtitle, StringInStr($endtitle, "#") + 1)
				ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
					$endtitle = StringMid($title, StringInStr($title, ")") + 2)
					$endtitle = StringLeft($endtitle, StringInStr($endtitle, "|") - 2)
				ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
					$endtitle = StringLeft($title, StringInStr($title, ")") - 1)
					$endtitle = StringMid($endtitle, StringInStr($endtitle, "(") + 1)
				ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
					$endtitle = StringLeft($title, StringInStr($title, ")") - 1)
					$endtitle = StringMid($endtitle, StringInStr($endtitle, "(") + 1)
				Else
					$endtitle = $winlist[$a][1]
				EndIf
				If StringInStr($winlist[$a][0], "ohf") OR StringInStr($winlist[$a][0], "oppl") OR StringInStr($winlist[$a][0], "dll") OR StringInStr($winlist[$a][0], "SciTE") OR StringInStr($winlist[$a][0], "OpenHoldem") OR StringInStr($winlist[$a][0], "openholdem") OR StringInStr($winlist[$a][0], "Openholdem") Then ContinueLoop
				If _arraysearch($htable, $endtitle) == -1 AND WinExists($winlist[$a][1]) Then
					$waitingfortournament = False
					fconsolewrite("CNT: New sng found:*" & WinGetTitle($winlist[$a][1]) & "*")
					$tournamentsstarted += 1
					fconsolewrite("Tourneys Registered *9* in queue: " & $htournreg & "/" & GUICtrlRead($numbotscmb))
					$waitingfortournament = False
					If $htournreg > 0 Then
						$htournreg -= 1
					EndIf
					Sleep(500)
					$htable[$a] = $endtitle
					eeehandletourneystartwin()
					Sleep(500)
					ExitLoop
				Else
					Sleep(500)
					Local $subemnt = _arraysearch($avoidtables, $endtitle)
					If $subemnt > -1 Then
						$htable[$subemnt] = $endtitle
					EndIf
					fconsolewrite("Table Change, same tourney.  Tables = UserDef # of Tables... checking connected bots...")
				EndIf
			Next
		EndIf
	EndFunc

	Func startautopilotsng()
		ConsoleWrite("Starting SAP" & @LF)
		logit("FU658")
		$totalbuyin = 0
		logit("EN664")
		logit("IF665")
		logit("EN666")
		Sleep(500)
		$livebots = 0
		$tablesfinished = 0
		$tournamentsregistered = 0
		$tournamentsstarted = 0
		Local $oldtablesfinished = 0
		$waitingfortournament = False
		Local $lastmessage = ""
		$autopostimer = _timer_init()
		Local $tslasttournamentjoin = -10
		Local $brunonce = True
		Local $brunning = False
		logit("WH667")
		If (GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan") AND WinExists($lobbyname) Then
			$hlobby = getlobbyhnd()
		EndIf
		While ($bscheduleactive OR (NOT $bscheduleactive AND $brunonce))
			$tablesfinished = 0
			$oldtablesfinished = 0
			$waitingfortournament = False
			$run = True
			$brunonce = False
			$livebots = 0
			$tournamentsregistered = 0
			$tournamentsstarted = 0
			$tslasttournamentjoin = -10
			$brunning = False
			$totalbuyin = 0
			logit("WH668")
			Local $mttbcount = 0
			While $run AND Number($tablesfinished) < Number(ControlGetText($maingui, "", $numsngopentxt)) AND ((scheduledtorun() AND $bscheduleactive) OR (NOT $bscheduleactive))
				If _timer_diff($statstimer) >= 40 * 1000 Then
					$memstats = MemGetStats()
					fconsolewrite("% in use: " & $memstats[0])
					If Number($memstats[0]) > 30 Then
						_reducememory()
					EndIf
					$statstimer = _timer_init()
				EndIf
				ohcheckbotstotables()
				If NOT scheduledtorun($lobbyname) AND $bscheduleactive Then
					If (GUICtrlRead($chk888autologin) == $gui_checked OR GUICtrlRead($chkipautologin) == $gui_checked) Then
						If WinExists($lobbyname) Then closelobby($lobbyname)
					EndIf
				ElseIf (GUICtrlRead($chk888autologin) == $gui_checked OR GUICtrlRead($chkipautologin) == $gui_checked) AND NOT WinExists($lobbyname) Then
					fconsolewrite("Opening Site")
					autologin()
				EndIf
				TraySetToolTip("Sng's : " & $tournamentsregistered & "/" & GUICtrlRead($numsngopentxt))
				$brunning = True
				ConsoleWrite(".")
				logit("IF669")
				If $oldtablesfinished <> $tablesfinished Then
					fconsolewrite("Tournaments finished so far: " & $tablesfinished & "/" & ControlGetText($maingui, "", $numsngopentxt))
					$oldtablesfinished = $tablesfinished
				EndIf
				logit("EN670")
				ControlSetText($maingui, "", $numsngstxt, $tournamentsregistered & "/" & ControlGetText($maingui, "", $numsngopentxt))
				Local $lastjointourneymessage = ""
				logit("IF671")
				updatestatusbarsng()
				logit("EN672")
				logit("IF673")
				Local $winlist
				Local $wincount
				Local $livebots
				If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
					If bodogregfull() Then
					EndIf
				EndIf
				If GUICtrlRead($cmbsite) == "BetOnline" Then
					betonlinehandletourneystartwin()
				EndIf
				$winlist = tablelistsng()
				$wincount = $winlist[0][0]
				If $wincount < 22 Then
					If $wincount == 0 OR $wincount < GUICtrlRead($numbotscmb) Then
						logit("IF674")
						If $tournamentsregistered < GUICtrlRead($numsngopentxt) Then
							logit("IF675")
							If ($tslasttournamentjoin == -10 OR (_timer_diff($tslasttournamentjoin) / 1000) >= GUICtrlRead($txtsecsdelay)) Then
								logit("IF676")
								If numtables($htable) <= $winlist[0][0] Then
									$mttbcount = 0
									logit("IF677")
									If $waitingfortournament == False Then
										$winlist = getwinlist()
										ConsoleWrite("WinList: " & $winlist[0][0] & @LF)
										logit("IF678")
										If $winlist[0][0] <= numtables($htable) Then
											If NOT $bscheduleactive OR ($bscheduleactive AND scheduledtorun()) Then
												fconsolewrite("Stable - Adding new tournament")
												logit("IF679")
												If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan" Then
													If bngregistertourneysng() Then
														$tourneyregok = True
													Else
														$tourneyregok = False
														$tslasttournamentjoin = _timer_init()
														If $globalsngcount < 5 Then
															$globalsngcount += 1
														Else
															$globalsngcount = 0
															Sleep(60000)
														EndIf
													EndIf
												ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
													If bwinregistertourney() Then
														$tourneyregok = True
													Else
														$tourneyregok = False
														fconsolewrite("ML: Tourney Registration Failed...")
													EndIf
												ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
													Local $tablename = bodogregistertourneysng()
													fconsolewrite("ML: TableName: " & $tablename)
													logit("IF1034")
													If $tablename <> "" AND $tablename <> "No Table" Then
														$tourneyregok = True
													ElseIf $tablename == "No Table" Then
														$tourneyregok = False
														fconsolewrite("ML: Tourney Registration Failed...")
													Else
														$tourneyregok = False
														$tslasttournamentjoin = _timer_init()
														If $globalsngcount < 5 Then
															$globalsngcount += 1
														Else
															$globalsngcount = 0
															Sleep(60000)
														EndIf
													EndIf
												ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
													If eeeregistertourney() Then
														$tourneyregok = True
													Else
														$tourneyregok = False
														$tslasttournamentjoin = _timer_init()
														If $globalsngcount < 5 Then
															$globalsngcount += 1
														Else
															$globalsngcount = 0
															Sleep(60000)
														EndIf
														fconsolewrite("ML: Tourney Registration Failed...")
													EndIf
													If checklobbyopen() Then Return
												ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
													If carbonregistertourneysng() Then
														$tourneyregok = True
													Else
														$tourneyregok = False
														$tslasttournamentjoin = _timer_init()
														If $globalsngcount < 5 Then
															$globalsngcount += 1
														Else
															$globalsngcount = 0
															Sleep(60000)
														EndIf
														fconsolewrite("ML: Tourney Registration Failed...")
													EndIf
												ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
													If betonlineregistertourney() Then
														$tourneyregok = True
													Else
														$tourneyregok = False
														$tslasttournamentjoin = _timer_init()
														If $globalsngcount < 5 Then
															$globalsngcount += 1
														Else
															$globalsngcount = 0
															Sleep(60000)
														EndIf
														fconsolewrite("ML: Tourney Registration Failed...")
													EndIf
												ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "TruePoker" Then
													If acrregistertourney() Then
														$tourneyregok = True
													Else
														$tourneyregok = False
														fconsolewrite("ML: Tourney Registration Failed...")
														$tslasttournamentjoin = _timer_init()
														If $globalsngcount < 5 Then
															$globalsngcount += 1
														Else
															$globalsngcount = 0
															Sleep(60000)
														EndIf
													EndIf
												EndIf
												logit("EN680")
												Sleep(500)
												logit("IF681")
												If $tourneyregok Then
													$tournamentsregistered += 1
													fconsolewrite("Num of sngs registered so far: " & $tournamentsregistered)
													If $tablesfinished > $tournamentsregistered Then
														$tablesfinished = $tournamentsregistered - 1
													EndIf
													$waitingfortournament = True
												Else
													$waitingfortournament = False
												EndIf
												logit("EN682")
											Else
												$lastjointourneymessage = "Not starting new tournament because some tables do not have handles."
											EndIf
											logit("EN683")
										Else
											$lastjointourneymessage = ("Not starting new tournament because we are waiting for a tournament.")
										EndIf
									ElseIf ($bscheduleactive AND NOT scheduledtorun()) Then
										$lastjointourneymessage = "Not starting new tournament because we are not scheduled to play right now."
										logit("IF1039")
										If numtables($htable) == 0 AND nbotsconnected() == 0 AND NOT $waitingfortournament Then
											$tablesfinished = 0
											$tournamentsregistered = 0
											$oldtablesfinished = 0
											logit("FO1040")
											For $a = 0 To 21
												$ttournaments[$a] = ""
												$htournaments[$a] = -10
												$hoh[$a] = -10
												$htable[$a] = -10
												_guictrllistview_deleteitem($statuslist, $a)
											Next
											logit("NE1041")
											$tslasttournamentjoin = -10
										EndIf
										logit("EN1042")
									EndIf
									logit("EN684")
								Else
									logit("IF685")
									$lastjointourneymessage = "Not starting new tournament because we have more tables(" & numtables($htable) & ") than bots(" & $livebots & ") connected"
									$mttbcount += 1
									If $mttbcount >= 3 Then
										adjustwinpositionssng()
										$mttbcount = 0
									EndIf
								EndIf
								logit("EN686")
							Else
								$lastjointourneymessage = "Not starting new tournament because we are delaying: " & GUICtrlRead($txtsecsdelay) & " secs"
							EndIf
							logit("EN687")
						Else
							$lastjointourneymessage = "Not starting new tournament because tournaments registered(" & $tournamentsregistered & ") >= # to play(" & GUICtrlRead($numsngopentxt) & ")"
						EndIf
					Else
						$lastjointourneymessage = ("Not starting new tournament because of max simultaneous bots reached.")
					EndIf
				Else
					$lastjointourneymessage = ("Not starting new tournament because we have a max 6 tourneys playing")
				EndIf
				logit("EN689")
				If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan" Then
					closehelpwin()
					handlebegad()
					closefullbuyinwin()
					If runtime() Then
						autologin()
						Sleep(2000)
					EndIf
					handleloginwin()
				ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
					logit("EN1058")
					handletourneystartwin()
				ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
					jackpotwinhandle()
					checkwindowfailed()
					handletourneystartwin()
				EndIf
				closelobbies()
				logit("IF690")
				If $lastmessage <> $lastjointourneymessage Then
					$lastmessage = $lastjointourneymessage
					fconsolewrite($lastjointourneymessage)
				EndIf
				logit("EN691")
				adjustwinpositionssng()
				checkdeadtables()
				Local $tablelist = getwinlist()
				Local $botlist = botwinlist($bottitle)
				logit("IF692")
				If ($tablesfinished >= ControlGetText($maingui, "", $numsngopentxt) OR $tournamentsstarted >= ControlGetText($maingui, "", $numsngopentxt)) Then
					logit("IF693")
					If $tablesfinished >= ControlGetText($maingui, "", $numsngopentxt) Then
						fconsolewrite("Tables Finsihed: " & $tablesfinished & " is >= userNumSng " & ControlGetText($maingui, "", $numsngopentxt) & @LF)
					ElseIf $tournamentsstarted >= ControlGetText($maingui, "", $numsngopentxt) Then
						fconsolewrite("Tables Started: " & $tournamentsstarted & " is >= userNumSng " & ControlGetText($maingui, "", $numsngopentxt) & @LF)
					EndIf
					logit("EN694")
					logit("WH695")
					While $tablelist[0][0] > 0 OR $botlist[0][0] > 0
						checkdeadtables()
						checknewtablessng()
						If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan" Then
							bnghandlelosttables()
							closelobbies()
							handlebegad()
						ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
							eeehandlelosttables()
						ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
							If BitAND(WinGetState("STT rematch"), 2) == 2 Then
								Local $remlist = WinList("STT rematch")
								logit("FO1070")
								For $y = 1 To $remlist[0][0]
									WinActivate($remlist[$y][1])
									ControlFocus("STT rematch", "", "[CLASS:Button; INSTANCE:2]")
									ControlClick("STT rematch", "", "[CLASS:Button; INSTANCE:2]")
									$tablesfinished += 1
								Next
								logit("NE1071")
							EndIf
						EndIf
						closelobbies()
						adjustwinpositionssng()
						$tablelist = getwinlist()
						$botlist = botwinlist($bottitle)
						logit("IF696")
						logit("EN697")
						logit("IF698")
						If $botlist[0][0] > 0 Then
							logit("IF699")
							If $tablelist[0][0] <= 0 Then
							EndIf
							logit("EN700")
						EndIf
						logit("EN701")
						Sleep(1000)
					WEnd
					logit("WE702")
					ConsoleWrite("Ends Here" & @LF)
					$run = False
					ExitLoop
				EndIf
				logit("EN703")
				$winlist = tablelistsng()
				logit("IF704")
				If $winlist[0][0] > numtables($htable) Then
					ConsoleWrite("Winlist: " & $winlist[0][0] & " > NumTables: " & numtables($htable) & @LF)
					$waitingfortournament = False
					Local $newtablehandle = -10
					Local $endtitle
					Local $title
					logit("FO705")
					For $a = 1 To $winlist[0][0]
						$title = $winlist[$a][0]
						ConsoleWrite("Beginning Title: " & $title & @LF)
						If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan" Then
							$endtitle = StringLeft($title, StringInStr($title, "|") - 2)
							$endtitle = StringMid($endtitle, StringInStr($endtitle, ")") + 2)
						ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
							$endtitle = StringMid($title, StringInStr($title, "#") + 1)
							$endtitle = StringLeft($endtitle, StringInStr($endtitle, " ") - 1)
						ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
							$endtitle = StringMid($title, StringInStr($title, "(") + 1)
							$endtitle = StringLeft($endtitle, StringInStr($endtitle, ")") - 1)
						ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "TruePoker" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "Blackchip" Then
							$endtitle = StringMid($title, StringInStr($title, "(") + 1)
							$endtitle = StringReplace($endtitle, ")", "")
						ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
							$endtitle = StringLeft($title, StringInStr($title, ")") - 1)
							$endtitle = StringMid($endtitle, StringInStr($endtitle, "(") + 1)
						ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
							$endtitle = $winlist[$a][1]
						Else
							$endtitle = $title
						EndIf
						If _arraysearch($htable, $endtitle) == -1 AND WinExists($winlist[$a][1]) AND iswindowvisible($winlist[$a][1]) Then
							fconsolewrite("ML: New table found - *" & $endtitle & "*")
							$tournamentsstarted += 1
							$waitingfortournament = False
							$newtablehandle = emptytablehandle()
							$htable[$newtablehandle] = $endtitle
							ConsoleWrite("$hTable[$NewTableHandle] = " & WinGetTitle($htable[$newtablehandle]) & @LF)
							logit("WH872")
							adjustwinpositionssng()
							$beginscreenshot += 1
							If GUICtrlRead($chknotifybegin) == $gui_checked Then
								_screencapture_capturewnd(@ScriptDir & "\BeginScreenShot" & $beginscreenshot & ".jpg", $winlist[$a][1])
								$beginpic = @ScriptDir & "\BeginScreenShot" & $beginscreenshot & ".jpg"
								emailnotification($beginpic, "Tourney Begin")
							EndIf
						Else
							fconsolewrite("Table Change for " & $endtitle & ", no need to connect a new bot")
						EndIf
						logit("EN737")
					Next
					logit("NE738")
				EndIf
				logit("EN739")
				checkdeadtables()
				checknewtablessng()
				adjustwinpositionssng()
				Sleep(1000)
			WEnd
			logit("WE740")
			logit("IF741")
			If $brunning Then
				$brunning = False
				If (GUICtrlRead($chk888autologin) == $gui_checked OR GUICtrlRead($chkipautologin) == $gui_checked) Then
					closelobby($lobbyname)
				EndIf
			Else
				Sleep(5000)
			EndIf
			logit("EN742")
		WEnd
		logit("WE743")
		fconsolewrite("SAP: Done:", "tablesfinished: " & $tablesfinished & ", " & "# of sngs to play: " & ControlGetText($maingui, "", $numsngopentxt) & ", " & "WFT: " & $waitingfortournament & ", " & "# of tables in Play: " & numtables($htable) & ", " & "BSA: " & $bscheduleactive & ", " & "Run: " & $run)
		logit("EN745")
		exitevent()
		logit("EN746")
	EndFunc

	Func tourneyfinishedwin()
		Local $winlist
		Local $winpos
		Local $partitle, $parhnd
		Local $endpic, $endscreenshot
		If GUICtrlRead($cmbsite) == "Carbon" Then
			$winlist = WinList()
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If $winpos[2] == 421 AND $winpos[3] == 215 AND iswindowvisible($winlist[$x][1]) Then
							fconsolewrite("Congrats window found... closing now")
							If GUICtrlRead($chknotifyend) == $gui_checked Then
								$endscreenshot += 1
								_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $winlist[$x][1])
								$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
								emailnotification($endpic, "Tourney Finished")
							EndIf
							If PixelGetColor($winpos[0] + 28, $winpos[1] + 153, $winlist[$x][1]) == 16777215 Then
								MouseClick("left", $winpos[0] + 28, $winpos[1] + 153, 1, 0)
							EndIf
							MouseClick("left", $winpos[0] + 357, $winpos[1] + 191, 1, 0)
						ElseIf $winpos[2] == 506 AND $winpos[3] == 295 AND iswindowvisible($winlist[$x][1]) Then
							fconsolewrite("Tourney Finished window found... closing now")
							If GUICtrlRead($chknotifyend) == $gui_checked Then
								$endscreenshot += 1
								_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $winlist[$x][1])
								$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
								emailnotification($endpic, "Tourney Finished")
							EndIf
							If PixelGetColor($winpos[0] + 158, $winpos[1] + 238, $winlist[$x][1]) == 16777215 Then
								MouseClick("left", $winpos[0] + 158, $winpos[1] + 238, 1, 0)
							EndIf
							MouseClick("left", $winpos[0] + 252, $winpos[1] + 265, 1, 0)
						EndIf
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bwin" Then
			$winlist = WinList("bwin", "placed")
			If IsArray($winlist) AND $winlist[0][0] > 0 Then
				For $t = 1 To $winlist[0][0]
					If iswindowvisible($winlist[$t][1]) Then
						$winpos = WinGetPos($winlist[$t][1])
						$partitle = WinGetTitle(parentwindow($winlist[$t][1]))
						$parhnd = WinGetHandle($partitle)
						ConsoleWrite("Parent Window Title: " & $partitle & @LF)
						Sleep(2000)
						ConsoleWrite("Tourney Finished Window Found.. Closing now" & @LF)
						If GUICtrlRead($chknotifyend) == $gui_checked Then
							$endscreenshot += 1
							_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $winlist[$t][1])
							$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
							emailnotification($endpic, "Tourney Finished")
						EndIf
						WinClose($winlist[$t][1])
						Sleep(500)
						WinClose($parhnd)
						closelobbies()
						$tablesfinished += 1
						ExitLoop
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Party" Then
			$winlist = WinList("partypoker", "placed")
			If IsArray($winlist) AND $winlist[0][0] > 0 Then
				For $t = 1 To $winlist[0][0]
					If iswindowvisible($winlist[$t][1]) Then
						$winpos = WinGetPos($winlist[$t][1])
						$partitle = WinGetTitle(parentwindow($winlist[$t][1]))
						$parhnd = WinGetHandle($partitle)
						ConsoleWrite("Parent Window Title: " & $partitle & @LF)
						Sleep(2000)
						ConsoleWrite("Tourney Finished Window Found.. Closing now" & @LF)
						If GUICtrlRead($chknotifyend) == $gui_checked Then
							$endscreenshot += 1
							_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $winlist[$t][1])
							$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
							emailnotification($endpic, "Tourney Finished")
						EndIf
						WinClose($winlist[$t][1])
						Sleep(500)
						WinClose($parhnd)
						closelobbies()
						$tablesfinished += 1
						ExitLoop
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$winlist = WinList()
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If $winpos[2] == 408 AND $winpos[3] == 317 AND iswindowvisible($winlist[$x][1]) Then
							fconsolewrite("Tournament Finished Window Found... closing now")
							WinActivate($winlist[$x][1])
							WinWaitActive($winlist[$x][1], "", 1)
							If GUICtrlRead($chknotifyend) == $gui_checked Then
								$endscreenshot += 1
								_screencapture_capturewnd(@ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg", $winlist[$t][1])
								$endpic = @ScriptDir & "\EndScreenShot" & $endscreenshot & ".jpg"
								emailnotification($endpic, "Tourney Finished")
							EndIf
							MouseClick("left", $winpos[0] + 277, $winpos[1] + 294, 1, 0)
							WinWaitClose($winlist[$x][1], "", 10)
							If WinExists($winlist[$x][1]) AND iswindowvisible($winlist[$x][1]) Then
								WinClose($winlist[$x][1])
								WinWaitClose($winlist[$x][1], "", 2)
							EndIf
							Return
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func bwinclosebreakwindows()
		Local $winlist = WinList("Message from", "Waiting for other tables in the tournament to finish")
		Local $winpos
		If IsArray($winlist) AND $winlist[0][0] > 0 Then
			For $t = 1 To $winlist[0][0]
				If iswindowvisible($winlist[$t][1]) Then
					$winpos = WinGetPos($winlist[$t][1])
					fconsolewrite("Break Window Found.. Closing now")
					WinActivate($winlist[$t][1])
					MouseClick("left", $winpos[0] + 197, $winpos[1] + 118, 1, 0)
					ExitLoop
				EndIf
			Next
		EndIf
		$winlist = WinList("Message from", "You are on break")
		If IsArray($winlist) AND $winlist[0][0] > 0 Then
			For $t = 1 To $winlist[0][0]
				If iswindowvisible($winlist[$t][1]) Then
					$winpos = WinGetPos($winlist[$t][1])
					fconsolewrite("Break Window Found.. Closing now")
					WinActivate($winlist[$t][1])
					MouseClick("left", $winpos[0] + 123, $winpos[1] + 89, 1, 0)
					ExitLoop
				EndIf
			Next
		EndIf
	EndFunc

	Func checkfinishedwindows()
		Local $hnd
		Local $finishedplace
		If WinExists("Message from", "You are placed") Then
			$hnd = WinGetHandle("Message from", "You are placed")
			$finishedplace = WinGetText($hnd)
			$finishedplace = StringLeft($finishedplace, StringInStr($finishedplace, "in the tournament") - 2)
			$finishedplace = StringMid($finishedplace, StringInStr($finishedplace, "placed") + 7)
			fconsolewrite("You finished " & $finishedplace)
			WinClose($hnd)
		EndIf
		If WinExists("Message from", "Congratulations") Then
			$hnd = WinGetHandle("Message from", "Congratulations")
			$finishedplace = WinGetText($hnd)
			$finishedplace = StringLeft($finishedplace, StringInStr($finishedplace, "in the tournament") - 2)
			$finishedplace = StringMid($finishedplace, StringInStr($finishedplace, "placed") + 7)
			fconsolewrite("You finished " & $finishedplace)
			WinClose($hnd)
		EndIf
	EndFunc

	Func bodogregfull()
		Local $fullpos
		If WinExists("[REGEXPTITLE:\ABovada\z]") Then
			If iswindowvisible("[REGEXPTITLE:\ABovada\z]") Then
				$fullpos = WinGetPos("[REGEXPTITLE:\ABovada\z]")
				If IsArray($fullpos) Then
					If $fullpos[2] == 308 AND $fullpos[3] == 101 Then
						WinActivate("[REGEXPTITLE:\ABovada\z]")
						fconsolewrite("Tourney is full, closing and registering to another")
						MouseClick("left", $fullpos[0] + 243, $fullpos[1] + 77, 1, 0)
						Return True
					EndIf
				EndIf
			EndIf
		ElseIf WinExists("[REGEXPTITLE:\ABodog\z]") Then
			If iswindowvisible("[REGEXPTITLE:\ABodog\z]") Then
				$fullpos = WinGetPos("[REGEXPTITLE:\ABodog\z]")
				If IsArray($fullpos) Then
					If $fullpos[2] == 308 AND $fullpos[3] == 101 Then
						WinActivate("[REGEXPTITLE:\ABodog\z]")
						fconsolewrite("Tourney is full, closing and registering to another")
						MouseClick("left", $fullpos[0] + 243, $fullpos[1] + 77, 1, 0)
						Return True
					EndIf
				EndIf
			EndIf
		ElseIf WinExists("[REGEXPTITLE:\AIgnition\z]") Then
			If iswindowvisible("[REGEXPTITLE:\AIgnition\z]") Then
				$fullpos = WinGetPos("[REGEXPTITLE:\AIgnition\z]")
				If IsArray($fullpos) Then
					If $fullpos[2] == 308 AND $fullpos[3] == 101 Then
						WinActivate("[REGEXPTITLE:\AIgnition\z]")
						fconsolewrite("Tourney is full, closing and registering to another")
						MouseClick("left", $fullpos[0] + 243, $fullpos[1] + 77, 1, 0)
						Return True
					EndIf
				EndIf
			EndIf
		EndIf
	EndFunc

	Func checkbodogregsuccwin()
		Local $regpic
		If WinExists("REGISTRATION COMPLETE") Then
			Local $winlist = WinList("REGISTRATION COMPLETE")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					$winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If iswindowvisible($winlist[$x][1]) Then
							ConsoleWrite("Bodog rsw screen found" & @LF)
							$regscreenshot += 1
							_screencapture_capturewnd(@ScriptDir & "\RegScreenShot" & $regscreenshot & ".jpg", $winlist[$x][1])
							$regpic = @ScriptDir & "\RegScreenShot" & $regscreenshot & ".jpg"
							WinActivate($winlist[$x][1])
							MouseClick("left", $winpos[0] + 394, $winpos[1] + 113)
							WinWaitClose($winlist[$x][1], "", 1)
							If GUICtrlRead($chknotifyreg) == $gui_checked Then
								emailnotification($regpic, "Tourney Registration")
							EndIf
							If WinExists($winlist[$x][1]) Then
								fconsolewrite("Bd Reg Succ Window closing now...")
								WinClose($winlist[$x][1])
								WinWaitClose($winlist[$x][1], "", 1)
								If WinExists($winlist[$x][1]) Then
									WinClose($winlist[$x][1])
								Else
									ExitLoop
								EndIf
							Else
								ExitLoop
							EndIf
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func startsng($lobbyname)
		logit("FU340")
		DllCall("kernel32.dll", "int", "WritePrivateProfileString", "ptr", 0, "ptr", 0, "ptr", 0, "str", $inifile)
		$hlobby = WinGetHandle($lobbyname)
		Opt("WinTitleMatchMode", 2)
		$usertype = ControlGetText($maingui, "", $typecmb)
		$usergame = ControlGetText($maingui, "", $gamecmb)
		$numplyrs = ControlGetText($maingui, "", $numplyrscmbsng)
		Global $tourneytitle[$botnum + 1]
		Global $title[$botnum + 1]
		Global $titnum[$botnum + 1]
		Global $hgame[$botnum + 1]
		Global $hbot[$botnum + 1]
		logit("FO341")
		For $a = 1 To $botnum
			$title[$a] = ""
		Next
		fconsolewrite("Version: " & $version)
		logit("NE342")
		hide()
		$trn = gettourneyvaluessng()
		logit("IF343")
		If GUICtrlRead($cmbsite) == "Bet365" Then
			$lobbyname = "[REGEXPTITLE:\Abet365\z]"
		ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
			$lobbyname = "[REGEXPTITLE:\AWilliam Hill Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "Ladbrokes" Then
			$lobbyname = "[REGEXPTITLE:\ALadbrokes Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
			$lobbyname = "[REGEXPTITLE:\ABetfair.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
			$lobbyname = "[REGEXPTITLE:\APaddy Power Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "Everest" Then
			$lobbyname = "[REGEXPTITLE:\AEverestPoker.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Betfred" Then
			$lobbyname = "[REGEXPTITLE:\ABetfred Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "Titan" Then
			$lobbyname = "[REGEXPTITLE:\ATitan.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
			$lobbyname = "[REGEXPTITLE:\ANetbet Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "BNG" Then
			$lobbyname = "[REGEXPTITLE:\ABetnGo\z]"
		ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
			$lobbyname = "[REGEXPTITLE:\ASisal Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
			$lobbyname = "[REGEXPTITLE:\A.*BetOnline Poker version.*\z]"
		EndIf
		If NOT WinExists($lobbyname) Then
			fconsolewrite("Lobby does not exist")
			logit("IF264")
			If GUICtrlRead($chk888autologin) == $gui_checked OR GUICtrlRead($chkipautologin) == $gui_checked Then
				fconsolewrite("Opening Site")
				If GUICtrlRead($cmbsite) == "Bet365" Then
					If $txt365name == "" Then
						Local $name365 = InputBox("Username", "Please enter your Bet365 Username")
						IniWrite($inifile, "Settings", "$txt365Name", $name365)
					EndIf
					If $txt365pass == "" Then
						Local $pass365 = InputBox("Password", "Please enter your Bet365 Password")
						IniWrite($inifile, "Settings", "$txt365Pass", $pass365)
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Everest" Then
					If $txteverestname == "" Then
						Local $nameeverest = InputBox("Username", "Please enter your Everest Username")
						IniWrite($inifile, "Settings", "$txtEverestName", $nameeverest)
					EndIf
					If $txteverestpass == "" Then
						Local $passeverest = InputBox("Password", "Please enter your Everest Password")
						IniWrite($inifile, "Settings", "$txtEverestPass", $passeverest)
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
					If $txtbetfairname == "" Then
						Local $namebetfair = InputBox("Username", "Please enter your Betfair Username")
						IniWrite($inifile, "Settings", "$txtBetfairName", $namebetfair)
					EndIf
					If $txtbetfairpass == "" Then
						Local $passbetfair = InputBox("Password", "Please enter your Betfair Password")
						IniWrite($inifile, "Settings", "$txtBetfairPass", $passbetfair)
					EndIf
				EndIf
				autologin()
			Else
				MsgBox(0, $productname & $version, "You have to log into Poker Site to continue.")
				Return
			EndIf
			logit("EN265")
		ElseIf NOT IsArray($trn) Then
			ShellExecute("toplay.png", "", @ScriptDir & "\icons", "open")
			Sleep(1000)
			MsgBox(0, "Error", "No entries in the 'to play' list.  Please add a tourney entry into the toPlay list")
			Return
		EndIf
		logit("IF344")
		startautopilotsng()
		logit("EN345")
		logit("EN346")
		hide()
		logit("EN347")
	EndFunc

	Func bodogtablelistsng()
		Local $winlist = WinList("[REGEXPCLASS:\AQt5QWindowIcon\z]")
		Local $rv[1][2]
		$rv[0][0] = 0
		Local $count = 0
		For $a = 1 To $winlist[0][0]
			Local $tempsize = WinGetPos($winlist[$a][1])
			If IsArray($tempsize) Then
				If iswindowvisible($winlist[$a][1]) Then
					If NOT StringInStr($winlist[$a][0], "Alert") AND NOT StringInStr($winlist[$a][0], "SciTE") AND NOT StringInStr($winlist[$a][0], "Lobby") Then
						If $tempsize[2] >= 641 Then
							$count += 1
							ReDim $rv[$count + 2][2]
							$rv[$count][0] = $winlist[$a][0]
							$rv[$count][1] = $winlist[$a][1]
							$rv[0][0] = $count
						EndIf
					EndIf
				EndIf
			EndIf
		Next
		Return $rv
	EndFunc

	Func adjustwinpositionssng()
		logit("FU952")
		Local $tableno, $endtitle
		Local $winlist = tablelistsng()
		logit("IF953")
		If IsArray($winlist) AND $winlist[0][0] > 0 Then
			logit("FO954")
			For $a = 1 To $winlist[0][0]
				logit("IF955")
				If IsArray($htable) Then
					$title = $winlist[$a][0]
					If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan" Then
						$endtitle = StringLeft($title, StringInStr($title, "|") - 2)
						$endtitle = StringMid($endtitle, StringInStr($endtitle, ")") + 2)
					ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
						$endtitle = StringMid($title, StringInStr($title, "#") + 1)
						$endtitle = StringLeft($endtitle, StringInStr($endtitle, " ") - 1)
					ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
						$endtitle = StringMid($title, StringInStr($title, "(") + 1)
						$endtitle = StringLeft($endtitle, StringInStr($endtitle, ")") - 1)
					ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "TruePoker" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "Blackchip" Then
						$endtitle = StringMid($title, StringInStr($title, "(") + 1)
						$endtitle = StringReplace($endtitle, ")", "")
					ElseIf GUICtrlRead($cmbsite) == "Cake" OR GUICtrlRead($cmbsite) == "Red Star" OR GUICtrlRead($cmbsite) == "Intertops" Then
						$endtitle = StringLeft($title, StringInStr($title, ":") - 1)
						$endtitle = StringMid($endtitle, StringInStr($endtitle, "#") + 1)
					ElseIf GUICtrlRead($cmbsite) == "Cake" OR GUICtrlRead($cmbsite) == "Red Star" OR GUICtrlRead($cmbsite) == "Intertops" Then
						$endtitle = StringLeft($title, StringInStr($title, ":") - 1)
						$endtitle = StringMid($endtitle, StringInStr($endtitle, "#") + 1)
					ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
						$endtitle = StringLeft($title, StringInStr($title, ")") - 1)
						$endtitle = StringMid($endtitle, StringInStr($endtitle, "(") + 1)
					ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
						$endtitle = $winlist[$a][1]
					Else
						$endtitle = $title
					EndIf
					If StringInStr($winlist[$a][0], "ohf") OR StringInStr($winlist[$a][0], "oppl") OR StringInStr($winlist[$a][0], "dll") OR StringInStr($winlist[$a][0], "SciTE") OR StringInStr($winlist[$a][0], "OpenHoldem") OR StringInStr($winlist[$a][0], "openholdem") OR StringInStr($winlist[$a][0], "Openholdem") Then ContinueLoop
					$tableno = _arraysearch($htable, $endtitle)
					logit("IF956")
					If $tableno <> -1 AND $htable[$tableno] <> -10 Then
						Local $x = IniRead($inifile, "Settings", "$x" & $tableno & "Txt" & GUICtrlRead($cmbsite), 0)
						Local $y = IniRead($inifile, "Settings", "$y" & $tableno & "Txt" & GUICtrlRead($cmbsite), 0)
						Local $tablepos = WinGetPos($htable[$tableno])
						logit("IF957")
						If NOT IsArray($tablepos) Then ContinueLoop
						logit("IF958")
						If NOT ($tablepos[0] == $x AND $tablepos[1] == $y) Then
							fconsolewrite("AWP: Moving table " & StringRegExpReplace(WinGetTitle($htable[$tableno]), " as .*\z", " as [OpenHoldemStore.com]") & " target(" & $x & "," & $y & ")" & " actual(" & $tablepos[0] & "," & $tablepos[1] & ")")
							WinActivate($htable[$tableno])
							WinWaitActive($htable[$tableno], "", 2)
							ConsoleWrite("AWP MouseWinMove 1" & @CRLF)
							mousewinmove($htable[$tableno], "", $x, $y, Default, Default, 3, 1)
						EndIf
						logit("EN959")
					EndIf
					logit("EN960")
				EndIf
				logit("EN961")
			Next
			logit("NE962")
			$tablepos = WinGetPos($hlobby)
			logit("IF963")
			If (NOT IsArray($tablepos)) OR $hlobby == 0 OR $hlobby == -10 Then Return
			$x = 0
			$y = 0
		EndIf
		logit("EN964")
		logit("EN965")
	EndFunc

	Func tablelistsng()
		Local $winlist
		If GUICtrlRead($cmbsite) == "888Poker" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Table.*/.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$winlist = bodogtablelistsng()
		ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*-.*-.*Round.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "TruePoker" Then
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Walker" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Table.*-.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Titan" Then
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*-.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Table.*Hold'em.*\z]")
		Else
			$winlist = WinList("[REGEXPTITLE:\A.*|.*Hold'em.*\z]")
		EndIf
		Local $rv[1][2]
		Local $count = 0
		Local $tempsize
		For $a = 1 To $winlist[0][0]
			If GUICtrlRead($cmbsite) == "WillHill" Then
				If $winlist[$a][0] == "[REGEXPTITLE:\AWilliam Hill\z]" Then ContinueLoop
			EndIf
			$tempsize = WinGetPos($winlist[$a][1])
			If IsArray($tempsize) AND ($winlist[$a][0] <> "[REGEXPTITLE:.*www.holdemmanager.com.*]") Then
				If WinExists($winlist[$a][1]) Then
					If NOT StringInStr($winlist[$a][0], "ohf") AND NOT StringInStr($winlist[$a][0], "oppl") AND NOT StringInStr(WinGetText($winlist[$a][0]), "Ready") AND NOT StringInStr($winlist[$a][0], "dll") AND NOT StringInStr($winlist[$a][0], "OpenHoldem") AND NOT StringInStr($winlist[$a][0], "openholdem") AND NOT StringInStr($winlist[$a][0], "Openholdem") Then
						$count += 1
						ReDim $rv[$count + 2][2]
						$rv[$count][0] = $winlist[$a][0]
						$rv[$count][1] = $winlist[$a][1]
						$rv[0][0] = $count
					EndIf
				EndIf
			EndIf
		Next
		Return $rv
	EndFunc

	Func startnow2sng()
		logit("FU298")
		savesettings()
		logit("IF311")
		If GUICtrlRead($cmbsite) == "Party" Then
			$lobbyname = "[REGEXPTITLE:\Apartypoker.*Lobby.*\z]"
			$nam1 = "BW"
			fconsolewrite("Playing Party")
		ElseIf GUICtrlRead($cmbsite) == "Bwin" Then
			$lobbyname = $bwinlobbyname
			$nam1 = "BW"
			fconsolewrite("Playing Bwin")
		ElseIf GUICtrlRead($cmbsite) == "Betcoin" Then
			$lobbyname = "[REGEXPTITLE:\A.*Tournament Lobby.*\z]"
			$nam1 = "AR"
			fconsolewrite("Playing Betcoin")
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			$lobbyname = $carbonlobbyname
			$nam1 = "CB"
			fconsolewrite("Playing Carbon")
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			$lobbyname = $eeelobbyname
			$nam1 = "EE"
			logit("IF316")
			fconsolewrite("Playing 888Poker")
			logit("EN317")
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "TruePoker" Then
			$lobbyname = $acrlobbyname
			$nam1 = "AR"
			logit("IF316")
			fconsolewrite("Playing AmericasCardRooom")
			logit("EN317")
		ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
			$lobbyname = $whlobbyname
			$nam1 = "BNG"
			logit("IF316")
			fconsolewrite("Playing William Hill")
			logit("EN317")
		ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
			$lobbyname = "[REGEXPTITLE:\A.*BetOnline Poker version.*\z]"
			$nam1 = "BW"
			logit("IF316")
			fconsolewrite("Playing BetOnline")
			logit("EN317")
		Else
			$lobbyname = $bodoglobbyname
			$nam1 = "BD"
			logit("IF324")
			fconsolewrite("Playing Bodog/Bovada")
			logit("EN325")
		EndIf
		logit("EN326")
		Local $winlist
		logit("IF327")
		$winlist = tablelistsng()
		fconsolewrite("Operating System: " & @OSVersion)
		fconsolewrite("OS Bit" & @OSArch)
		fconsolewrite("CPU Bit" & @CPUArch)
		logit("EN328")
		logit("IF329")
		If $sngcount < $winlist[0][0] Then
			$sngcount = $winlist[0][0]
		EndIf
		logit("EN330")
		startsng($lobbyname)
		logit("EN331")
	EndFunc

	Func updatestatusbarsng()
		Local $endtitle
		For $a = 0 To GUICtrlRead($numbotscmb) - 1
			If GUICtrlRead($numbotscmb) - 1 >= $a AND WinExists($htable[$a]) AND $htable[$a] <> -10 AND $htable[$a] <> 0 AND $htable[$a] <> "" AND WinGetTitle($htable[$a]) <> "" Then
				Local $title = WinGetTitle($htable[$a])
				If GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Everest" Then
					$endtitle = StringMid($title, StringInStr($title, "-", 0, -1) + 2)
					If StringInStr($endtitle, "Ante") Then
						$endtitle = StringLeft($endtitle, StringInStr($endtitle, "Ante") - 2)
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "TruePoker" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "Blackchip" Then
					$endtitle = StringMid($title, StringInStr($title, "(") + 1)
					$endtitle = StringReplace($endtitle, ")", "")
				ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
					$endtitle = StringMid($title, StringInStr($title, "#") + 1)
					$endtitle = StringLeft($endtitle, StringInStr($endtitle, " ") - 1)
				ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
					$endtitle = StringMid($title, StringInStr($title, "(") + 1)
					$endtitle = StringLeft($endtitle, StringInStr($endtitle, ")") - 1)
				Else
					$endtitle = WinGetTitle($htable[$a])
				EndIf
				Local $usbtext = _guictrllistview_findintext($tourneystatuslist, $endtitle)
				If $usbtext <> -1 Then
					ContinueLoop
				Else
					ConsoleWrite($endtitle & " not found in list" & @LF)
				EndIf
				ConsoleWrite("Adding tourney to tables playing list: " & $title & @LF)
				_guictrllistview_additem($tourneystatuslist, "")
				_guictrllistview_addsubitem($tourneystatuslist, $a, GUICtrlRead($cmbsite), 1)
				_guictrllistview_addsubitem($tourneystatuslist, $a, $title, 2)
			EndIf
		Next
	EndFunc

	Func carbonsowin()
		Local $winlist = WinList()
		Local $winpos
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) Then
					If $winpos[2] == 270 AND $winpos[3] == 159 AND iswindowvisible($winlist[$x][1]) Then
						fconsolewrite("Sitout window found... closing now")
						MouseClick("left", $winpos[0] + 89, $winpos[1] + 133, 1, 0)
						ExitLoop
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Global Const $klf_activate = 1
	Global Const $klf_notellshell = 128
	Global Const $klf_reorder = 8
	Global Const $klf_replacelang = 16
	Global Const $klf_reset = 1073741824
	Global Const $klf_setforprocess = 256
	Global Const $klf_shiftlock = 65536
	Global Const $klf_substitute_ok = 2
	Global Const $hkl_next = 1
	Global Const $hkl_prev = 0
	Global Const $aw_activate = 131072
	Global Const $aw_blend = 524288
	Global Const $aw_center = 16
	Global Const $aw_hide = 65536
	Global Const $aw_hor_negative = 2
	Global Const $aw_hor_positive = 1
	Global Const $aw_slide = 262144
	Global Const $aw_ver_negative = 8
	Global Const $aw_ver_positive = 4
	Global Const $bsf_allowsfw = 128
	Global Const $bsf_flushdisk = 4
	Global Const $bsf_forceifhung = 32
	Global Const $bsf_ignorecurrenttask = 2
	Global Const $bsf_nohang = 8
	Global Const $bsf_notimeoutifnothung = 64
	Global Const $bsf_postmessage = 16
	Global Const $bsf_query = 1
	Global Const $bsf_sendnotifymessage = 256
	Global Const $bsm_allcomponents = 0
	Global Const $bsm_alldesktops = 8
	Global Const $bsm_applications = 16
	Global Const $bsm_installabledrivers = 4
	Global Const $bsm_netdriver = 2
	Global Const $bsm_vxds = 1
	Global Const $mditile_horizontal = 1
	Global Const $mditile_skipdisabled = 2
	Global Const $mditile_vertical = 0
	Global Const $mditile_zorder = 4
	Global Const $msgflt_allow = 1
	Global Const $msgflt_disallow = 2
	Global Const $msgflt_reset = 0
	Global Const $msgfltinfo_allowed_higher = 3
	Global Const $msgfltinfo_alreadyallowed_forwnd = 1
	Global Const $msgfltinfo_alreadydisallowed_forwnd = 2
	Global Const $msgfltinfo_none = 0
	Global Const $cwp_all = 0
	Global Const $cwp_skipinvisible = 1
	Global Const $cwp_skipdisabled = 2
	Global Const $cwp_skiptransparent = 4
	Global Const $compression_format_none = 0
	Global Const $compression_format_default = 1
	Global Const $compression_format_lznt1 = 2
	Global Const $compression_format_xpress = 3
	Global Const $compression_format_xpress_huff = 4
	Global Const $compression_engine_standard = 0
	Global Const $compression_engine_maximum = 256
	Global Const $compression_engine_hiber = 512
	Global Const $winsta_accessclipboard = 4
	Global Const $winsta_accessglobalatoms = 32
	Global Const $winsta_createdesktop = 8
	Global Const $winsta_enumdesktops = 1
	Global Const $winsta_enumerate = 256
	Global Const $winsta_exitwindows = 64
	Global Const $winsta_readattributes = 2
	Global Const $winsta_readscreen = 512
	Global Const $winsta_writeattributes = 16
	Global Const $winsta_all_access = BitOR($winsta_accessclipboard, $winsta_accessglobalatoms, $winsta_createdesktop, $winsta_enumdesktops, $winsta_enumerate, $winsta_exitwindows, $winsta_readattributes, $winsta_readscreen, $winsta_writeattributes)
	Global Const $cwf_create_only = 1
	Global Const $gcl_cbclsextra = -20
	Global Const $gcl_cbwndextra = -18
	Global Const $gcl_hbrbackground = -10
	Global Const $gcl_hcursor = -12
	Global Const $gcl_hicon = -14
	Global Const $gcl_hiconsm = -34
	Global Const $gcl_hmodule = -16
	Global Const $gcl_menuname = -8
	Global Const $gcl_style = -26
	Global Const $gcl_wndproc = -24
	Global Const $dockinfo_docked = 2
	Global Const $dockinfo_undocked = 1
	Global Const $dockinfo_user_supplied = 4
	Global Const $dockinfo_user_docked = 5
	Global Const $dockinfo_user_undocked = 6
	Global Const $gui_caretblinking = 1
	Global Const $gui_inmenumode = 4
	Global Const $gui_inmovesize = 2
	Global Const $gui_popupmenumode = 16
	Global Const $gui_systemmenumode = 8
	Global Const $handle_flag_inherit = 1
	Global Const $handle_flag_protect_from_close = 2
	Global Const $get_module_handle_ex_flag_from_address = 4
	Global Const $get_module_handle_ex_flag_pin = 1
	Global Const $get_module_handle_ex_flag_unchanged_refcount = 2
	Global Const $get_module_handle_ex_flag_default = 0
	Global Const $processor_architecture_amd64 = 9
	Global Const $processor_architecture_ia64 = 6
	Global Const $processor_architecture_intel = 0
	Global Const $processor_architecture_unknown = 65535
	Global Const $processor_intel_386 = 386
	Global Const $processor_intel_486 = 486
	Global Const $processor_intel_pentium = 586
	Global Const $processor_intel_ia64 = 2200
	Global Const $processor_amd_x8664 = 8664
	Global Const $uoi_flags = 1
	Global Const $uoi_heapsize = 5
	Global Const $uoi_io = 6
	Global Const $uoi_name = 2
	Global Const $uoi_type = 3
	Global Const $uoi_user_sid = 4
	Global Const $df_allowotheraccounthook = 1
	Global Const $wsf_visible = 1
	Global Const $ver_suite_backoffice = 4
	Global Const $ver_suite_blade = 1024
	Global Const $ver_suite_compute_server = 16384
	Global Const $ver_suite_datacenter = 128
	Global Const $ver_suite_enterprise = 2
	Global Const $ver_suite_embeddednt = 64
	Global Const $ver_suite_personal = 512
	Global Const $ver_suite_singleuserts = 256
	Global Const $ver_suite_smallbusiness = 1
	Global Const $ver_suite_smallbusiness_restricted = 32
	Global Const $ver_suite_storage_server = 8192
	Global Const $ver_suite_terminal = 16
	Global Const $ver_suite_wh_server = 32768
	Global Const $ver_nt_domain_controller = 2
	Global Const $ver_nt_server = 3
	Global Const $ver_nt_workstation = 1
	Global Const $wda_monitor = 1
	Global Const $wda_none = 0
	Global Const $pf_3dnow_instructions_available = 7
	Global Const $pf_channels_enabled = 16
	Global Const $pf_compare_exchange_double = 2
	Global Const $pf_compare_exchange128 = 14
	Global Const $pf_compare64_exchange128 = 15
	Global Const $pf_floating_point_emulated = 1
	Global Const $pf_floating_point_precision_errata = 0
	Global Const $pf_mmx_instructions_available = 3
	Global Const $pf_nx_enabled = 12
	Global Const $pf_pae_enabled = 9
	Global Const $pf_rdtsc_instruction_available = 8
	Global Const $pf_sse3_instructions_available = 13
	Global Const $pf_xmmi_instructions_available = 6
	Global Const $pf_xmmi64_instructions_available = 10
	Global Const $pf_xsave_enabled = 17
	Global Const $keyeventf_extendedkey = 1
	Global Const $keyeventf_keyup = 2
	Global Const $lim_small = 0
	Global Const $lim_large = 1
	Global Const $mapvk_vk_to_char = 2
	Global Const $mapvk_vk_to_vsc = 0
	Global Const $mapvk_vk_to_vsc_ex = 4
	Global Const $mapvk_vsc_to_vk = 1
	Global Const $mapvk_vsc_to_vk_ex = 3
	Global Const $mod_alt = 1
	Global Const $mod_control = 2
	Global Const $mod_norepeat = 16384
	Global Const $mod_shift = 4
	Global Const $mod_win = 8
	Global Const $guid_acdc_power_source = "{5D3E9A59-E9D5-4B00-A6BD-FF34FF516548}"
	Global Const $guid_battery_percentage_remaining = "{A7AD8041-B45A-4CAE-87A3-EECBB468A9E1}"
	Global Const $guid_idle_background_task = "{515C31D8-F734-163D-A0FD-11A08C91E8F1}"
	Global Const $guid_monitor_power_on = "{02731015-4510-4526-99E6-E5A17EBD1AEA}"
	Global Const $guid_powerscheme_personality = "{245D8541-3943-4422-B025-13A784F679B7}"
	Global Const $guid_system_awaymode = "{98A7F580-01F7-48AA-9C0F-44352C29E5C0}"
	Global Const $guid_min_power_savings = "{8C5E7FDA-E8BF-4A96-9A85-A6E23A8C635C}"
	Global Const $guid_max_power_savings = "{A1841308-3541-4FAB-BC81-F71556F20B4A}"
	Global Const $guid_typical_power_savings = "{381B4222-F694-41F0-9685-FF5BB260DF2E}"
	Global Const $hshell_windowcreated = 1
	Global Const $hshell_windowdestroyed = 2
	Global Const $hshell_activateshellwindow = 3
	Global Const $hshell_windowactivated = 4
	Global Const $hshell_getminrect = 5
	Global Const $hshell_redraw = 6
	Global Const $hshell_taskman = 7
	Global Const $hshell_language = 8
	Global Const $hshell_sysmenu = 9
	Global Const $hshell_endtask = 10
	Global Const $hshell_accessibilitystate = 11
	Global Const $hshell_appcommand = 12
	Global Const $hshell_windowreplaced = 13
	Global Const $hshell_windowreplacing = 14
	Global Const $hshell_rudeappactivated = 32772
	Global Const $hshell_flash = 32774
	Global Const $hwnd_broadcast = 65535
	Global Const $smto_block = 1
	Global Const $smto_normal = 0
	Global Const $smto_abortifhung = 2
	Global Const $smto_notimeoutifnothung = 8
	Global Const $smto_erroronexit = 32
	Global Const $inputlangchange_backward = 4
	Global Const $inputlangchange_forward = 2
	Global Const $inputlangchange_syscharset = 1
	Global Const $event_min = 1
	Global Const $event_system_sound = 1
	Global Const $event_system_alert = 2
	Global Const $event_system_foreground = 3
	Global Const $event_system_menustart = 4
	Global Const $event_system_menuend = 5
	Global Const $event_system_menupopupstart = 6
	Global Const $event_system_menupopupend = 7
	Global Const $event_system_capturestart = 8
	Global Const $event_system_captureend = 9
	Global Const $event_system_movesizestart = 10
	Global Const $event_system_movesizeend = 11
	Global Const $event_system_contexthelpstart = 12
	Global Const $event_system_contexthelpend = 13
	Global Const $event_system_dragdropstart = 14
	Global Const $event_system_dragdropend = 15
	Global Const $event_system_dialogstart = 16
	Global Const $event_system_dialogend = 17
	Global Const $event_system_scrollingstart = 18
	Global Const $event_system_scrollingend = 19
	Global Const $event_system_switchstart = 20
	Global Const $event_system_switchend = 21
	Global Const $event_system_minimizestart = 22
	Global Const $event_system_minimizeend = 23
	Global Const $event_system_desktopswitch = 32
	Global Const $event_object_create = 32768
	Global Const $event_object_destroy = 32769
	Global Const $event_object_show = 32770
	Global Const $event_object_hide = 32771
	Global Const $event_object_reorder = 32772
	Global Const $event_object_focus = 32773
	Global Const $event_object_selection = 32774
	Global Const $event_object_selectionadd = 32775
	Global Const $event_object_selectionremove = 32776
	Global Const $event_object_selectionwithin = 32777
	Global Const $event_object_statechange = 32778
	Global Const $event_object_locationchange = 32779
	Global Const $event_object_namechange = 32780
	Global Const $event_object_descriptionchange = 32781
	Global Const $event_object_valuechange = 32782
	Global Const $event_object_parentchange = 32783
	Global Const $event_object_helpchange = 32784
	Global Const $event_object_defactionchange = 32785
	Global Const $event_object_acceleratorchange = 32786
	Global Const $event_object_invoked = 32787
	Global Const $event_object_textselectionchanged = 32788
	Global Const $event_object_contentscrolled = 32789
	Global Const $event_max = 2147483647
	Global Const $winevent_incontext = 4
	Global Const $winevent_outofcontext = 0
	Global Const $winevent_skipownprocess = 2
	Global Const $winevent_skipownthread = 1
	Global Const $tme_cancel = -2147483648
	Global Const $tme_hover = 1
	Global Const $tme_leave = 2
	Global Const $tme_nonclient = 16
	Global Const $tme_query = 1073741824
	Global Const $desktop_createmenu = 4
	Global Const $desktop_createwindow = 2
	Global Const $desktop_enumerate = 64
	Global Const $desktop_hookcontrol = 8
	Global Const $desktop_journalplayback = 32
	Global Const $desktop_journalrecord = 16
	Global Const $desktop_readobjects = 1
	Global Const $desktop_switchdesktop = 256
	Global Const $desktop_writeobjects = 128
	Global Const $desktop_all_access = BitOR($desktop_createmenu, $desktop_createwindow, $desktop_enumerate, $desktop_hookcontrol, $desktop_journalplayback, $desktop_journalrecord, $desktop_readobjects, $desktop_switchdesktop, $desktop_writeobjects)
	Global Const $ridev_appkeys = 1024
	Global Const $ridev_capturemouse = 512
	Global Const $ridev_devnotify = 8192
	Global Const $ridev_exclude = 16
	Global Const $ridev_exinputsink = 4096
	Global Const $ridev_inputsink = 256
	Global Const $ridev_nohotkeys = 512
	Global Const $ridev_nolegacy = 48
	Global Const $ridev_pageonly = 32
	Global Const $ridev_remove = 1
	Global Const $rid_header = 268435461
	Global Const $rid_input = 268435459
	Global Const $rim_typehid = 2
	Global Const $rim_typekeyboard = 1
	Global Const $rim_typemouse = 0
	Global Const $ridi_devicename = 536870919
	Global Const $ridi_deviceinfo = 536870923
	Global Const $ridi_preparseddata = 536870917
	Global Const $mouse_attributes_changed = 4
	Global Const $mouse_move_absolute = 1
	Global Const $mouse_move_relative = 0
	Global Const $mouse_virtual_desktop = 2
	Global Const $ri_mouse_left_button_down = 1
	Global Const $ri_mouse_left_button_up = 2
	Global Const $ri_mouse_middle_button_down = 16
	Global Const $ri_mouse_middle_button_up = 32
	Global Const $ri_mouse_right_button_down = 4
	Global Const $ri_mouse_right_button_up = 8
	Global Const $ri_mouse_button_1_down = $ri_mouse_left_button_down
	Global Const $ri_mouse_button_1_up = $ri_mouse_left_button_up
	Global Const $ri_mouse_button_2_down = $ri_mouse_right_button_down
	Global Const $ri_mouse_button_2_up = $ri_mouse_right_button_up
	Global Const $ri_mouse_button_3_down = $ri_mouse_middle_button_down
	Global Const $ri_mouse_button_3_up = $ri_mouse_middle_button_up
	Global Const $ri_mouse_button_4_down = 64
	Global Const $ri_mouse_button_4_up = 128
	Global Const $ri_mouse_button_5_down = 256
	Global Const $ri_mouse_button_5_up = 512
	Global Const $ri_mouse_wheel = 1024
	Global Const $ri_key_break = 1
	Global Const $ri_key_e0 = 2
	Global Const $ri_key_e1 = 4
	Global Const $ri_key_make = 0
	#Region Global Variables and Constants
		Global Const $tagosversioninfoex = $tagosversioninfo & ";ushort ServicePackMajor;ushort ServicePackMinor;ushort SuiteMask;byte ProductType;byte Reserved"
		Global Const $tagrawinputdevice = "struct;ushort UsagePage;ushort Usage;dword Flags;hwnd hTarget;endstruct"
		Global Const $tagrawinputheader = "struct;dword Type;dword Size;handle hDevice;wparam wParam;endstruct"
		Global Const $tagrawmouse = "ushort Flags;ushort Alignment;ushort ButtonFlags;ushort ButtonData;ulong RawButtons;long LastX;long LastY;ulong ExtraInformation;"
		Global Const $tagrawkeyboard = "ushort MakeCode;ushort Flags;ushort Reserved;ushort VKey;uint Message;ulong ExtraInformation;"
		Global Const $tagrawhid = "dword SizeHid;dword Count;"
		Global Const $tagrawinputmouse = $tagrawinputheader & ";" & $tagrawmouse
		Global Const $tagrawinputkeyboard = $tagrawinputheader & ";" & $tagrawkeyboard
		Global Const $tagrawinputhid = $tagrawinputheader & ";" & $tagrawhid
		Global Const $tagrid_device_info_mouse = "struct;dword Id;dword NumberOfButtons;dword SampleRate;int HasHorizontalWheel;endstruc"
		Global Const $tagrid_device_info_keyboard = "struct;dword KbType;dword KbSubType;dword KeyboardMode;dword NumberOfFunctionKeys;dword NumberOfIndicators;dword NumberOfKeysTotal;endstruc"
		Global Const $tagrid_device_info_hid = "struct;dword VendorId;dword ProductId;dword VersionNumber;ushort UsagePage;ushort Usage;endstruc"
		Global Const $tagrid_info_mouse = "dword Size;dword Type;" & $tagrid_device_info_mouse & ";dword Unused[2];"
		Global Const $tagrid_info_keyboard = "dword Size;dword Type;" & $tagrid_device_info_keyboard
		Global Const $tagrid_info_hid = "dword Size;dword Type;" & $tagrid_device_info_hid & ";dword Unused[2]"
		Global Const $tagshellhookinfo = "hwnd hWnd;" & $tagrect
		Global Const $tagupdatelayeredwindowinfo = "dword Size;hwnd hDstDC;long DstX;long DstY;long cX;long cY;hwnd hSrcDC;long SrcX;long SrcY;dword crKey;byte BlendOp;byte BlendFlags;byte Alpha;byte AlphaFormat;dword Flags;long DirtyLeft;long DirtyTop;long DirtyRight;long DirtyBottom"
		Global Const $taguserobjectflags = "int Inherit;int Reserved;dword Flags"
		Global Const $tagwindowinfo = "dword Size;struct;long rWindow[4];endstruct;struct;long rClient[4];endstruct;dword Style;dword ExStyle;dword WindowStatus;uint cxWindowBorders;uint cyWindowBorders;word atomWindowType;word CreatorVersion"
		Global Const $tagwndclass = "uint Style;ptr hWndProc;int ClsExtra;int WndExtra;ptr hInstance;ptr hIcon;ptr hCursor;ptr hBackground;ptr MenuName;ptr ClassName"
		Global Const $tagwndclassex = "uint Size;uint Style;ptr hWndProc;int ClsExtra;int WndExtra;ptr hInstance;ptr hIcon;ptr hCursor;ptr hBackground;ptr MenuName;ptr ClassName;ptr hIconSm"
	#EndRegion Global Variables and Constants
	#Region Functions list
	#EndRegion Functions list
	#Region Public Functions

		Func _winapi_activatekeyboardlayout($hlocale, $iflag = 0)
			Local $aret = DllCall("user32.dll", "handle", "ActivateKeyboardLayout", "handle", $hlocale, "uint", $iflag)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_addclipboardformatlistener($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "AddClipboardFormatListener", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_adjustwindowrectex(ByRef $trect, $istyle, $iexstyle = 0, $bmenu = False)
			Local $aret = DllCall("user32.dll", "bool", "AdjustWindowRectEx", "struct*", $trect, "dword", $istyle, "bool", $bmenu, "dword", $iexstyle)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_animatewindow($hwnd, $iflags, $iduration = 1000)
			Local $aret = DllCall("user32.dll", "bool", "AnimateWindow", "hwnd", $hwnd, "dword", $iduration, "dword", $iflags)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_begindeferwindowpos($iamount = 1)
			Local $aret = DllCall("user32.dll", "handle", "BeginDeferWindowPos", "int", $iamount)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_bringwindowtotop($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "BringWindowToTop", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_broadcastsystemmessage($imsg, $wparam = 0, $lparam = 0, $iflags = 0, $irecipients = 0)
			Local $aret = DllCall("user32.dll", "long", "BroadcastSystemMessageW", "dword", $iflags, "dword*", $irecipients, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
			If @error OR ($aret[0] = -1) Then Return SetError(@error, @extended, -1)
			Return SetExtended($aret[2], $aret[0])
		EndFunc

		Func _winapi_callwindowprocw($pprevwndproc, $hwnd, $imsg, $wparam, $lparam)
			Local $aret = DllCall("user32.dll", "lresult", "CallWindowProcW", "ptr", $pprevwndproc, "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_cascadewindows($awnds, $trect = 0, $hparent = 0, $iflags = 0, $istart = 0, $iend = -1)
			If __checkerrorarraybounds($awnds, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			Local $icount = $iend - $istart + 1
			Local $twnds = DllStructCreate("hwnd[" & $icount & "]")
			$icount = 1
			For $i = $istart To $iend
				DllStructSetData($twnds, 1, $awnds[$i], $icount)
				$icount += 1
			Next
			Local $aret = DllCall("user32.dll", "word", "CascadeWindows", "hwnd", $hparent, "uint", $iflags, "struct*", $trect, "uint", $icount - 1, "struct*", $twnds)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_changewindowmessagefilterex($hwnd, $imsg, $iaction)
			Local $tcfs, $aret
			If $hwnd AND ($__winver > 1536) Then
				Local Const $tagchangefilterstruct = "dword cbSize; dword ExtStatus"
				$tcfs = DllStructCreate($tagchangefilterstruct)
				DllStructSetData($tcfs, 1, DllStructGetSize($tcfs))
				$aret = DllCall("user32.dll", "bool", "ChangeWindowMessageFilterEx", "hwnd", $hwnd, "uint", $imsg, "dword", $iaction, "struct*", $tcfs)
			Else
				$tcfs = 0
				$aret = DllCall("user32.dll", "bool", "ChangeWindowMessageFilter", "uint", $imsg, "dword", $iaction)
			EndIf
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return SetExtended(DllStructGetData($tcfs, 2), 1)
		EndFunc

		Func _winapi_childwindowfrompointex($hwnd, $tpoint, $iflags = 0)
			Local $aret = DllCall("user32.dll", "hwnd", "ChildWindowFromPointEx", "hwnd", $hwnd, "struct", $tpoint, "uint", $iflags)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_closedesktop($hdesktop)
			Local $aret = DllCall("user32.dll", "bool", "CloseDesktop", "handle", $hdesktop)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_closewindow($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "CloseWindow", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_closewindowstation($hstation)
			Local $aret = DllCall("user32.dll", "bool", "CloseWindowStation", "handle", $hstation)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_compressbuffer($puncompressedbuffer, $iuncompressedsize, $pcompressedbuffer, $icompressedsize, $iformatandengine = 2)
			Local $aret, $pworkspace = 0, $ierror = 0
			Do
				$aret = DllCall("ntdll.dll", "uint", "RtlGetCompressionWorkSpaceSize", "ushort", $iformatandengine, "ulong*", 0, "ulong*", 0)
				If @error OR $aret[0] Then
					$ierror = @error + 20
					ExitLoop
				EndIf
				$pworkspace = __heapalloc($aret[2])
				If @error Then
					$ierror = @error + 100
					ExitLoop
				EndIf
				$aret = DllCall("ntdll.dll", "uint", "RtlCompressBuffer", "ushort", $iformatandengine, "struct*", $puncompressedbuffer, "ulong", $iuncompressedsize, "struct*", $pcompressedbuffer, "ulong", $icompressedsize, "ulong", 4096, "ulong*", 0, "ptr", $pworkspace)
				If @error OR $aret[0] OR NOT $aret[7] Then
					$ierror = @error + 30
					ExitLoop
				EndIf
			Until 1
			__heapfree($pworkspace)
			If $ierror Then
				If IsArray($aret) Then
					Return SetError(10, $aret[0], 0)
				Else
					Return SetError($ierror, 0, 0)
				EndIf
			EndIf
			Return $aret[7]
		EndFunc

		Func _winapi_computecrc32($pmemory, $ilength)
			If _winapi_isbadreadptr($pmemory, $ilength) Then Return SetError(1, @extended, 0)
			Local $aret = DllCall("ntdll.dll", "dword", "RtlComputeCrc32", "dword", 0, "struct*", $pmemory, "int", $ilength)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_createbuffer($ilength, $pbuffer = 0, $babort = True)
			$pbuffer = __heaprealloc($pbuffer, $ilength, 0, $babort)
			If @error Then Return SetError(@error, @extended, 0)
			Return $pbuffer
		EndFunc

		Func _winapi_createbufferfromstruct($tstruct, $pbuffer = 0, $babort = True)
			If NOT IsDllStruct($tstruct) Then Return SetError(1, 0, 0)
			$pbuffer = __heaprealloc($pbuffer, DllStructGetSize($tstruct), 0, $babort)
			If @error Then Return SetError(@error + 100, @extended, 0)
			_winapi_movememory($pbuffer, $tstruct, DllStructGetSize($tstruct))
			Return $pbuffer
		EndFunc

		Func _winapi_createdesktop($sname, $iaccess = 2, $iflags = 0, $iheap = 0, $tsecurity = 0)
			Local $aret
			If $iheap Then
				$aret = DllCall("user32.dll", "handle", "CreateDesktopExW", "wstr", $sname, "ptr", 0, "ptr", 0, "dword", $iflags, "dword", $iaccess, "struct*", $tsecurity, "ulong", $iheap, "ptr", 0)
			Else
				$aret = DllCall("user32.dll", "handle", "CreateDesktopW", "wstr", $sname, "ptr", 0, "ptr", 0, "dword", $iflags, "dword", $iaccess, "struct*", $tsecurity)
			EndIf
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_createstring($sstring, $pstring = 0, $ilength = -1, $bunicode = True, $babort = True)
			$ilength = Number($ilength)
			If $ilength >= 0 Then
				$sstring = StringLeft($sstring, $ilength)
			Else
				$ilength = StringLen($sstring)
			EndIf
			Local $isize = $ilength + 1
			If $bunicode Then
				$isize *= 2
			EndIf
			$pstring = __heaprealloc($pstring, $isize, 0, $babort)
			If @error Then Return SetError(@error, @extended, 0)
			DllStructSetData(DllStructCreate(__iif($bunicode, "wchar", "char") & "[" & ($ilength + 1) & "]", $pstring), 1, $sstring)
			Return SetExtended($ilength, $pstring)
		EndFunc

		Func _winapi_createwindowstation($sname = "", $iaccess = 0, $iflags = 0, $tsecurity = 0)
			Local $aret = DllCall("user32.dll", "handle", "CreateWindowStationW", "wstr", $sname, "dword", $iflags, "dword", $iaccess, "struct*", $tsecurity)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_decompressbuffer($puncompressedbuffer, $iuncompressedsize, $pcompressedbuffer, $icompressedsize, $iformat = 2)
			Local $aret = DllCall("ntdll.dll", "long", "RtlDecompressBuffer", "ushort", $iformat, "struct*", $puncompressedbuffer, "ulong", $iuncompressedsize, "struct*", $pcompressedbuffer, "ulong", $icompressedsize, "ulong*", 0)
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] Then Return SetError(10, $aret[0], 0)
			Return $aret[6]
		EndFunc

		Func _winapi_deferwindowpos($hinfo, $hwnd, $hafter, $ix, $iy, $iwidth, $iheight, $iflags)
			Local $aret = DllCall("user32.dll", "handle", "DeferWindowPos", "handle", $hinfo, "hwnd", $hwnd, "hwnd", $hafter, "int", $ix, "int", $iy, "int", $iwidth, "int", $iheight, "uint", $iflags)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_defrawinputproc($parawinput, $iinput)
			Local $aret = DllCall("user32.dll", "lresult", "DefRawInputProc", "ptr", $parawinput, "int", $iinput, "uint", DllStructGetSize(DllStructCreate($tagrawinputheader)))
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] Then Return SetError(10, $aret[0], 0)
			Return 1
		EndFunc

		Func _winapi_defwindowprocw($hwnd, $imsg, $wparam, $lparam)
			Local $aret = DllCall("user32.dll", "lresult", "DefWindowProcW", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_deregistershellhookwindow($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "DeregisterShellHookWindow", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_dragacceptfiles($hwnd, $baccept = True)
			DllCall("shell32.dll", "none", "DragAcceptFiles", "hwnd", $hwnd, "bool", $baccept)
			If @error Then Return SetError(@error, @extended, 0)
			Return 1
		EndFunc

		Func _winapi_dragfinish($hdrop)
			DllCall("shell32.dll", "none", "DragFinish", "handle", $hdrop)
			If @error Then Return SetError(@error, @extended, 0)
			Return 1
		EndFunc

		Func _winapi_dragqueryfileex($hdrop, $iflag = 0)
			Local $aret = DllCall("shell32.dll", "uint", "DragQueryFileW", "handle", $hdrop, "uint", -1, "ptr", 0, "uint", 0)
			If @error Then Return SetError(@error, @extended, 0)
			If NOT $aret[0] Then Return SetError(10, 0, 0)
			Local $icount = $aret[0]
			Local $aresult[$icount + 1]
			For $i = 0 To $icount - 1
				$aret = DllCall("shell32.dll", "uint", "DragQueryFileW", "handle", $hdrop, "uint", $i, "wstr", "", "uint", 4096)
				If NOT $aret[0] Then Return SetError(11, 0, 0)
				If $iflag Then
					Local $bdir = _winapi_pathisdirectory($aret[3])
					If (($iflag = 1) AND $bdir) OR (($iflag = 2) AND NOT $bdir) Then
						ContinueLoop
					EndIf
				EndIf
				$aresult[$i + 1] = $aret[3]
				$aresult[0] += 1
			Next
			If NOT $aresult[0] Then Return SetError(12, 0, 0)
			__inc($aresult, -1)
			Return $aresult
		EndFunc

		Func _winapi_dragquerypoint($hdrop)
			Local $tpoint = DllStructCreate($tagpoint)
			Local $aret = DllCall("shell32.dll", "bool", "DragQueryPoint", "handle", $hdrop, "struct*", $tpoint)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $tpoint
		EndFunc

		Func _winapi_enddeferwindowpos($hinfo)
			Local $aret = DllCall("user32.dll", "bool", "EndDeferWindowPos", "handle", $hinfo)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_enumchildwindows($hwnd, $bvisible = True)
			If NOT _winapi_getwindow($hwnd, 5) Then Return SetError(2, 0, 0)
			Local $henumproc = DllCallbackRegister("__EnumWindowsProc", "bool", "hwnd;lparam")
			Dim $__g_venum[101][2] = [[0]]
			DllCall("user32.dll", "bool", "EnumChildWindows", "hwnd", $hwnd, "ptr", DllCallbackGetPtr($henumproc), "lparam", $bvisible)
			If @error OR NOT $__g_venum[0][0] Then
				$__g_venum = @error + 10
			EndIf
			DllCallbackFree($henumproc)
			If $__g_venum Then Return SetError($__g_venum, 0, 0)
			__inc($__g_venum, -1)
			Return $__g_venum
		EndFunc

		Func _winapi_enumdesktops($hstation)
			If StringCompare(_winapi_getuserobjectinformation($hstation, 3), "WindowStation") Then Return SetError(1, 0, 0)
			Local $henumproc = DllCallbackRegister("__EnumDefaultProc", "bool", "ptr;lparam")
			Dim $__g_venum[101] = [0]
			Local $aret = DllCall("user32.dll", "bool", "EnumDesktopsW", "handle", $hstation, "ptr", DllCallbackGetPtr($henumproc), "lparam", 0)
			If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
				$__g_venum = @error + 10
			EndIf
			DllCallbackFree($henumproc)
			If $__g_venum Then Return SetError($__g_venum, 0, 0)
			__inc($__g_venum, -1)
			Return $__g_venum
		EndFunc

		Func _winapi_enumdesktopwindows($hdesktop, $bvisible = True)
			If StringCompare(_winapi_getuserobjectinformation($hdesktop, 3), "Desktop") Then Return SetError(1, 0, 0)
			Local $henumproc = DllCallbackRegister("__EnumWindowsProc", "bool", "hwnd;lparam")
			Dim $__g_venum[101][2] = [[0]]
			Local $aret = DllCall("user32.dll", "bool", "EnumDesktopWindows", "handle", $hdesktop, "ptr", DllCallbackGetPtr($henumproc), "lparam", $bvisible)
			If @error OR NOT $aret[0] OR NOT $__g_venum[0][0] Then
				$__g_venum = @error + 10
			EndIf
			DllCallbackFree($henumproc)
			If $__g_venum Then Return SetError($__g_venum, 0, 0)
			__inc($__g_venum, -1)
			Return $__g_venum
		EndFunc

		Func _winapi_enumpagefiles()
			Local $ainfo = _winapi_getsysteminfo()
			Local $henumproc = DllCallbackRegister("__EnumPageFilesProc", "bool", "lparam;ptr;ptr")
			Dim $__g_venum[101][4] = [[0]]
			Local $aret = DllCall(@SystemDir & "\psapi.dll", "bool", "EnumPageFilesW", "ptr", DllCallbackGetPtr($henumproc), "lparam", $ainfo[1])
			If @error OR NOT $aret[0] OR NOT $__g_venum[0][0] Then
				$__g_venum = @error + 10
			EndIf
			DllCallbackFree($henumproc)
			If $__g_venum Then Return SetError($__g_venum, 0, 0)
			__inc($__g_venum, -1)
			Return $__g_venum
		EndFunc

		Func _winapi_enumrawinputdevices()
			Local Const $tagrawinputdevicelist = "struct;handle hDevice;dword Type;endstruct"
			Local $tridl, $ilength = DllStructGetSize(DllStructCreate($tagrawinputdevicelist))
			Local $aret = DllCall("user32.dll", "uint", "GetRawInputDeviceList", "ptr", 0, "uint*", 0, "uint", $ilength)
			If @error Then Return SetError(@error + 10, @extended, 0)
			If ($aret[0] = 4294967295) OR (NOT $aret[2]) Then Return SetError(10, -1, 0)
			Local $tdata = DllStructCreate("byte[" & ($aret[2] * $ilength) & "]")
			Local $pdata = DllStructGetPtr($tdata)
			If @error Then Return SetError(@error + 20, 0, 0)
			$aret = DllCall("user32.dll", "uint", "GetRawInputDeviceList", "ptr", $pdata, "uint*", $aret[2], "uint", $ilength)
			If ($aret[0] = 4294967295) OR (NOT $aret[0]) Then Return SetError(1, -1, 0)
			Local $aresult[$aret[2] + 1][2] = [[$aret[2]]]
			For $i = 1 To $aret[2]
				$tridl = DllStructCreate("ptr;dword", $pdata + $ilength * ($i - 1))
				For $j = 0 To 1
					$aresult[$i][$j] = DllStructGetData($tridl, $j + 1)
				Next
			Next
			Return $aresult
		EndFunc

		Func _winapi_enumwindowstations()
			Local $henumproc = DllCallbackRegister("__EnumDefaultProc", "bool", "ptr;lparam")
			Dim $__g_venum[101] = [0]
			Local $aret = DllCall("user32.dll", "bool", "EnumWindowStationsW", "ptr", DllCallbackGetPtr($henumproc), "lparam", 0)
			If @error OR NOT $aret[0] OR NOT $__g_venum[0] Then
				$__g_venum = @error + 10
			EndIf
			DllCallbackFree($henumproc)
			If $__g_venum Then Return SetError($__g_venum, 0, 0)
			__inc($__g_venum, -1)
			Return $__g_venum
		EndFunc

		Func _winapi_equalmemory($psource1, $psource2, $ilength)
			If _winapi_isbadreadptr($psource1, $ilength) Then Return SetError(11, @extended, 0)
			If _winapi_isbadreadptr($psource2, $ilength) Then Return SetError(12, @extended, 0)
			Local $aret = DllCall("ntdll.dll", "ulong_ptr", "RtlCompareMemory", "struct*", $psource1, "struct*", $psource2, "ulong_ptr", $ilength)
			If @error Then Return SetError(@error, @extended, 0)
			Return Number($aret[0] = $ilength)
		EndFunc

		Func _winapi_fillmemory($pmemory, $ilength, $ivalue = 0)
			If _winapi_isbadwriteptr($pmemory, $ilength) Then Return SetError(11, @extended, 0)
			DllCall("ntdll.dll", "none", "RtlFillMemory", "struct*", $pmemory, "ulong_ptr", $ilength, "byte", $ivalue)
			If @error Then Return SetError(@error, @extended, 0)
			Return 1
		EndFunc

		Func _winapi_freememory($pmemory)
			If NOT __heapfree($pmemory, 1) Then Return SetError(@error, @extended, 0)
			Return 1
		EndFunc

		Func _winapi_getactivewindow()
			Local $aret = DllCall("user32.dll", "hwnd", "GetActiveWindow")
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getclassinfoex($sclass, $hinstance = 0)
			Local $stypeofclass = "ptr"
			If IsString($sclass) Then
				$stypeofclass = "wstr"
			EndIf
			Local $twndclassex = DllStructCreate($tagwndclassex)
			Local $aret = DllCall("user32.dll", "bool", "GetClassInfoExW", "handle", $hinstance, $stypeofclass, $sclass, "struct*", $twndclassex)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $twndclassex
		EndFunc

		Func _winapi_getclasslongex($hwnd, $iindex)
			Local $aret
			If @AutoItX64 Then
				$aret = DllCall("user32.dll", "ulong_ptr", "GetClassLongPtrW", "hwnd", $hwnd, "int", $iindex)
			Else
				$aret = DllCall("user32.dll", "dword", "GetClassLongW", "hwnd", $hwnd, "int", $iindex)
			EndIf
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getclipboardsequencenumber()
			Local $aret = DllCall("user32.dll", "dword", "GetClipboardSequenceNumber")
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getcurrenthwprofile()
			Local $taghw_profile_info = "dword DockInfo;wchar szHwProfileGuid[39];wchar szHwProfileName[80]"
			Local $thwpi = DllStructCreate($taghw_profile_info)
			Local $aret = DllCall("advapi32.dll", "bool", "GetCurrentHwProfileW", "struct*", $thwpi)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Local $aresult[3]
			For $i = 0 To 2
				$aresult[$i] = DllStructGetData($thwpi, $i + 1)
			Next
			Return $aresult
		EndFunc

		Func _winapi_getdefaultprinter()
			Local $aret = DllCall("winspool.drv", "bool", "GetDefaultPrinterW", "wstr", "", "dword*", 2048)
			If @error Then Return SetError(@error, @extended, "")
			If NOT $aret[0] Then Return SetError(10, _winapi_getlasterror(), "")
			Return $aret[1]
		EndFunc

		Func _winapi_getdlldirectory()
			Local $aret = DllCall("kernel32.dll", "dword", "GetDllDirectoryW", "dword", 4096, "wstr", "")
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
			Return $aret[2]
		EndFunc

		Func _winapi_geteffectiveclientrect($hwnd, $actrl, $istart = 0, $iend = -1)
			If NOT IsArray($actrl) Then
				Local $ictrl = $actrl
				Dim $actrl[1] = [$ictrl]
				$istart = 0
				$iend = 0
			EndIf
			If __checkerrorarraybounds($actrl, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			Local $icount = $iend - $istart + 1
			Local $tctrl = DllStructCreate("uint64[" & ($icount + 2) & "]")
			$icount = 2
			For $i = $istart To $iend
				If IsHWnd($actrl[$i]) Then
					$actrl[$i] = _winapi_getdlgctrlid($actrl[$i])
				EndIf
				DllStructSetData($tctrl, 1, _winapi_makeqword(1, $actrl[$i]), $icount)
				$icount += 1
			Next
			Local $trect = DllStructCreate($tagrect)
			DllCall("comctl32.dll", "none", "GetEffectiveClientRect", "hwnd", $hwnd, "struct*", $trect, "struct*", $tctrl)
			If @error Then Return SetError(@error, @extended, 0)
			Return $trect
		EndFunc

		Func _winapi_getguithreadinfo($ithreadid)
			Local Const $tagguithreadinfo = "dword Size;dword Flags;hwnd hWndActive;hwnd hWndFocus;hwnd hWndCapture;hwnd hWndMenuOwner;hwnd hWndMoveSize;hwnd hWndCaret;long rcCaret[4]"
			Local $tgti = DllStructCreate($tagguithreadinfo)
			DllStructSetData($tgti, 1, DllStructGetSize($tgti))
			Local $aret = DllCall("user32.dll", "bool", "GetGUIThreadInfo", "dword", $ithreadid, "struct*", $tgti)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Local $aresult[11]
			For $i = 0 To 6
				$aresult[$i] = DllStructGetData($tgti, $i + 2)
			Next
			For $i = 1 To 4
				$aresult[6 + $i] = DllStructGetData($tgti, 6 + 2, $i)
			Next
			For $i = 9 To 10
				$aresult[$i] -= $aresult[$i - 2]
			Next
			Return $aresult
		EndFunc

		Func _winapi_gethandleinformation($hobject)
			Local $aret = DllCall("kernel32.dll", "bool", "GetHandleInformation", "handle", $hobject, "dword*", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
			Return $aret[2]
		EndFunc

		Func _winapi_getidletime()
			Local $tlastinputinfo = DllStructCreate("uint;dword")
			DllStructSetData($tlastinputinfo, 1, DllStructGetSize($tlastinputinfo))
			Local $aret = DllCall("user32.dll", "bool", "GetLastInputInfo", "struct*", $tlastinputinfo)
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
			Return _winapi_gettickcount() - DllStructGetData($tlastinputinfo, 2)
		EndFunc

		Func _winapi_getkeyboardlayout($hwnd)
			Local $aret = DllCall("user32.dll", "dword", "GetWindowThreadProcessId", "hwnd", $hwnd, "ptr", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			$aret = DllCall("user32.dll", "handle", "GetKeyboardLayout", "dword", $aret[0])
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getkeyboardlayoutlist()
			Local $aret = DllCall("user32.dll", "uint", "GetKeyboardLayoutList", "int", 0, "ptr", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error + 20, @extended, 0)
			Local $tdata = DllStructCreate("handle[" & $aret[0] & "]")
			$aret = DllCall("user32.dll", "uint", "GetKeyboardLayoutList", "int", $aret[0], "struct*", $tdata)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Local $alist[$aret[0] + 1] = [$aret[0]]
			For $i = 1 To $alist[0]
				$alist[$i] = DllStructGetData($tdata, 1, $i)
			Next
			Return $alist
		EndFunc

		Func _winapi_getkeyboardstate()
			Local $tdata = DllStructCreate("byte[256]")
			Local $aret = DllCall("user32.dll", "bool", "GetKeyboardState", "struct*", $tdata)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $tdata
		EndFunc

		Func _winapi_getkeyboardtype($itype)
			Local $aret = DllCall("user32.dll", "int", "GetKeyboardType", "int", $itype)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getkeynametext($lparam)
			Local $aret = DllCall("user32.dll", "int", "GetKeyNameTextW", "long", $lparam, "wstr", "", "int", 128)
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, "")
			Return $aret[2]
		EndFunc

		Func _winapi_getkeystate($vkey)
			Local $aret = DllCall("user32.dll", "short", "GetKeyState", "int", $vkey)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getlastactivepopup($hwnd)
			Local $aret = DllCall("user32.dll", "hwnd", "GetLastActivePopup", "hwnd", $hwnd)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			If $aret[0] = $hwnd Then Return SetError(1, 0, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getmemorysize($pmemory)
			Local $iresult = __heapsize($pmemory, 1)
			If @error Then Return SetError(@error, @extended, 0)
			Return $iresult
		EndFunc

		Func _winapi_getmessageextrainfo()
			Local $aret = DllCall("user32.dll", "lparam", "GetMessageExtraInfo")
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getmodulehandleex($smodule, $iflags = 0)
			Local $stypeofmodule = "ptr"
			If IsString($smodule) Then
				If StringStripWS($smodule, $str_stripleading + $str_striptrailing) Then
					$stypeofmodule = "wstr"
				Else
					$smodule = 0
				EndIf
			EndIf
			Local $aret = DllCall("kernel32.dll", "bool", "GetModuleHandleExW", "dword", $iflags, $stypeofmodule, $smodule, "ptr*", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
			Return $aret[3]
		EndFunc

		Func _winapi_getmonitorinfo($hmonitor)
			Local $tmiex = DllStructCreate("dword;long[4];long[4];dword;wchar[32]")
			DllStructSetData($tmiex, 1, DllStructGetSize($tmiex))
			Local $aret = DllCall("user32.dll", "bool", "GetMonitorInfoW", "handle", $hmonitor, "struct*", $tmiex)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Local $aresult[4]
			For $i = 0 To 1
				$aresult[$i] = DllStructCreate($tagrect)
				_winapi_movememory($aresult[$i], DllStructGetPtr($tmiex, $i + 2), 16)
			Next
			$aresult[3] = DllStructGetData($tmiex, 5)
			Switch DllStructGetData($tmiex, 4)
				Case 1
					$aresult[2] = 1
				Case Else
					$aresult[2] = 0
			EndSwitch
			Return $aresult
		EndFunc

		Func _winapi_getmuilanguage()
			Local $aret = DllCall("comctl32.dll", "word", "GetMUILanguage")
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getobjectinfobyhandle($hobject)
			Local $tagpublic_object_basic_information = "ulong Attributes;ulong GrantedAcess;ulong HandleCount;ulong PointerCount;ulong Reserved[10]"
			Local $tpobi = DllStructCreate($tagpublic_object_basic_information)
			Local $aret = DllCall("ntdll.dll", "long", "ZwQueryObject", "handle", $hobject, "uint", 0, "struct*", $tpobi, "ulong", DllStructGetSize($tpobi), "ptr", 0)
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] Then Return SetError(10, $aret[0], 0)
			Local $aresult[4]
			For $i = 0 To 3
				$aresult[$i] = DllStructGetData($tpobi, $i + 1)
			Next
			Return $aresult
		EndFunc

		Func _winapi_getobjectnamebyhandle($hobject)
			Local $tagunicode_string = "struct;ushort Length;ushort MaximumLength;ptr Buffer;endstruct"
			Local $tagpublic_object_type_information = "struct;" & $tagunicode_string & ";ulong Reserved[22];endstruct"
			Local $tpoti = DllStructCreate($tagpublic_object_type_information & ";byte[32]")
			Local $aret = DllCall("ntdll.dll", "long", "ZwQueryObject", "handle", $hobject, "uint", 2, "struct*", $tpoti, "ulong", DllStructGetSize($tpoti), "ulong*", 0)
			If @error Then Return SetError(@error, @extended, "")
			If $aret[0] Then Return SetError(10, $aret[0], "")
			Local $pdata = DllStructGetData($tpoti, 3)
			If NOT $pdata Then Return SetError(11, 0, "")
			Return _winapi_getstring($pdata)
		EndFunc

		Func _winapi_getperformanceinfo()
			Local $tpi = DllStructCreate("dword;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;ulong_ptr;dword;dword;dword")
			Local $aret = DllCall(@SystemDir & "\psapi.dll", "bool", "GetPerformanceInfo", "struct*", $tpi, "dword", DllStructGetSize($tpi))
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Local $aresult[13]
			For $i = 0 To 12
				$aresult[$i] = DllStructGetData($tpi, $i + 2)
			Next
			For $i = 0 To 8
				$aresult[$i] *= $aresult[9]
			Next
			Return $aresult
		EndFunc

		Func _winapi_getphysicallyinstalledsystemmemory()
			Local $aret = DllCall("kernel32.dll", "bool", "GetPhysicallyInstalledSystemMemory", "uint64*", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
			Return $aret[1]
		EndFunc

		Func _winapi_getprocessshutdownparameters()
			Local $aret = DllCall("kernel32.dll", "bool", "GetProcessShutdownParameters", "dword*", 0, "dword*", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return SetExtended(Number(NOT $aret[2]), $aret[1])
		EndFunc

		Func _winapi_getprocesswindowstation()
			Local $aret = DllCall("user32.dll", "handle", "GetProcessWindowStation")
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getpwrcapabilities()
			If NOT __dll("powrprof.dll") Then Return SetError(103, 0, 0)
			Local $tspc = DllStructCreate("byte[18];byte[3];byte;byte[8];byte[2];ulong[6];ulong[5]")
			Local $aret = DllCall("powrprof.dll", "boolean", "GetPwrCapabilities", "struct*", $tspc)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Local $aresult[25]
			For $i = 0 To 17
				$aresult[$i] = DllStructGetData($tspc, 1, $i + 1)
			Next
			$aresult[18] = DllStructGetData($tspc, 3)
			For $i = 19 To 20
				$aresult[$i] = DllStructGetData($tspc, 5, $i - 18)
			Next
			For $i = 21 To 24
				$aresult[$i] = DllStructGetData($tspc, 7, $i - 20)
			Next
			Return $aresult
		EndFunc

		Func _winapi_getrawinputbuffer($pbuffer, $ilength)
			Local $aret = DllCall("user32.dll", "uint", "GetRawInputBuffer", "struct*", $pbuffer, "uint*", $ilength, "uint", DllStructGetSize(DllStructCreate($tagrawinputheader)))
			If @error Then Return SetError(@error, @extended, 0)
			If ($aret[0] = 4294967295) OR (NOT $aret[1]) Then Return SetError(10, -1, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getrawinputbufferlength()
			Local $aret = DllCall("user32.dll", "uint", "GetRawInputBuffer", "ptr", 0, "uint*", 0, "uint", DllStructGetSize(DllStructCreate($tagrawinputheader)))
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] = 4294967295 Then Return SetError(10, -1, 0)
			Return $aret[2] * 8
		EndFunc

		Func _winapi_getrawinputdata($hrawinput, $pbuffer, $ilength, $iflag)
			Local $aret = DllCall("user32.dll", "uint", "GetRawInputData", "handle", $hrawinput, "uint", $iflag, "struct*", $pbuffer, "uint*", $ilength, "uint", DllStructGetSize(DllStructCreate($tagrawinputheader)))
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] = 4294967295 Then Return SetError(10, -1, 0)
			Return __iif($aret[3], $aret[0], $aret[4])
		EndFunc

		Func _winapi_getrawinputdeviceinfo($hdevice, $pbuffer, $ilength, $iflag)
			Local $aret = DllCall("user32.dll", "uint", "GetRawInputDeviceInfoW", "handle", $hdevice, "uint", $iflag, "struct*", $pbuffer, "uint*", $ilength)
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] = 4294967295 Then Return SetError(10, -1, 0)
			Return __iif($aret[3], $aret[0], $aret[4])
		EndFunc

		Func _winapi_getregisteredrawinputdevices($pbuffer, $ilength)
			Local $ilengthraw = DllStructGetSize(DllStructCreate($tagrawinputdevice))
			Local $aret = DllCall("user32.dll", "uint", "GetRegisteredRawInputDevices", "struct*", $pbuffer, "uint*", Floor($ilength / $ilengthraw), "uint", $ilengthraw)
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] = 4294967295 Then
				Local $ilasterror = _winapi_getlasterror()
				If $ilasterror = 122 Then Return SetExtended($ilasterror, $aret[2] * $ilengthraw)
				Return SetError(10, $ilasterror, 0)
			EndIf
			Return $aret[0]
		EndFunc

		Func _winapi_getshellwindow()
			Local $aret = DllCall("user32.dll", "hwnd", "GetShellWindow")
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getstartupinfo()
			Local $tsi = DllStructCreate($tagstartupinfo)
			DllCall("kernel32.dll", "none", "GetStartupInfoW", "struct*", $tsi)
			If @error Then Return SetError(@error, @extended, 0)
			Return $tsi
		EndFunc

		Func _winapi_getsystemdeppolicy()
			Local $aret = DllCall("kernel32.dll", "uint", "GetSystemDEPPolicy")
			If @error Then Return SetError(@error, @extended, -1)
			Return $aret[0]
		EndFunc

		Func _winapi_getsysteminfo()
			Local $sproc
			If _winapi_iswow64process() Then
				$sproc = "GetNativeSystemInfo"
			Else
				$sproc = "GetSystemInfo"
			EndIf
			Local Const $tagsysteminfo = "struct;word ProcessorArchitecture;word Reserved; endstruct;dword PageSize;" & "ptr MinimumApplicationAddress;ptr MaximumApplicationAddress;dword_ptr ActiveProcessorMask;dword NumberOfProcessors;" & "dword ProcessorType;dword AllocationGranularity;word ProcessorLevel;word ProcessorRevision"
			Local $tsysteminfo = DllStructCreate($tagsysteminfo)
			DllCall("kernel32.dll", "none", $sproc, "struct*", $tsysteminfo)
			If @error Then Return SetError(@error, @extended, 0)
			Local $aresult[10]
			$aresult[0] = DllStructGetData($tsysteminfo, 1)
			For $i = 1 To 9
				$aresult[$i] = DllStructGetData($tsysteminfo, $i + 2)
			Next
			Return $aresult
		EndFunc

		Func _winapi_getsystempowerstatus()
			Local $tagsystem_power_status = "byte ACLineStatus;byte BatteryFlag;byte BatteryLifePercent;byte Reserved1;" & "int BatteryLifeTime;int BatteryFullLifeTime"
			Local $tsystem_power_status = DllStructCreate($tagsystem_power_status)
			Local $aret = DllCall("kernel32.dll", "bool", "GetSystemPowerStatus", "struct*", $tsystem_power_status)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Local $aresult[5]
			$aresult[0] = DllStructGetData($tsystem_power_status, 1)
			$aresult[1] = DllStructGetData($tsystem_power_status, 2)
			$aresult[2] = DllStructGetData($tsystem_power_status, 3)
			$aresult[3] = DllStructGetData($tsystem_power_status, 5)
			$aresult[4] = DllStructGetData($tsystem_power_status, 6)
			Return $aresult
		EndFunc

		Func _winapi_getsystemtimes()
			Local $aret = DllCall("kernel32.dll", "bool", "GetSystemTimes", "uint64*", 0, "uint64*", 0, "uint64*", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Local $aresult[3]
			For $i = 0 To 2
				$aresult[$i] = $aret[$i + 1]
			Next
			Return $aresult
		EndFunc

		Func _winapi_getsystemwow64directory()
			Local $aret = DllCall("kernel32.dll", "uint", "GetSystemWow64DirectoryW", "wstr", "", "uint", 4096)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, _winapi_getlasterror(), "")
			Return $aret[1]
		EndFunc

		Func _winapi_gettickcount()
			Local $aret = DllCall("kernel32.dll", "dword", "GetTickCount")
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_gettickcount64()
			Local $aret = DllCall("kernel32.dll", "uint64", "GetTickCount64")
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_gettopwindow($hwnd)
			Local $aret = DllCall("user32.dll", "hwnd", "GetTopWindow", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_getuserobjectinformation($hobject, $iindex)
			Local $aret = DllCall("user32.dll", "bool", "GetUserObjectInformationW", "handle", $hobject, "int", $iindex, "ptr", 0, "dword", 0, "dword*", 0)
			If @error OR NOT $aret[5] Then Return SetError(@error + 10, @extended, 0)
			Local $tdata
			Switch $iindex
				Case 1
					$tdata = DllStructCreate($taguserobjectflags)
				Case 5, 6
					$tdata = DllStructCreate("uint")
				Case 2, 3
					$tdata = DllStructCreate("wchar[" & $aret[5] & "]")
				Case 4
					$tdata = DllStructCreate("byte[" & $aret[5] & "]")
				Case Else
					Return SetError(20, 0, 0)
			EndSwitch
			$aret = DllCall("user32.dll", "bool", "GetUserObjectInformationW", "handle", $hobject, "int", $iindex, "struct*", $tdata, "dword", DllStructGetSize($tdata), "dword*", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error + 30, @extended, 0)
			Switch $iindex
				Case 1, 4
					Return $tdata
				Case Else
					Return DllStructGetData($tdata, 1)
			EndSwitch
		EndFunc

		Func _winapi_getversion()
			Return BitAND(BitShift($__winver, 8), 255) & "." & BitAND($__winver, 255)
		EndFunc

		Func _winapi_getversionex()
			Local $tosversioninfoex = DllStructCreate($tagosversioninfoex)
			DllStructSetData($tosversioninfoex, "OSVersionInfoSize", DllStructGetSize($tosversioninfoex))
			Local $aret = DllCall("kernel32.dll", "bool", "GetVersionExW", "struct*", $tosversioninfoex)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $tosversioninfoex
		EndFunc

		Func _winapi_getwindowdisplayaffinity($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "GetWindowDisplayAffinity", "hwnd", $hwnd, "dword*", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $aret[2]
		EndFunc

		Func _winapi_getwindowinfo($hwnd)
			Local $twindowinfo = DllStructCreate($tagwindowinfo)
			DllStructSetData($twindowinfo, "Size", DllStructGetSize($twindowinfo))
			Local $aret = DllCall("user32.dll", "bool", "GetWindowInfo", "hwnd", $hwnd, "struct*", $twindowinfo)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $twindowinfo
		EndFunc

		Func _winapi_getworkarea()
			Local $trect = DllStructCreate($tagrect)
			Local $aret = DllCall("user32.dll", "int", "SystemParametersInfo", "uint", 48, "uint", 0, "struct*", $trect, "uint", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $trect
		EndFunc

		Func _winapi_initmuilanguage($ilanguage)
			DllCall("comctl32.dll", "none", "InitMUILanguage", "word", $ilanguage)
			If @error Then Return SetError(@error, @extended, 0)
			Return 1
		EndFunc

		Func _winapi_isbadcodeptr($paddress)
			Local $aret = DllCall("kernel32.dll", "bool", "IsBadCodePtr", "struct*", $paddress)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_isbadstringptr($paddress, $ilength)
			Local $aret = DllCall("kernel32.dll", "bool", "IsBadStringPtr", "struct*", $paddress, "uint_ptr", $ilength)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_ischild($hwnd, $hwndparent)
			Local $aret = DllCall("user32.dll", "bool", "IsChild", "hwnd", $hwndparent, "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_ishungappwindow($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "IsHungAppWindow", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_isiconic($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "IsIconic", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_isloadkblayout($ilanguage)
			Local $alayout = _winapi_getkeyboardlayoutlist()
			If @error Then Return SetError(@error, @extended, False)
			For $i = 1 To $alayout[0]
				If $alayout[$i] = $ilanguage Then Return True
			Next
			Return False
		EndFunc

		Func _winapi_ismemory($pmemory)
			Local $bresult = __heapvalidate($pmemory)
			Return SetError(@error, @extended, $bresult)
		EndFunc

		Func _winapi_isprocessorfeaturepresent($ifeature)
			Local $aret = DllCall("kernel32.dll", "bool", "IsProcessorFeaturePresent", "dword", $ifeature)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_iswindowenabled($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "IsWindowEnabled", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_iswindowunicode($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "IsWindowUnicode", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_iszoomed($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "IsZoomed", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_keybd_event($vkey, $iflags, $iscancode = 0, $iextrainfo = 0)
			DllCall("user32.dll", "none", "keybd_event", "byte", $vkey, "byte", $iscancode, "dword", $iflags, "ulong_ptr", $iextrainfo)
			If @error Then Return SetError(@error, @extended, 0)
			Return 1
		EndFunc

		Func _winapi_killtimer($hwnd, $itimerid)
			Local $aret = DllCall("user32.dll", "bool", "KillTimer", "hwnd", $hwnd, "uint_ptr", $itimerid)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_loadiconmetric($hinstance, $sname, $imetric)
			Local $stypeofname = "int"
			If IsString($sname) Then
				$stypeofname = "wstr"
			EndIf
			Local $aret = DllCall("comctl32.dll", "long", "LoadIconMetric", "handle", $hinstance, $stypeofname, $sname, "int", $imetric, "handle*", 0)
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] Then Return SetError(10, $aret[0], 0)
			Return $aret[4]
		EndFunc

		Func _winapi_loadiconwithscaledown($hinstance, $sname, $iwidth, $iheight)
			Local $stypeofname = "int"
			If IsString($sname) Then
				$stypeofname = "wstr"
			EndIf
			Local $aret = DllCall("comctl32.dll", "long", "LoadIconWithScaleDown", "handle", $hinstance, $stypeofname, $sname, "int", $iwidth, "int", $iheight, "handle*", 0)
			If @error Then Return SetError(@error, @extended, 0)
			If $aret[0] Then Return SetError(10, $aret[0], 0)
			Return $aret[5]
		EndFunc

		Func _winapi_loadkeyboardlayout($ilanguage, $iflag = 0)
			Local $aret = DllCall("user32.dll", "handle", "LoadKeyboardLayoutW", "wstr", Hex($ilanguage, 8), "uint", $iflag)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_lockworkstation()
			Local $aret = DllCall("user32.dll", "bool", "LockWorkStation")
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_mapvirtualkey($icode, $itype, $hlocale = 0)
			Local $aret = DllCall("user32.dll", "INT", "MapVirtualKeyExW", "uint", $icode, "uint", $itype, "uint_ptr", $hlocale)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_mirroricon($hicon, $bdelete = False)
			If NOT $bdelete Then
				$hicon = _winapi_copyicon($hicon)
			EndIf
			Local $aret = DllCall("comctl32.dll", "int", 414, "ptr", 0, "ptr*", $hicon)
			If @error OR NOT $aret[0] Then
				Local $ierror = @error + 10
				If $hicon AND NOT $bdelete Then
					_winapi_destroyicon($hicon)
				EndIf
				Return SetError($ierror, 0, 0)
			EndIf
			Return $aret[2]
		EndFunc

		Func _winapi_opendesktop($sname, $iaccess = 0, $iflags = 0, $binherit = False)
			Local $aret = DllCall("user32.dll", "handle", "OpenDesktopW", "wstr", $sname, "dword", $iflags, "bool", $binherit, "dword", $iaccess)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_openicon($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "OpenIcon", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_openinputdesktop($iaccess = 0, $iflags = 0, $binherit = False)
			Local $aret = DllCall("user32.dll", "handle", "OpenInputDesktop", "dword", $iflags, "bool", $binherit, "dword", $iaccess)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_openwindowstation($sname, $iaccess = 0, $binherit = False)
			Local $aret = DllCall("user32.dll", "handle", "OpenWindowStationW", "wstr", $sname, "bool", $binherit, "dword", $iaccess)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_queryperformancecounter()
			Local $aret = DllCall("kernel32.dll", "bool", "QueryPerformanceCounter", "int64*", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
			Return $aret[1]
		EndFunc

		Func _winapi_queryperformancefrequency()
			Local $aret = DllCall("kernel32.dll", "bool", "QueryPerformanceFrequency", "int64*", 0)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, 0)
			Return $aret[1]
		EndFunc

		Func _winapi_registerclass($twndclass)
			Local $aret = DllCall("user32.dll", "word", "RegisterClassW", "struct*", $twndclass)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_registerclassex($twndclassex)
			Local $aret = DllCall("user32.dll", "word", "RegisterClassExW", "struct*", $twndclassex)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_registerhotkey($hwnd, $iid, $imodifiers, $vkey)
			Local $aret = DllCall("user32.dll", "bool", "RegisterHotKey", "hwnd", $hwnd, "int", $iid, "uint", $imodifiers, "uint", $vkey)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_registerpowersettingnotification($hwnd, $sguid)
			Local $tguid = DllStructCreate($tagguid)
			Local $aret = DllCall("ole32.dll", "long", "CLSIDFromString", "wstr", $sguid, "struct*", $tguid)
			If @error OR $aret[0] Then Return SetError(@error + 20, @extended, 0)
			$aret = DllCall("user32.dll", "handle", "RegisterPowerSettingNotification", "handle", $hwnd, "struct*", $tguid, "dword", 0)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_registerrawinputdevices($padevice, $icount = 1)
			Local $aret = DllCall("user32.dll", "bool", "RegisterRawInputDevices", "struct*", $padevice, "uint", $icount, "uint", DllStructGetSize(DllStructCreate($tagrawinputdevice)) * $icount)
			If @error OR NOT $aret[0] Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_registershellhookwindow($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "RegisterShellHookWindow", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_removeclipboardformatlistener($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "RemoveClipboardFormatListener", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_sendmessagetimeout($hwnd, $imsg, $wparam = 0, $lparam = 0, $itimeout = 1000, $iflags = 0)
			Local $aret = DllCall("user32.dll", "lresult", "SendMessageTimeoutW", "hwnd", $hwnd, "uint", $imsg, "wparam", $wparam, "lparam", $lparam, "uint", $iflags, "uint", $itimeout, "dword_ptr*", 0)
			If @error Then Return SetError(@error, @extended, -1)
			If NOT $aret[0] Then Return SetError(10, _winapi_getlasterror(), -1)
			Return $aret[7]
		EndFunc

		Func _winapi_setactivewindow($hwnd)
			Local $aret = DllCall("user32.dll", "int", "SetActiveWindow", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_setclasslongex($hwnd, $iindex, $inewlong)
			Local $aret
			If @AutoItX64 Then
				$aret = DllCall("user32.dll", "ulong_ptr", "SetClassLongPtrW", "hwnd", $hwnd, "int", $iindex, "long_ptr", $inewlong)
			Else
				$aret = DllCall("user32.dll", "dword", "SetClassLongW", "hwnd", $hwnd, "int", $iindex, "long", $inewlong)
			EndIf
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_setdlldirectory($sdirpath = Default)
			Local $stypeofpath = "wstr"
			If $sdirpath = Default Then
				$stypeofpath = "ptr"
				$sdirpath = 0
			EndIf
			Local $aret = DllCall("kernel32.dll", "bool", "SetDllDirectoryW", $stypeofpath, $sdirpath)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_setforegroundwindow($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "SetForegroundWindow", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_setkeyboardlayout($hwnd, $ilanguage, $iflags = 0)
			If NOT _winapi_iswindow($hwnd) Then Return SetError(@error + 10, @extended, 0)
			Local $hlocale = 0
			If $ilanguage Then
				$hlocale = _winapi_loadkeyboardlayout($ilanguage)
				If NOT $hlocale Then Return SetError(10, 0, 0)
			EndIf
			Local Const $wm_inputlangchangerequest = 80
			DllCall("user32.dll", "none", "SendMessage", "hwnd", $hwnd, "uint", $wm_inputlangchangerequest, "uint", $iflags, "uint_ptr", $hlocale)
			If @error Then Return SetError(@error, @extended, 0)
			Return 1
		EndFunc

		Func _winapi_setkeyboardstate(ByRef $tstate)
			Local $aret = DllCall("user32.dll", "int", "SetKeyboardState", "struct*", $tstate)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_setmessageextrainfo($lparam)
			Local $aret = DllCall("user32.dll", "lparam", "SetMessageExtraInfo", "lparam", $lparam)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_setprocessshutdownparameters($ilevel, $bdialog = False)
			Local $aret = DllCall("kernel32.dll", "bool", "SetProcessShutdownParameters", "dword", $ilevel, "dword", NOT $bdialog)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_setprocesswindowstation($hstation)
			Local $aret = DllCall("user32.dll", "bool", "SetProcessWindowStation", "handle", $hstation)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_settimer($hwnd, $itimerid, $ielapse, $ptimerfunc)
			Local $aret = DllCall("user32.dll", "uint_ptr", "SetTimer", "hwnd", $hwnd, "uint_ptr", $itimerid, "uint", $ielapse, "ptr", $ptimerfunc)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_setuserobjectinformation($hobject, $iindex, ByRef $tdata)
			If $iindex <> 1 Then Return SetError(10, 0, False)
			Local $aret = DllCall("user32.dll", "bool", "SetUserObjectInformationW", "handle", $hobject, "int", 1, "struct*", $tdata, "dword", DllStructGetSize($tdata))
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_setwindowdisplayaffinity($hwnd, $iaffinity)
			Local $aret = DllCall("user32.dll", "bool", "SetWindowDisplayAffinity", "hwnd", $hwnd, "dword", $iaffinity)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_setwineventhook($ieventmin, $ieventmax, $peventproc, $ipid = 0, $ithreadid = 0, $iflags = 0)
			Local $aret = DllCall("user32.dll", "handle", "SetWinEventHook", "uint", $ieventmin, "uint", $ieventmax, "ptr", 0, "ptr", $peventproc, "dword", $ipid, "dword", $ithreadid, "uint", $iflags)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_showownedpopups($hwnd, $bshow)
			Local $aret = DllCall("user32.dll", "bool", "ShowOwnedPopups", "hwnd", $hwnd, "bool", $bshow)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_shutdownblockreasoncreate($hwnd, $stext)
			Local $aret = DllCall("user32.dll", "bool", "ShutdownBlockReasonCreate", "hwnd", $hwnd, "wstr", $stext)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_shutdownblockreasondestroy($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "ShutdownBlockReasonDestroy", "hwnd", $hwnd)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_shutdownblockreasonquery($hwnd)
			Local $aret = DllCall("user32.dll", "bool", "ShutdownBlockReasonQuery", "hwnd", $hwnd, "wstr", "", "dword*", 4096)
			If @error OR NOT $aret[0] Then Return SetError(@error + 10, @extended, "")
			Return $aret[2]
		EndFunc

		Func _winapi_switchdesktop($hdesktop)
			Local $aret = DllCall("user32.dll", "bool", "SwitchDesktop", "handle", $hdesktop)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_switchtothiswindow($hwnd, $balttab = False)
			DllCall("user32.dll", "none", "SwitchToThisWindow", "hwnd", $hwnd, "bool", $balttab)
			If @error Then Return SetError(@error, @extended, 0)
			Return 1
		EndFunc

		Func _winapi_tilewindows($awnds, $trect = 0, $hparent = 0, $iflags = 0, $istart = 0, $iend = -1)
			If __checkerrorarraybounds($awnds, $istart, $iend) Then Return SetError(@error + 10, @extended, 0)
			Local $icount = $iend - $istart + 1
			Local $twnds = DllStructCreate("hwnd[" & $icount & "]")
			$icount = 1
			For $i = $istart To $iend
				DllStructSetData($twnds, 1, $awnds[$i], $icount)
				$icount += 1
			Next
			Local $aret = DllCall("user32.dll", "word", "TileWindows", "hwnd", $hparent, "uint", $iflags, "struct*", $trect, "uint", $icount - 1, "struct*", $twnds)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_trackmouseevent($hwnd, $iflags, $itime = -1)
			Local $ttme = DllStructCreate("dword;dword;hwnd;dword")
			DllStructSetData($ttme, 1, DllStructGetSize($ttme))
			DllStructSetData($ttme, 2, $iflags)
			DllStructSetData($ttme, 3, $hwnd)
			DllStructSetData($ttme, 4, $itime)
			Local $aret = DllCall("user32.dll", "bool", "TrackMouseEvent", "struct*", $ttme)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_unhookwinevent($heventhook)
			Local $aret = DllCall("user32.dll", "bool", "UnhookWinEvent", "handle", $heventhook)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_unloadkeyboardlayout($hlocale)
			Local $aret = DllCall("user32.dll", "bool", "UnloadKeyboardLayout", "handle", $hlocale)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_unregisterclass($sclass, $hinstance = 0)
			Local $stypeofclass = "ptr"
			If IsString($sclass) Then
				$stypeofclass = "wstr"
			EndIf
			Local $aret = DllCall("user32.dll", "bool", "UnregisterClassW", $stypeofclass, $sclass, "handle", $hinstance)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

		Func _winapi_unregisterhotkey($hwnd, $iid)
			Local $aret = DllCall("user32.dll", "bool", "UnregisterHotKey", "hwnd", $hwnd, "int", $iid)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_unregisterpowersettingnotification($hnotify)
			Local $aret = DllCall("user32.dll", "bool", "UnregisterPowerSettingNotification", "handle", $hnotify)
			If @error Then Return SetError(@error, @extended, 0)
			Return $aret[0]
		EndFunc

		Func _winapi_updatelayeredwindowex($hwnd, $ix, $iy, $hbitmap, $iopacity = 255, $bdelete = False)
			Local $aret = DllCall("user32.dll", "handle", "GetDC", "hwnd", $hwnd)
			Local $hdc = $aret[0]
			$aret = DllCall("gdi32.dll", "handle", "CreateCompatibleDC", "handle", $hdc)
			Local $hdestdc = $aret[0]
			$aret = DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hbitmap)
			Local $hdestsv = $aret[0]
			Local $tpoint
			If ($ix = -1) AND ($iy = -1) Then
				$tpoint = DllStructCreate("int;int")
			Else
				$tpoint = DllStructCreate("int;int;int;int")
				DllStructSetData($tpoint, 3, $ix)
				DllStructSetData($tpoint, 4, $iy)
			EndIf
			DllStructSetData($tpoint, 1, 0)
			DllStructSetData($tpoint, 2, 0)
			Local $tblendfunction = DllStructCreate($tagblendfunction)
			DllStructSetData($tblendfunction, 1, 0)
			DllStructSetData($tblendfunction, 2, 0)
			DllStructSetData($tblendfunction, 3, $iopacity)
			DllStructSetData($tblendfunction, 4, 1)
			Local $tsize = _winapi_getbitmapdimension($hbitmap)
			$aret = DllCall("user32.dll", "bool", "UpdateLayeredWindow", "hwnd", $hwnd, "handle", $hdc, "ptr", DllStructGetPtr($tpoint, 3), "struct*", $tsize, "handle", $hdestdc, "struct*", $tpoint, "dword", 0, "struct*", $tblendfunction, "dword", 2)
			Local $ierror = @error
			DllCall("user32.dll", "bool", "ReleaseDC", "hwnd", $hwnd, "handle", $hdc)
			DllCall("gdi32.dll", "handle", "SelectObject", "handle", $hdestdc, "handle", $hdestsv)
			DllCall("gdi32.dll", "bool", "DeleteDC", "handle", $hdestdc)
			If $ierror Then Return SetError($ierror, 0, False)
			If $bdelete Then
				_winapi_deleteobject($hbitmap)
			EndIf
			Return $aret[0]
		EndFunc

		Func _winapi_updatelayeredwindowindirect($hwnd, $tulwinfo)
			Local $aret = DllCall("user32.dll", "bool", "UpdateLayeredWindowIndirect", "hwnd", $hwnd, "struct*", $tulwinfo)
			If @error Then Return SetError(@error, @extended, False)
			Return $aret[0]
		EndFunc

	#EndRegion Public Functions
	#Region Embedded DLL Functions
	#EndRegion Embedded DLL Functions
	#Region Internal Functions

		Func __enumdefaultproc($pdata, $lparam)
			#forceref $lParam
			Local $ilength = _winapi_strlen($pdata)
			__inc($__g_venum)
			If $ilength Then
				$__g_venum[$__g_venum[0]] = DllStructGetData(DllStructCreate("wchar[" & ($ilength + 1) & "]", $pdata), 1)
			Else
				$__g_venum[$__g_venum[0]] = ""
			EndIf
			Return 1
		EndFunc

		Func __enumpagefilesproc($isize, $pinfo, $pfile)
			Local $tepfi = DllStructCreate("dword;dword;ulong_ptr;ulong_ptr;ulong_ptr", $pinfo)
			__inc($__g_venum)
			$__g_venum[$__g_venum[0][0]][0] = DllStructGetData(DllStructCreate("wchar[" & (_winapi_strlen($pfile) + 1) & "]", $pfile), 1)
			For $i = 1 To 3
				$__g_venum[$__g_venum[0][0]][$i] = DllStructGetData($tepfi, $i + 2) * $isize
			Next
			Return 1
		EndFunc

	#EndRegion Internal Functions

	Func eeerebuyerrwin()
		If WinExists("Rebuy error message") Then
			Local $hnd = WinGetHandle("Rebuy error message")
			$winpos = WinGetPos($hnd)
			If IsArray($winpos) AND $winpos[2] == 334 AND $winpos[3] == 202 AND iswindowvisible($hnd) Then
				fconsolewrite("Rebuy error message Window Found")
				WinActivate($hnd)
				MouseClick("left", $winpos[0] + 167, $winpos[1] + 164, 1, 0)
			EndIf
		EndIf
	EndFunc

	Func updatelistviewmtt()
		_guictrllistview_deleteallitems(GUICtrlGetHandle($listschedulemtt))
		Local $rawschedule = IniReadSection($inifile, "registered")
		_arraysort($rawschedule, 0, 1)
		If @error == 0 Then
			For $a = 1 To $rawschedule[0][0]
				_guictrllistview_additem($listschedulemtt, "")
				_guictrllistview_addsubitem($listschedulemtt, $a - 1, $rawschedule[$a][0], 1)
				_guictrllistview_addsubitem($listschedulemtt, $a - 1, $rawschedule[$a][1], 2)
			Next
		EndIf
	EndFunc

	Func btndeletescheduleclickmtt()
		Local $delflag
		$delflag = 0
		Local $si = _guictrllistview_getselectedindices($listschedulemtt, True)
		If $si[0] > 0 Then
			Local $selecteditem = _guictrllistview_getitemtextstring($listschedulemtt, $si[1])
			If StringLen($selecteditem) > 0 Then
				MsgBox(0, "1", $selecteditem)
				Local $sitem = StringSplit($selecteditem, "|")
				If $sitem[0] >= 2 Then
					IniDelete($inifile, "registered", $sitem[2])
					$delflag = 1
				Else
					MsgBox(0, "Selection", "Nothing Selected")
				EndIf
			EndIf
		Else
			MsgBox(0, "Selection", "Nothing Selected")
		EndIf
		updatelistviewmtt()
		Return $delflag
	EndFunc

	Func handleeeearwindow()
		WinWait("User Message", "", 1)
		If WinExists("User Message") Then
			Local $hnd = WinGetHandle("User Message")
			WinActivate($hnd)
			$winpos = WinGetPos($hnd)
			If IsArray($winpos) Then
				If IsArray(PixelSearch($winpos[0] + 61, $winpos[1] + 184, $winpos[0] + 61, $winpos[1] + 184, 1084638, 5, 1, $hnd)) Then
					$rebuyscreenshot += 1
					_screencapture_capturewnd(@ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg", $hnd)
					Local $rebuypic = @ScriptDir & "\RebuyScreenShot.jpg"
					If GUICtrlRead($chknotifyrebuy) == $gui_checked Then
						emailnotification($rebuypic, "Tourney Rebuy")
					EndIf
					MouseClick("left", $winpos[0] + 93, $winpos[1] + 179, 1, 0)
				EndIf
			EndIf
		EndIf
	EndFunc

	Func handleeeeconfirmarwindow()
		WinWait("User Message", "", 1)
		If WinExists("User Message") Then
			Local $hnd = WinGetHandle("User Message")
			WinActivate($hnd)
			$winpos = WinGetPos($hnd)
			If IsArray($winpos) Then
				If $winpos[2] == 334 AND $winpos[3] == 202 Then
					$rebuyscreenshot += 1
					_screencapture_capturewnd(@ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg", $hnd)
					Local $rebuypic = @ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg"
					If GUICtrlRead($chknotifyrebuy) == $gui_checked Then
						emailnotification($rebuypic, "Tourney Rebuy")
					EndIf
					MouseClick("left", $winpos[0] + 165, $winpos[1] + 163, 1, 0)
					WinWaitClose($hnd, "", 2)
					If WinExists($hnd) Then
						WinClose($hnd)
					EndIf
				EndIf
			EndIf
		EndIf
	EndFunc

	Func checkautorebuy()
		Local $rebtablelist = tablelistmtt()
		Local $rebpos, $pix1, $pix2, $pix3, $pix4
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			If IsArray($rebtablelist) Then
				For $x = 1 To $rebtablelist[0][0]
					$rebpos = WinGetPos($rebtablelist[$x][1])
					If $rebuytimer >= 5 Then
						If IsArray($rebpos) Then
							$pix1 = PixelSearch($rebpos[0] + 645, $rebpos[1] + 512, $rebpos[0] + 645, $rebpos[1] + 512, 15592941, 5, 1, $rebtablelist[$x][1])
							$pix2 = PixelSearch($rebpos[0] + 645, $rebpos[1] + 512, $rebpos[0] + 645, $rebpos[1] + 512, 13882323, 5, 1, $rebtablelist[$x][1])
							If IsArray($pix1) OR IsArray($pix2) Then
								WinActivate($rebtablelist[$x][1])
								MouseClick("left", $rebpos[0] + 645, $rebpos[1] + 512, 1, 0)
								Sleep(500)
								MouseMove(Random(0, 800), Random(0, 600), 1)
								handlebodogarwindow()
							EndIf
						EndIf
						$rebuytimer = 0
					Else
						$rebuytimer += 1
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			If IsArray($rebtablelist) Then
				For $x = 1 To $rebtablelist[0][0]
					$rebpos = WinGetPos($rebtablelist[$x][1])
					If IsArray($rebpos) Then
						If $rebuytimer >= 5 Then
							$pix2 = PixelSearch($rebpos[0] + 748, $rebpos[1] + 434, $rebpos[0] + 748, $rebpos[1] + 434, 0, 2, 1, $rebtablelist[$x][1])
							$pix3 = PixelSearch($rebpos[0] + 735, $rebpos[1] + 424, $rebpos[0] + 735, $rebpos[1] + 424, 0, 2, 1, $rebtablelist[$x][1])
							$pix4 = PixelSearch($rebpos[0] + 722, $rebpos[1] + 426, $rebpos[0] + 722, $rebpos[1] + 426, 0, 2, 1, $rebtablelist[$x][1])
							If IsArray($pix2) AND IsArray($pix3) AND IsArray($pix4) Then
								WinActivate($rebtablelist[$x][1])
								MouseClick("left", $rebpos[0] + 736, $rebpos[1] + 429, 1, 0)
								Sleep(500)
								MouseMove(Random(0, 800), Random(0, 600), 1)
								If handleeeerebuywindow() Then
									Return
								EndIf
							EndIf
						Else
							$rebuytimer += 1
						EndIf
					EndIf
				Next
			EndIf
		Else
			If IsArray($rebtablelist) Then
				For $x = 1 To $rebtablelist[0][0]
					$rebpos = WinGetPos($rebtablelist[$x][1])
					If IsArray($rebpos) Then
						If $rebuytimer >= 5 Then
							If GUICtrlRead($cmbsite) == "WillHill" Then
								If IsArray(PixelSearch($rebpos[0] + 368, $rebpos[1] + 114, $rebpos[0] + 368, $rebpos[1] + 114, 16318464, 2, 1, $rebtablelist[$x][1])) Then
									WinActivate($rebtablelist[$x][1])
									MouseClick("left", $rebpos[0] + 368, $rebpos[1] + 120, 1, 0)
									Sleep(500)
									MouseMove(Random(0, 800), Random(0, 600), 1)
									$rebuytimer = 0
								EndIf
								If GUICtrlRead($chkdblrebuy) == $gui_unchecked Then
									If NOT IsArray(PixelSearch($rebpos[0] + 13, $rebpos[1] + 425, $rebpos[0] + 13, $rebpos[1] + 425, 2446716, 5, 1, $rebtablelist[$x][1])) Then
										WinActivate($rebtablelist[$x][1])
										MouseClick("left", $rebpos[0] + 13, $rebpos[1] + 425, 1, 0)
									EndIf
									$rebuytimer = 0
								Else
									If IsArray(PixelSearch($rebpos[0] + 137, $rebpos[1] + 442, $rebpos[0] + 137, $rebpos[1] + 442, 2513026, 5, 1, $rebtablelist[$x][1])) Then
										WinActivate($rebtablelist[$x][1])
										MouseClick("left", $rebpos[0] + 137, $rebpos[1] + 442, 1, 0)
									EndIf
								EndIf
								Sleep(500)
								MouseMove(Random(0, 800), Random(0, 600), 1)
								$rebuytimer = 0
							ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
								If IsArray(PixelSearch($rebpos[0] + 368, $rebpos[1] + 114, $rebpos[0] + 368, $rebpos[1] + 114, 16768331, 2, 1, $rebtablelist[$x][1])) Then
									WinActivate($rebtablelist[$x][1])
									MouseClick("left", $rebpos[0] + 368, $rebpos[1] + 120, 1, 0)
									Sleep(500)
									MouseMove(Random(0, 800), Random(0, 600), 1)
									$rebuytimer = 0
								EndIf
								If GUICtrlRead($chkdblrebuy) == $gui_unchecked Then
									If NOT IsArray(PixelSearch($rebpos[0] + 13, $rebpos[1] + 425, $rebpos[0] + 13, $rebpos[1] + 425, 12409691, 5, 1, $rebtablelist[$x][1])) Then
										WinActivate($rebtablelist[$x][1])
										MouseClick("left", $rebpos[0] + 13, $rebpos[1] + 425, 1, 0)
									EndIf
									$rebuytimer = 0
								Else
									If IsArray(PixelSearch($rebpos[0] + 137, $rebpos[1] + 442, $rebpos[0] + 137, $rebpos[1] + 442, 14540253, 5, 1, $rebtablelist[$x][1])) Then
										WinActivate($rebtablelist[$x][1])
										MouseClick("left", $rebpos[0] + 137, $rebpos[1] + 442, 1, 0)
									EndIf
								EndIf
								Sleep(500)
								MouseMove(Random(0, 800), Random(0, 600), 1)
								$rebuytimer = 0
							ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
								If GUICtrlRead($chkdblrebuy) == $gui_unchecked AND NOT IsArray(PixelSearch($rebpos[0] + 13, $rebpos[1] + 426, $rebpos[0] + 13, $rebpos[1] + 426, 15907083, 5, 1, $rebtablelist[$x][1])) Then
									WinActivate($rebtablelist[$x][1])
									MouseClick("left", $rebpos[0] + 13, $rebpos[1] + 426, 1, 0)
									Sleep(500)
									MouseMove(Random(0, 800), Random(0, 600), 1)
									$rebuytimer = 0
								ElseIf GUICtrlRead($chkdblrebuy) == $gui_checked Then
									If NOT IsArray(PixelSearch($rebpos[0] + 135, $rebpos[1] + 442, $rebpos[0] + 135, $rebpos[1] + 442, 16038411, 5, 1, $rebtablelist[$x][1])) Then
										WinActivate($rebtablelist[$x][1])
										MouseClick("left", $rebpos[0] + 135, $rebpos[1] + 442, 1, 0)
									EndIf
									MouseMove(Random(0, 800), Random(0, 600), 1)
									Sleep(500)
									$rebuytimer = 0
								EndIf
							Else
								If IsArray(PixelSearch($rebpos[0] + 369, $rebpos[1] + 125, $rebpos[0] + 369, $rebpos[1] + 125, 15395305, 2, 1, $rebtablelist[$x][1])) Then
									WinActivate($rebtablelist[$x][1])
									MouseClick("left", $rebpos[0] + 368, $rebpos[1] + 125, 1, 0)
									MouseMove(Random(0, 800), Random(0, 600), 1)
									Sleep(500)
									$rebuytimer = 0
								EndIf
								If NOT IsArray(PixelSearch($rebpos[0] + 14, $rebpos[1] + 425, $rebpos[0] + 14, $rebpos[1] + 425, 9171201, 5, 1, $rebtablelist[$x][1])) Then
									WinActivate($rebtablelist[$x][1])
									MouseClick("left", $rebpos[0] + 13, $rebpos[1] + 420, 1, 0)
								EndIf
								MouseMove(Random(0, 800), Random(0, 600), 1)
								Sleep(500)
								$rebuytimer = 0
							EndIf
						Else
							$rebuytimer += 1
						EndIf
						handleipokerrebuywin()
						handlerebuysuccessfulwin()
						Sleep(500)
						handlextrawin()
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func checkaddon()
		Local $rebtablelist
		Local $rebpos, $pixel1, $pixel2, $pixel3
		$rebtablelist = tablelistmtt()
		If IsArray($rebtablelist) Then
			For $x = 1 To $rebtablelist[0][0]
				$rebpos = WinGetPos($rebtablelist[$x][1])
				If IsArray($rebpos) Then
					If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
						$pixel1 = PixelSearch($rebpos[0] + 584, $rebpos[1] + 567, $rebpos[0] + 584, $rebpos[1] + 567, 14540253, 5, 1, $rebtablelist[$x][1])
						$pixel2 = PixelSearch($rebpos[0] + 609, $rebpos[1] + 566, $rebpos[0] + 609, $rebpos[1] + 566, 14540253, 5, 1, $rebtablelist[$x][1])
						$pixel3 = PixelSearch($rebpos[0] + 627, $rebpos[1] + 567, $rebpos[0] + 627, $rebpos[1] + 567, 14540253, 5, 1, $rebtablelist[$x][1])
						If IsArray($pixel1) AND IsArray($pixel2) AND IsArray($pixel3) Then
							WinActivate($rebtablelist[$x][1])
							MouseClick("left", $rebpos[0] + 609, $rebpos[1] + 566, 1, 0)
							Sleep(500)
							MouseMove(Random(0, 800), Random(0, 600), 1)
							handlebodogaddonwindow()
						EndIf
					ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
						$pixel1 = PixelSearch($rebpos[0] + 722, $rebpos[1] + 426, $rebpos[0] + 722, $rebpos[1] + 426, 0, 2, 1, $rebtablelist[$x][1])
						$pixel2 = PixelSearch($rebpos[0] + 748, $rebpos[1] + 434, $rebpos[0] + 748, $rebpos[1] + 434, 15447583, 5, 1, $rebtablelist[$x][1])
						$pixel3 = PixelSearch($rebpos[0] + 735, $rebpos[1] + 424, $rebpos[0] + 735, $rebpos[1] + 424, 15979644, 5, 1, $rebtablelist[$x][1])
						If IsArray($pixel1) AND IsArray($pixel2) AND IsArray($pixel3) Then
							WinActivate($rebtablelist[$x][1])
							MouseClick("left", $rebpos[0] + 736, $rebpos[1] + 429, 1, 0)
							Sleep(500)
							MouseMove(Random(0, 800), Random(0, 600), 1)
							WinWait("User Message", "", 2)
							If handleeeerebuywindow() Then
							EndIf
						EndIf
					ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
						If IsArray(PixelSearch($rebpos[0] + 395, $rebpos[1] + 508, $rebpos[0] + 395, $rebpos[1] + 508, 16777215, 3, 1, $rebtablelist[$x][1])) AND IsArray(PixelSearch($rebpos[0] + 395, $rebpos[1] + 516, $rebpos[0] + 395, $rebpos[1] + 508, 16777215, 3, 1, $rebtablelist[$x][1])) AND IsArray(PixelSearch($rebpos[0] + 470, $rebpos[1] + 513, $rebpos[0] + 470, $rebpos[1] + 513, 16777215, 3, 1, $rebtablelist[$x][1])) AND IsArray(PixelSearch($rebpos[0] + 486, $rebpos[1] + 516, $rebpos[0] + 486, $rebpos[1] + 516, 16777215, 3, 1, $rebtablelist[$x][1])) Then
							WinActivate($rebtablelist[$x][1])
							MouseClick("left", $rebpos[0] + 450, $rebpos[1] + 515, 1, 0)
							Sleep(500)
							handleipokeraddonwin()
							Sleep(500)
							handlextrawin()
						EndIf
					ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
						If IsArray(PixelSearch($rebpos[0] + 395, $rebpos[1] + 508, $rebpos[0] + 395, $rebpos[1] + 508, 4013373, 3, 1, $rebtablelist[$x][1])) AND IsArray(PixelSearch($rebpos[0] + 395, $rebpos[1] + 516, $rebpos[0] + 395, $rebpos[1] + 508, 4013373, 3, 1, $rebtablelist[$x][1])) AND IsArray(PixelSearch($rebpos[0] + 470, $rebpos[1] + 513, $rebpos[0] + 470, $rebpos[1] + 513, 4013373, 3, 1, $rebtablelist[$x][1])) AND IsArray(PixelSearch($rebpos[0] + 486, $rebpos[1] + 516, $rebpos[0] + 486, $rebpos[1] + 516, 4013373, 3, 1, $rebtablelist[$x][1])) Then
							WinActivate($rebtablelist[$x][1])
							MouseClick("left", $rebpos[0] + 450, $rebpos[1] + 515, 1, 0)
							Sleep(500)
							handleipokeraddonwin()
							Sleep(500)
							handlextrawin()
						EndIf
					ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
						If IsArray(PixelSearch($rebpos[0] + 135, $rebpos[1] + 426, $rebpos[0] + 135, $rebpos[1] + 426, 14540253, 3, 1, $rebtablelist[$x][1])) Then
							WinActivate($rebtablelist[$x][1])
							MouseClick("left", $rebpos[0] + 135, $rebpos[1] + 426, 1, 0)
							Sleep(500)
							handleipokeraddonwin()
							Sleep(500)
							handlextrawin()
						EndIf
					ElseIf GUICtrlRead($cmbsite) == "Titan" Then
						If IsArray(PixelSearch($rebpos[0] + 395, $rebpos[1] + 513, $rebpos[0] + 395, $rebpos[1] + 513, 3421236, 3, 1, $rebtablelist[$x][1])) AND IsArray(PixelSearch($rebpos[0] + 419, $rebpos[1] + 508, $rebpos[0] + 419, $rebpos[1] + 508, 3421236, 3, 1, $rebtablelist[$x][1])) AND IsArray(PixelSearch($rebpos[0] + 451, $rebpos[1] + 514, $rebpos[0] + 451, $rebpos[1] + 514, 3421236, 3, 1, $rebtablelist[$x][1])) AND IsArray(PixelSearch($rebpos[0] + 472, $rebpos[1] + 513, $rebpos[0] + 472, $rebpos[1] + 513, 3421236, 3, 1, $rebtablelist[$x][1])) Then
							WinActivate($rebtablelist[$x][1])
							MouseClick("left", $rebpos[0] + 414, $rebpos[1] + 513, 1, 0)
							Sleep(500)
							handleipokeraddonwin()
							Sleep(500)
							handlextrawin()
						EndIf
					EndIf
				EndIf
			Next
		EndIf
		Sleep(500)
	EndFunc

	Func handlebodogarwindow()
		If WinExists("Auto Re-buy") Then
			Local $rebhndle = WinGetHandle("Auto Re-buy")
			If iswindowvisible($rebhndle) Then
				fconsolewrite("Auto Re-buy window found... handling it")
				Local $rebwinpos = WinGetPos($rebhndle)
				If IsArray($rebwinpos) Then
					$rebuyscreenshot += 1
					_screencapture_capturewnd(@ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg", $rebhndle)
					Local $rebuypic = @ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg"
					If GUICtrlRead($chknotifyrebuy) == $gui_checked Then
						emailnotification($rebuypic, "Tourney Rebuy")
					EndIf
					WinActivate($rebhndle)
					WinSetOnTop($rebhndle, "", 1)
					MouseClick("left", $rebwinpos[0] + 284, $rebwinpos[1] + 201, 1, 0)
					WinSetOnTop($rebhndle, "", 0)
					Sleep(50)
				EndIf
			EndIf
		EndIf
	EndFunc

	Func handlebodogaddonwindow()
		If WinExists("Add-on") Then
			Local $rebhndle = WinGetHandle("Add-on")
			If iswindowvisible($rebhndle) Then
				fconsolewrite("Add-on window found... handling it")
				Local $rebwinpos = WinGetPos($rebhndle)
				If IsArray($rebwinpos) Then
					$addonscreenshot += 1
					_screencapture_capturewnd(@ScriptDir & "\AddonScreenShot" & $addonscreenshot & ".jpg", $rebhndle)
					Local $addonpic = @ScriptDir & "\AddonScreenShot" & $addonscreenshot & ".jpg"
					If GUICtrlRead($chknotifyaddon) == $gui_checked Then
						emailnotification($addonpic, "Tourney Addon")
					EndIf
					WinActivate($rebhndle)
					WinSetOnTop($rebhndle, "", 1)
					MouseClick("left", $rebwinpos[0] + 124, $rebwinpos[1] + 202, 1, 0)
					WinSetOnTop($rebhndle, "", 0)
					Sleep(50)
				EndIf
			EndIf
		EndIf
	EndFunc

	Func handlerebuywin()
		Local $rebhndle
		If WinExists("RE-BUY") Then
			$rebhndle = WinGetHandle("RE-BUY")
			If iswindowvisible($rebhndle) Then
				$rebuyscreenshot += 1
				_screencapture_capturewnd(@ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg", $rebhndle)
				Local $rebuypic = @ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg"
				If GUICtrlRead($chknotifyrebuy) == $gui_checked Then
					emailnotification($rebuypic, "Tourney Rebuy")
				EndIf
				fconsolewrite("RE-BUY window found... handling it")
				WinActivate($rebhndle)
				WinSetOnTop($rebhndle, "", 1)
				ControlFocus($rebhndle, "", "[CLASS:Button; INSTANCE:1]")
				ControlClick($rebhndle, "", "[CLASS:Button; INSTANCE:1]", "left", 1)
				WinSetOnTop($rebhndle, "", 0)
				Sleep(50)
				Return
			EndIf
		EndIf
		Local $winlist = WinList()
		For $x = 1 To $winlist[0][0]
			$winpos = WinGetPos($winlist[$x][1])
			If IsArray($winlist[$x][1]) Then
				If $winpos[2] == 324 AND $winpos[3] == 255 Then
					$rebuyscreenshot += 1
					_screencapture_capturewnd(@ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg", $rebhndle)
					$rebuypic = @ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg"
					If GUICtrlRead($chknotifyrebuy) == $gui_checked Then
						emailnotification($rebuypic, "Tourney Rebuy")
					EndIf
					WinActivate($winlist[$x][1])
					WinSetOnTop($winlist[$x][1], "", 1)
					If PixelGetColor($winpos[0] + 53, $winpos[1] + 141, $winlist[$x][1]) <> 0 Then
						MouseClick("left", $winpos[0] + 53, $winpos[1] + 141, 1, 0)
					EndIf
					MouseClick("left", $winpos[0] + 212, $winpos[1] + 236, 1, 0)
				EndIf
			EndIf
		Next
	EndFunc

	Func handleeeerebuywindow()
		Local $winlist = WinList("User Message")
		For $x = 1 To $winlist[0][0]
			$winpos = WinGetPos($winlist[$x][1])
			If iswindowvisible($winlist[$x][1]) Then
				If $winpos[2] == 334 Then
					If $winpos[3] == 266 Then
						$rebuyscreenshot += 1
						_screencapture_capturewnd(@ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg", $winlist[$x][1])
						Local $rebuypic = @ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg"
						If GUICtrlRead($chknotifyrebuy) == $gui_checked Then
							emailnotification($rebuypic, "Tourney Rebuy")
						EndIf
						WinActivate($winlist[$x][1])
						WinSetOnTop($winlist[$x][1], "", 1)
						fconsolewrite("Rebuy Window Found")
						If GUICtrlRead($chkautorebuy) == $gui_checked Then
							MouseClick("left", $winpos[0] + 95, $winpos[1] + 242, 1, 0)
							Return True
						Else
							MouseClick("left", $winpos[0] + 237, $winpos[1] + 242, 1, 0)
							WinWaitClose($winlist[$x][1], "", 1)
							If WinExists($winlist[$x][1]) Then
								WinClose($winlist[$x][1])
								WinWaitClose($winlist[$x][1], "", 2)
							EndIf
							Return False
						EndIf
						WinWaitClose($winlist[$x][1], "", 1)
						If WinExists($winlist[$x][1]) Then
							If IsArray(PixelSearch($winpos[0] + 16, $winpos[1] + 95, $winpos[0] + 16, $winpos[1] + 95, 16777215, 5, 1, $winlist[$x][1])) AND IsArray(PixelSearch($winpos[0] + 166, $winpos[1] + 169, $winpos[0] + 166, $winpos[1] + 169, 1084638, 5, 1, $winlist[$x][1])) Then
								WinActivate($winlist[$x][1])
								WinSetOnTop($winlist[$x][1], "", 1)
								MouseClick("left", $winpos[0] + 165, $winpos[1] + 163, 1, 0)
								Return True
							EndIf
						EndIf
						Return True
					Else
						$rebuyscreenshot += 1
						_screencapture_capturewnd(@ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg", $winlist[$x][1])
						$rebuypic = @ScriptDir & "\RebuyScreenShot" & $rebuyscreenshot & ".jpg"
						If GUICtrlRead($chknotifyrebuy) == $gui_checked Then
							emailnotification($rebuypic, "Tourney Rebuy")
						EndIf
						WinActivate($winlist[$x][1])
						WinSetOnTop($winlist[$x][1], "", 1)
						fconsolewrite("Rebuy/Addon Window Found")
						If GUICtrlRead($chkautorebuy) == $gui_checked OR GUICtrlRead($chkaddon) == $gui_checked Then
							MouseClick("left", $winpos[0] + 95, $winpos[1] + 179, 1, 0)
							WinWaitClose($winlist[$x][1], "", 1)
							If WinExists($winlist[$x][1]) Then
								WinActivate($winlist[$x][1])
								WinSetOnTop($winlist[$x][1], "", 1)
								MouseClick("left", $winpos[0] + 165, $winpos[1] + 169, 1, 0)
								Return True
							EndIf
							Return True
						Else
							MouseClick("left", $winpos[0] + 237, $winpos[1] + 179, 1, 0)
							WinWaitClose($winlist[$x][1], "", 1)
							If WinExists($winlist[$x][1]) Then
								WinClose($winlist[$x][1])
								WinWaitClose($winlist[$x][1], "", 2)
							EndIf
							Return False
						EndIf
					EndIf
				EndIf
			EndIf
		Next
		Return False
	EndFunc

	Func handleaddonwin()
		Local $rebhndle
		If WinExists("Add-on") Then
			$rebhndle = WinGetHandle("Add-on")
			If iswindowvisible($rebhndle) Then
				$addonscreenshot += 1
				_screencapture_capturewnd(@ScriptDir & "\AddonScreenShot" & $addonscreenshot & ".jpg", $rebhndle)
				Local $addonpic = @ScriptDir & "\AddonScreenShot" & $addonscreenshot & ".jpg"
				If GUICtrlRead($chknotifyaddon) == $gui_checked Then
					emailnotification($addonpic, "Tourney Addon")
				EndIf
				fconsolewrite("Add-on window found... handling it")
				WinActivate($rebhndle)
				WinSetOnTop($rebhndle, "", 1)
				ControlFocus($rebhndle, "", "[CLASS:Button; INSTANCE:5]")
				ControlClick($rebhndle, "", "[CLASS:Button; INSTANCE:5]", "left", 1)
				WinSetOnTop($rebhndle, "", 0)
				Sleep(50)
			EndIf
		EndIf
	EndFunc

	Func checkmidnight()
		If @HOUR == "00" AND @MIN == "00" Then
			ConsoleWrite("Erasing Registered tournaments... its midnight" & @LF)
			Local $regsection = IniReadSection($inifile, "registered")
			If IsArray($regsection) AND $regsection[0][0] > 0 Then
				For $i = 1 To $regsection[0][0]
					IniDelete($inifile, "registered", $regsection[$i][0])
				Next
			EndIf
			updatelistview()
			$itstime = True
		EndIf
	EndFunc

	Func deleteregisteredlist()
		Local $itemcount = _guictrllistview_getitemcount($listschedule)
		ConsoleWrite("RegList ItemCount: " & $itemcount & @LF)
		If $itemcount > 0 Then
			For $x = 1 To $itemcount
				If $x <> "" Then
					_guictrllistview_deleteitem($listschedule, $x)
				EndIf
			Next
		EndIf
		_guictrllistview_deleteallitems($listschedule)
		ConsoleWrite("New RegList ItemCount: " & $itemcount & @LF)
	EndFunc

	Func itistime($ltrn)
		Local $trv
		$trv = StringSplit($ltrn, "~")
		If IsArray($trv) AND $trv[0] = 4 Then
			Local $currday = @MON & "/" & @MDAY
			Local $trv2 = StringSplit($trv[2], " ")
			If IsArray($trv2) AND $trv2[0] = 2 Then
				If $trv2[1] = $currday OR $trv2[1] = "00/00" OR $trv2[1] = "00/" & @MDAY OR $trv2[1] = @MON & "/00" Then
					Local $trv3 = StringSplit($trv2[2], ":")
					If IsArray($trv3) AND $trv3[0] == 2 Then
						Local $tourneytime = ($trv3[1] * 60) + $trv3[2]
						Local $currtimes = (@HOUR * 60) + @MIN
						If $tourneytime = $currtimes Then
							Return True
						ElseIf $tourneytime < $currtimes Then
							ConsoleWrite("TourneyTime < CurrentTime" & @LF)
							Local $trn2 = StringSplit($trn, "~")
							Local $newvalue = $trn2[1] & "~" & $trn2[2] & "~" & $trn2[3] & "~" & $trn2[4] & "~" & $trn2[5]
							If NOT StringInStr($trn2[2], "00/") AND NOT StringInStr($trn2[2], "/00") Then
								IniDelete($inifile, "toplayMTT", $newvalue)
								updatelistviewmtt()
								updatelistviewtoplaymtt()
								Sleep(1000)
								$trn = gettournmentmtt()
								$trn2 = StringSplit($trn, "~")
								$itstime = True
							Else
								ConsoleWrite("Not > 0" & @LF)
							EndIf
							$itstime = True
						EndIf
					Else
						If NOT IsArray($trv3) Then
							ConsoleWrite("Not Array: $trv3" & @LF)
						Else
							ConsoleWrite("$trv3[0]== " & $trv3[0] & @LF)
						EndIf
						Return False
					EndIf
				Else
					If $trv2[1] <> $currday Then
						ConsoleWrite("$trv3[0]<> " & $currday & @LF)
					ElseIf $trv2[1] <> "00/00" Then
						ConsoleWrite("1$trv2[1]== " & $trv2[1] & @LF)
					ElseIf $trv2[1] <> "00/" & @MDAY Then
						ConsoleWrite("2$trv2[1]== " & $trv2[1] & @LF)
					Else
						ConsoleWrite("3$trv2[1]== " & $trv2[1] & @LF)
					EndIf
					Return False
				EndIf
			Else
				If NOT IsArray($trv2) AND $trv2[0] = 2 Then
					ConsoleWrite("Not Array $trv2" & @LF)
				Else
					ConsoleWrite("$trv2[0] == " & $trv2[0] & @LF)
				EndIf
				Return False
			EndIf
		Else
			If NOT IsArray($trv) Then
				ConsoleWrite("Not Array $trv" & @LF)
			EndIf
			Return False
		EndIf
	EndFunc

	Func handleipokerrebuywin()
		Local $winlist = WinList()
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
			Next
		EndIf
	EndFunc

	Func handlerebuysuccessfulwin()
		Local $winlist = WinList()
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
			Next
		EndIf
	EndFunc

	Func handleipokeraddonwin()
		Local $winlist = WinList()
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
			Next
		EndIf
	EndFunc

	Func listtoplaymtt($ix)
		Local $selecteditem = _guictrllistview_getitemtextstring($listtoplaymtt, $ix)
		If StringLen($selecteditem) > 0 Then
			Local $sitem = StringSplit($selecteditem, "|")
			If $sitem[0] >= 4 Then
				If _guictrllistview_getitemchecked($listtoplaymtt, $ix) = 1 Then
					IniWrite($inifile, "toplayMTT", $sitem[2] & "~" & $sitem[3] & "~" & $sitem[4] & "~" & $sitem[5], "1")
				Else
					IniWrite($inifile, "toplayMTT", $sitem[2] & "~" & $sitem[3] & "~" & $sitem[4] & "~" & $sitem[5], "0")
				EndIf
			EndIf
		EndIf
	EndFunc

	Func gettournmentmtt()
		Local $rawtoplay = IniReadSection($inifile, "toplayMTT")
		If NOT IsArray($rawtoplay) Then Return ""
		Local $k = $rawtoplay[0][0]
		For $i = 1 To $k
			If $i > $k Then ExitLoop
			If $rawtoplay[$i][1] == 0 Then
				_arraydelete($rawtoplay, $i)
				$k = $k - 1
				$i = $i - 1
			EndIf
		Next
		$rawtoplay[0][0] = $k
		$k = $rawtoplay[0][0]
		For $i = 1 To $k
			If $i > $k Then ExitLoop
			Local $arr = StringSplit($rawtoplay[$i][0], "~")
			If IsArray($arr) AND $arr[0] > 0 Then
				Local $regtime = StringMid($arr[2], StringInStr($arr[2], " ") + 1)
				Local $alreadyreg = IniRead($inifile, "registered", $regtime & " " & $arr[3], "No")
				Local $regtime2 = StringReplace($regtime, ":", "")
				Local $localtime2 = @HOUR & "" & @MIN
				If $alreadyreg <> "No" OR $localtime2 > $regtime2 Then
					_arraydelete($rawtoplay, $i)
					$k = $k - 1
					$i = $i - 1
				ElseIf $alreadyreg == "No" Then
				Else
				EndIf
			Else
				ExitLoop
			EndIf
		Next
		$rawtoplay[0][0] = $k
		If $k > 0 Then
			Return $rawtoplay[1][0]
		Else
			Return ""
		EndIf
	EndFunc

	Func handlemessage()
		If WinExists("MESSAGE") Then
			Local $winlist = WinList("MESSAGE")
			For $x = 1 To $winlist[0][0]
				ControlFocus($winlist[$x][1], "", "[CLASS:Button; INSTANCE:1]")
				ControlClick($winlist[$x][1], "", "[CLASS:Button; INSTANCE:1]", "left", 1)
			Next
		EndIf
	EndFunc

	Func handlebuyin()
		If WinExists("REGISTER") Then
			Local $winlist = WinList("REGISTER")
			For $x = 1 To $winlist[0][0]
				ControlFocus($winlist[$x][1], "", "[CLASS:Button; INSTANCE:1]")
				ControlClick($winlist[$x][1], "", "[CLASS:Button; INSTANCE:1]", "left", 1)
			Next
		EndIf
	EndFunc

	Func handledisconnected()
		If WinExists("SERVER CONNECTION RE-ESTABLISHED") Then
			Local $winlist = WinList("SERVER CONNECTION RE-ESTABLISHED")
			For $x = 1 To $winlist[0][0]
				ControlFocus($winlist[$x][1], "", "[CLASS:Button; INSTANCE:1]")
				ControlClick($winlist[$x][1], "", "[CLASS:Button; INSTANCE:1]", "left", 1)
			Next
		EndIf
	EndFunc

	Func closenondeadpopup()
		Local $list = WinList("Leave table ?")
		If IsArray($list) Then
			For $x = 1 To $list[0][0]
				Local $winpos = WinGetPos($list[$x][1])
				If IsArray($winpos) Then
					WinActivate($list[$x][1])
					WinWaitActive($list[$x][1], "", 1)
					MouseClick("left", $winpos[0] + 252, $winpos[1] + 120, 1, 0)
					Return True
				EndIf
			Next
		EndIf
		Return False
	EndFunc

	Func closetablemtt($hwin)
		fconsolewrite("CloseTable: Start")
		If WinExists($hwin) AND $hwin <> 0 AND $hwin <> "" Then
			Local $tablename
			Local $getchipstitle = "[REGEXPTITLE:\AREGISTER\z]"
			$tablename = WinGetTitle($hwin)
			If IsArray($trn) Then
				If $trn[1] == "BNG" OR $trn[1] == "Betfair" OR $trn[1] == "WillHill" OR $trn[1] == "Paddy" OR $trn[1] == "Everest" OR $trn[1] == "Betfred" OR $trn[1] == "Netbet" OR $trn[1] == "Bet365" OR $trn[1] == "Sisal" OR $trn[1] == "Titan" OR $trn[1] == "Gutshot" Then
					Local $begtitle = StringLeft($tablename, StringInStr($tablename, "-") - 2)
				ElseIf WinExists($getchipstitle) Then
					WinClose($getchipstitle)
					WinWaitClose($getchipstitle, "", 2)
				EndIf
			EndIf
			For $z = 0 To 10
				fconsolewrite("CT: Close Table " & StringRegExpReplace($tablename, "As .*\z", "As [OpenHoldemStore.com]"))
				bodoghandletourneyfinishedwin()
				WinClose($hwin)
				WinWaitClose($hwin, "", 1)
				If GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "TruePoker" Then
					If closenondeadpopup() == True Then Return
				EndIf
				If NOT WinExists($hwin) Then ExitLoop
			Next
			If (GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Gutshot") Then
				If NOT WinExists($hwin) AND IsArray($trn) AND NOT WinExists($begtitle) Then
					fconsolewrite("CT: Subscript title: " & $begtitle)
					Local $arraysearch = farraysearch($satattables, $begtitle, 0, (UBound($satattables) - 1))
					If farraysearch($satattables, $begtitle, 0, (UBound($satattables) - 1)) <> -1 Then
						fconsolewrite("CT: Clearing from array: " & $satattables[$arraysearch])
						$satattables[$arraysearch] = ""
					EndIf
				EndIf
			EndIf
		EndIf
		Return NOT WinExists($hwin)
	EndFunc

	Func bodogregistertourneymtt($trn)
		Sleep(500)
		Local $lobbytitle = "[REGEXPTITLE:\A.*Lobby.*\z]"
		$hlobby = WinGetHandle($lobbytitle)
		movelobby($hlobby)
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		_winapi_setforegroundwindow($hlobby)
		WinWaitActive($hlobby, "", 1)
		Local $lobbypos = WinGetCaretPos()
		fconsolewrite("RT: Scanning Lobby:" & StringRegExpReplace(WinGetTitle($hlobby), "As .*\z", "As [OpenHoldemStore.com]"))
		$tourneyregok = False
		$sharkfound = False
		Local $range1 = 0
		Local $textcolor1
		Local $idstart = PixelSearch(227 + $lobbypos[0], 229 + $lobbypos[1], 999 + $lobbypos[0], 229 + $lobbypos[1], 16768942, 0, 1, $hlobby)
		If NOT IsArray($idstart) Then Return
		ConsoleWrite("ID Bar start = " & $idstart[0] & ", " & $idstart[1] & @LF)
		Local $idfinish = PixelSearch($idstart[0] + 2, $idstart[1], 999 + $lobbypos[0], $idstart[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("ID Bar finish = " & $idfinish[0] & ", " & $idfinish[1] & @LF)
		Local $idx2 = $idfinish[0] - 1
		Local $startstart = PixelSearch($idx2 + 1, 229 + $lobbypos[1], 999 + $lobbypos[0], 229 + $lobbypos[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($startstart) Then Return
		ConsoleWrite("Start Bar start = " & $startstart[0] & ", " & $startstart[1] & @LF)
		Local $startfinish = PixelSearch($startstart[0] + 2, $startstart[1], 999 + $lobbypos[0], $startstart[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Start Bar finish = " & $startfinish[0] & ", " & $startfinish[1] & @LF)
		Local $startx1 = $startstart[0] + 1
		Local $startx2 = $startfinish[0] - 1
		Local $tablecolumnbar = PixelSearch($startx2 + 1, 229 + $lobbypos[1], 999 + $lobbypos[0], 229 + $lobbypos[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($tablecolumnbar) Then Return
		ConsoleWrite("Table Bar start = " & $tablecolumnbar[0] & ", " & $tablecolumnbar[1] & @LF)
		Local $tablepixsearchid = PixelSearch($tablecolumnbar[0] + 2, $tablecolumnbar[1], 999 + $lobbypos[0], $tablecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Table Bar finish = " & $tablepixsearchid[0] & ", " & $tablepixsearchid[1] & @LF)
		Local $tablex1 = $tablecolumnbar[0] + 1
		Local $tablex2 = $tablepixsearchid[0] - 1
		Local $gamecolumnbar = PixelSearch($tablex2 + 1, 229 + $lobbypos[1], 999 + $lobbypos[0], 229 + $lobbypos[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($gamecolumnbar) Then Return
		ConsoleWrite("Game Bar start = " & $gamecolumnbar[0] & ", " & $gamecolumnbar[1] & @LF)
		Local $gamepixsearchid = PixelSearch($gamecolumnbar[0] + 2, $gamecolumnbar[1], 999 + $lobbypos[0], $gamecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Game Bar finish = " & $gamepixsearchid[0] & ", " & $gamepixsearchid[1] & @LF)
		Local $gamex2 = $gamepixsearchid[0] - 1
		Local $limitcolumnbar = PixelSearch($gamex2 + 1, 229 + $lobbypos[1], 999 + $lobbypos[0], 229 + $lobbypos[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($limitcolumnbar) Then Return
		ConsoleWrite("Limit Bar start = " & $limitcolumnbar[0] & ", " & $limitcolumnbar[1] & @LF)
		Local $limitpixsearchid = PixelSearch($limitcolumnbar[0] + 2, $limitcolumnbar[1], 999 + $lobbypos[0], $gamecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Limit Bar finish = " & $limitpixsearchid[0] & ", " & $limitpixsearchid[1] & @LF)
		Local $limitx2 = $limitpixsearchid[0] - 1
		Local $buyincolumnbar = PixelSearch($limitx2 + 1, 229 + $lobbypos[1], 999 + $lobbypos[0], 229 + $lobbypos[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($buyincolumnbar) Then Return
		ConsoleWrite("Buyin Bar start = " & $buyincolumnbar[0] & ", " & $buyincolumnbar[1] & @LF)
		Local $buyinpixsearchid = PixelSearch($buyincolumnbar[0] + 2, $buyincolumnbar[1], 999 + $lobbypos[0], $gamecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Buyin Bar finish = " & $buyinpixsearchid[0] & ", " & $buyinpixsearchid[1] & @LF)
		Local $buyinx1 = $buyincolumnbar[0] + 1
		Local $buyinx2 = $buyinpixsearchid[0] - 1
		Local $statuscolumnbar = PixelSearch($buyinx2 + 1, 229 + $lobbypos[1], 999 + $lobbypos[0], 229 + $lobbypos[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($statuscolumnbar) Then Return
		ConsoleWrite("Status Bar start = " & $statuscolumnbar[0] & ", " & $statuscolumnbar[1] & @LF)
		Local $statuspixsearchid = PixelSearch($statuscolumnbar[0] + 2, $statuscolumnbar[1], 999 + $lobbypos[0], $gamecolumnbar[1], 526344, 5, 1, $hlobby)
		ConsoleWrite("Status Bar finish = " & $statuspixsearchid[0] & ", " & $statuspixsearchid[1] & @LF)
		Local $statusx2 = $statuspixsearchid[0] - 1
		Local $playerscolumnbar = PixelSearch($statusx2 + 1, 229 + $lobbypos[1], 999 + $lobbypos[0], 229 + $lobbypos[1], 526344, 0, 1, $hlobby)
		If NOT IsArray($playerscolumnbar) Then Return
		ConsoleWrite("Players Bar start = " & $playerscolumnbar[0] & ", " & $playerscolumnbar[1] & @LF)
		ConsoleWrite("Players Bar finish = 996" & @LF)
		Local $pixy = 0
		Local $pixy2 = 0
		For $a = 0 To 23
			$textcolor1 = PixelGetColor($lobbypos[0] + 598, $lobbypos[1] + 252 + (20 * $a), $hlobby)
			$range1 = -0.1
			Local $pixsearch = False
			If $a = 0 Then
				For $y = 0 To 9
					For $z = 0 To 60
						If PixelGetColor(601 + $lobbypos[0] + $z, 243 + $lobbypos[1] + $y, $hlobby) <> $textcolor1 Then
							$pixsearch = True
							$pixy = 243 + ($y - 1)
							$pixy2 = 243 + ($y - 1) + 12
							ExitLoop
						EndIf
					Next
					If $pixsearch = True Then ExitLoop
				Next
			EndIf
			Local $id = _scanstring($tablex1, $pixy + ($a * 20), $tablex2, $pixy2 + ($a * 20), $textcolor1, $range1, $hlobby)
			Local $datescrape = _scanstring($startx1, $pixy + ($a * 20), $startx2, $pixy2 + ($a * 20), $textcolor1, -0.01, $hlobby)
			Local $buyinscrape = _scanstring($buyinx1, $pixy + ($a * 20), $buyinx2, $pixy2 + ($a * 20), $textcolor1, -0.01, $hlobby)
			$id = StringRegExpReplace($id, "\s", "")
			$datescrape = StringRegExpReplace($datescrape, "\s", "")
			$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
			Local $idscrape = $datescrape & " " & $id
			If $idscrape == "" Then
				fconsolewrite("RT: Nothing scanned.. checking next line")
				ContinueLoop
			EndIf
			Local $tournylobby = "[REGEXPTITLE:\A#.*\z]"
			If $idscrape == $trn[3] AND $buyinscrape == $trn[4] Then
				fconsolewrite("RT: Found: " & $idscrape & " | " & $buyinscrape)
				_winapi_setforegroundwindow($hlobby)
				WinWaitActive($hlobby, "", 2)
				MouseClick("left", $lobbypos[0] + 575, (253 + (20 * $a)) + $lobbypos[1], 2, 0)
				Sleep(2000)
				Sleep(300)
				WinWait($tournylobby, "", 3)
				If NOT WinExists($tournylobby) Then
					$idscrape = ""
					Return $idscrape
				EndIf
				If WinExists($tournylobby) Then
					Local $hnd = WinGetHandle($tournylobby)
					If NOT iswindowvisible($hnd) Then
						WinActivate($hnd)
						WinWaitActive($hnd, "", 1)
					EndIf
					If iswindowvisible($hnd) Then
						fconsolewrite("Found Tourney Lobby")
						Local $trnlobbypos = WinGetPos($hnd)
						Local $tabletit = WinGetTitle($hnd)
						$tabletit = StringMid($tabletit, StringInStr($tabletit, " ") + 1)
						$tabletit = StringRegExpReplace($tabletit, "\s", "")
						If NOT StringInStr($tabletit, $id) Then
							fconsolewrite("Tourney lobby title: " & $tabletit)
							fconsolewrite("TableName: " & $idscrape)
							fconsolewrite("Opened the wrong Tourney Lobby")
							WinKill($hnd)
							$idscrape = ""
							Return $idscrape
						EndIf
						Sleep(1000)
						If IsArray($trnlobbypos) Then
							MouseClick("left", $trnlobbypos[0] + 586, $trnlobbypos[1] + 522, 1, 0)
						EndIf
					EndIf
				Else
					fconsolewrite("Could not find Tourney Lobby")
					$idscrape = ""
					Return $idscrape
				EndIf
				Sleep(3000)
				WinActivate($hnd)
				WinWaitActive($hnd, "", 1)
				If PixelGetColor($trnlobbypos[0] + 213, $trnlobbypos[1] + 127, $hnd) == 12316313 AND PixelGetColor($trnlobbypos[0] + 303, $trnlobbypos[1] + 470, $hnd) == 16777215 Then
					Sleep(500)
					MouseClick("left", $trnlobbypos[0] + 328, $trnlobbypos[1] + 473)
					WinWait("REGISTRATION COMPLETE", "", 2)
					If WinExists("REGISTRATION COMPLETE") Then
						fconsolewrite("Registration complete window found")
						Local $regcompos = WinGetPos("REGISTRATION COMPLETE")
						MouseClick("left", $regcompos[0] + 394, $regcompos[1] + 113)
						$tourneyregok = True
						If WinExists($tournylobby) Then
							WinClose($tournylobby)
							WinWaitClose($tournylobby, "", 2)
						EndIf
						Return $idscrape
					Else
						If WinExists($tournylobby) Then
							WinClose($tournylobby)
							WinWaitClose($tournylobby, "", 2)
						EndIf
						$idscrape = ""
						Return $idscrape
					EndIf
				Else
					Local $bovlist = WinList("Bodog/Bovada")
					If IsArray($bovlist) Then
						For $y = 1 To $bovlist[0][0]
							Local $bovpos = WinGetPos($bovlist[$y][1])
							If IsArray($bovpos) Then
								If $bovpos[2] == 481 AND $bovpos[3] == 101 AND iswindowvisible($bovlist[$y][1]) Then
									WinKill($bovlist[$y][1])
									ExitLoop
								EndIf
							EndIf
						Next
					EndIf
					If WinExists($tournylobby) Then
						WinClose($tournylobby)
						WinWaitClose($tournylobby, "", 2)
					EndIf
					$idscrape = ""
					Return $idscrape
				EndIf
			ElseIf $idscrape <> $trn[3] Then
				fconsolewrite("Date/TourneyName scrape: " & $idscrape & " does not match scheduled date/name: " & $trn[3])
			Else
				fconsolewrite("Buyin scrape: " & $buyinscrape & " does not match scheduled buyin: " & $trn[4])
			EndIf
		Next
		$idscrape = ""
		Return $idscrape
	EndFunc

	Func movedtonewtablewindowexistsmtt()
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
			Next
		EndIf
	EndFunc

	Func checktable($winlist)
		Local $newtablehandle = -10
		Local $newtabletitle = ""
		Local $begtitle
		Local $tabletrnid
		Local $var
		Local $new
		For $a = 1 To $winlist[0][0]
			$newtabletitle = WinGetTitle($winlist[$a][1])
			If (GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Gutshot") Then
				$begtitle = StringLeft($newtabletitle, StringInStr($newtabletitle, "-") - 2)
				If $movedtonewtable = False Then
					tablesseated($begtitle)
					If NOT StringInStr($winlist[$a][0], "ohf") AND NOT StringInStr($winlist[$a][0], "oppl") AND NOT StringInStr(WinGetText($winlist[$a][0]), "Ready") AND NOT StringInStr($winlist[$a][0], "dll") AND NOT StringInStr($winlist[$a][0], "OpenHoldem") AND NOT StringInStr($winlist[$a][0], "openholdem") AND NOT StringInStr($winlist[$a][0], "Openholdem") Then
						If _arraysearch($htable, $winlist[$a][1]) == -1 AND iswindowvisible($winlist[$a][1]) Then
							fconsolewrite("ChkT: New table found - *" & WinGetTitle($winlist[$a][1]) & "*")
							WinActivate($winlist[$a][1])
							Sleep(500)
							$tabletrnid = StringLeft($newtabletitle, StringInStr($newtabletitle, "-") - 2)
							$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
							$begtitle = StringLeft($newtabletitle, StringInStr($newtabletitle, "-") - 2)
							$var = IniReadSection($inifile, "registered")
							If IsArray($var) Then
								For $i = 1 To $var[0][0]
									If StringInStr($var[$i][0], $tabletrnid) Then
										ConsoleWrite("True" & @LF)
										IniDelete($inifile, "registered", $var[$i][0])
										ExitLoop
									EndIf
								Next
							EndIf
							$waitingfortournament = False
							$newtablehandle = emptytablehandle()
							Sleep(2000)
							$htable[$newtablehandle] = $winlist[$a][1]
							$newtabletitle = $winlist[$a][0]
							tablemove($newtablehandle)
						Else
							ConsoleWrite("ChkT: State: " & WinGetState($winlist[$a][1]) & @LF)
						EndIf
					EndIf
				ElseIf $movedtonewtable = True Then
					If _arraysearch($htable, $winlist[$a][1]) == -1 AND iswindowvisible($winlist[$a][1]) AND WinExists($winlist[$a][1]) Then
						fconsolewrite("ChkT: Same table found " & WinGetTitle($winlist[$a][1]) & "*")
						$tabletrnid = StringLeft($newtabletitle, StringInStr($newtabletitle, "-") - 2)
						$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
						fconsolewrite("ChkT: IPoker Table: " & $tabletrnid)
						WinActivate($winlist[$a][1])
						Sleep(500)
						$waitingfortournament = False
						$newtablehandle = emptytablehandle()
						Sleep(2000)
						$htable[$newtablehandle] = $winlist[$a][1]
						$newtabletitle = $winlist[$a][0]
						tablemove($newtablehandle)
						Sleep(500)
						ExitLoop
					EndIf
				EndIf
			Else
				If _arraysearch($htable, $winlist[$a][1]) == -1 AND WinExists($winlist[$a][1]) Then
					fconsolewrite("ChkT: New table found - *" & WinGetTitle($winlist[$a][1]) & "*")
					WinActivate($winlist[$a][1])
					Sleep(500)
					$newtabletitle = WinGetTitle($winlist[$a][1])
					If StringInStr($newtabletitle, "Tournament#", 1, 1) Then
						$tabletrnid = StringStripWS(StringLeft($newtabletitle, StringInStr($newtabletitle, ":") - 1), 2)
						$tabletrnid = StringStripWS(StringMid($tabletrnid, StringInStr($tabletrnid, "#") + 1), 1)
						StringStripWS($tabletrnid, 1)
						StringStripWS($tabletrnid, 2)
						fconsolewrite("ChkT: Cake/RS Table: " & $tabletrnid)
					ElseIf StringInStr($newtabletitle, "Tournament", 1, 1) AND StringInStr($newtabletitle, "Table", 1, 1) Then
						$tabletrnid = StringLeft($newtabletitle, StringInStr($newtabletitle, "NL Hold'em") - 4)
						$tabletrnid = StringMid($tabletrnid, StringInStr($tabletrnid, "-") + 2)
						$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
						fconsolewrite("ChkT: Full Tilt Table: " & $tabletrnid)
					ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
						$tabletrnid = StringLeft($newtabletitle, StringInStr($newtabletitle, "Table") - 3)
						$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
						fconsolewrite("ACR Table: " & $tabletrnid)
					ElseIf StringInStr($newtabletitle, "ID #", 1, 1) Then
						$tabletrnid = StringMid($newtabletitle, StringInStr($newtabletitle, "#") + 1)
						$tabletrnid = StringLeft($tabletrnid, StringInStr($tabletrnid, "Table") - 2)
						StringStripWS($tabletrnid, 1)
						StringStripWS($tabletrnid, 2)
						$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
						fconsolewrite("ChkT: 888Poker Table: " & $tabletrnid)
						eeehandletourneystartwin()
					ElseIf StringInStr($newtabletitle, "Hold'em -", 1, 1) AND StringInStr($newtabletitle, "Table #", 1, 1) Then
						$new = StringSplit($newtabletitle, "(", 1)
						If IsArray($new) Then
							$tabletrnid = $new[1]
						Else
							Return
						EndIf
						$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
						fconsolewrite("ChkT: Bwin/Party Table: " & $tabletrnid)
						closelobbies()
					ElseIf StringInStr($newtabletitle, "Table #", 1, 1) Then
						$new = StringSplit($newtabletitle, "No", 1)
						If IsArray($new) Then
							$tabletrnid = $new[1]
						Else
							Return
						EndIf
						$tabletrnid = StringTrimRight($tabletrnid, 2)
						$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
						If StringInStr($tabletrnid, ",") Then
							$tabletrnid = StringMid($tabletrnid, StringInStr($tabletrnid, ",") + 1)
						EndIf
						fconsolewrite("ChkT: Ongame Table: " & $tabletrnid)
					ElseIf StringInStr($newtabletitle, "Unibet - Multi Table", 1, 1) Then
						Local $newtabletitlearr = StringSplit($newtabletitle, "]")
						If IsArray($newtabletitlearr) Then
							ConsoleWrite($newtabletitlearr[1] & @LF)
							ConsoleWrite($newtabletitlearr[2] & @LF)
							$tabletrnid = StringMid($newtabletitlearr[2], StringInStr($newtabletitlearr[2], " - ") + 3)
							$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
							ConsoleWrite($tabletrnid & @LF)
						EndIf
						fconsolewrite("ChkT: Unibet Table: " & $tabletrnid)
					Else
						$tabletrnid = StringMid($newtabletitle, StringInStr($newtabletitle, "-") + 2)
						$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
						$tabletrnid = StringRegExpReplace($tabletrnid, "\s", "")
						fconsolewrite("ChkT: Bodog/Bovada Table: " & $tabletrnid)
					EndIf
					$var = IniReadSection($inifile, "registered")
					If IsArray($var) Then
						For $i = 1 To $var[0][0]
							If StringInStr($var[$i][1], $tabletrnid) OR StringInStr($var[$i][0], $tabletrnid) Then
								ConsoleWrite("ChkT: True deleting from Registered" & @LF)
								IniDelete($inifile, "registered", $var[$i][0])
								updatelistview()
								ExitLoop
							EndIf
						Next
					EndIf
					$waitingfortournament = False
					$newtablehandle = emptytablehandle()
					Sleep(2000)
					$htable[$newtablehandle] = $winlist[$a][1]
					$newtabletitle = $winlist[$a][0]
					tablemove($newtablehandle)
					tableresize()
					Sleep(500)
				EndIf
			EndIf
		Next
	EndFunc

	Func bodoghandletourneystartwin()
		If WinExists("TOURNAMENT START") Then
			fconsolewrite("Tournament Started Window Found... closing now")
			WinKill("TOURNAMENT START")
		EndIf
	EndFunc

	Func bodogresize()
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			Local $list = bodogtablelist()
			If IsArray($list) Then
				For $x = 0 To $list[0][0]
					If $list[$x][0] <> 0 AND $list[$x][0] <> -10 AND $list[$x][0] <> "" AND NOT StringInStr(WinGetTitle($list[$x][1]), "oppl") AND NOT StringInStr(WinGetTitle($list[$x][1]), "ohf") AND NOT StringInStr(WinGetTitle($list[$x][1]), "Poker Lobby") AND NOT StringInStr(WinGetTitle($list[$x][1]), "SciTE") Then
						Local $pos = WinGetPos($list[$x][1])
						If IsArray($pos) AND iswindowvisible($list[$x][1]) Then
							If $pos[2] <> 812 OR $pos[3] <> 648 Then
								ConsoleWrite("Bodog Resizing table: " & WinGetTitle($list[$x][1]) & @LF)
								WinMove($list[$x][1], "", $pos[0] + 638, $pos[1] + 508, Default, Default, 0)
							EndIf
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func checkbotcrash()
		Local $winlist = WinList("", "&Send information")
		Local $winpos
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) AND $winpos[2] < 700 AND $winpos[3] < 500 AND iswindowvisible($winlist[$x][1]) AND NOT StringInStr(WinGetTitle($winlist[$x][1]), "SciTE") Then
					ConsoleWrite("Bot crashed" & @LF)
					WinActivate($winlist[$x][1])
					WinWaitActive($winlist[$x][1], "", 1)
					MouseClick("left", $winpos[0] + 376, $winpos[1] + 130, 1, 0)
					WinWaitClose($winlist[$x][1], "", 1)
					Sleep(5000)
					If NOT WinExists($winlist[$x][1]) Then
						closeallbots()
						Return
					EndIf
				EndIf
			Next
		EndIf
		Local $winlist2 = WinList("", "&Close program")
		If IsArray($winlist2) Then
			For $x = 1 To $winlist2[0][0]
				$winpos = WinGetPos($winlist2[$x][1])
				If IsArray($winpos) AND $winpos[2] < 700 AND $winpos[3] < 500 AND iswindowvisible($winlist2[$x][1]) AND NOT StringInStr(WinGetTitle($winlist[$x][1]), "SciTE") Then
					ConsoleWrite("Bot crashed" & @LF)
					WinActivate($winlist2[$x][1])
					WinWaitActive($winlist2[$x][1], "", 1)
					MouseClick("left", $winpos[0] + 304, $winpos[1] + 130, 1, 0)
					WinWaitClose($winlist2[$x][1], "", 1)
					Sleep(5000)
					If NOT WinExists($winlist2[$x][1]) Then
						closeallbots()
						Return
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Func startautopilotmtt($lobbyname)
		$hlobby = WinGetHandle($lobbyname)
		Sleep(500)
		$livebots = 0
		Local $waitingfortournament = False
		For $a = 0 To 14
			$htable[$a] = -10
		Next
		Local $lastmessage = ""
		Local $trnpassed
		Local $tournitemspassed = gettournmentmtt()
		$registeron = True
		$tournitemspassed = StringSplit($tournitemspassed, "~")
		$autopostimer = _timer_init()
		Local $brunning = False
		Local $consolecount = 0
		$itstime = True
		Local $memstats = MemGetStats()
		fconsolewrite(@LF & "% in use: " & $memstats[0])
		If Number($memstats[0]) > 25 Then
			_reducememory()
		EndIf
		While $registeron == True
			$waitingfortournament = False
			$run = True
			$livebots = 0
			$brunning = False
			$rebuytimer = 0
			While $run
				$brunning = True
				checkbotcrash()
				ohcheckbotstotables()
				ConsoleWrite(".")
				$consolecount += 1
				If $consolecount > 100 Then
					ConsoleWrite(@LF)
					$consolecount = 0
				EndIf
				Local $lastjointourneymessage = ""
				If GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Netbet" Then
					handlebegad()
				EndIf
				Local $sitelist
				checkdeadtables()
				closelobbies()
				If _timer_diff($statstimer) >= 40 * 1000 Then
					$memstats = MemGetStats()
					fconsolewrite(@LF & "% in use: " & $memstats[0])
					If Number($memstats[0]) > 25 Then
						_reducememory()
					EndIf
					$statstimer = _timer_init()
				EndIf
				If GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
					$sitelist = tablelistmtt()
					If IsArray($sitelist) AND $sitelist[0][0] > 0 Then
						finaltabledealwin()
						bwinfinaltabledealwin()
						bwinxtrawin()
						tourneyfinishedwin()
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" Then
					$sitelist = tablelistmtt()
				ElseIf GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Titan" Then
					$sitelist = tablelistmtt()
					If IsArray($sitelist) AND $sitelist[0][0] > 0 Then
						If GUICtrlRead($chkautorebuy) == $gui_checked Then
							checkautorebuy()
							handleipokerrebuywin()
							handlerebuysuccessfulwin()
						EndIf
						If GUICtrlRead($chkaddon) == $gui_checked Then
							checkaddon()
							handleipokeraddonwin()
						EndIf
						handlextrawin()
						bngcheckannouncements($htable, $hoh)
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "Walker" Then
					$sitelist = tablelistmtt()
					If IsArray($sitelist) AND $sitelist[0][0] > 0 Then
						If GUICtrlRead($chkautorebuy) == $gui_checked Then
						EndIf
						tourneyfinishedwin()
						carbonsowin()
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
					$sitelist = tablelistmtt()
					If IsArray($sitelist) AND $sitelist[0][0] > 0 Then
						If GUICtrlRead($chkautorebuy) == $gui_checked Then
							checkautorebuy()
							checkaddon()
							handleeeearwindow()
							handleeeeconfirmarwindow()
						EndIf
						tableresize()
						If rebuyerrorwin() Then
							$rebuytimer = 0
						EndIf
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
					$sitelist = tablelistmtt()
					If IsArray($sitelist) AND $sitelist[0][0] > 0 Then
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "FullTilt" Then
					$sitelist = tablelistmtt()
					If IsArray($sitelist) AND $sitelist[0][0] > 0 Then
						tourneyfinishedwin()
					EndIf
				Else
					$sitelist = bodogtablelistmtt()
					If IsArray($sitelist) AND $sitelist[0][0] > 0 Then
						If GUICtrlRead($chkautorebuy) == $gui_checked Then
							checkautorebuy()
							checkaddon()
							handlebodogaddonwindow()
							handlebodogarwindow()
						EndIf
						handlextrawin()
						bodoghandletourneystartwin()
						tourneyfinishedwin()
					EndIf
				EndIf
				Local $wincount = 0
				bodogresize()
				$wincount = tablecount()
				If GUICtrlRead($chkautorebuy) == $gui_checked Then
					checkautorebuy()
					handlerebuywin()
					handleaddonwin()
				EndIf
				Local $trn2
				If $wincount < 22 Then
					If numtables($htable) <= GUICtrlRead($numbotscmb) Then
						If tablecount() <= numtables($htable) Then
							checkmidnight()
							If $itstime = True Then
								$trn = gettournmentmtt()
								$trn2 = StringSplit($trn, "~")
							EndIf
							If $wincount < GUICtrlRead($numbotscmb) Then
								If itistime($trn) Then
									ConsoleWrite("Time to register" & @LF)
									If numtables($htable) < GUICtrlRead($numbotscmb) Then
										$itstime = True
										fconsolewrite("Stable - Adding new tournament")
										If $trn2[1] == "BNG" OR $trn2[1] == "Betfred" OR $trn2[1] == "Betfair" OR $trn2[1] == "WillHill" OR $trn2[1] == "Netbet" OR $trn2[1] == "Bet365" OR $trn2[1] == "Sisal" OR $trn2[1] == "Titan" OR $trn2[1] == "Gutshot" Then
											If bngregistertourneymtt($trn2) Then
												$tourneyregok = True
											Else
												$tourneyregok = False
											EndIf
										ElseIf $trn2[1] == "888Poker" Then
											If eeeregistertourneymtt($trn2) Then
												$tourneyregok = True
											Else
												$tourneyregok = False
											EndIf
										ElseIf $trn2[1] == "ACR" OR $trn2[1] == "Betcoin" OR $trn2[1] == "Blackchip" Then
											If acrregistertourneymtt($trn2) Then
												$tourneyregok = True
											Else
												$tourneyregok = False
											EndIf
										ElseIf $trn2[1] == "FullTilt" Then
											If ftregistertourneymtt($trn2) Then
												$tourneyregok = True
											Else
												$tourneyregok = False
											EndIf
										ElseIf $trn2[1] == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
											If bwinregistertourneymtt($trn2) Then
												$tourneyregok = True
											Else
												$tourneyregok = False
											EndIf
										ElseIf $trn2[1] == "Unibet" Then
											If unibetregistertourneymtt($trn2) Then
												$tourneyregok = True
											Else
												$tourneyregok = False
											EndIf
										ElseIf $trn2[1] == "Carbon" Then
											If carbonregistertourneymtt($trn2) Then
												$tourneyregok = True
											Else
												$tourneyregok = False
											EndIf
										ElseIf $trn2[1] == "Bodog/Bovada" OR $trn2[1] == "Ignition" Then
											Local $tablename = bodogregistertourneymtt($trn2)
											If $tablename <> "" Then
												$tourneyregok = True
											Else
												$tourneyregok = False
											EndIf
										EndIf
										Sleep(500)
										If $tourneyregok Then
											ConsoleWrite("Tourney successfully registered" & @LF)
											$tourneycount += 1
											If IsArray($tournitemspassed) AND $tournitemspassed[0] >= 4 Then
												Local $tournpassed = StringMid($tournitemspassed[2], StringInStr($tournitemspassed[2], " ") + 1)
												Local $alreadythere = IniRead($inifile, "registered", $tournpassed & " " & $tournitemspassed[3], "No")
												If $alreadythere <> "No" Then
													ConsoleWrite("+*1: " & $tournpassed & " " & $tournitemspassed[3] & @LF)
													$tournitemspassed = gettournmentmtt()
													$registeron = True
													$tournitemspassed = StringSplit($tournitemspassed, "~")
												Else
													ConsoleWrite("*1 $tournItemsPassed[3]: " & $tournitemspassed[3] & @LF)
												EndIf
												If StringInStr($trn2[2], "00/") > 0 OR StringInStr($trn2[2], "/00") > 0 Then
													$trnpassed = StringMid($trn2[2], StringInStr($trn2[2], " ") + 1)
													ConsoleWrite("+*2: " & $trnpassed & " " & $trn2[3] & @LF)
													IniWrite($inifile, "registered", $trnpassed & " " & $trn2[3], $trn2[1] & "~" & StringReplace(StringReplace($trn2[2], "00/", @MON & "/"), "/00", "/" & @MDAY) & "~" & $trn2[4])
												Else
													$trnpassed = StringMid($trn2[2], StringInStr($trn2[2], " ") + 1)
													ConsoleWrite("+*3: " & $trnpassed & " " & $trn2[3] & @LF)
													IniWrite($inifile, "registered", $trnpassed & " " & $trn2[3], $trn2[1] & "~" & $trn2[2] & "~" & $trn2[4])
													Local $newvalue = $trn2[1] & "~" & $trn2[2] & "~" & $trn2[3] & "~" & $trn2[4]
													IniDelete($inifile, "toplayMTT", $newvalue)
													$trn = gettournmentmtt()
													$trn2 = StringSplit($trn, "~")
												EndIf
											Else
												If NOT IsArray($tournitemspassed) Then
													ConsoleWrite("Not array $tournItemsPassed" & @LF)
												Else
													ConsoleWrite("$tournItemsPassed[0]: " & $tournitemspassed[0] & @LF)
													$tournitemspassed = gettournmentmtt()
													$tournitemspassed = StringSplit($tournitemspassed, "~")
												EndIf
											EndIf
											updatelistviewmtt()
											updatelistviewtoplaymtt()
										Else
											$waitingfortournament = False
										EndIf
									Else
										$itstime = False
										If StringInStr($trn2[2], "00/") > 0 OR StringInStr($trn2[2], "/00") > 0 Then
											$trnpassed = StringMid($trn2[2], StringInStr($trn2[2], " ") + 1)
											ConsoleWrite("+*2: " & $trnpassed & " " & $trn2[3] & @LF)
											IniWrite($inifile, "registered", $trnpassed & " " & $trn2[3], $trn2[1] & "~" & StringReplace(StringReplace($trn2[2], "00/", @MON & "/"), "/00", "/" & @MDAY) & "~" & $trn2[4])
										Else
											$trnpassed = StringMid($trn2[2], StringInStr($trn2[2], " ") + 1)
											ConsoleWrite("+*3: " & $trnpassed & " " & $trn2[3] & @LF)
											IniWrite($inifile, "registered", $trnpassed & " " & $trn2[3], $trn2[1] & "~" & $trn2[2] & "~" & $trn2[4])
											$newvalue = $trn2[1] & "~" & $trn2[2] & "~" & $trn2[3] & "~" & $trn2[4]
											IniDelete($inifile, "toplayMTT", $newvalue)
											$trn = gettournmentmtt()
											$trn2 = StringSplit($trn, "~")
										EndIf
										updatelistviewmtt()
										updatelistviewtoplaymtt()
									EndIf
								Else
									$trn = gettournmentmtt()
									$trn2 = StringSplit($trn, "~")
									$itstime = False
									If StringInStr($trn2, "~") Then
										$lastjointourneymessage = "Not time to register yet.  Will Register at: " & $trn2[2]
									Else
										$lastjointourneymessage = "All finished with registrations"
										If $tourneycount < 0 Then $tourneycount = 0
										If $tourneycount == 0 Then
											Local $regsection = IniReadSection($inifile, "registered")
											If IsArray($regsection) AND $regsection[0][0] > 0 Then
												For $i = 1 To $regsection[0][0]
													IniDelete($inifile, "registered", $regsection[$i][0])
												Next
											EndIf
											updatelistviewmtt()
											$itstime = True
										EndIf
									EndIf
								EndIf
							Else
								$lastjointourneymessage = ("Not starting new tournament because of max simultaneous bots reached.")
							EndIf
						Else
							$lastjointourneymessage = "Not starting new tournament because some tables do not have handles."
						EndIf
					Else
						If $livebots < 0 Then $livebots = 0
						$lastjointourneymessage = "Not starting new tournament because we have more tables(" & numtables($htable) & ") than bots(" & botcount() & ") connected"
						ConsoleWrite("NumTables: " & numtables($htable) & " bots: " & botcount() & @LF)
					EndIf
				Else
					$lastjointourneymessage = ("Not starting new tournament because we have a max 6 tourneys playing")
				EndIf
				If $lastmessage <> $lastjointourneymessage Then
					$lastmessage = $lastjointourneymessage
					fconsolewrite($lastjointourneymessage)
				EndIf
				Local $winlist = tablelistmtt()
				closelobbies()
				If GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
					bwinhandleidle()
				EndIf
				If $winlist[0][0] > numtables($htable) Then
					fconsolewrite("ML: Table Count: " & $winlist[0][0] & " > Handles: " & numtables($htable))
					$waitingfortournament = False
					If IsArray($winlist) AND $winlist[0][0] > 0 Then
						ConsoleWrite("Tourney Found" & @LF)
						checktable($winlist)
						If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" Then
							bnghandlelosttables()
							checkautorebuy()
						EndIf
					EndIf
				EndIf
				If WinExists("RESULTS") AND iswindowvisible("RESULTS") Then
					fconsolewrite("Closing RESULTS window")
					Local $hannouncement = WinGetHandle("RESULTS")
					ControlFocus($hannouncement, "", "[CLASS:Button; INSTANCE:1]")
					ControlClick($hannouncement, "", "[CLASS:Button; INSTANCE:1]", "left", 1)
					WinWaitClose("RESULTS", "", 5)
				EndIf
				Sleep(2500)
				checkdeadtables()
			WEnd
			If $brunning Then
				$brunning = False
			Else
				Sleep(5000)
			EndIf
		WEnd
		While tablecount() > 0
			checkdeadtables()
		WEnd
		fconsolewrite("SAP: Done:", $waitingfortournament, numtables($htable))
		exitevent()
	EndFunc

	Func carbonregistertourneymtt($trn)
		fconsolewrite("CarbRT Begin")
		$nam1 = "CB"
		Local $lobbytitle
		If GUICtrlRead($cmbsite) == "Carbon" Then
			$lobbytitle = "[REGEXPTITLE:\A.*CarbonPoker.*Connected.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Walker" Then
			$lobbytitle = "[REGEXPTITLE:\A.*Walker.*-.*\z]"
		Else
			$lobbytitle = "[REGEXPTITLE:\A.*Black Chip.*-.*\z]"
		EndIf
		$hlobby = WinGetHandle($lobbytitle)
		Sleep(500)
		$tourneyregok = False
		Local $tablename = ""
		Local $buyin
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		WinWaitActive($hlobby, "", 2)
		Local $off = WinGetPos($hlobby)
		WinActivate($hlobby)
		Local $trn3 = $trn
		SendKeepActive($hlobby)
		Send("{HOME}")
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $a = 0 To 21
				Local $textcolor = PixelGetColor($off[0] + 693, $off[1] + 208 + (22 * $a), $hlobby)
				$buyin = _scanstringwithoutscreenshot(749, 203 + (22 * $a), 802, 213 + (22 * $a), $textcolor, -0.01, $hlobby)
				$buyin = StringRegExpReplace($buyin, "\s", "")
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					ConsoleWrite("Text Color: " & $textcolor & @LF)
					ContinueLoop
				EndIf
				$buyin = StringRegExpReplace($buyin, "\s", "")
				If $trn[4] <> $buyin Then
					fconsolewrite($buyin & "<>" & $trn[4])
					ContinueLoop
				Else
					fconsolewrite("Buyin match at line " & $a + 1)
				EndIf
				$tablename = _scanstringwithoutscreenshot(370, 203 + (22 * $a), 620, 213 + (22 * $a), $textcolor, -0.01, $hlobby)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("Carbon Reg TableName: " & $tablename)
				Local $timescrape = _scanstringwithoutscreenshot(277, 203 + (22 * $a), 368, 213 + (22 * $a), $textcolor, -0.01, $hlobby)
				$timescrape = StringRegExpReplace($timescrape, "\s", "")
				If StringInStr($timescrape, ":") Then
					$timescrape = StringRight($timescrape, StringInStr($timescrape, ":") - 3)
				EndIf
				Local $idscrape
				$idscrape = $timescrape & $tablename
				If $idscrape == $trn3[3] AND $buyin == $trn3[4] Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $winpos[0] + 449, 206 + $winpos[1] + (22 * $a), 1, 1)
					MouseClick("right", $winpos[0] + 449, 206 + $winpos[1] + (22 * $a), 1, 1)
					WinWait("[REGEXPCLASS:\A#32768\z]", "", 2)
					If WinExists("[REGEXPCLASS:\A#32768\z]") AND iswindowvisible("[REGEXPCLASS:\A#32768\z]") Then
						Local $menupos = WinGetPos("[REGEXPCLASS:\A#32768\z]")
						MouseMove($menupos[0] + 35, $menupos[1] + 40, 1)
						MouseDown("left")
						Sleep(300)
						MouseUp("left")
					Else
						Return
					EndIf
					Sleep(1000)
					Sleep(300)
					WinWait("Tournament Registration", "", 2)
					If WinExists("Tournament Registration") AND iswindowvisible("Tournament Registration") Then
						WinActivate("Tournament Registration")
						Local $buyinpos = WinGetPos("Tournament Registration")
						If IsArray($buyinpos) Then
							MouseClick("left", $buyinpos[0] + 323, $buyinpos[1] + 268, 1, 0)
						EndIf
					Else
						fconsolewrite("Buyin window not found")
						$tourneyregok = False
						$tablename = ""
						Return False
					EndIf
					WinWait("Tournament Registration Success", "", 2)
					If WinExists("Tournament Registration Success") AND iswindowvisible("Tournament Registration Success") Then
						WinActivate("Tournament Registration Success")
						Local $regpos = WinGetPos("Tournament Registration")
						If IsArray($regpos) Then
							MouseClick("left", $regpos[0] + 406, $regpos[1] + 223, 1, 0)
							WinWaitClose("Tournament Registration Success", "", 1)
							If WinExists("Tournament Registration Success") Then
								WinClose("Tournament Registration Success")
							EndIf
						EndIf
						$tourneyregok = True
						Return True
					Else
						fconsolewrite("Registration unsuccessful")
						$tourneyregok = False
						Return False
					EndIf
				ElseIf $trn3[4] <> $buyin Then
					fconsolewrite("AT: Final Buyins do not match")
					ContinueLoop
				Else
					fconsolewrite("AT: ID does not match")
					ConsoleWrite("ID: " & $idscrape & " / " & $trn3[3] & @LF)
				EndIf
			Next
			Sleep(1500)
		Else
			ConsoleWrite("Not Array" & @LF)
		EndIf
		Return False
	EndFunc

	Func bwinregistertourneymtt($trn)
		fconsolewrite("PartyGaming RT Begin")
		$nam1 = "BW"
		Sleep(500)
		Local $lobbytitle
		If GUICtrlRead($cmbsite) == "Bwin" Then
			$lobbytitle = "[REGEXPTITLE:\Abwin.*Lobby.*\z]"
		Else
			$lobbytitle = "[REGEXPTITLE:\Apartypoker.*Lobby.*\z]"
		EndIf
		$hlobby = WinGetHandle($lobbytitle)
		$tourneyregok = False
		Local $lobbyitemcount
		Local $tablename = ""
		Local $buyin
		Local $line
		WinActivate($hlobby)
		WinWaitActive($hlobby, "", 2)
		Local $off = WinGetPos($hlobby)
		WinActivate($hlobby)
		Local $trn3 = $trn
		Local $tableid
		Local $gamelistview = "SysListView321"
		Local $listviewhandle = ControlGetHandle($hlobby, "", $gamelistview)
		$lobbyitemcount = ControlListView($hlobby, "", $gamelistview, "GetItemCount")
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $line = 0 To $lobbyitemcount - 1 Step +1
				$tablename = ControlListView($hlobby, "", $gamelistview, "GetText", $line, 1)
				$tableid = ControlListView($hlobby, "", $gamelistview, "GetText", $line, 9)
				$buyin = ControlListView($hlobby, "", $gamelistview, "GetText", $line, 4)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				$buyin = StringRegExpReplace($buyin, "\s", "")
				Local $id = ControlListView($hlobby, "", $gamelistview, "GetText", $line, 0)
				$id = StringRegExpReplace($id, "\s", "")
				$id = StringMid($id, StringInStr($id, "-") + 3)
				$tablename = String($id) & String($tablename)
				ConsoleWrite("TableName: " & $tablename & "  -  Buyin: " & $buyin & @LF)
				If $tablename == $trn3[3] AND $buyin == $trn3[4] Then
					ConsoleWrite("Buyin and Tablename match" & @LF)
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					Sleep(500)
					_guictrllistview_clickitem($listviewhandle, $line, "left", False, 2)
					Sleep(500)
					WinWait("[REGEXPTITLE:\A.*Tournament lobby.*\z]", "", 5)
					If WinExists("[REGEXPTITLE:\A.*Tournament lobby.*\z]") AND iswindowvisible("[REGEXPTITLE:\A.*Tournament lobby.*\z]") Then
						Local $tn2handle = WinGetHandle("[REGEXPTITLE:\A.*Tournament lobby.*\z]")
						Local $tn2pos = WinGetPos($tn2handle)
					Else
						fconsolewrite("Tourney Lobby not found... Re-scanning lobby...")
						ContinueLoop
					EndIf
					Local $tabletit = WinGetTitle($tn2handle)
					$tabletit = StringMid($tabletit, StringInStr($tabletit, "#") + 1)
					$tabletit = StringLeft($tabletit, StringInStr($tabletit, ")") - 1)
					If $tableid <> $tabletit Then
						fconsolewrite("TableName does not match: " & $id & " = " & $tabletit)
						Return
					Else
						fconsolewrite("TableName match: " & $id & " = " & $tabletit)
					EndIf
					$tn2pos = WinGetPos($tn2handle)
					WinActivate($tn2handle)
					MouseMove($tn2pos[0] + 261, 331 + $tn2pos[1], 1)
					MouseDown("left")
					Sleep(400)
					MouseUp("left")
					Local $winp
					WinWait("[REGEXPCLASS:\A#32770\z]", "Buy-in", 6)
					If WinExists("[REGEXPCLASS:\A#32770\z]", "Buy-in") Then
						fconsolewrite("Tournament Registration found")
						Local $treghnd = WinGetHandle("[REGEXPCLASS:\A#32770\z]", "Buy-in")
						WinActivate($treghnd)
						Local $tregpos = WinGetPos($treghnd)
						MouseClick("left", $tregpos[0] + 259, 115 + $tregpos[1], 1, 0)
						Sleep(500)
						Local $cwhnd
						Local $cwpos
						If GUICtrlRead($cmbsite) == "Bwin" Then
							WinWait("[REGEXPCLASS:\A#32770\z]", "Registration successful", 6)
							If WinExists("[REGEXPCLASS:\A#32770\z]", "Registration successful") Then
								$winp = WinGetPos("[REGEXPCLASS:\A#32770\z]", "Registration successful")
								If IsArray($winp) AND $winp[2] == 340 AND $winp[3] == 164 Then
									fconsolewrite("Registration successful Window found")
									$cwhnd = WinGetHandle("", "Registration successful")
									WinActivate($cwhnd)
									$cwpos = WinGetPos($cwhnd)
									Sleep(500)
									MouseClick("left", $cwpos[0] + 293, 138 + $cwpos[1], 1, 0)
									If WinExists($cwhnd) AND iswindowvisible($cwhnd) Then
										WinClose($cwhnd)
									EndIf
									$tourneyregok = True
									Return True
								EndIf
							EndIf
						Else
							WinWait("[REGEXPCLASS:\A#32770\z]", "Registration successful", 6)
							If WinExists("[REGEXPCLASS:\A#32770\z]", "Registration successful") Then
								$winp = WinGetPos("[REGEXPCLASS:\A#32770\z]", "Registration successful")
								If IsArray($winp) AND $winp[2] == 340 AND $winp[3] == 164 Then
									fconsolewrite("Registration successful Window found")
									$cwhnd = WinGetHandle("[REGEXPCLASS:\A#32770\z]", "Registration successful")
									WinActivate($cwhnd)
									$cwpos = WinGetPos($cwhnd)
									Sleep(500)
									MouseClick("left", $cwpos[0] + 293, 138 + $cwpos[1], 1, 0)
									If WinExists($cwhnd) AND iswindowvisible($cwhnd) Then
										WinClose($cwhnd)
									EndIf
									$tourneyregok = True
									Return True
								EndIf
							EndIf
						EndIf
					Else
						fconsolewrite("Tournament Registration Not found")
						Local $txt = WinGetText($hlobby)
						If StringInStr($txt, "Unregister") OR WinExists("", "Do you really want to un-register from this tournament?") Then
							fconsolewrite("Already registered to tourney")
							Local $arhnd = WinGetHandle("", "Do you really want to un-register from this tournament?")
							Local $arpos = WinGetPos($arhnd)
							WinActivate($arhnd)
							WinWaitActive($arhnd, "", 2)
							If IsArray($arpos) Then
								MouseClick("left", $arpos[0] + 279, 106 + $arpos[1], 1, 0)
							EndIf
							$tourneyregok = True
							Return True
						EndIf
						$tourneyregok = False
						$tablename = ""
						Return False
					EndIf
				ElseIf $trn[2] <> $buyin Then
					fconsolewrite("AT: Final Buyins do not match")
					ContinueLoop
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
			Next
			Sleep(1500)
		EndIf
		Return False
	EndFunc

	Func unibetregistertourneymtt($trn)
		fconsolewrite("UnibetRT Begin")
		$nam1 = "MG"
		Sleep(500)
		$tourneyregok = False
		Local $tablename = ""
		Local $buyin
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		WinWaitActive($hlobby, "", 2)
		Local $off = WinGetPos($hlobby)
		WinActivate($hlobby)
		Local $trn3 = $trn
		SendKeepActive($hlobby)
		Send("{^HOME}")
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $a = 0 To 19
				WinActivate($hlobby)
				Local $textcolor = PixelGetColor($off[0] + 639, $off[1] + 249 + (17 * $a), $hlobby)
				$buyin = _scanstringwithoutscreenshot(338, 244 + ($a * 17), 420, 255 + ($a * 17), $textcolor, -0.01, $hlobby)
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					ConsoleWrite("Text Color: " & $textcolor & @LF)
					ContinueLoop
				EndIf
				$buyin = StringRegExpReplace($buyin, "\s", "")
				$tablename = _scanstringwithoutscreenshot(744, 244 + ($a * 17), 786, 255 + ($a * 17), $textcolor, -0.01, $hlobby)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("Unibet Reg TableName: " & $tablename)
				If $tablename == $trn3[3] AND $buyin == $trn3[4] Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $off[0] + 269, (169 + (17 * $a)) + $off[1], 1, 1)
					Sleep(500)
					MouseClick("left", $off[0] + 902, 528 + $off[1], 1, 1)
					WinWait("Unibet  Tournament Lobby", "", 5)
					If WinExists("Unibet  Tournament Lobby") AND iswindowvisible("Unibet  Tournament Lobby") Then
						Local $tournhnd = WinGetHandle("Unibet  Tournament Lobby")
						Local $tournpos = WinGetPos($tournhnd)
						If IsArray($tournpos) Then
							WinActivate($tournhnd)
							MouseClick("left", $tournpos[0] + 493, $tournpos[1] + 585, 1, 0)
							WinWait("Join Tournament", "", 5)
							If WinExists("Join Tournament") AND iswindowvisible("Join Tournament") Then
								Local $jthnd = WinGetHandle("Join Tournament")
								Local $jtpos = WinGetPos($jthnd)
								If IsArray($jtpos) Then
									WinActivate($jthnd)
									ControlClick($jthnd, "", "[CLASS:Button; INSTANCE:12]")
									WinWait("Registration Complete", "", 5)
									If WinExists("Registration Complete") AND iswindowvisible("Registration Complete") Then
										Local $rchnd = WinGetHandle("Registration Complete")
										Local $rcpos = WinGetPos($rchnd)
										If IsArray($rcpos) Then
											WinActivate($rchnd)
											MouseClick("left", $rcpos[0] + 176, $rcpos[1] + 190, 1, 0)
											$tourneyregok = True
											unibetclosetournlobby()
											Return True
										EndIf
									Else
										$tourneyregok = False
										$tablename = ""
										unibetclosetournlobby()
										Return False
									EndIf
								EndIf
							Else
								$tourneyregok = False
								$tablename = ""
								unibetclosetournlobby()
								Return False
							EndIf
						EndIf
					Else
						$tourneyregok = False
						$tablename = ""
						unibetclosetournlobby()
						Return False
					EndIf
				ElseIf $trn[2] <> $buyin Then
					fconsolewrite("AT: Final Buyins do not match")
					ContinueLoop
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
			Next
			Sleep(1500)
		EndIf
		unibetclosetournlobby()
		Return False
	EndFunc

	Func unibetclosetournlobby()
		Local $winlist = WinList("Unibet  Tournament Lobby")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				If WinExists($winlist[$x][1]) Then
					If iswindowvisible($winlist[$x][1]) Then
						$winpos = WinGetPos($winlist[$x][1])
						WinClose($winlist[$x][1])
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Func ftregistertourneymtt($trn)
		fconsolewrite("FTRT Begin")
		$nam1 = "FT"
		Local $lobbytitle = "[REGEXPTITLE:\A.*Full Tilt Poker.*- Logged In As.*\z]"
		$hlobby = WinGetHandle($lobbytitle)
		Sleep(500)
		$tourneyregok = False
		Local $tablename = ""
		Local $buyin
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		WinWaitActive($hlobby, "", 2)
		Local $off = WinGetPos($hlobby)
		WinActivate($hlobby)
		Local $trn3 = $trn
		SendKeepActive($hlobby)
		Send("{HOME}")
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $a = 0 To 21
				Local $textcolor = PixelGetColor($off[0] + 260, $off[1] + 330 + (16 * $a), $hlobby)
				If $textcolor == 16711935 Then
					WinActivate($hlobby)
					If $a == 0 Then
						Send("{DOWN}")
					Else
						Send("{UP}")
					EndIf
					$textcolor = PixelGetColor($off[0] + 260, $off[1] + 330 + (16 * $a), $hlobby)
				EndIf
				Sleep(500)
				$buyin = _scanstringwithoutscreenshot(564, 323 + (16 * $a), 630, 336 + (16 * $a), $textcolor, -0.01, $hlobby)
				$buyin = StringRegExpReplace($buyin, "\s", "")
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					ConsoleWrite("Text Color: " & $textcolor & @LF)
					ContinueLoop
				EndIf
				$buyin = StringRegExpReplace($buyin, "\s", "")
				If $trn[4] <> $buyin Then
					fconsolewrite($buyin & "<>" & $trn[4])
					ContinueLoop
				Else
					fconsolewrite("Buyin match at line " & $a + 1)
				EndIf
				$tablename = _scanstringwithoutscreenshot(345, 323 + ($a * 16), 521, 336 + ($a * 16), $textcolor, -0.01, $hlobby)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("Full Tilt Reg TableName: " & $tablename)
				Local $timescrape = _scanstringwithoutscreenshot(266, 323 + (16 * $a), 343, 336 + (16 * $a), $textcolor, -0.01, $hlobby)
				$timescrape = StringRegExpReplace($timescrape, "\s", "")
				Local $idscrape
				$idscrape = $timescrape & $tablename
				$idscrape = StringRegExpReplace($idscrape, "\s", "")
				If $idscrape == $trn3[3] AND $buyin == $trn3[4] Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $winpos[0] + 495, 329 + $winpos[1] + (16 * $a), 1, 1)
					Sleep(500)
					MouseClick("left", $winpos[0] + 873, 538 + $winpos[1] + (16 * $a), 1, 1)
					WinWait("[REGEXPTITLE:\ATournament Buy-in.*-.*-.*\z]", "", 5)
					If WinExists("[REGEXPTITLE:\ATournament Buy-in.*-.*-.*\z]") AND iswindowvisible("[REGEXPTITLE:\ATournament Buy-in.*-.*-.*\z]") Then
						Local $menupos = WinGetPos("[REGEXPTITLE:\ATournament Buy-in.*-.*-.*\z]")
						Local $buyhandle = WinGetHandle("[REGEXPTITLE:\ATournament Buy-in.*-.*-.*\z]")
						Local $search = PixelSearch($menupos[0] + 160, $menupos[1] + 0, $menupos[0] + 369, $menupos[1] + 237, 1402499, 5, 2, $buyhandle)
						If IsArray($search) Then
							WinActivate($buyhandle)
							WinWaitActive($buyhandle, "", 2)
							MouseMove($search[0] + 60, $search[1] + 10, 1)
							Sleep(100)
							MouseDown("left")
							Sleep(300)
							MouseUp("left")
						EndIf
					Else
						Return
					EndIf
					Sleep(1000)
					Sleep(300)
					WinWaitClose("[REGEXPTITLE:\ATournament Buy-in.*-.*-.*\z]", "", 2)
					If NOT WinExists("[REGEXPTITLE:\ATournament Buy-in.*-.*-.*\z]") AND NOT iswindowvisible("[REGEXPTITLE:\ATournament Buy-in.*-.*-.*\z]") Then
						$tourneyregok = True
						fconsolewrite("Registration successful")
						Return True
					Else
						fconsolewrite("Registration unsuccessful")
						$tourneyregok = False
						Return False
					EndIf
				ElseIf $trn3[4] <> $buyin Then
					fconsolewrite("AT: Final Buyins do not match")
					ContinueLoop
				Else
					fconsolewrite("AT: ID does not match")
					ConsoleWrite("ID: " & $idscrape & " <> $trn3[3]: " & $trn3[3] & @LF)
				EndIf
			Next
			Sleep(1500)
		EndIf
		Return False
	EndFunc

	Func bngregistertourneymtt($trn)
		Local $off
		Local $buyin
		$buyin = ""
		$tourneyregok = False
		$hlobby = getlobbyhnd()
		$off = WinGetPos($hlobby)
		Local $trn3 = $trn
		Local $listviewhandle = ControlGetHandle($hlobby, "", "SysListView322")
		Local $count = ControlListView($hlobby, "", "SysListView322", "GetItemCount")
		ConsoleWrite("Count: " & $count & @LF)
		If IsArray($off) Then
			Local $thisbuyin = 0
			ConsoleWrite("BNGRT: $off is array" & @LF)
			For $line = 0 To $count - 1 Step +1
				Local $tablename
				$tablename = ControlListView($hlobby, "", "SysListView322", "GetText", $line, 0)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				$buyin = ControlListView($hlobby, "", "SysListView322", "GetText", $line, 2)
				$buyin = StringRegExpReplace($buyin, "\s", "")
				ConsoleWrite("BNGRT: $TableName: " & $tablename & @LF)
				ConsoleWrite("BNGRT: $BuyIn: " & $buyin & @LF)
				If $tablename == $trn3[3] AND $buyin == $trn3[4] Then
					If StringInStr($buyin, "+") AND StringInStr($buyin, "$") Then
						Local $newbuyin = StringSplit($buyin, "+")
						$newbuyin[1] = StringReplace($newbuyin[1], "$", "")
						$newbuyin[2] = StringReplace($newbuyin[2], "$", "")
						$thisbuyin = Number($newbuyin[1]) + Number($newbuyin[2])
					Else
						$thisbuyin = 0
					EndIf
					fconsolewrite("Found: " & $tablename)
					_guictrllistview_clickitem($listviewhandle, $line, "left", True, 1)
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 1)
					MouseClick("left", $off[0] + 883, $off[1] + 503, 1, 0)
					Sleep(1000)
					If GUICtrlRead($cmbsite) == "Sisal" Then
						WinWait("[REGEXPTITLE:\ATorneo.*principale\z]", "", 3)
					Else
						WinWait("[REGEXPTITLE:\ATournament.*lobby\z]", "", 3)
					EndIf
					Local $hnd
					If WinExists("[REGEXPTITLE:\ATournament.*lobby\z]") OR WinExists("[REGEXPTITLE:\ATorneo.*principale\z]") Then
						If GUICtrlRead($cmbsite) == "Sisal" Then
							$hnd = WinGetHandle("[REGEXPTITLE:\ATorneo.*principale\z]")
						Else
							$hnd = WinGetHandle("[REGEXPTITLE:\ATournament.*lobby\z]")
						EndIf
						If iswindowvisible($hnd) Then
							fconsolewrite("Found Tourney Lobby")
							WinActivate($hnd)
							WinWaitActive($hnd, "", 5)
							WinSetOnTop($hnd, "", 1)
							Local $trnlobbypos = WinGetPos($hnd)
							Sleep(1000)
							If IsArray($trnlobbypos) Then
								If GUICtrlRead($cmbsite) == "Bet365" Then
									Sleep(500)
								ElseIf GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Netbet" Then
									MouseClick("left", $trnlobbypos[0] + 729, $trnlobbypos[1] + 653, 1, 0)
								Else
									MouseClick("left", $trnlobbypos[0] + 673, $trnlobbypos[1] + 551, 1, 0)
								EndIf
							EndIf
						EndIf
					Else
						ConsoleWrite("Could not find Tourney Lobby" & @LF)
						Return
					EndIf
					Local $reg2count
					$reg2count = 0
					Do
						Sleep(100)
						$reg2count += 1
					Until isdetectbuyin() OR detectregclosed($hlobby) OR $reg2count > 20
					Local $dbicount = 0
					Local $buyinsucc = False
					Local $trnlobbyhnd1
					If isdetectbuyin() Then
						Do
							Sleep(100)
							$dbicount += 1
							$buyinsucc = detectbuyin()
						Until $buyinsucc == True OR $dbicount > 15
						If $buyinsucc == False Then
							$tourneyregok = False
							closelobbies()
							Return
						EndIf
					ElseIf detectregclosed($hlobby) Then
						fconsolewrite("Registration closed window found")
						WinActivate($hlobby)
						If GUICtrlRead($cmbsite) == "Titan" Then
							MouseClick("left", $off[0] + 285, $off[1] + 240, 1, 0)
						Else
							MouseClick("left", $off[0] + 247, $off[1] + 243, 1, 0)
						EndIf
						$tourneyregok = False
						closelobbies()
						Return
					Else
						fconsolewrite("Registration closed & Buyin window not found")
						closelobbies()
						If GUICtrlRead($cmbsite) == "Sisal" Then
							If WinExists("[REGEXPTITLE:\ATorneo.*principale\z]") Then
								ConsoleWrite("Closing BNG/WH tourney lobby" & @LF)
								$trnlobbyhnd1 = WinGetHandle("[REGEXPTITLE:\ATorneo.*principale\z]")
								WinClose($trnlobbyhnd1)
							EndIf
						Else
							If WinExists("[REGEXPTITLE:.*Tournament.*lobby.*]") Then
								ConsoleWrite("Closing BNG/WH tourney lobby" & @LF)
								$trnlobbyhnd1 = WinGetHandle("[REGEXPTITLE:.*Tournament.*lobby.*]")
								WinClose($trnlobbyhnd1)
							EndIf
						EndIf
						$tourneyregok = False
						Return
					EndIf
					Sleep(2000)
					Local $drscount = 0
					Do
						If detectregsuccessful() OR $drscount >= 10 Then
							$tourneyregok = True
							ExitLoop
						EndIf
						Sleep(200)
						$drscount += 1
					Until $drscount >= 10
					If $tourneyregok = True Then
						$reg2count = 0
						$tourneyregok = True
						If GUICtrlRead($cmbsite) == "Sisal" Then
							If WinExists("[REGEXPTITLE:\ATorneo.*principale\z]") Then
								ConsoleWrite("Closing BNG/WH tourney lobby" & @LF)
								$trnlobbyhnd1 = WinGetHandle("[REGEXPTITLE:\ATorneo.*principale\z]")
								WinClose($trnlobbyhnd1)
							EndIf
						Else
							If WinExists("[REGEXPTITLE:.*Tournament.*lobby.*]") Then
								ConsoleWrite("Closing BNG/WH tourney lobby" & @LF)
								$trnlobbyhnd1 = WinGetHandle("[REGEXPTITLE:.*Tournament.*lobby.*]")
								WinClose($trnlobbyhnd1)
							EndIf
						EndIf
						closelobbies()
						$totalbuyin = Number($totalbuyin) + Number($thisbuyin)
						Return True
					Else
						closelobbies()
						$tourneyregok = False
						Return False
					EndIf
					Sleep(1000)
					If $tourneyregok = True Then
						Return True
					Else
						$tourneyregok = False
						Return False
					EndIf
				ElseIf $tablename <> $trn3[3] Then
					fconsolewrite("TableName scrape: " & $tablename & " does not match scheduled TableName: " & $trn[3])
					bnghandlelosttables()
					ContinueLoop
				Else
					fconsolewrite("Buyin scrape: " & $buyin & " does not match scheduled buyin: " & $trn[4])
					bnghandlelosttables()
					ContinueLoop
				EndIf
			Next
		EndIf
	EndFunc

	Func rebuyerrorwin()
		If WinExists("Rebuy error message") Then
			Local $winlist = WinList("Rebuy error message")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					Local $winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If iswindowvisible($winlist[$x][1]) Then
							ConsoleWrite("Rebuy error message found..." & @LF)
							WinActivate($winlist[$x][1])
							MouseClick("left", $winpos[0] + 167, $winpos[1] + 164, 1, 0)
							Return True
						EndIf
					EndIf
				Next
			EndIf
		EndIf
		Return False
	EndFunc

	Func bwinhandleidle()
		Local $foundiaw = False
		Local $winlist
		If GUICtrlRead($cmbsite) == "Bwin" Then
			$winlist = WinList("bwin.com", "Due to an extended period of inactivity")
		Else
			$winlist = WinList("", "Due to an extended period of inactivity")
		EndIf
		If IsArray($winlist) AND $winlist[0][0] > 0 Then
			For $t = 1 To $winlist[0][0]
				If iswindowvisible($winlist[$t][1]) AND NOT StringInStr($winlist[$t][0], ".au3") Then
					$winpos = WinGetPos($winlist[$t][1])
					fconsolewrite("Inactivity Window Found.. Closing now")
					WinActivate($winlist[$t][1])
					MouseClick("left", $winpos[0] + 368, $winpos[1] + 123, 1, 0)
					Sleep(500)
					If WinExists($winlist[$t][1]) AND iswindowvisible($winlist[$t][1]) Then
						WinActivate($winlist[$t][1])
						MouseClick("left", $winpos[0] + 346, $winpos[1] + 97, 1, 0)
					EndIf
					Sleep(500)
					If WinExists($winlist[$t][1]) AND iswindowvisible($winlist[$t][1]) Then
						WinClose($winlist[$t][1])
					EndIf
					$foundiaw = True
					ExitLoop
				EndIf
			Next
		EndIf
		If $foundiaw == True Then
			WinWait("Account Log-in", "", 60)
			If WinExists("Account Log-in") AND iswindowvisible("Account Log-in") Then
				Local $alohnd = WinGetHandle("Account Log-in")
				Local $alopos = WinGetPos("Account Log-in")
				ConsoleWrite("Account Login window found" & @LF)
				WinActivate($alohnd)
				WinWaitActive($alohnd, "", 2)
				MouseClick("left", $alopos[0] + 94, $alopos[1] + 143, 1, 0)
				Sleep(10000)
			EndIf
		EndIf
	EndFunc

	Func bngcheckannouncements($htable, $hoh)
		For $x = 0 To 14
			If NOT WinExists($htable[$x]) AND $htable[$x] <> -10 AND WinExists($hoh[$x]) Then
				If NOT botconnected($hoh[$x]) Then
					$tablesfinished += 1
				EndIf
			EndIf
		Next
	EndFunc

	Func bwinfinaltabledealwin()
		If WinExists("Deal making") Then
			Local $winlist = WinList("Deal making")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					If iswindowvisible($winlist[$x][1]) Then
						$winpos = WinGetPos($winlist[$x][1])
						If IsArray($winpos) Then
							fconsolewrite("Final Table Deal Window found.... closing now")
							WinActivate($winlist[$x][1])
							Sleep(500)
							MouseClick("left", $winpos[0] + 173, $winpos[1] + 128, 1, 0)
							Return
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func finaltabledealwin()
		If WinExists("[REGEXPTITLE:\ADeal making.*\z]") Then
			Local $winlist = WinList("[REGEXPTITLE:\ADeal making.*\z]")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					Local $winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If iswindowvisible($winlist[$x][1]) Then
							ConsoleWrite("FTDW" & @LF)
							WinClose($winlist[$x][1])
							WinWaitClose($winlist[$x][1], "", 1)
							If WinExists($winlist[$x][1]) Then
								WinActivate($winlist[$x][1])
								MouseClick("left", $winpos[0] + 321, $winpos[1] + 154, 1, 0)
							EndIf
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func bwinxtrawin()
		If WinExists("[REGEXPTITLE:\AMessage from.*\z]") Then
			Local $winlist = WinList("[REGEXPTITLE:\AMessage from.*\z]")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					Local $winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) AND $winpos[2] == 386 Then
						If iswindowvisible($winlist[$x][1]) Then
							ConsoleWrite("MFW" & @LF)
							WinClose($winlist[$x][1])
							WinWaitClose($winlist[$x][1], "", 1)
							If WinExists($winlist[$x][1]) Then
								WinActivate($winlist[$x][1])
								MouseClick("left", $winpos[0] + 370, $winpos[1] + 14, 1, 0)
							EndIf
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndFunc

	Func startmtt($lobbyname)
		ConsoleWrite("Crash Before WritePrivateProfileString" & @LF)
		DllCall("kernel32.dll", "int", "WritePrivateProfileString", "ptr", 0, "ptr", 0, "ptr", 0, "str", $inifile)
		ConsoleWrite("Crash After WritePrivateProfileString" & @LF)
		$hlobby = WinGetHandle($lobbyname)
		Opt("WinTitleMatchMode", 2)
		Local $textbot = ControlGetText($maingui, "", $bottxt)
		$botpath = StringLeft($textbot, StringInStr($textbot, "\", 0, -1))
		hide()
		If NOT WinExists($lobbyname) Then
			fconsolewrite("Lobby does not exist")
			logit("IF264")
			If GUICtrlRead($chk888autologin) == $gui_checked OR GUICtrlRead($chkipautologin) == $gui_checked Then
				fconsolewrite("Opening Site")
				autologin()
			Else
				MsgBox(0, $productname & $version, "You have to log into Poker Site to continue.")
				Return
			EndIf
			logit("EN265")
		ElseIf NOT FileExists(GUICtrlRead($bottxt)) Then
			MsgBox(1, $productname & $version, "Please enter a valid Bot Path")
			Return
		EndIf
		startautopilotmtt($lobbyname)
	EndFunc

	Func startnow2mtt()
		Local $siteitem
		Local $winlist
		If $trial == 1 Then
			If $trial == 1 Then
				MsgBox(0, "TableMap Reminder", "This software will only work with table maps matching exact settings from the manual.  Tablemaps of the sort are also sold in our store")
				If GUICtrlRead($numbotscmb) > 3 Then
					ControlCommand($maingui, "", $numbotscmb, "SelectString", "3")
					MsgBox(0, "Trial Mode", "Trial mode limiation - setting # tables to 3")
				EndIf
			EndIf
		EndIf
		savesettings()
		Local $tourneysadded
		$trn = gettournmentmtt()
		If NOT StringInStr($trn, "~") Then
			$tourneysadded = MsgBox(4, "No Tournaments Added", "You have not added a tournament into the toPlay list for the current day.  Click Yes to continue anyway.  Click No to add tournaments to the list for the current day.  If Choosing 'Yes', the hopper will still auto-position tables and connect the bots for later dates/days.  But you will still need to either manually register tourneys ahead of times, or add them to the toPlay list later.")
			If $tourneysadded == 7 Then
				Return
			Else
				$siteitem = GUICtrlRead($cmbsite)
			EndIf
		Else
			Local $tournitems = StringSplit($trn, "~")
			If IsArray($tournitems) Then
				$siteitem = $tournitems[1]
			Else
				$siteitem = GUICtrlRead($cmbsite)
			EndIf
		EndIf
		If $siteitem == "WillHill" Then
			$nam1 = "BNG"
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*-.*\z]")
			startmtt($whlobbyname)
		ElseIf $siteitem == "888Poker" Then
			$nam1 = "EE"
			$winlist = WinList("[REGEXPTITLE:\A.*#.*/.*\z]")
			If $sngcount < $winlist[0][0] Then
				fconsolewrite("SN: Tables detected")
				$sngcount = $winlist[0][0]
			EndIf
			startmtt($eeelobbyname)
		ElseIf $siteitem == "ACR" OR $siteitem == "Betcoin" OR $siteitem == "Blackchip" Then
			$nam1 = "AR"
			$winlist = WinList("[REGEXPTITLE:\A.*#.*/.*\z]")
			startmtt("[REGEXPTITLE:\A.*Tournament Lobby.*\z]")
		ElseIf $siteitem == "Carbon" Then
			$nam1 = "CB"
			$winlist = WinList("[REGEXPTITLE:\A.*Table.*-.*Hold'em.*\z]")
			startmtt($carbonlobbyname)
		ElseIf $siteitem == "FullTilt" Then
			$nam1 = "FT"
			$winlist = WinList("[REGEXPTITLE:\A.*- NL Hold'em -.*-.*Table.*\z]")
			startmtt("[REGEXPTITLE:\AFull Tilt Poker.*- Logged In As.*\z]")
		ElseIf $siteitem == "Bwin" Then
			$nam1 = "BW"
			$winlist = tablelist()
			startmtt("[REGEXPTITLE:\Abwin.*Lobby.*\z]")
		ElseIf $siteitem == "Party" Then
			$nam1 = "BW"
			$winlist = tablelist()
			startmtt("[REGEXPTITLE:\Apartypoker.*Lobby.*\z]")
		Else
			$nam1 = "BD"
			$winlist = bodogtablelist()
			If $sngcount < $winlist[0][0] Then
				fconsolewrite("SN: Tables detected")
				$sngcount = $winlist[0][0]
			EndIf
			startmtt($bodoglobbyname)
		EndIf
	EndFunc

	Func bodogtablelistmtt()
		Local $winlist = WinList("[REGEXPCLASS:\AQt5QWindowIcon\z]")
		Local $rv[1][2]
		$rv[0][0] = 0
		Local $count = 0
		For $a = 1 To $winlist[0][0]
			Local $tempsize = WinGetPos($winlist[$a][1])
			If IsArray($tempsize) Then
				If iswindowvisible($winlist[$a][1]) Then
					If NOT StringInStr($winlist[$a][0], "Alert") AND NOT StringInStr($winlist[$a][0], "SciTE") AND NOT StringInStr($winlist[$a][0], "Lobby") AND StringInStr($winlist[$a][0], "-") Then
						If $tempsize[2] >= 641 Then
							$count += 1
							Local $rv[$count + 2][2]
							$rv[$count][0] = $winlist[$a][0]
							$rv[$count][1] = $winlist[$a][1]
							$rv[0][0] = $count
						EndIf
					EndIf
				EndIf
			EndIf
		Next
		Return $rv
	EndFunc

	Func tablelistmtt()
		Local $size1
		Local $size2
		If GUICtrlRead($cmbsite) == "888Poker" Then
			If @OSVersion == "WIN_10" Then
				ConsoleWrite("Windows 10" & @LF)
				$size1 = 580
				$size2 = 399
			ElseIf $theme == "Aero" Then
				ConsoleWrite("Windows Aero" & @LF)
				$size1 = 562
				$size2 = 360
			Else
				$size1 = 554
				$size2 = 360
			EndIf
			$size2 = 360
		ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
			$size1 = 514
			$size2 = 406
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
			If $theme == "Aero" Then
				$size1 = 1000
				$size2 = 720
			ElseIf @OSVersion == "Win_10" Then
				$size1 = 1016
				$size2 = 759
			Else
				$size1 = 1008
				$size2 = 731
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			$size1 = 412
			$size2 = 305
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			$size1 = 480
			If $theme == "Aero" Then
				$size2 = 323
			Else
				$size2 = 320
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$size1 = 812
			$size2 = 648
		Else
			$size1 = 1024
			$size2 = 726
		EndIf
		Local $winlist
		If GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Betfair" Then
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Table.*/.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "FullTilt" Then
			$winlist = WinList("[REGEXPTITLE:\A.*- NL Hold'em -.*-.*Table.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Table.*Hold'em.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Walker" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Table.*-.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "Ladbrokes" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Hold'em.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "Ongame" Then
			$winlist = WinList("[REGEXPTITLE:\A.*Table.*Hold'em.*\z]")
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
			$winlist = WinList("[REGEXPTITLE:\A.*-.*/.*\z]")
		Else
			$winlist = bodogtablelistmtt()
		EndIf
		If IsArray($winlist) Then
			For $a = 1 To $winlist[0][0]
				Local $tabpos = WinGetPos($winlist[$a][1])
				If IsArray($tabpos) AND NOT StringInStr($winlist[$a][0], "SciTE") AND NOT StringInStr(WinGetText($winlist[$a][1]), "#include") AND NOT StringInStr($winlist[$a][0], ".au3") AND NOT StringInStr($winlist[$a][0], ".ohf") AND NOT StringInStr($winlist[$a][0], ".oppl") Then
					If $tabpos[0] <> $size1 OR $tabpos[1] <> $size2 Then
						ConsoleWrite("Title: " & $winlist[$a][0] & @LF)
						ConsoleWrite("$tabpos: " & $tabpos[0] & ", " & $tabpos[1] & @LF)
						ConsoleWrite("$size: " & $size1 & ", " & $size2 & @LF)
						ConsoleWrite("Tableresize mousewinmove" & @LF)
						mousewinmove($winlist[$a][1], "", Default, Default, $size1, $size2, 3, 1)
					EndIf
				EndIf
			Next
		EndIf
		Local $rv[1][2]
		Local $count = 0
		Local $tempsize
		For $a = 1 To $winlist[0][0]
			$tempsize = WinGetPos($winlist[$a][1])
			If IsArray($tempsize) AND ($winlist[$a][0] <> "[REGEXPTITLE:.*www.holdemmanager.com.*]") Then
				If NOT StringInStr($winlist[$a][0], "ohf") AND NOT StringInStr($winlist[$a][0], "oppl") AND NOT StringInStr(WinGetText($winlist[$a][0]), "Ready") AND NOT StringInStr($winlist[$a][0], "dll") AND NOT StringInStr($winlist[$a][0], "OpenHoldem") AND NOT StringInStr($winlist[$a][0], "openholdem") AND NOT StringInStr($winlist[$a][0], "Openholdem") Then
					$count += 1
					Local $rv[$count + 2][2]
					$rv[$count][0] = $winlist[$a][0]
					$rv[$count][1] = $winlist[$a][1]
					$rv[0][0] = $count
				EndIf
			EndIf
		Next
		Return $rv
	EndFunc

	Func acrregistertourneymtt($trn)
		fconsolewrite("Starting ACRPoker Register Tourney")
		Local $off
		Local $buyin
		$buyin = ""
		$tourneyregok = False
		$hlobby = WinGetHandle("[REGEXPTITLE:\A.*Tournament Lobby.*\z]")
		If $hlobby == "" OR $hlobby == 0 OR @error == 1 Then
			ConsoleWrite("Lobby not found" & @LF)
			Return
		EndIf
		movelobby($hlobby)
		WinSetState($hlobby, "", @SW_RESTORE)
		$off = WinGetPos($hlobby)
		If NOT IsArray($off) Then
			fconsolewrite("ATC: NOT ARRAY OFF")
			Return
		EndIf
		Local $listviewhandle = ControlGetHandle($hlobby, "", "IGListCtrl1")
		Local $count = ControlListView($hlobby, "", "IGListCtrl1", "GetItemCount")
		If IsArray($off) Then
			Local $nomttfound = 0
			ConsoleWrite("Count: " & $count & @LF)
			For $line = 0 To $count - 1 Step +1
				_guictrllistview_clickitem($listviewhandle, $line, "left", True, 1)
				Sleep(500)
				Local $regcolor = PixelGetColor($off[0] + 818, $off[1] + 520, $hlobby)
				If $regcolor = 16777215 Then
					fconsolewrite("Already registered... checking next line")
					ContinueLoop
				EndIf
				$buyin = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 5)
				$buyin = StringRegExpReplace($buyin, "\s", "")
				If $buyin == "" Then
					fconsolewrite("AT: No mtt to select on line: " & $a + 1)
					$nomttfound += 1
					If $nomttfound >= 3 Then Return
					ContinueLoop
				EndIf
				Local $id = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 1)
				$id = StringRegExpReplace($id, "\s", "")
				Local $tablescrape = ControlListView($hlobby, "", "IGListCtrl1", "GetText", $line, 2)
				$tablescrape = StringRegExpReplace($tablescrape, "\s", "")
				$id = $id & " " & $tablescrape
				If $id == $trn[3] AND $buyin == $trn[4] Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 1)
					_guictrllistview_clickitem($listviewhandle, $line, "left", True, 1)
					Local $registercount = 0
					Local $search1
					Do
						$search1 = PixelSearch($off[0] + 826, $off[1] + 499, $off[0] + 826, $off[1] + 499, 16777215, 3, 1, $hlobby)
						Sleep(20)
						$registercount += 1
					Until IsArray($search1) OR $registercount >= 20
					Sleep(300)
					Sleep(1000)
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $off[0] + 826, $off[1] + 499, 1, 0)
					Sleep(300)
					Sleep(1500)
					For $zt = 1 To 5
						Local $listreg = WinList("[REGEXPCLASS:\A.*ATL:.*\z]")
						If IsArray($listreg) Then
							For $a = 1 To $listreg[0][0]
								Local $posreg = WinGetPos($listreg[$a][1])
								If IsArray($posreg) AND $posreg[2] == 600 AND $posreg[3] == 400 Then
									WinActivate($listreg[$a][1])
									MouseClick("left", $posreg[0] + 213, $posreg[1] + 197, 1, 0)
									ExitLoop
								EndIf
							Next
							ExitLoop
						Else
							If WinExists("", "You are successfully registered.") Then
							Else
								fconsolewrite("Could not find Regsiter window")
								Return
							EndIf
						EndIf
						Sleep(1000)
					Next
					Local $tohwnd
					Local $count1 = 0
					WinWait("", "You are successfully registered.", 10)
					If WinExists("", "You are successfully registered.") Then
						Do
							$tohwnd = WinGetHandle("", "You are successfully registered.")
							Local $topos = WinGetPos($tohwnd)
							Sleep(20)
							$count1 += 1
						Until $topos[0] > 0 OR $topos[1] > 0 OR $count1 >= 20
						$regscreenshot += 1
						If GUICtrlRead($chknotifyreg) == $gui_checked Then
							_screencapture_capturewnd(@ScriptDir & "\RegScreenShot" & $regscreenshot & ".jpg", $tohwnd)
							Local $regpic = @ScriptDir & "\RegScreenShot" & $regscreenshot & ".jpg"
							emailnotification($regpic, "Registration")
						EndIf
						If $topos[0] > 0 OR $topos[1] > 0 Then
							fconsolewrite("ACRREG: Found Successfully Registered window")
							Sleep(1500)
							If IsArray($topos) Then
								WinActivate($tohwnd)
								_winapi_setforegroundwindow($tohwnd)
								WinWaitActive($tohwnd, "", 1)
								$topos = WinGetCaretPos()
								MouseClick("left", $topos[0] + 157, $topos[1] + 91, 1, 0)
								WinWaitClose($tohwnd, "", 2)
							EndIf
							If WinExists($tohwnd) Then
								WinClose($tohwnd)
							EndIf
							Return True
						Else
							ConsoleWrite("Successfully registered window not found" & @LF)
							$tourneyregok = False
							Return False
						EndIf
					Else
						ConsoleWrite("Successfully registered window not found" & @LF)
						$tourneyregok = False
						Return False
					EndIf
					Sleep(1000)
					If $tourneyregok = True Then
						Return True
					Else
						ConsoleWrite("Successfully registered window not found2" & @LF)
						$tourneyregok = False
						Return False
					EndIf
				ElseIf $id <> $trn[3] Then
					fconsolewrite("Date/TourneyName scrape: " & $id & " does not match scheduled date/name: " & $trn[3])
				Else
					fconsolewrite("Buyin scrape: " & $buyin & " does not match scheduled buyin: " & $trn[4])
				EndIf
			Next
		EndIf
	EndFunc

	Func eeeregistertourneymtt($trn)
		fconsolewrite("Starting 888Poker Register Tourney")
		If WinExists("[REGEXPTITLE:\ATournament Registration.*\z]") AND iswindowvisible("[REGEXPTITLE:\ATournament Registration.*\z]") Then
			WinClose("[REGEXPTITLE:\ATournament Registration.*\z]")
		EndIf
		eeehandlelosttables()
		Local $off
		Local $buyin
		$buyin = ""
		$tourneyregok = False
		$hlobby = WinGetHandle($eeelobbyname)
		If $hlobby == "" OR $hlobby == 0 OR @error == 1 Then Return
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		_winapi_setforegroundwindow($hlobby)
		WinWaitActive($hlobby, "", 1)
		Local $temppos = WinGetPos($hlobby)
		If $temppos[0] <> 0 OR $temppos[1] <> 0 Then
			WinMove($hlobby, "", 0, 0, Default, Default, 1)
		EndIf
		$off = WinGetCaretPos()
		Local $idstart = PixelSearch(1 + $off[0], 210 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("ID Bar start = " & $idstart[0] & ", " & $idstart[1] & @LF)
		Local $idfinish = PixelSearch($idstart[0] + 2, $idstart[1], 729 + $off[0], $idstart[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("ID Bar finish = " & $idfinish[0] & ", " & $idfinish[1] & @LF)
		Local $idx2 = $idfinish[0]
		Local $tablecolumnbar = PixelSearch(2 + $idx2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Table Bar start = " & $tablecolumnbar[0] & ", " & $tablecolumnbar[1] & @LF)
		Local $tablepixsearchid = PixelSearch($tablecolumnbar[0] + 2, $tablecolumnbar[1], 729 + $off[0], $tablecolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Table Bar finish = " & $tablepixsearchid[0] & ", " & $tablepixsearchid[1] & @LF)
		Local $tablex1 = $tablecolumnbar[0] + 2
		Local $tablex2 = $tablepixsearchid[0] - 1
		Local $typecolumnbar = PixelSearch(3 + $tablex2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Type Bar start = " & $typecolumnbar[0] & ", " & $typecolumnbar[1] & @LF)
		Local $typepixsearchid = PixelSearch($typecolumnbar[0] + 2, $typecolumnbar[1], 729 + $off[0], $typecolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Type Bar finish = " & $typepixsearchid[0] & ", " & $typepixsearchid[1] & @LF)
		Local $typex2 = $typepixsearchid[0]
		Local $datecolumnbar = PixelSearch(3 + $typex2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Date Bar start = " & $datecolumnbar[0] & ", " & $datecolumnbar[1] & @LF)
		Local $datepixsearchid = PixelSearch($datecolumnbar[0] + 2, $datecolumnbar[1], 729 + $off[0], $datecolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Date Bar finish = " & $datepixsearchid[0] & ", " & $datepixsearchid[1] & @LF)
		Local $datex2 = $datepixsearchid[0]
		Local $gamecolumnbar = PixelSearch(3 + $datex2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Game Bar start = " & $gamecolumnbar[0] & ", " & $gamecolumnbar[1] & @LF)
		Local $gamepixsearchid = PixelSearch($gamecolumnbar[0] + 2, $gamecolumnbar[1], 729 + $off[0], $gamecolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Game Bar finish = " & $gamepixsearchid[0] & ", " & $gamepixsearchid[1] & @LF)
		Local $gamex2 = $gamepixsearchid[0]
		Local $buyincolumnbar = PixelSearch(3 + $gamex2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Buyin Bar start = " & $buyincolumnbar[0] & ", " & $buyincolumnbar[1] & @LF)
		Local $buyinpixsearchid = PixelSearch($buyincolumnbar[0] + 2, $buyincolumnbar[1], 729 + $off[0], $buyincolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Buyin Bar finish = " & $buyinpixsearchid[0] & ", " & $buyinpixsearchid[1] & @LF)
		Local $buyinx1 = $buyincolumnbar[0] - 2
		Local $buyinx2 = $buyinpixsearchid[0]
		Local $statuscolumnbar = PixelSearch(3 + $buyinx2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Status Bar start = " & $statuscolumnbar[0] & ", " & $statuscolumnbar[1] & @LF)
		Local $statuspixsearchid = PixelSearch($statuscolumnbar[0] + 2, $statuscolumnbar[1], 729 + $off[0], $statuscolumnbar[1], 2894892, 5, 1, $hlobby)
		ConsoleWrite("Status Bar finish = " & $statuspixsearchid[0] & ", " & $statuspixsearchid[1] & @LF)
		Local $statusx2 = $statuspixsearchid[0]
		Local $playerscolumnbar = PixelSearch(3 + $statusx2, 222 + $off[1], 757 + $off[0], 307 + $off[1], 4408131, 0, 1, $hlobby)
		ConsoleWrite("Players Bar start = " & $playerscolumnbar[0] & ", " & $playerscolumnbar[1] & @LF)
		ConsoleWrite("Players Bar finish = 750" & @LF)
		Local $pixy = 0
		Local $pixy2 = 0
		Sleep(500)
		If IsArray($off) Then
			For $a = 0 To 28
				Local $textcolor = PixelGetColor(302 + $off[0], 243 + $off[1] + ($a * 13), $hlobby)
				Local $pixsearch = False
				If $a = 0 Then
					For $y = 0 To 9
						For $z = 0 To 60
							If PixelGetColor(490 + $off[0] + $z, 236 + $off[1] + $y, $hlobby) <> $textcolor Then
								$pixsearch = True
								$pixy = 236 + $y
								$pixy2 = 236 + $y + 10
								ExitLoop
							EndIf
						Next
						If $pixsearch = True Then ExitLoop
					Next
				EndIf
				$buyin = _scanstring($buyinx1, $pixy + (13 * $a), $buyinx2, $pixy2 + (13 * $a), $textcolor, -0.01, $hlobby)
				$buyin = StringRegExpReplace($buyin, "\s", "")
				If $buyin == "" Then
					fconsolewrite("AT: No mtt to select on line: " & $a + 1)
					$myfav += 1
					If $myfav >= 5 Then
						Return
					EndIf
					ContinueLoop
				Else
					$myfav = 0
				EndIf
				If $trn[4] <> $buyin Then
					fconsolewrite("Buyin scrape: " & $buyin & " does not match scheduled buyin: " & $trn[4])
					ContinueLoop
				EndIf
				Local $tablescrape = _scanstring($tablex1 - 5, $pixy + (13 * $a), $tablex2, $pixy2 + (13 * $a), $textcolor, -0.01, $hlobby)
				$tablescrape = StringRegExpReplace($tablescrape, "\s", "")
				Local $id = $tablescrape
				If $id == $trn[3] AND $buyin == $trn[4] Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", 298 + $off[0], 242 + $off[1] + ($a * 13), 1, 0)
					Sleep(500)
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseMove($off[0] + 820, $off[1] + 587, 0)
					MouseDown("left")
					Sleep(300)
					MouseUp("left")
					Sleep(300)
					WinWait("[REGEXPTITLE:\ATournament Registration.*\z]", "", 10)
					If WinExists("[REGEXPTITLE:\ATournament Registration.*\z]") Then
						Local $hnd = WinGetHandle("[REGEXPTITLE:\ATournament Registration.*\z]")
						WinActivate($hnd)
						_winapi_setforegroundwindow($hnd)
						WinWaitActive($hnd, "", 2)
						If iswindowvisible($hnd) Then
							fconsolewrite("Found Tourney Lobby")
							Local $trnlobbypos = WinGetCaretPos()
							Sleep(1000)
							If IsArray($trnlobbypos) Then
								MouseClick("left", $trnlobbypos[0] + 185, $trnlobbypos[1] + 344, 1, 0)
							EndIf
						Else
							ConsoleWrite("Tournament Registration window not visible" & @LF)
						EndIf
					Else
						fconsolewrite("Could not find Tourney Lobby")
						Return
					EndIf
					WinWait("[REGEXPTITLE:\ATournament ID.*\z]", "", 1)
					Sleep(500)
					For $q = 1 To 10
						If WinExists("[REGEXPTITLE:\ATournament ID.*\z]") AND iswindowvisible("[REGEXPTITLE:\ATournament ID.*\z]") Then
							Local $tohwnd = WinGetHandle("[REGEXPTITLE:\ATournament ID.*\z]")
							fconsolewrite("Found tourney id window: " & WinGetTitle($tohwnd))
							If NOT StringInStr(WinGetTitle($tohwnd), $trn[3]) Then
								ConsoleWrite("Opened wrong tourney window" & @LF)
								WinClose($tohwnd)
								$tourneyregok = False
								Return False
							Else
								$tourneyregok = True
								Local $topos = WinGetPos($tohwnd)
								If IsArray($topos) Then
									WinClose($tohwnd)
									If WinExists($tohwnd) AND iswindowvisible($tohwnd) Then
										WinActivate($tohwnd)
										MouseClick("left", $topos[0] + 168, $topos[1] + 195, 1, 0)
									EndIf
								EndIf
								Return True
							EndIf
						Else
							ConsoleWrite("Could not find tourney id window" & @LF)
							$tourneyregok = False
							Return False
						EndIf
						Sleep(500)
					Next
					Sleep(1000)
					If $tourneyregok = True Then
						Return True
					Else
						$tourneyregok = False
						Return False
					EndIf
				ElseIf $id <> $trn[3] Then
					fconsolewrite("TourneyName scrape: " & $id & " does not match scheduled date/name: " & $trn[3])
				Else
					fconsolewrite("Buyin scrape: " & $buyin & " does not match scheduled buyin: " & $trn[4])
				EndIf
			Next
		EndIf
	EndFunc

	Func betonlineregistertourneymtt($trn)
		fconsolewrite("BetOnline RT Begin")
		$nam1 = "BW"
		Sleep(500)
		$tourneyregok = False
		Local $tablename = ""
		Local $buyin
		$hlobby = WinGetHandle("[REGEXPTITLE:\A.*BetOnline Poker version.*\z]")
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		WinWaitActive($hlobby, "", 2)
		Local $off = WinGetPos($hlobby)
		WinActivate($hlobby)
		Local $trn3 = $trn
		SendKeepActive($hlobby)
		Send("{^HOME}")
		Local $textcolor
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $a = 0 To 19
				WinActivate($hlobby)
				$textcolor = PixelGetColor($off[0] + 88, $off[1] + 252 + (19 * $a), $hlobby)
				$buyin = _scanstringwithoutscreenshot(365, 249 + ($a * 19), 429, 261 + ($a * 19), $textcolor, -0.01, $hlobby)
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					ConsoleWrite("Text Color: " & $textcolor & @LF)
					ContinueLoop
				EndIf
				$buyin = StringRegExpReplace($buyin, "\s", "")
				$tablename = _scanstringwithoutscreenshot(89, 249 + ($a * 19), 252, 261 + ($a * 19), $textcolor, -0.01, $hlobby)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("BetOnline Reg TableName: " & $tablename)
				If $tablename == $trn3[3] AND $buyin == $trn3[4] Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $off[0] + 318, (253 + (19 * $a)) + $off[1], 2, 0)
					WinWait("[REGEXPTITLE:\ATourney Lobby\z]", "", 5)
					If WinExists("[REGEXPTITLE:\ATourney Lobby\z]") Then
						Local $tourneyhnd = WinGetHandle("[REGEXPTITLE:\ATourney Lobby\z]")
						Local $tourpos = WinGetPos($tourneyhnd)
						fconsolewrite("Tourney Lobby found")
						If IsArray($tourpos) Then
							WinActivate($tourneyhnd)
							WinWaitActive($tourneyhnd, "", 1)
							Sleep(500)
							MouseClick("left", $tourpos[0] + 709, 60 + $tourpos[1], 1, 0)
							WinWait("[REGEXPTITLE:\ATournament Registration\z]", "", 5)
							If WinExists("[REGEXPTITLE:\ATournament Registration\z]") Then
								Local $reghnd = WinGetHandle("[REGEXPTITLE:\ATournament Registration\z]")
								Local $regpos = WinGetPos($reghnd)
								fconsolewrite("Tourney Registration Window found")
								If IsArray($regpos) Then
									WinActivate($reghnd)
									WinWaitActive($reghnd, "", 1)
									If $regpos[3] = 260 Then
										MouseClick("left", $regpos[0] + 58, 224 + $regpos[1], 1, 0)
									ElseIf $regpos[3] = 538 Then
										MouseClick("left", $regpos[0] + 58, 502 + $regpos[1], 1, 0)
									Else
										MouseClick("left", $regpos[0] + 58, 363 + $regpos[1], 1, 0)
									EndIf
									WinWait("[REGEXPTITLE:\AJoin Tourney Result\z]", "", 5)
									If WinExists("[REGEXPTITLE:\AJoin Tourney Result\z]") Then
										Local $regsucchnd = WinGetHandle("[REGEXPTITLE:\AJoin Tourney Result\z]")
										Local $regsuccpos = WinGetPos($regsucchnd)
										fconsolewrite("Tourney Registration Successful Window found")
										If IsArray($regsuccpos) Then
											WinActivate($regsucchnd)
											WinWaitActive($regsucchnd, "", 1)
											MouseClick("left", $regsuccpos[0] + 309, 123 + $regsuccpos[1], 1, 0)
											$tourneyregok = True
											WinClose($tourneyhnd)
											WinWaitClose($tourneyhnd, "", 1)
											Return True
										EndIf
									EndIf
								Else
									WinClose($reghnd)
									WinWaitClose($reghnd, "", 1)
									WinClose($tourneyhnd)
									WinWaitClose($tourneyhnd, "", 1)
									$tourneyregok = False
									$tablename = ""
								EndIf
							Else
								WinClose($tourneyhnd)
								WinWaitClose($tourneyhnd, "", 1)
								$tourneyregok = False
								$tablename = ""
							EndIf
						Else
							WinClose($tourneyhnd)
							WinWaitClose($tourneyhnd, "", 1)
							$tourneyregok = False
							$tablename = ""
						EndIf
					Else
						$tourneyregok = False
						$tablename = ""
						Return False
					EndIf
				ElseIf $trn[2] <> $buyin Then
					fconsolewrite("AT: Final Buyins do not match")
					ContinueLoop
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
			Next
			Sleep(1500)
		EndIf
		Return False
	EndFunc

	Func btnaddtoplayclickmtt()
		Local $pos
		Local $hwlobby
		Local $buyinscrape = ""
		Local $idscrape = ""
		Local $datescrape = ""
		Local $tcolor
		$dataentry = 1
		Local $range1
		Local $listview
		Local $isselected
		Local $tablescrape
		If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" Then
			$nam1 = "BNG"
			$hwlobby = getlobbyhnd()
			If NOT WinExists($hwlobby) Then
				MsgBox(1, "Poker Site Error", "Please Login to IPoker")
				Return
			EndIf
			$pos = WinGetPos($hwlobby)
			ConsoleWrite("Adding " & GUICtrlRead($cmbsite) & " tourney now" & @LF)
			Local $count = ControlListView($hwlobby, "", "SysListView322", "GetItemCount")
			If IsArray($pos) Then
				For $line = 0 To $count - 1 Step +1
					$isselected = ControlListView($hwlobby, "", "SysListView322", "IsSelected", $line)
					If $isselected == 1 Then
						$idscrape = ControlListView($hwlobby, "", "SysListView322", "GetText", $line, 0)
						$idscrape = StringRegExpReplace($idscrape, "\s", "")
						$buyinscrape = ControlListView($hwlobby, "", "SysListView322", "GetText", $line, 2)
						$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
						ConsoleWrite("$IDScrape " & $idscrape & @LF)
						ConsoleWrite("$BuyinScrape " & $buyinscrape & @LF)
						ExitLoop
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$nam1 = "BD"
			ConsoleWrite("Adding Bodog/Bovada entries" & @LF)
			$hwlobby = WinGetHandle("[REGEXPTITLE:\A.*Poker Lobby\z]")
			If NOT WinExists($hwlobby) Then
				MsgBox(1, "Poker Site Error", "Please Login to Bodog/Bovada")
				Return
			EndIf
			WinSetState($hwlobby, "", @SW_RESTORE)
			WinActivate($hwlobby)
			_winapi_setforegroundwindow($hwlobby)
			WinWaitActive($hwlobby, "", 1)
			$pos = WinGetCaretPos()
			$range1 = 0
			Local $idstart = PixelSearch(227 + $pos[0], 229 + $pos[1], 999 + $pos[0], 229 + $pos[1], 16768942, 0, 1, $hwlobby)
			If NOT IsArray($idstart) Then Return
			ConsoleWrite("ID Bar start = " & $idstart[0] & ", " & $idstart[1] & @LF)
			Local $idfinish = PixelSearch($idstart[0] + 2, $idstart[1], 999 + $pos[0], $idstart[1], 526344, 5, 1, $hwlobby)
			ConsoleWrite("ID Bar finish = " & $idfinish[0] & ", " & $idfinish[1] & @LF)
			Local $idx2 = $idfinish[0] - 1
			Local $startstart = PixelSearch($idx2 + 1, 229 + $pos[1], 999 + $pos[0], 229 + $pos[1], 526344, 0, 1, $hwlobby)
			If NOT IsArray($startstart) Then Return
			ConsoleWrite("Start Bar start = " & $startstart[0] & ", " & $startstart[1] & @LF)
			Local $startfinish = PixelSearch($startstart[0] + 2, $startstart[1], 999 + $pos[0], $startstart[1], 526344, 5, 1, $hwlobby)
			ConsoleWrite("Start Bar finish = " & $startfinish[0] & ", " & $startfinish[1] & @LF)
			Local $startx1 = $startstart[0] + 1
			Local $startx2 = $startfinish[0] - 1
			Local $tablecolumnbar = PixelSearch($startx2 + 1, 229 + $pos[1], 999 + $pos[0], 229 + $pos[1], 526344, 0, 1, $hwlobby)
			If NOT IsArray($tablecolumnbar) Then Return
			ConsoleWrite("Table Bar start = " & $tablecolumnbar[0] & ", " & $tablecolumnbar[1] & @LF)
			Local $tablepixsearchid = PixelSearch($tablecolumnbar[0] + 2, $tablecolumnbar[1], 999 + $pos[0], $tablecolumnbar[1], 526344, 5, 1, $hwlobby)
			ConsoleWrite("Table Bar finish = " & $tablepixsearchid[0] & ", " & $tablepixsearchid[1] & @LF)
			Local $tablex1 = $tablecolumnbar[0] + 1
			Local $tablex2 = $tablepixsearchid[0] - 1
			Local $gamecolumnbar = PixelSearch($tablex2 + 1, 229 + $pos[1], 999 + $pos[0], 229 + $pos[1], 526344, 0, 1, $hwlobby)
			If NOT IsArray($gamecolumnbar) Then Return
			ConsoleWrite("Game Bar start = " & $gamecolumnbar[0] & ", " & $gamecolumnbar[1] & @LF)
			Local $gamepixsearchid = PixelSearch($gamecolumnbar[0] + 2, $gamecolumnbar[1], 999 + $pos[0], $gamecolumnbar[1], 526344, 5, 1, $hwlobby)
			ConsoleWrite("Game Bar finish = " & $gamepixsearchid[0] & ", " & $gamepixsearchid[1] & @LF)
			Local $gamex2 = $gamepixsearchid[0] - 1
			Local $limitcolumnbar = PixelSearch($gamex2 + 1, 229 + $pos[1], 999 + $pos[0], 229 + $pos[1], 526344, 0, 1, $hwlobby)
			If NOT IsArray($limitcolumnbar) Then Return
			ConsoleWrite("Limit Bar start = " & $limitcolumnbar[0] & ", " & $limitcolumnbar[1] & @LF)
			Local $limitpixsearchid = PixelSearch($limitcolumnbar[0] + 2, $limitcolumnbar[1], 999 + $pos[0], $gamecolumnbar[1], 526344, 5, 1, $hwlobby)
			ConsoleWrite("Limit Bar finish = " & $limitpixsearchid[0] & ", " & $limitpixsearchid[1] & @LF)
			Local $limitx2 = $limitpixsearchid[0] - 1
			Local $buyincolumnbar = PixelSearch($limitx2 + 1, 229 + $pos[1], 999 + $pos[0], 229 + $pos[1], 526344, 0, 1, $hwlobby)
			If NOT IsArray($buyincolumnbar) Then Return
			ConsoleWrite("Buyin Bar start = " & $buyincolumnbar[0] & ", " & $buyincolumnbar[1] & @LF)
			Local $buyinpixsearchid = PixelSearch($buyincolumnbar[0] + 2, $buyincolumnbar[1], 999 + $pos[0], $gamecolumnbar[1], 526344, 5, 1, $hwlobby)
			ConsoleWrite("Buyin Bar finish = " & $buyinpixsearchid[0] & ", " & $buyinpixsearchid[1] & @LF)
			Local $buyinx1 = $buyincolumnbar[0] + 1
			Local $buyinx2 = $buyinpixsearchid[0] - 1
			Local $statuscolumnbar = PixelSearch($buyinx2 + 1, 229 + $pos[1], 999 + $pos[0], 229 + $pos[1], 526344, 0, 1, $hwlobby)
			If NOT IsArray($statuscolumnbar) Then Return
			ConsoleWrite("Status Bar start = " & $statuscolumnbar[0] & ", " & $statuscolumnbar[1] & @LF)
			Local $statuspixsearchid = PixelSearch($statuscolumnbar[0] + 2, $statuscolumnbar[1], 999 + $pos[0], $gamecolumnbar[1], 526344, 5, 1, $hwlobby)
			ConsoleWrite("Status Bar finish = " & $statuspixsearchid[0] & ", " & $statuspixsearchid[1] & @LF)
			Local $statusx2 = $statuspixsearchid[0] - 1
			Local $playerscolumnbar = PixelSearch($statusx2 + 1, 229 + $pos[1], 999 + $pos[0], 229 + $pos[1], 526344, 0, 1, $hwlobby)
			If NOT IsArray($playerscolumnbar) Then Return
			ConsoleWrite("Players Bar start = " & $playerscolumnbar[0] & ", " & $playerscolumnbar[1] & @LF)
			ConsoleWrite("Players Bar finish = 996" & @LF)
			Local $pixy = 0
			Local $pixy2 = 0
			Local $pixsearch
			If IsArray($pos) Then
				WinActivate($hwlobby)
				For $x = 0 To 23
					$tcolor = PixelGetColor(598 + $pos[0], 252 + $pos[1] + (20 * $x), $hwlobby)
					If $x = 0 Then
						For $y = 0 To 9
							For $z = 0 To 60
								If PixelGetColor(601 + $pos[0] + $z, 243 + $pos[1] + $y, $hwlobby) <> $tcolor Then
									$pixsearch = True
									$pixy = 243 + ($y - 1)
									$pixy2 = 243 + ($y - 1) + 12
									ExitLoop
								EndIf
							Next
							If $pixsearch = True Then ExitLoop
						Next
					EndIf
					If $tcolor == 8978441 Then
						ConsoleWrite("$pixy: " & $pixy & @LF)
						ConsoleWrite("$pixy2: " & $pixy2 & @LF)
						$range1 = -0.01
						$idscrape = _scanstring($tablex1, $pixy + ($x * 20), $tablex2, $pixy2 + ($x * 20), $tcolor, $range1, $hwlobby)
						$datescrape = _scanstring($startx1, $pixy + ($x * 20), $startx2, $pixy2 + ($x * 20), $tcolor, $range1, $hwlobby)
						$buyinscrape = _scanstring($buyinx1, $pixy + ($x * 20), $buyinx2, $pixy2 + ($x * 20), $tcolor, $range1, $hwlobby)
						$idscrape = StringRegExpReplace($idscrape, "\s", "")
						$datescrape = StringRegExpReplace($datescrape, "\s", "")
						$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
						$idscrape = $datescrape & " " & $idscrape
						ConsoleWrite(@LF & "ID: " & $idscrape & @LF)
						ConsoleWrite("Date: " & $datescrape & @LF)
						ConsoleWrite("Buyin: " & $buyinscrape & @LF)
						ExitLoop
					Else
						ConsoleWrite("Line: " & $x + 1 & " / Color: " & Hex($tcolor) & @LF)
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "FullTilt" Then
			$nam1 = "FT"
			ConsoleWrite("Adding Full Tilt entries" & @LF)
			$hwlobby = WinGetHandle("[REGEXPTITLE:\A.*Full Tilt Poker.*- Logged In As.*\z]")
			If NOT WinExists($hwlobby) Then
				MsgBox(1, "Poker Site Error", "Please Login to Full Tilt")
				Return
			EndIf
			ConsoleWrite("Lobby: " & WinGetTitle($hwlobby) & @LF)
			$pos = WinGetPos($hwlobby)
			If IsArray($pos) Then
				WinActivate($hwlobby)
				For $x = 0 To 21
					$tcolor = PixelGetColor($pos[0] + 260, $pos[1] + 330 + (16 * $x), $hwlobby)
					Local $searchcolor = PixelGetColor($pos[0] + 260, $pos[1] + 330 + (16 * $x), $hwlobby)
					If $searchcolor <> 14215415 AND $searchcolor <> 16777215 Then
						ConsoleWrite("Line: " & $x & " Search Color: " & $searchcolor & @LF)
						WinActivate($hlobby)
						If $x == 0 Then
							Send("{DOWN}")
						Else
							Send("{UP}")
						EndIf
						Local $newcolor = PixelGetColor($pos[0] + 260, $pos[1] + 330 + (16 * $x), $hwlobby)
						Sleep(500)
						$idscrape = _scanstringwithoutscreenshot(345, 323 + ($x * 16), 521, 336 + ($x * 16), $newcolor, -0.0001, $hwlobby)
						$datescrape = _scanstringwithoutscreenshot(266, 323 + ($x * 16), 343, 336 + ($x * 16), $newcolor, -0.0001, $hwlobby)
						$buyinscrape = _scanstringwithoutscreenshot(564, 323 + ($x * 16), 630, 336 + ($x * 16), $newcolor, -0.0001, $hwlobby)
						$idscrape = StringRegExpReplace($idscrape, "\s", "")
						ConsoleWrite("$IDScrape: *" & $idscrape & "*" & @LF)
						$datescrape = StringRegExpReplace($datescrape, "\s", "")
						ConsoleWrite("$DateScrape: *" & $datescrape & "*" & @LF)
						$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
						ConsoleWrite("$BuyinScrape: *" & $buyinscrape & "*" & @LF)
						$idscrape = $datescrape & " " & $idscrape
						$idscrape = StringRegExpReplace($idscrape, "\s", "")
						ConsoleWrite("$IDScrape: *" & $idscrape & "*" & @LF)
						ExitLoop
					Else
						ConsoleWrite("Search Color 2: " & $searchcolor & @LF)
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
			$nam1 = "BW"
			ConsoleWrite("Adding PartyGaming entries" & @LF)
			If GUICtrlRead($cmbsite) == "Bwin" Then
				ConsoleWrite("Bwin" & @LF)
				$hwlobby = WinGetHandle("[REGEXPTITLE:\Abwin.*Lobby.*\z]")
			Else
				ConsoleWrite("Party" & @LF)
				$hwlobby = WinGetHandle("[REGEXPTITLE:\Apartypoker.*Lobby.*\z]")
				ConsoleWrite("Title: " & WinGetTitle($hwlobby) & @LF)
			EndIf
			If NOT WinExists($hwlobby) Then
				MsgBox(0, "Poker Site Error", "Please Login to PartyGaming")
				Return
			EndIf
			WinActivate($hwlobby)
			WinWaitActive($hwlobby, "", 2)
			For $x = 1 To 100
				Local $controlhnd = ControlGetHandle($hwlobby, "", "SysListView32" & $x)
				Local $isvisible = ControlCommand($hwlobby, "", $controlhnd, "IsVisible")
				Local $isenabled = ControlCommand($hwlobby, "", $controlhnd, "IsEnabled")
				If $isvisible == 1 AND $isenabled == 1 Then
					ConsoleWrite("Visible: " & $x & @LF)
					$listview = "SysListView32" & $x
					ConsoleWrite("SysListView: " & $listview & @LF)
					ExitLoop
				EndIf
			Next
			Local $lobbyitemcount = ControlListView($hwlobby, "", $listview, "GetItemCount")
			ConsoleWrite("Count: " & $lobbyitemcount & @LF)
			For $line = 0 To $lobbyitemcount - 1 Step +1
				$tcolor = ControlListView($hlobby, "", $listview, "IsSelected", $line)
				If $tcolor == 1 Then
					ConsoleWrite("Line: " & $line & " selected" & @LF)
					$idscrape = ControlListView($hwlobby, "", $listview, "GetText", $line, 1)
					$buyinscrape = ControlListView($hwlobby, "", $listview, "GetText", $line, 4)
					$idscrape = StringRegExpReplace($idscrape, "\s", "")
					$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
					Local $id = ControlListView($hwlobby, "", $listview, "GetText", $line, 0)
					$id = StringRegExpReplace($id, "\s", "")
					$id = StringMid($id, StringInStr($id, "-") + 3)
					$idscrape = String($id) & String($idscrape)
					fconsolewrite("Tourney Added to list")
					ExitLoop
				EndIf
			Next
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "TruePoker" Then
			ConsoleWrite("Adding AmericasCardRoom entries" & @LF)
			$hwlobby = WinGetHandle("[REGEXPTITLE:\A.*Tournament Lobby.*\z]")
			If NOT WinExists($hwlobby) Then
				MsgBox(1, "Poker Site Error", "Please Login to ACR")
				Return
			EndIf
			Local $off = WinGetPos($hwlobby)
			$count = ControlListView($hwlobby, "", "IGListCtrl1", "GetItemCount")
			If IsArray($off) Then
				ConsoleWrite("Count: " & $count & @LF)
				For $line = 0 To $count - 1 Step +1
					$isselected = ControlListView($hwlobby, "", "IGListCtrl1", "IsSelected", $line)
					If $isselected == 1 Then
						$buyinscrape = ControlListView($hwlobby, "", "IGListCtrl1", "GetText", $line, 5)
						$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
						$idscrape = ControlListView($hwlobby, "", "IGListCtrl1", "GetText", $line, 1)
						$idscrape = StringRegExpReplace($idscrape, "\s", "")
						$tablescrape = ControlListView($hwlobby, "", "IGListCtrl1", "GetText", $line, 2)
						$tablescrape = StringRegExpReplace($tablescrape, "\s", "")
						$idscrape = $idscrape & " " & $tablescrape
						ExitLoop
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			ConsoleWrite("Adding 888Poker entries" & @LF)
			$hwlobby = WinGetHandle("[REGEXPTITLE:\A.*Lobby.*\z]")
			If NOT WinExists($hwlobby) Then
				MsgBox(1, "Poker Site Error", "Please Login to 888Poker")
				Return
			EndIf
			Local $temppos = WinGetPos($hwlobby)
			If $temppos[0] <> 0 OR $temppos[1] <> 0 Then
				WinMove($hwlobby, "", 0, 0, Default, Default, 1)
			EndIf
			WinActivate($hwlobby)
			_winapi_setforegroundwindow($hwlobby)
			WinWaitActive($hwlobby, "", 1)
			$pos = WinGetCaretPos()
			$idstart = PixelSearch(1 + $pos[0], 210 + $pos[1], 757 + $pos[0], 307 + $pos[1], 4408131, 0, 1, $hwlobby)
			ConsoleWrite("ID Bar start = " & $idstart[0] & ", " & $idstart[1] & @LF)
			$idfinish = PixelSearch($idstart[0] + 2, $idstart[1], 729 + $pos[0], $idstart[1], 2894892, 5, 1, $hwlobby)
			ConsoleWrite("ID Bar finish = " & $idfinish[0] & ", " & $idfinish[1] & @LF)
			$idx2 = $idfinish[0]
			$tablecolumnbar = PixelSearch(2 + $idx2, 222 + $pos[1], 757 + $pos[0], 307 + $pos[1], 4408131, 0, 1, $hwlobby)
			ConsoleWrite("Table Bar start = " & $tablecolumnbar[0] & ", " & $tablecolumnbar[1] & @LF)
			$tablepixsearchid = PixelSearch($tablecolumnbar[0] + 2, $tablecolumnbar[1], 729 + $pos[0], $tablecolumnbar[1], 2894892, 5, 1, $hwlobby)
			ConsoleWrite("Table Bar finish = " & $tablepixsearchid[0] & ", " & $tablepixsearchid[1] & @LF)
			$tablex1 = $tablecolumnbar[0] + 2
			$tablex2 = $tablepixsearchid[0] - 1
			Local $typecolumnbar = PixelSearch(3 + $tablex2, 222 + $pos[1], 757 + $pos[0], 307 + $pos[1], 4408131, 0, 1, $hwlobby)
			ConsoleWrite("Type Bar start = " & $typecolumnbar[0] & ", " & $typecolumnbar[1] & @LF)
			Local $typepixsearchid = PixelSearch($typecolumnbar[0] + 2, $typecolumnbar[1], 729 + $pos[0], $typecolumnbar[1], 2894892, 5, 1, $hwlobby)
			ConsoleWrite("Type Bar finish = " & $typepixsearchid[0] & ", " & $typepixsearchid[1] & @LF)
			Local $typex2 = $typepixsearchid[0]
			Local $datecolumnbar = PixelSearch(3 + $typex2, 222 + $pos[1], 757 + $pos[0], 307 + $pos[1], 4408131, 0, 1, $hwlobby)
			ConsoleWrite("Date Bar start = " & $datecolumnbar[0] & ", " & $datecolumnbar[1] & @LF)
			Local $datepixsearchid = PixelSearch($datecolumnbar[0] + 2, $datecolumnbar[1], 729 + $pos[0], $datecolumnbar[1], 2894892, 5, 1, $hwlobby)
			ConsoleWrite("Date Bar finish = " & $datepixsearchid[0] & ", " & $datepixsearchid[1] & @LF)
			Local $datex2 = $datepixsearchid[0]
			$gamecolumnbar = PixelSearch(3 + $datex2, 222 + $pos[1], 757 + $pos[0], 307 + $pos[1], 4408131, 0, 1, $hwlobby)
			ConsoleWrite("Game Bar start = " & $gamecolumnbar[0] & ", " & $gamecolumnbar[1] & @LF)
			$gamepixsearchid = PixelSearch($gamecolumnbar[0] + 2, $gamecolumnbar[1], 729 + $pos[0], $gamecolumnbar[1], 2894892, 5, 1, $hwlobby)
			ConsoleWrite("Game Bar finish = " & $gamepixsearchid[0] & ", " & $gamepixsearchid[1] & @LF)
			$gamex2 = $gamepixsearchid[0]
			$buyincolumnbar = PixelSearch(3 + $gamex2, 222 + $pos[1], 757 + $pos[0], 307 + $pos[1], 4408131, 0, 1, $hwlobby)
			ConsoleWrite("Buyin Bar start = " & $buyincolumnbar[0] & ", " & $buyincolumnbar[1] & @LF)
			$buyinpixsearchid = PixelSearch($buyincolumnbar[0] + 2, $buyincolumnbar[1], 729 + $pos[0], $buyincolumnbar[1], 2894892, 5, 1, $hwlobby)
			ConsoleWrite("Buyin Bar finish = " & $buyinpixsearchid[0] & ", " & $buyinpixsearchid[1] & @LF)
			$buyinx1 = $buyincolumnbar[0] - 2
			$buyinx2 = $buyinpixsearchid[0]
			$statuscolumnbar = PixelSearch(3 + $buyinx2, 222 + $pos[1], 757 + $pos[0], 307 + $pos[1], 4408131, 0, 1, $hwlobby)
			ConsoleWrite("Status Bar start = " & $statuscolumnbar[0] & ", " & $statuscolumnbar[1] & @LF)
			$statuspixsearchid = PixelSearch($statuscolumnbar[0] + 2, $statuscolumnbar[1], 729 + $pos[0], $statuscolumnbar[1], 2894892, 5, 1, $hwlobby)
			ConsoleWrite("Status Bar finish = " & $statuspixsearchid[0] & ", " & $statuspixsearchid[1] & @LF)
			$statusx2 = $statuspixsearchid[0]
			$playerscolumnbar = PixelSearch(3 + $statusx2, 222 + $pos[1], 757 + $pos[0], 307 + $pos[1], 4408131, 0, 1, $hwlobby)
			ConsoleWrite("Players Bar start = " & $playerscolumnbar[0] & ", " & $playerscolumnbar[1] & @LF)
			ConsoleWrite("Players Bar finish = 750" & @LF)
			$pixy = 0
			$pixy2 = 0
			If IsArray($pos) Then
				WinActivate($hwlobby)
				Sleep(300)
				For $a = 0 To 28
					$isselected = PixelGetColor(302 + $pos[0], 243 + $pos[1] + ($a * 13), $hwlobby)
					$pixsearch = False
					If $a = 0 Then
						For $y = 0 To 9
							For $z = 0 To 60
								If PixelGetColor(490 + $pos[0] + $z, 236 + $pos[1] + $y, $hwlobby) <> $isselected Then
									$pixsearch = True
									$pixy = 236 + $y
									$pixy2 = 236 + $y + 10
									ExitLoop
								EndIf
							Next
							If $pixsearch = True Then ExitLoop
						Next
					EndIf
					ConsoleWrite("Scanning Buyin: " & $buyinx1 & ", " & $pixy + (13 * $a) & ", " & $buyinx2 & ", " & $pixy2 + (13 * $a) & @LF)
					If $isselected == 223403 Then
						$buyinscrape = _scanstring($buyinx1, $pixy + (13 * $a), $buyinx2, $pixy2 + (13 * $a), $isselected, -0.01, $hwlobby)
						$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
						ConsoleWrite("Buyin scrape complete " & @LF)
						$tablescrape = _scanstring($tablex1 - 5, $pixy + (13 * $a), $tablex2, $pixy2 + (13 * $a), $isselected, -0.01, $hwlobby)
						$tablescrape = StringRegExpReplace($tablescrape, "\s", "")
						ConsoleWrite("Table scrape complete " & @LF)
						$idscrape = $tablescrape
						ExitLoop
					EndIf
				Next
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
			$nam1 = "CB"
			ConsoleWrite("Adding Carbon entries" & @LF)
			If GUICtrlRead($cmbsite) == "Carbon" Then
				$hwlobby = WinGetHandle("[REGEXPTITLE:\ACarbon.*Connected.*\z]")
			ElseIf GUICtrlRead($cmbsite) == "Walker" Then
				$hwlobby = WinGetHandle("[REGEXPTITLE:\AWalker.*Connected.*\z]")
			Else
				$hwlobby = WinGetHandle("[REGEXPTITLE:\ABlack Chip.*Connected.*\z]")
			EndIf
			If NOT WinExists($hwlobby) Then
				MsgBox(0, "Poker Site Error", "Please Login")
				Return
			EndIf
			$pos = WinGetPos($hwlobby)
			If IsArray($pos) Then
				WinActivate($hwlobby)
				For $x = 0 To 21
					$tcolor = PixelGetColor(693 + $pos[0], 208 + $pos[1] + (22 * $x), $hwlobby)
					If $tcolor == 14672877 Then
						$buyinscrape = _scanstringwithoutscreenshot(749, 203 + (22 * $x), 802, 213 + (22 * $x), $tcolor, -0.01, $hwlobby)
						$buyinscrape = StringRegExpReplace($buyinscrape, "\s", "")
						Local $timescrape = _scanstringwithoutscreenshot(277, 203 + (22 * $x), 368, 213 + (22 * $x), $tcolor, -0.01, $hwlobby)
						$timescrape = StringRegExpReplace($timescrape, "\s", "")
						ConsoleWrite("$timeScrape 1: " & $timescrape & @LF)
						If StringInStr($timescrape, ":") Then
							ConsoleWrite(": found" & @LF)
							$timescrape = StringRight($timescrape, StringInStr($timescrape, ":") - 3)
							ConsoleWrite("$timeScrape 2: " & $timescrape & @LF)
						EndIf
						$idscrape = _scanstringwithoutscreenshot(370, 203 + (22 * $x), 620, 213 + (22 * $x), $tcolor, -0.01, $hwlobby)
						$idscrape = StringRegExpReplace($idscrape, "\s", "")
						$idscrape = $timescrape & $idscrape
						fconsolewrite("Tourney Added to list")
						ExitLoop
					EndIf
				Next
			EndIf
		EndIf
		Local $newvalue = GUICtrlRead($cmbsite) & "~" & GUICtrlRead($cmbmonth) & "/" & GUICtrlRead($cmbdate) & " " & GUICtrlRead($cmbh) & ":" & GUICtrlRead($txtm) & "~" & $idscrape & "~" & $buyinscrape
		IniWrite($inifile, "toplayMTT", $newvalue, 1)
		updatelistviewtoplaymtt()
		$dataentry = 0
	EndFunc

	Func carbonregistertourney($trn)
		fconsolewrite("CarbRT Begin")
		$nam1 = "CB"
		Local $lobbytitle
		If GUICtrlRead($cmbsite) == "Carbon" Then
			$lobbytitle = "[REGEXPTITLE:\A.*Carbon Poker.*-.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Walker" Then
			$lobbytitle = "[REGEXPTITLE:\A.*Walker.*-.*\z]"
		Else
			$lobbytitle = "[REGEXPTITLE:\A.*Black Chip.*-.*\z]"
		EndIf
		$hlobby = WinGetHandle($lobbytitle)
		Sleep(500)
		$tourneyregok = False
		$sharkfound = False
		Local $tablename = ""
		Local $buyin
		WinSetState($hlobby, "", @SW_RESTORE)
		WinActivate($hlobby)
		WinWaitActive($hlobby, "", 2)
		Local $off = WinGetPos($hlobby)
		WinActivate($hlobby)
		Local $trn3 = $trn
		Local $textcolor
		SendKeepActive($hlobby)
		Send("{HOME}")
		If IsArray($off) Then
			WinActivate($hlobby)
			WinWaitActive($hlobby, "", 2)
			For $a = 0 To 21
				$textcolor = PixelGetColor($off[0] + 273, $off[1] + 208 + (22 * $a), $hlobby)
				$buyin = _scanstringwithoutscreenshot(727, 203 + (22 * $a), 758, 213 + (22 * $a), $textcolor, -0.01, $hlobby)
				$buyin = StringRegExpReplace($buyin, "\s", "")
				If $buyin == "" Then
					fconsolewrite("AT: No sng to select on line: " & $a + 1)
					ConsoleWrite("Text Color: " & $textcolor & @LF)
					ContinueLoop
				EndIf
				$buyin = StringRegExpReplace($buyin, "\s", "")
				If $trn[2] <> $buyin Then
					fconsolewrite($buyin & "<>" & $trn[2])
					ContinueLoop
				Else
					fconsolewrite("Buyin match at line " & $a + 1)
				EndIf
				$tablename = _scanstringwithoutscreenshot(378, 203 + (22 * $a), 525, 213 + (22 * $a), $textcolor, -0.01, $hlobby)
				$tablename = StringRegExpReplace($tablename, "\s", "")
				fconsolewrite("Carbon Reg TableName: " & $tablename)
				Local $timescrape = _scanstringwithoutscreenshot(311, 203 + (22 * $a), 360, 213 + (22 * $a), $textcolor, -0.01, $hlobby)
				$timescrape = StringRegExpReplace($timescrape, "\s", "")
				Local $idscrape
				$idscrape = $timescrape & $tablename
				If $idscrape == $trn3[3] AND $buyin == $trn3[4] Then
					WinActivate($hlobby)
					WinWaitActive($hlobby, "", 2)
					MouseClick("left", $winpos[0] + 449, 206 + $winpos[1] + (22 * $a), 1, 1)
					MouseClick("right", $winpos[0] + 449, 206 + $winpos[1] + (22 * $a), 1, 1)
					WinWait("[REGEXPCLASS:\A#32768\z]", "", 2)
					If WinExists("[REGEXPCLASS:\A#32768\z]") Then
						Local $menupos = WinGetPos("[REGEXPCLASS:\A#32768\z]")
						MouseMove($menupos[0] + 35, $menupos[1] + 40, 1)
						MouseDown("left")
						Sleep(300)
						MouseUp("left")
					Else
						Return
					EndIf
					Sleep(1000)
					Sleep(300)
					WinWait("Tournament Registration", "", 2)
					If WinExists("Tournament Registration") Then
						WinActivate("Tournament Registration")
						Local $buyinpos = WinGetPos("Tournament Registration")
						If IsArray($buyinpos) Then
							MouseClick("left", $buyinpos[0] + 94, $buyinpos[1] + 268, 1, 0)
						EndIf
					Else
						fconsolewrite("Buyin window not found")
						$tourneyregok = False
						$tablename = ""
						Return False
					EndIf
					WinWait("Tournament Registration Success", "", 2)
					If WinExists("Tournament Registration Success") Then
						WinActivate("Tournament Registration Success")
						Local $regpos = WinGetPos("Tournament Registration")
						If IsArray($regpos) Then
							MouseClick("left", $regpos[0] + 357, $regpos[1] + 223, 1, 0)
						EndIf
						$tourneyregok = True
						Return True
					Else
						fconsolewrite("Registration unsuccessful")
						$tourneyregok = False
						Return False
					EndIf
				ElseIf $trn[2] <> $buyin Then
					fconsolewrite("AT: Final Buyins do not match")
					ContinueLoop
				Else
					fconsolewrite("AT: Player check does not match")
				EndIf
			Next
			Sleep(1500)
		EndIf
		Return False
	EndFunc

	Func handlextrawin()
		Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				$winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) Then
					If $winpos[2] == 402 AND iswindowvisible($winlist[$x][1]) Then
						If IsArray(PixelSearch($winpos[0] + 197, $winpos[1] + 239, $winpos[0] + 197, $winpos[1] + 239, 4144959, 3, 1, $winlist[$x][1])) AND IsArray(PixelSearch($winpos[0] + 197, $winpos[1] + 239, $winpos[0] + 197, $winpos[1] + 239, 4144959, 3, 1, $winlist[$x][1])) Then
							fconsolewrite("Xtra Window visible... closing")
							MouseClick("left", $winpos[0] + 202, $winpos[1] + 242, 1, 0)
						EndIf
					EndIf
					If $winpos[2] == 430 AND iswindowvisible($winlist[$x][1]) Then
						WinClose($winlist[$x][1])
					EndIf
				EndIf
			Next
		EndIf
	EndFunc

	Func updatelistviewtoplaymtt()
		_guictrllistview_deleteallitems(GUICtrlGetHandle($listtoplaymtt))
		Local $rawtoplay = IniReadSection($inifile, "toplayMTT")
		_arraysort($rawtoplay, 0, 1)
		If @error == 0 Then
			For $a = 1 To $rawtoplay[0][0]
				Local $tvalue = StringSplit($rawtoplay[$a][0], "~")
				_guictrllistview_additem($listtoplaymtt, "")
				_guictrllistview_addsubitem($listtoplaymtt, $a - 1, $tvalue[1], 1)
				_guictrllistview_addsubitem($listtoplaymtt, $a - 1, $tvalue[2], 2)
				_guictrllistview_addsubitem($listtoplaymtt, $a - 1, $tvalue[3], 3)
				_guictrllistview_addsubitem($listtoplaymtt, $a - 1, $tvalue[4], 4)
				If $rawtoplay[$a][1] = 1 Then
					_guictrllistview_setitemchecked($listtoplaymtt, $a - 1, 1)
				EndIf
			Next
		EndIf
		Local $toplay = IniReadSection($inifile, "toPlayMTT")
		If IsArray($toplay) AND $toplay[0][0] > 0 Then
			For $i = 1 To $toplay[0][0]
				IniDelete($inifile, "toPlayMTT", $toplay[$i][0])
			Next
		EndIf
		IniWriteSection($inifile, "toPlayMTT", $rawtoplay)
	EndFunc

	Func btndeletetoplayclickmtt()
		Local $delflag
		$delflag = 0
		Local $si = _guictrllistview_getselectedindices($listtoplaymtt, True)
		If $si[0] > 0 Then
			Local $selecteditem = _guictrllistview_getitemtextstring($listtoplaymtt, $si[1])
			If StringLen($selecteditem) > 0 Then
				Local $sitem = StringSplit($selecteditem, "|")
				If $sitem[0] >= 4 Then
					IniDelete($inifile, "toplayMTT", $sitem[2] & "~" & $sitem[3] & "~" & $sitem[4] & "~" & $sitem[5])
					$delflag = 1
				Else
					MsgBox(0, "Selection", "Nothing Selected")
				EndIf
			EndIf
		Else
			MsgBox(0, "Selection", "Nothing Selected")
		EndIf
		updatelistviewtoplaymtt()
		Return $delflag
	EndFunc

	$tablesfinished = 0
	Global $numsng = ControlGetText($maingui, "", $numsngopentxt)
	Global $pathofbot = ControlGetText($maingui, "", $bottxt)
	Global $posx0 = ControlGetText($maingui, "", $x0txt)
	Global $posx1 = ControlGetText($maingui, "", $x1txt)
	Global $posx2 = ControlGetText($maingui, "", $x2txt)
	Global $posx3 = ControlGetText($maingui, "", $x3txt)
	Global $posx4 = ControlGetText($maingui, "", $x4txt)
	Global $posx5 = ControlGetText($maingui, "", $x5txt)
	Global $posy0 = ControlGetText($maingui, "", $y0txt)
	Global $posy1 = ControlGetText($maingui, "", $y1txt)
	Global $posy2 = ControlGetText($maingui, "", $y2txt)
	Global $posy3 = ControlGetText($maingui, "", $y5txt)
	Global $posy4 = ControlGetText($maingui, "", $y4txt)
	Global $posy5 = ControlGetText($maingui, "", $y5txt)
	Global $iattemptsatfindingannounce = 0
	Global $guix = -1
	Global $guiy = -1
	Global $wdays[8] = [7, "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
	GUICtrlSetOnEvent($btnsavesettings, "SaveSettings")
	GUICtrlSetOnEvent($btncheckwindowinfo, "CreateFinder")
	GUICtrlSetOnEvent($startbtn, "StartNow")
	GUICtrlSetOnEvent($btnhide, "Hide")
	GUICtrlSetOnEvent($btnexit, "ExitEvent")
	GUICtrlSetOnEvent($clientbodogbot, "FindClientBodog")
	GUICtrlSetOnEvent($clienteeebot, "FindClientEEE")
	GUICtrlSetOnEvent($clientipbot, "FindClientIPoker")
	GUICtrlSetOnEvent($btnsupportcenter, "chkbtnSupportCenter")
	GUICtrlSetOnEvent($cmdbot, "FindBot")
	GUICtrlSetOnEvent($btnstartscheduler, "btnStartSchedulerClick")
	GUICtrlSetOnEvent($btnaddschedule, "btnAddScheduleClick")
	GUICtrlSetOnEvent($btndeleteschedule, "btnDeleteScheduleClick")
	GUICtrlSetOnEvent($btnupdateschedule, "btnUpdateScheduleClick")
	GUICtrlSetOnEvent($btnteststats, "TestsStats")
	GUISetOnEvent($gui_event_close, "ExitEvent")
	GUICtrlSetOnEvent($btnt1, "Pos1")
	GUICtrlSetOnEvent($btnt2, "Pos2")
	GUICtrlSetOnEvent($btnt3, "Pos3")
	GUICtrlSetOnEvent($btnt4, "Pos4")
	GUICtrlSetOnEvent($btnt5, "Pos5")
	GUICtrlSetOnEvent($btnt6, "Pos6")
	GUICtrlSetOnEvent($btnt7, "Pos7")
	GUICtrlSetOnEvent($btnt8, "Pos8")
	GUICtrlSetOnEvent($btnt9, "Pos9")
	GUICtrlSetOnEvent($btnt10, "Pos10")
	GUICtrlSetOnEvent($btnt11, "Pos11")
	GUICtrlSetOnEvent($btnt12, "Pos12")
	GUICtrlSetOnEvent($btnt13, "Pos13")
	GUICtrlSetOnEvent($btnt14, "Pos14")
	GUICtrlSetOnEvent($btnt15, "Pos15")
	GUICtrlSetOnEvent($btnt16, "Pos16")
	GUICtrlSetOnEvent($btnt17, "Pos17")
	GUICtrlSetOnEvent($btnt18, "Pos18")
	GUICtrlSetOnEvent($btnt19, "Pos19")
	GUICtrlSetOnEvent($btnt20, "Pos20")
	GUICtrlSetOnEvent($btnt21, "Pos21")
	GUICtrlSetOnEvent($btnt22, "Pos22")
	GUICtrlSetOnEvent($numbotscmb, "DisableTables")
	GUICtrlSetOnEvent($cmbemailprov, "SetPort")
	GUICtrlSetOnEvent($cmbsite, "SetData")
	Global $server, $database, $authmode, $username, $password, $driver, $query, $conn, $test
	Global $playername = ""
	$server = GUICtrlRead($input_server)
	$database = GUICtrlRead($input_db)
	$authmode = 1
	$username = GUICtrlRead($input_uid)
	$password = GUICtrlRead($input_pwd)
	$driver = $input_dr
	$playername = GUICtrlRead($txtplayername)
	If GUICtrlRead($chkmaxlogging) == $gui_checked OR IniRead($inifile, "Settings", "$chkMaxLogging", 0) == 1 Then
		$logall = 1
	Else
		$logall = 0
	EndIf

	Func purchasefull()
		ShellExecute("http://www.OpenHoldemStore.com/")
	EndFunc

	Func setport()
		If GUICtrlRead($cmbemailprov) == "Gmail" Then
			GUICtrlSetData($txtport, "465")
			GUICtrlSetData($txtserver, "smtp.gmail.com")
			GUICtrlSetState($chkssl, $gui_checked)
		ElseIf GUICtrlRead($cmbemailprov) == "Yahoo" Then
			GUICtrlSetData($txtport, "465")
			GUICtrlSetData($txtserver, "smtp.mail.yahoo.com")
			GUICtrlSetState($chkssl, $gui_checked)
		ElseIf GUICtrlRead($cmbemailprov) == "Hotmail" Then
			GUICtrlSetData($txtport, "587")
			GUICtrlSetData($txtserver, "smtp.live.com")
			GUICtrlSetState($chkssl, $gui_checked)
		ElseIf GUICtrlRead($cmbemailprov) == "Aol" Then
			GUICtrlSetData($txtport, "587")
			GUICtrlSetData($txtserver, "smtp.aol.com")
			GUICtrlSetState($chkssl, $gui_checked)
		Else
			GUICtrlSetData($txtport, "587")
			GUICtrlSetData($txtserver, "")
			GUICtrlSetState($chkssl, $gui_checked)
		EndIf
	EndFunc

	readsettings()
	setdata()
	TraySetIcon(@ScriptDir & "\icons\Poker chips.ico")
	Global $hideitem = TrayCreateItem("Hide")
	TrayItemSetOnEvent(-1, "Hide")
	Global $aboutitem = TrayCreateItem("About")
	TrayItemSetOnEvent(-1, "AboutClick")
	Global $pauseitem = TrayCreateItem("Pause")
	TrayItemSetOnEvent(-1, "TogglePause")
	Global $exititem = TrayCreateItem("Exit")
	TrayItemSetOnEvent(-1, "ExitEvent")
	TraySetState()
#EndRegion ### END Koda GUI section ###
Global $nummins = 0
Global $shitlist = ""
Global $usernummins, $textbot, $textprof, $textbatch
Global $executable, $textexec
Global $hand
Global $numsngs
Global $nummin
Global $botstart, $sngstart, $numbotstart, $addsng, $lobbyhan, $winwidth, $winheight
Global $bscheduledtorun = False
Global $sendtimeblock = _nowcalc()
Global $lastdayupdated = -1
Global $lastschedulermessage = ""
Global $hidden = False

Func _pixelgetcolor_createdc($hdll = "gdi32.dll")
	Local $ipixelgetcolor_memorycontext = DllCall($hdll, "int", "CreateCompatibleDC", "int", 0)
	If @error Then Return SetError(@error, 0, 0)
	Return $ipixelgetcolor_memorycontext[0]
EndFunc

Func _pixelgetcolor_captureregion($ipixelgetcolor_memorycontext, $ileft = 0, $itop = 0, $iright = -1, $ibottom = -1, $fcursor = False, $hdll = "gdi32.dll")
	Local $hbitmap = _screencapture_capture("", $ileft, $itop, $iright, $ibottom, $fcursor)
	DllCall($hdll, "hwnd", "SelectObject", "int", $ipixelgetcolor_memorycontext, "hwnd", $hbitmap)
	Return $hbitmap
EndFunc

Func _pixelgetcolor_captureregionhnd($ipixelgetcolor_memorycontext, $hwnd = -1, $ileft = 0, $itop = 0, $iright = -1, $ibottom = -1, $fcursor = False, $hdll = "gdi32.dll")
	Local $hbitmap = _screencapture_capturewnd("", $hwnd, $ileft, $itop, $iright, $ibottom, $fcursor)
	DllCall($hdll, $hwnd, "SelectObject", "int", $ipixelgetcolor_memorycontext, $hwnd, $hbitmap)
	Return $hbitmap
EndFunc

Func _pixelgetcolor_saveregion($sfilename, $hbitmap)
	_screencapture_saveimage($sfilename, $hbitmap)
EndFunc

Func _pixelgetcolor_getpixel($ipixelgetcolor_memorycontext, $ix, $iy, $hdll = "gdi32.dll")
	Local $icolor = DllCall($hdll, "int", "GetPixel", "int", $ipixelgetcolor_memorycontext, "int", $ix, "int", $iy)
	If NOT IsArray($icolor) OR $icolor[0] == -1 Then Return SetError(1, 0, -1)
	Local $scolor = Hex($icolor[0], 6)
	Return StringRight($scolor, 2) & StringMid($scolor, 3, 2) & StringLeft($scolor, 2)
EndFunc

Func _pixelgetcolor_getpixelraw($ipixelgetcolor_memorycontext, $ix, $iy, $hdll = "gdi32.dll")
	Local $icolor = DllCall($hdll, "int", "GetPixel", "int", $ipixelgetcolor_memorycontext, "int", $ix, "int", $iy)
	Return $icolor[0]
EndFunc

Func _pixelgetcolor_releaseregion($hbitmap)
	_winapi_deleteobject($hbitmap)
EndFunc

Func _pixelgetcolor_releasedc($ipixelgetcolor_memorycontext, $hdll = "gdi32.dll")
	DllCall($hdll, "int", "DeleteDC", "hwnd", $ipixelgetcolor_memorycontext)
EndFunc

OnAutoItExitRegister("CloseOCRDLL")
Global $hdll = DllOpen("gdi32.dll")
Global $vdc = _pixelgetcolor_createdc($hdll)

Func closeocrdll()
	_pixelgetcolor_releasedc($vdc, $hdll)
	DllClose($hdll)
EndFunc

Func _scanstring($x1, $y1, $x2, $y2, $color, $range, $hwin)
	Local $oldmousecoordmode = Opt("MouseCoordMode")
	Local $oldpixelcoordmode = Opt("PixelCoordMode")
	Opt("MouseCoordMode", 1)
	Opt("PixelCoordMode", 1)
	Local $string = ""
	If WinExists($hwin) Then
		ffsetwnd($hwin)
		ffsnapshot()
		$string = ""
		Local $char = ""
		Local $flag = False
		Local $lastx = $x1
		Local $blanklines = 0
		For $x = $x1 To $x2
			Local $ypixel = 0
			For $y = $y1 To $y2
				If _colorrange(ffgetpixel($x, $y), $color, $range) Then
					$char = $char & "X"
					$ypixel = $ypixel + 1
				Else
					$char = $char & "_"
				EndIf
			Next
			If $ypixel == 0 Then
				If $flag Then
					$string = $string & _lookupchar($char, $x - $lastx, $y2 - $y1, $lastx, $y1)
					$lastx = $x
					$flag = False
				EndIf
				$blanklines = $blanklines + 1
				$char = ""
				If $blanklines > 3 Then
					$string = $string & " "
					$flag = False
					$blanklines = 0
				EndIf
			Else
				$blanklines = 0
				$flag = True
				$char = $char & "#"
			EndIf
		Next
		Opt("MouseCoordMode", $oldmousecoordmode)
		Opt("PixelCoordMode", $oldpixelcoordmode)
	EndIf
	Return StringStripWS($string, 3)
EndFunc

Func _scanstringwithscreenshot($x1, $y1, $x2, $y2, $color, $range, $hwin)
	Local $oldmousecoordmode = Opt("MouseCoordMode")
	Local $oldpixelcoordmode = Opt("PixelCoordMode")
	Opt("MouseCoordMode", 1)
	Opt("PixelCoordMode", 1)
	Local $string = ""
	If WinExists($hwin) Then
		$winpos = WinGetPos($hwin)
		$string = ""
		Local $char = ""
		Local $flag = False
		Local $lastx = $x1
		Local $blanklines = 0
		For $x = $x1 To $x2
			Local $ypixel = 0
			For $y = $y1 To $y2
				If _colorrange(PixelGetColor($x + $winpos[0], $y + $winpos[1]), $color, $range) Then
					$char = $char & "X"
					$ypixel = $ypixel + 1
				Else
					$char = $char & "_"
				EndIf
			Next
			If $ypixel == 0 Then
				If $flag Then
					$string = $string & _lookupchar($char, $x - $lastx, $y2 - $y1, $lastx + $winpos[0], $y1 + $winpos[1])
					$lastx = $x
					$flag = False
				EndIf
				$blanklines = $blanklines + 1
				$char = ""
				If $blanklines > 3 Then
					$string = $string & " "
					$flag = False
					$blanklines = 0
				EndIf
			Else
				$blanklines = 0
				$flag = True
				$char = $char & "#"
			EndIf
		Next
		Opt("MouseCoordMode", $oldmousecoordmode)
		Opt("PixelCoordMode", $oldpixelcoordmode)
	EndIf
	Return StringStripWS($string, 3)
EndFunc

Func _displaylines($lines)
	For $a = 0 To UBound($lines) - 1
		ConsoleWrite($lines[$a])
	Next
EndFunc

Func _lookupchar($chr, $w, $h, $x, $y)
	Local $rv = ""
	If StringInStr($chr, "X") > 0 Then
		Local $lines = StringSplit($chr, "#")
		If UBound($lines) > 1 Then
			While UBound($lines) >= 1 AND StringInStr($lines[1], "X") == 0
				_arraydelete($lines, 1)
			WEnd
			While UBound($lines) >= 1 AND StringInStr($lines[UBound($lines) - 1], "X") == 0
				_arraydelete($lines, UBound($lines) - 1)
			WEnd
			Local $newlines = ""
			For $i = 1 To StringLen($lines[1])
				For $a = 1 To UBound($lines) - 1
					$newlines = $newlines & StringMid($lines[$a], $i, 1)
				Next
				$newlines = $newlines & "#"
			Next
			$lines = StringSplit($newlines, "#")
			While StringInStr($lines[1], "X") == 0
				_arraydelete($lines, 1)
			WEnd
			$chr = ""
			For $i = 1 To UBound($lines) - 1
				$chr = $chr & $lines[$i] & "#"
			Next
			If GUICtrlRead($cmbsite) == "888Poker" Then
				$rv = IniRead($scrapeini, "CharsEEE", $chr, "")
			ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
				$rv = IniRead($scrapeini, "CharsMerge", $chr, "")
			ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
				$rv = IniRead($scrapeini, "CharsBodog", $chr, "")
			EndIf
		Else
			ConsoleWrite("Not enough lines to be a scan:" & $chr)
		EndIf
		If $dataentry == 1 AND $rv == "" Then
			SplashTextOn("ScanArea", "", $w, $h, $x, $y, 17)
			WinSetTrans("ScanArea", "", 130)
			ConsoleWrite("Unknown" & @LF)
			ConsoleWrite(StringReplace($chr, "#", @CRLF))
			SoundPlay("Alert.wav")
			$rv = InputBox("Hopper", "What character is this?", "", "", 200, 200, @DesktopWidth - 200, @DesktopHeight - 245, 0)
			If $rv = "" Then Return ""
			SplashOff()
			If GUICtrlRead($cmbsite) == "888Poker" Then
				IniWrite($scrapeini, "CharsEEE", $chr, $rv)
			ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
				IniWrite($scrapeini, "CharsMerge", $chr, $rv)
			ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
				IniWrite($scrapeini, "CharsBodog", $chr, $rv)
			EndIf
		EndIf
	EndIf
	Return $rv
EndFunc

Func _colorrange($rbg, $pixel, $shade = 0)
	Local $anti = False
	If $shade == 0 Then Return $rbg == $pixel
	If $shade < 0 Then
		$shade *= -1
		$anti = True
	EndIf
	Local $mask
	Local $pix
	Local $difference
	$mask = BitAND($rbg, 16711680)
	$mask = BitShift($mask, 16)
	$pix = BitAND($pixel, 16711680)
	$pix = BitShift($pix, 16)
	$difference = Abs($mask - $pix)
	If (NOT $anti AND $difference >= $shade) OR ($anti AND $difference <= $shade) Then
		Return 0
	EndIf
	$mask = BitAND($rbg, 65280)
	$mask = BitShift($mask, 8)
	$pix = BitAND($pixel, 65280)
	$pix = BitShift($pix, 8)
	$difference = Abs($mask - $pix)
	If (NOT $anti AND $difference >= $shade) OR ($anti AND $difference <= $shade) Then
		Return 0
	EndIf
	$mask = BitAND($rbg, 255)
	$pix = BitAND($pixel, 255)
	$difference = Abs($mask - $pix)
	If (NOT $anti AND $difference >= $shade) OR ($anti AND $difference <= $shade) Then
		Return 0
	EndIf
	Return 1
EndFunc

Func _scanstringwithoutscreenshot($x1, $y1, $x2, $y2, $color = 0, $range = 0, $hwin = $hlobby)
	Local $oldmousecoordmode = Opt("MouseCoordMode")
	Local $oldpixelcoordmode = Opt("PixelCoordMode")
	Opt("MouseCoordMode", 1)
	Opt("PixelCoordMode", 1)
	Local $string = ""
	If WinExists($hwin) Then
		$winpos = WinGetPos($hwin)
		Do
			Sleep(20)
			$string = ""
			Local $char = ""
			Local $flag = False
			Local $lastx = $x1
			Local $blanklines = 0
			Local $pixelcheck = PixelChecksum($x1, $y1, $x2, $y2, 1, $hwin)
			For $x = $x1 To $x2
				Sleep(20)
				Local $ypixel = 0
				For $y = $y1 To $y2
					Sleep(20)
					If _colorrange(PixelGetColor($x + $winpos[0], $y + $winpos[1]), $color, $range) Then
						$char = $char & "X"
						$ypixel = $ypixel + 1
					Else
						$char = $char & "_"
					EndIf
				Next
				If $ypixel == 0 Then
					If $flag Then
						$string = $string & _lookupchar($char, $x - $lastx, $y2 - $y1, $lastx + $winpos[0], $y1 + $winpos[1])
						$lastx = $x
						$flag = False
					EndIf
					$blanklines = $blanklines + 1
					$char = ""
					If $blanklines > 3 Then
						$string = $string & " "
						$flag = False
						$blanklines = 0
					EndIf
				Else
					$blanklines = 0
					$flag = True
					$char = $char & "#"
				EndIf
			Next
		Until $pixelcheck == PixelChecksum($x1, $y1, $x2, $y2, 1, $hwin)
		Opt("MouseCoordMode", $oldmousecoordmode)
		Opt("PixelCoordMode", $oldpixelcoordmode)
	EndIf
	Return StringStripWS($string, 3)
EndFunc

Global $zlastcount
Global $zlasthandle
HotKeySet("{pause}", "TogglePause")
HotKeySet("+{esc}", "ExitEvent")
HotKeySet("!+{T}", "HideTray")
HotKeySet("!+{S}", "StartNow")
HotKeySet("^{F1}", "WindowDump")
HotKeySet("!{F8}", "GetWinInfo")
HotKeySet("!{R}", "Hide")
HotKeySet("^!a", "ShowTableArray")
HotKeySet("^!b", "ShowBotArray")
Global $paused = False
Global $hiddenbool = False
Global $shown = False
Global $bot1show = False
Global $bot2show = False
Global $bot3show = False
Global $bot4show = False
Global $bot5show = False
Global $bot6show = False
Global $hlabeltitle
Global $hlabelwnd
Global $hlabelclass
Global $hlabelpos
Global $hlabelsize
Global $hlabeltext
Global $hgui
Global $htargetpic
Global $imsg
Global $hok = False
Global $temphnd
Global $temptitle
Global $temptext
Global $tempclass
Global $temppos

Func wm_command($hwnd, $imsg, $wparam, $lparam)
	Local $pos
	Switch _winapi_hiword($wparam)
		Case $fn_wndchanged
			GUICtrlSetData($hlabelwnd, _guictrlfinder_getlastwnd($lparam))
			$temphnd = _guictrlfinder_getlastwnd($lparam)
			GUICtrlSetData($hlabeltitle, WinGetTitle(_guictrlfinder_getlastwnd($lparam)))
			$temptitle = WinGetTitle(_guictrlfinder_getlastwnd($lparam))
			GUICtrlSetData($hlabelclass, getwindowclass(_guictrlfinder_getlastwnd($lparam)))
			$tempclass = getwindowclass(_guictrlfinder_getlastwnd($lparam))
			$pos = WinGetPos(_guictrlfinder_getlastwnd($lparam))
			$temppos = WinGetPos(_guictrlfinder_getlastwnd($lparam))
			If IsArray($pos) Then
				GUICtrlSetData($hlabelpos, $pos[0] & "," & $pos[1])
				GUICtrlSetData($hlabelsize, $pos[2] & "," & $pos[3])
			EndIf
			ConsoleWrite("$FN_WNDCHANGED" & @LF)
		Case $fn_startuse
			If $imsg <> "273" AND $imsg <> 273 Then
				WinSetTrans($hwnd, "", 150)
				ConsoleWrite("$FN_STARTUSE" & @LF)
			EndIf
		Case $fn_enduse
			If $imsg <> "273" AND $imsg <> 273 Then
				WinSetTrans($hwnd, "", 255)
				GUICtrlSetData($hlabelwnd, _guictrlfinder_getlastwnd($lparam))
				$temphnd = _guictrlfinder_getlastwnd($lparam)
				GUICtrlSetData($hlabeltitle, WinGetTitle(_guictrlfinder_getlastwnd($lparam)))
				$temptitle = WinGetTitle(_guictrlfinder_getlastwnd($lparam))
				GUICtrlSetData($hlabelclass, getwindowclass(_guictrlfinder_getlastwnd($lparam)))
				$tempclass = getwindowclass(_guictrlfinder_getlastwnd($lparam))
				$pos = WinGetPos(_guictrlfinder_getlastwnd($lparam))
				$temppos = WinGetPos(_guictrlfinder_getlastwnd($lparam))
				If IsArray($pos) Then
					GUICtrlSetData($hlabelpos, $pos[0] & "," & $pos[1])
					GUICtrlSetData($hlabelsize, $pos[2] & "," & $pos[3])
				EndIf
				ConsoleWrite("$FN_ENDUSE" & @LF)
			EndIf
		Case $hok
			If $imsg <> "273" AND $imsg <> 273 Then
				ConsoleWrite("$hOK" & $imsg & @LF)
				savetofile($temphnd, $temppos)
				_screencapture_capturewnd(@ScriptDir & "\DebugScreenShot.jpg", $temphnd)
				exitfinder()
			EndIf
		Case $imsg = $gui_event_close
			ConsoleWrite("Event close" & $imsg & @LF)
			$pos = $temppos
			savetofile($temphnd, $pos)
			_screencapture_capturewnd(@ScriptDir & "\DebugScreenShot.jpg", $temphnd)
			exitfinder()
	EndSwitch
EndFunc

Func getwindowclass($hwnd)
	Local $pclassname = DllStructCreate("char[256]")
	DllCall("user32.dll", "int", "GetClassName", "hwnd", $hwnd, "ptr", DllStructGetPtr($pclassname), "int", 255)
	Return DllStructGetData($pclassname, 1)
EndFunc

Func createfinder()
	$hgui = GUICreate("Window Finder", 586, 250, -1, -1)
	GUICtrlCreateGroup("Target", 80, 0, 497, 180)
	GUICtrlCreateLabel("Title:", 87, 18, 27, 17)
	GUICtrlCreateLabel("Handle:", 87, 42, 41, 17)
	$hlabeltitle = GUICtrlCreateLabel("", 133, 18, 436, 17)
	$hlabelwnd = GUICtrlCreateLabel("", 133, 42, 100, 17)
	GUICtrlCreateLabel("Class:", 87, 66, 32, 17)
	$hlabelclass = GUICtrlCreateLabel("", 133, 66, 300, 17)
	GUICtrlCreateLabel("Pos:", 87, 90, 32, 17)
	$hlabelpos = GUICtrlCreateLabel("", 133, 90, 300, 17)
	GUICtrlCreateLabel("Size:", 87, 114, 32, 17)
	$hlabelsize = GUICtrlCreateLabel("", 133, 114, 300, 17)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	GUICtrlCreateGroup("", 8, 0, 65, 65)
	$htargetpic = _guictrlfinder_create($hgui, 24, 20, 32, 32)
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	$hok = GUICtrlCreateButton("Save", 504, 200, 75, 25, 0)
	GUICtrlSetOnEvent($hok, "ExitFinder")
	GUISetState()
	GUIRegisterMsg($wm_command, "WM_COMMAND")
	Do
		$imsg = GUIGetMsg()
	Until $imsg = $gui_event_close
EndFunc

Func exitfinder()
	GUIDelete($hgui)
EndFunc

Func savetofile($hwnd, $pos)
	fconsolewrite("Handle: " & $hwnd)
	fconsolewrite("Title: " & WinGetTitle($hwnd))
	fconsolewrite("Class: " & getwindowclass($hwnd))
	If IsArray($pos) Then
		fconsolewrite("Pos: " & $pos[0] & ", " & $pos[1])
		fconsolewrite("Size: " & $pos[2] & ", " & $pos[3])
	EndIf
	GUIRegisterMsg($wm_command, "WM_COMMAND")
EndFunc

Func savesettings()
	If GUICtrlRead($chknotifyend) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkNotifyEnd", 1)
	Else
		IniWrite($inifile, "Settings", "$chkNotifyEnd", 0)
	EndIf
	If GUICtrlRead($chknotifybegin) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkNotifyBegin", 1)
	Else
		IniWrite($inifile, "Settings", "$chkNotifyBegin", 0)
	EndIf
	If GUICtrlRead($chknotifyrebuy) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkNotifyRebuy", 1)
	Else
		IniWrite($inifile, "Settings", "$chkNotifyRebuy", 0)
	EndIf
	If GUICtrlRead($chknotifyreg) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkNotifyReg", 1)
	Else
		IniWrite($inifile, "Settings", "$chkNotifyReg", 0)
	EndIf
	If GUICtrlRead($chknotifyaddon) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkNotifyAddon", 1)
	Else
		IniWrite($inifile, "Settings", "$chkNotifyAddon", 0)
	EndIf
	IniWrite($inifile, "Settings", "$txtLobbyPosx", GUICtrlRead($txtlobbyposx))
	IniWrite($inifile, "Settings", "$txtLobbyPosy", GUICtrlRead($txtlobbyposy))
	IniWrite($inifile, "Settings", "$txtFishHands1", GUICtrlRead($txtfishhands1))
	IniWrite($inifile, "Settings", "$txtSharkHands1", GUICtrlRead($txtsharkhands1))
	IniWrite($inifile, "Settings", "$txtFishVPIPGr", GUICtrlRead($txtfishvpipgr))
	IniWrite($inifile, "Settings", "$txtSharkVPIPGr", GUICtrlRead($txtsharkvpipgr))
	IniWrite($inifile, "Settings", "$txtFishVPIPLess", GUICtrlRead($txtfishvpipless))
	IniWrite($inifile, "Settings", "$txtSharkVPIPLess", GUICtrlRead($txtsharkvpipless))
	IniWrite($inifile, "Settings", "$txtFishPFRGr", GUICtrlRead($txtfishpfrgr))
	IniWrite($inifile, "Settings", "$txtSharkPFRGr", GUICtrlRead($txtsharkpfrgr))
	IniWrite($inifile, "Settings", "$txtFishPFRLess", GUICtrlRead($txtfishpfrless))
	IniWrite($inifile, "Settings", "$txtSharkPFRLess", GUICtrlRead($txtsharkpfrless))
	IniWrite($inifile, "Settings", "$txtFish3BetGr", GUICtrlRead($txtfish3betgr))
	IniWrite($inifile, "Settings", "$txtShark3BetGr", GUICtrlRead($txtshark3betgr))
	IniWrite($inifile, "Settings", "$txtFish3BetLess", GUICtrlRead($txtfish3betless))
	IniWrite($inifile, "Settings", "$txtShark3BetLess", GUICtrlRead($txtshark3betless))
	IniWrite($inifile, "Settings", "$txtFish4BetGr", GUICtrlRead($txtfish4betgr))
	IniWrite($inifile, "Settings", "$txtShark4BetGr", GUICtrlRead($txtshark4betgr))
	IniWrite($inifile, "Settings", "$txtFish4BetLess", GUICtrlRead($txtfish4betless))
	IniWrite($inifile, "Settings", "$txtShark4BetLess", GUICtrlRead($txtshark4betless))
	IniWrite($inifile, "Settings", "$txtPlayerName", GUICtrlRead($txtplayername))
	IniWrite($inifile, "Settings", "$txtServer", GUICtrlRead($txtserver))
	IniWrite($inifile, "Settings", "$txtFromAdd", GUICtrlRead($txtfromadd))
	IniWrite($inifile, "Settings", "$txtToAdd", GUICtrlRead($txttoadd))
	IniWrite($inifile, "Settings", "$txtPort", GUICtrlRead($txtport))
	IniWrite($inifile, "Settings", "$txtUsername", GUICtrlRead($txtusername))
	IniWrite($inifile, "Settings", "$txtPass", GUICtrlRead($txtpass))
	IniWrite($inifile, "Settings", "$cmbEmailProv", GUICtrlRead($cmbemailprov))
	IniWrite($inifile, "Settings", "$cmbDB", GUICtrlRead($cmbdb))
	If GUICtrlRead($chkssl) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkSSL", 1)
	Else
		IniWrite($inifile, "Settings", "$chkSSL", 0)
	EndIf
	IniWrite($inifile, "Settings", "$cmbDate", GUICtrlRead($cmbdate))
	IniWrite($inifile, "Settings", "$cmbH", GUICtrlRead($cmbh))
	IniWrite($inifile, "Settings", "$cmbMonth", GUICtrlRead($cmbmonth))
	IniWrite($inifile, "Settings", "$cmbSite", GUICtrlRead($cmbsite))
	IniWrite($inifile, "Settings", "$numPlyrsCmbSng", GUICtrlRead($numplyrscmbsng))
	IniWrite($inifile, "Settings", "$txtM", GUICtrlRead($txtm))
	If GUICtrlRead($chkadvfish) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkAdvFish", 1)
	Else
		IniWrite($inifile, "Settings", "$chkAdvFish", 0)
	EndIf
	If GUICtrlRead($chkadvshark) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkAdvShark", 1)
	Else
		IniWrite($inifile, "Settings", "$chkAdvShark", 0)
	EndIf
	If GUICtrlRead($radhoppercash) = $gui_checked Then
		IniWrite($inifile, "Settings", "$radHopperCash", 1)
	Else
		IniWrite($inifile, "Settings", "$radHopperCash", 0)
	EndIf
	If GUICtrlRead($radhoppermtt) = $gui_checked Then
		IniWrite($inifile, "Settings", "$radHopperMTT", 1)
	Else
		IniWrite($inifile, "Settings", "$radHopperMTT", 0)
	EndIf
	If GUICtrlRead($radhoppersng) = $gui_checked Then
		IniWrite($inifile, "Settings", "$radHopperSng", 1)
	Else
		IniWrite($inifile, "Settings", "$radHopperSng", 0)
	EndIf
	If GUICtrlRead($chkautorebuy) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkAutoRebuy", 1)
	Else
		IniWrite($inifile, "Settings", "$chkAutoRebuy", 0)
	EndIf
	If GUICtrlRead($chkminlobby) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkMinLobby", 1)
	Else
		IniWrite($inifile, "Settings", "$chkMinLobby", 0)
	EndIf
	If GUICtrlRead($chkaddon) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkAddon", 1)
	Else
		IniWrite($inifile, "Settings", "$chkAddon", 0)
	EndIf
	$itstime = True
	fconsolewrite("Saving Settings to: " & $inifile)
	If GUICtrlRead($chk888autologin) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chk888AutoLogin", 1)
	Else
		IniWrite($inifile, "Settings", "$chk888AutoLogin", 0)
	EndIf
	If GUICtrlRead($chkipautologin) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkIPAutoLogin", 1)
	Else
		IniWrite($inifile, "Settings", "$chkIPAutoLogin", 0)
	EndIf
	If GUICtrlRead($chkbodogautologin) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkBodogAutoLogin", 1)
	Else
		IniWrite($inifile, "Settings", "$chkBodogAutoLogin", 0)
	EndIf
	IniWrite($inifile, "Settings", "$clientCkTxt", GUICtrlRead($clientcktxt))
	IniWrite($inifile, "Settings", "$clientBodogTxt", GUICtrlRead($clientbodogtxt))
	IniWrite($inifile, "Settings", "$clientEEETxt", GUICtrlRead($clienteeetxt))
	IniWrite($inifile, "Settings", "$clientIPTxt", GUICtrlRead($clientiptxt))
	If GUICtrlRead($chkshallow) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkShallow", 1)
	Else
		IniWrite($inifile, "Settings", "$chkShallow", 0)
	EndIf
	If GUICtrlRead($chkpushorfold) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkPushorFold", 1)
	Else
		IniWrite($inifile, "Settings", "$chkPushorFold", 0)
	EndIf
	If GUICtrlRead($chkcam) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkCam", 1)
	Else
		IniWrite($inifile, "Settings", "$chkCam", 0)
	EndIf
	If GUICtrlRead($chkautotopup) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkAutoTopUp", 1)
	Else
		IniWrite($inifile, "Settings", "$chkAutoTopUp", 0)
	EndIf
	IniWrite($inifile, "Settings", "$txtTopUp", GUICtrlRead($txttopup))
	If GUICtrlRead($chkmaxbuyin) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkMaxBuyin", 1)
	Else
		IniWrite($inifile, "Settings", "$chkMaxBuyin", 0)
	EndIf
	IniWrite($inifile, "Settings", "$txtMinAvgPot", GUICtrlRead($txtminavgpot))
	IniWrite($inifile, "Settings", "$txtMinPlrFlop", GUICtrlRead($txtminplrflop))
	IniWrite($inifile, "Settings", "$txtMinHands", GUICtrlRead($txtminhands))
	IniWrite($inifile, "Settings", "$txtMaxAvgPot", GUICtrlRead($txtmaxavgpot))
	IniWrite($inifile, "Settings", "$txtMaxPlrFlop", GUICtrlRead($txtmaxplrflop))
	IniWrite($inifile, "Settings", "$txtMaxHands", GUICtrlRead($txtmaxhands))
	IniWrite($inifile, "Settings", "SSDEF", GUICtrlRead($ssdefinp))
	IniWrite($inifile, "Settings", "SSAV", GUICtrlRead($ssavinp))
	If GUICtrlRead($ssenable) = $gui_checked Then
		IniWrite($inifile, "Settings", "SSENABLE", 1)
	Else
		IniWrite($inifile, "Settings", "SSENABLE", 0)
	EndIf
	IniWrite($inifile, "Settings", "$cmbtimeHopDelta", GUICtrlRead($cmbtimehopdelta))
	IniWrite($inifile, "Settings", "$numHopsTxt", GUICtrlRead($numhopstxt))
	IniWrite($inifile, "Settings", "$txtSitting", GUICtrlRead($txtsitting))
	IniWrite($inifile, "Settings", "$cmbLimit", GUICtrlRead($cmblimit))
	IniWrite($inifile, "Settings", "$numPlyrsCmbCash", GUICtrlRead($numplyrscmbcash))
	IniWrite($inifile, "Settings", "$stakesCmb", GUICtrlRead($stakescmb))
	If GUICtrlRead($chkspeedpoker) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkSpeedPoker", 1)
	Else
		IniWrite($inifile, "Settings", "$chkSpeedPoker", 0)
	EndIf
	If GUICtrlRead($chkmaxlogging) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkMaxLogging", 1)
	Else
		IniWrite($inifile, "Settings", "$chkMaxLogging", 0)
	EndIf
	IniWrite($inifile, "Settings", "$cmbMinPlayrs", GUICtrlRead($cmbminplayrs))
	IniWrite($inifile, "Settings", "$x0Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x0txt))
	IniWrite($inifile, "Settings", "$x1Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x1txt))
	IniWrite($inifile, "Settings", "$x2Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x2txt))
	IniWrite($inifile, "Settings", "$x3Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x3txt))
	IniWrite($inifile, "Settings", "$x4Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x4txt))
	IniWrite($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x5txt))
	IniWrite($inifile, "Settings", "$x6Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x6txt))
	IniWrite($inifile, "Settings", "$x7Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x7txt))
	IniWrite($inifile, "Settings", "$x8Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x8txt))
	IniWrite($inifile, "Settings", "$x9Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x9txt))
	IniWrite($inifile, "Settings", "$x10Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x10txt))
	IniWrite($inifile, "Settings", "$x11Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x11txt))
	IniWrite($inifile, "Settings", "$x12Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x12txt))
	IniWrite($inifile, "Settings", "$x13Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x13txt))
	IniWrite($inifile, "Settings", "$x14Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x14txt))
	IniWrite($inifile, "Settings", "$x15Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x15txt))
	IniWrite($inifile, "Settings", "$x16Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x16txt))
	IniWrite($inifile, "Settings", "$x17Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x17txt))
	IniWrite($inifile, "Settings", "$x18Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x18txt))
	IniWrite($inifile, "Settings", "$x19Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x19txt))
	IniWrite($inifile, "Settings", "$x20Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x20txt))
	IniWrite($inifile, "Settings", "$x21Txt" & GUICtrlRead($cmbsite), GUICtrlRead($x21txt))
	IniWrite($inifile, "Settings", "$y0Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y0txt))
	IniWrite($inifile, "Settings", "$y1Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y1txt))
	IniWrite($inifile, "Settings", "$y2Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y2txt))
	IniWrite($inifile, "Settings", "$y3Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y3txt))
	IniWrite($inifile, "Settings", "$y4Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y4txt))
	IniWrite($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y5txt))
	IniWrite($inifile, "Settings", "$y6Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y6txt))
	IniWrite($inifile, "Settings", "$y7Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y7txt))
	IniWrite($inifile, "Settings", "$y8Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y8txt))
	IniWrite($inifile, "Settings", "$y9Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y9txt))
	IniWrite($inifile, "Settings", "$y10Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y10txt))
	IniWrite($inifile, "Settings", "$y11Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y11txt))
	IniWrite($inifile, "Settings", "$y12Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y12txt))
	IniWrite($inifile, "Settings", "$y13Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y13txt))
	IniWrite($inifile, "Settings", "$y14Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y14txt))
	IniWrite($inifile, "Settings", "$y15Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y15txt))
	IniWrite($inifile, "Settings", "$y16Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y16txt))
	IniWrite($inifile, "Settings", "$y17Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y17txt))
	IniWrite($inifile, "Settings", "$y18Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y18txt))
	IniWrite($inifile, "Settings", "$y19Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y19txt))
	IniWrite($inifile, "Settings", "$y20Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y20txt))
	IniWrite($inifile, "Settings", "$y21Txt" & GUICtrlRead($cmbsite), GUICtrlRead($y21txt))
	IniWrite($inifile, "Settings", "$chkWaitingList", GUICtrlRead($chkwaitinglist))
	IniWrite($inifile, "Settings", "$txtWLML", GUICtrlRead($txtwlml))
	IniWrite($inifile, "Settings", "$txtMaxWaitingList", GUICtrlRead($txtmaxwaitinglist))
	IniWrite($inifile, "Settings", "$timeInput", GUICtrlRead($timeinput))
	IniWrite($inifile, "Settings", "$cmbGame", GUICtrlRead($cmbgame))
	IniWrite($inifile, "Settings", "$timeHopTxt", GUICtrlRead($timehoptxt))
	IniWrite($inifile, "Settings", "$buyinTxt", GUICtrlRead($buyintxt))
	IniWrite($inifile, "Settings", "$txtSecondsBetweenLaunch", GUICtrlRead($txtsecondsbetweenlaunch))
	IniWrite($inifile, "Settings", "$txtAvoidMins", GUICtrlRead($txtavoidmins))
	IniWrite($inifile, "Settings", "$txtScanTop", GUICtrlRead($txtscantop))
	IniWrite($inifile, "Settings", "$txtMaxBuyin", GUICtrlRead($txtmaxbuyin))
	Local $mainguipos = WinGetPos($maingui)
	IniWrite($inifile, "Settings", "$guix", $mainguipos[0])
	IniWrite($inifile, "Settings", "$guiy", $mainguipos[1])
	IniWrite($inifile, "Settings", "$botTxt", GUICtrlRead($bottxt))
	IniWrite($inifile, "Settings", "$buyinCmb", GUICtrlRead($buyincmb))
	IniWrite($inifile, "Settings", "$gameCmb", GUICtrlRead($gamecmb))
	IniWrite($inifile, "Settings", "$numBotsCmb", GUICtrlRead($numbotscmb))
	IniWrite($inifile, "Settings", "$numSngOpenTxt", GUICtrlRead($numsngopentxt))
	IniWrite($inifile, "Settings", "$startBtn", GUICtrlRead($startbtn))
	IniWrite($inifile, "Settings", "$typeCmb", GUICtrlRead($typecmb))
	IniWrite($inifile, "Settings", "$cmbGameType", GUICtrlRead($cmbgametype))
	IniWrite($inifile, "Settings", "$cmbSite", GUICtrlRead($cmbsite))
	IniWrite($inifile, "Settings", "$txtSecsDelay", GUICtrlRead($txtsecsdelay))
	IniWrite($inifile, "Settings", "$txtTourneyPercGreat", GUICtrlRead($txttourneypercgreat))
	IniWrite($inifile, "Settings", "$txtTourneyPercLess", GUICtrlRead($txttourneypercless))
	If GUICtrlRead($chkipautologin) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkIPAutoLogin", 1)
	Else
		IniWrite($inifile, "Settings", "$chkIPAutoLogin", 0)
	EndIf
	IniWrite($inifile, "Settings", "$clientEEETxt", GUICtrlRead($clienteeetxt))
	If GUICtrlRead($chk888autologin) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chk888AutoLogin", 1)
	Else
		IniWrite($inifile, "Settings", "$chk888AutoLogin", 0)
	EndIf
	IniWrite($inifile, "Settings", "$clientIPTxt", GUICtrlRead($clientiptxt))
	If GUICtrlRead($chkclosetables) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkCloseTables", 1)
	Else
		IniWrite($inifile, "Settings", "$chkCloseTables", 0)
	EndIf
	If GUICtrlRead($chkshortstack) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkShortStack", 1)
	Else
		IniWrite($inifile, "Settings", "$chkShortStack", 0)
	EndIf
	If GUICtrlRead($chkbeginner) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkBeginner", 1)
	Else
		IniWrite($inifile, "Settings", "$chkBeginner", 0)
	EndIf
	If GUICtrlRead($chkbeginnersng) = $gui_checked Then
		IniWrite($inifile, "Settings", "$chkBeginnerSng", 1)
	Else
		IniWrite($inifile, "Settings", "$chkBeginnerSng", 0)
	EndIf
	If GUICtrlRead($aenable) = $gui_checked Then
		IniWrite($inifile, "Settings", "AENABLE", 1)
	Else
		IniWrite($inifile, "Settings", "AENABLE", 0)
	EndIf
	If GUICtrlRead($jenable) = $gui_checked Then
		IniWrite($inifile, "Settings", "JENABLE", 1)
	Else
		IniWrite($inifile, "Settings", "JENABLE", 0)
	EndIf
	IniWrite($inifile, "Settings", "$JLimitInp", GUICtrlRead($jlimitinp))
	IniWrite($inifile, "Settings", "$ALimitInp", GUICtrlRead($alimitinp))
	IniWrite($inifile, "Settings", "Input_DR", GUICtrlRead($input_dr))
	IniWrite($inifile, "Settings", "Input_Server", GUICtrlRead($input_server))
	IniWrite($inifile, "Settings", "Input_Port", GUICtrlRead($input_port))
	IniWrite($inifile, "Settings", "Input_DB", GUICtrlRead($input_db))
	IniWrite($inifile, "Settings", "Input_UID", GUICtrlRead($input_uid))
	IniWrite($inifile, "Settings", "Input_PWD", GUICtrlRead($input_pwd))
	Local $toplaydumpcash = IniReadSection($inifile, "toplayCash")
	If @error <> 1 AND IsArray($toplaydumpcash) Then
		For $a = 1 To $toplaydumpcash[0][0]
			fconsolewrite("Cash tables to play: " & $toplaydumpcash[$a][0] & "=" & $toplaydumpcash[$a][1])
		Next
	EndIf
	Local $toplaydumpsng = IniReadSection($inifile, "toplaySng")
	If @error <> 1 AND IsArray($toplaydumpsng) Then
		For $a = 1 To $toplaydumpsng[0][0]
			fconsolewrite("Sngs to play: " & $toplaydumpsng[$a][0] & "=" & $toplaydumpsng[$a][1])
		Next
	EndIf
	Local $toplaydumpmtt = IniReadSection($inifile, "toplayMTT")
	If @error <> 1 AND IsArray($toplaydumpmtt) Then
		For $a = 1 To $toplaydumpmtt[0][0]
			fconsolewrite("Tourneys to play: " & $toplaydumpmtt[$a][0] & "=" & $toplaydumpmtt[$a][1])
		Next
	EndIf
	Local $registereddump = IniReadSection($inifile, "registered")
	If @error <> 1 AND IsArray($registereddump) Then
		For $a = 1 To $registereddump[0][0]
			fconsolewrite("Tourneys registered and waiting to play: " & $registereddump[$a][0] & "=" & $registereddump[$a][1])
		Next
	EndIf
EndFunc

Func buttonstateset($varsetting, $varname, $state = 4)
	If IniRead($inifile, "Settings", $varsetting, $state) == 1 Then
		GUICtrlSetState($varname, $gui_checked)
	Else
		GUICtrlSetState($varname, $gui_unchecked)
	EndIf
EndFunc

Func disabletables()
	Select
		Case GUICtrlRead($numbotscmb) == 1
			GUICtrlSetState($btnt2, $gui_disable)
			GUICtrlSetState($btnt3, $gui_disable)
			GUICtrlSetState($btnt4, $gui_disable)
			GUICtrlSetState($btnt5, $gui_disable)
			GUICtrlSetState($btnt6, $gui_disable)
			GUICtrlSetState($btnt7, $gui_disable)
			GUICtrlSetState($btnt8, $gui_disable)
			GUICtrlSetState($btnt9, $gui_disable)
			GUICtrlSetState($btnt10, $gui_disable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_disable)
			GUICtrlSetState($y1txt, $gui_disable)
			GUICtrlSetState($x2txt, $gui_disable)
			GUICtrlSetState($y2txt, $gui_disable)
			GUICtrlSetState($x3txt, $gui_disable)
			GUICtrlSetState($y3txt, $gui_disable)
			GUICtrlSetState($x4txt, $gui_disable)
			GUICtrlSetState($y4txt, $gui_disable)
			GUICtrlSetState($x5txt, $gui_disable)
			GUICtrlSetState($y5txt, $gui_disable)
			GUICtrlSetState($x6txt, $gui_disable)
			GUICtrlSetState($y6txt, $gui_disable)
			GUICtrlSetState($x7txt, $gui_disable)
			GUICtrlSetState($y7txt, $gui_disable)
			GUICtrlSetState($x8txt, $gui_disable)
			GUICtrlSetState($y8txt, $gui_disable)
			GUICtrlSetState($x9txt, $gui_disable)
			GUICtrlSetState($y9txt, $gui_disable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 2
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_disable)
			GUICtrlSetState($btnt4, $gui_disable)
			GUICtrlSetState($btnt5, $gui_disable)
			GUICtrlSetState($btnt6, $gui_disable)
			GUICtrlSetState($btnt7, $gui_disable)
			GUICtrlSetState($btnt8, $gui_disable)
			GUICtrlSetState($btnt9, $gui_disable)
			GUICtrlSetState($btnt10, $gui_disable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_disable)
			GUICtrlSetState($y2txt, $gui_disable)
			GUICtrlSetState($x3txt, $gui_disable)
			GUICtrlSetState($y3txt, $gui_disable)
			GUICtrlSetState($x4txt, $gui_disable)
			GUICtrlSetState($y4txt, $gui_disable)
			GUICtrlSetState($x5txt, $gui_disable)
			GUICtrlSetState($y5txt, $gui_disable)
			GUICtrlSetState($x6txt, $gui_disable)
			GUICtrlSetState($y6txt, $gui_disable)
			GUICtrlSetState($x7txt, $gui_disable)
			GUICtrlSetState($y7txt, $gui_disable)
			GUICtrlSetState($x8txt, $gui_disable)
			GUICtrlSetState($y8txt, $gui_disable)
			GUICtrlSetState($x9txt, $gui_disable)
			GUICtrlSetState($y9txt, $gui_disable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 3
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_disable)
			GUICtrlSetState($btnt5, $gui_disable)
			GUICtrlSetState($btnt6, $gui_disable)
			GUICtrlSetState($btnt7, $gui_disable)
			GUICtrlSetState($btnt8, $gui_disable)
			GUICtrlSetState($btnt9, $gui_disable)
			GUICtrlSetState($btnt10, $gui_disable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_disable)
			GUICtrlSetState($y3txt, $gui_disable)
			GUICtrlSetState($x4txt, $gui_disable)
			GUICtrlSetState($y4txt, $gui_disable)
			GUICtrlSetState($x5txt, $gui_disable)
			GUICtrlSetState($y5txt, $gui_disable)
			GUICtrlSetState($x6txt, $gui_disable)
			GUICtrlSetState($y6txt, $gui_disable)
			GUICtrlSetState($x7txt, $gui_disable)
			GUICtrlSetState($y7txt, $gui_disable)
			GUICtrlSetState($x8txt, $gui_disable)
			GUICtrlSetState($y8txt, $gui_disable)
			GUICtrlSetState($x9txt, $gui_disable)
			GUICtrlSetState($y9txt, $gui_disable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 4
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_disable)
			GUICtrlSetState($btnt6, $gui_disable)
			GUICtrlSetState($btnt7, $gui_disable)
			GUICtrlSetState($btnt8, $gui_disable)
			GUICtrlSetState($btnt9, $gui_disable)
			GUICtrlSetState($btnt10, $gui_disable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_disable)
			GUICtrlSetState($y4txt, $gui_disable)
			GUICtrlSetState($x5txt, $gui_disable)
			GUICtrlSetState($y5txt, $gui_disable)
			GUICtrlSetState($x6txt, $gui_disable)
			GUICtrlSetState($y6txt, $gui_disable)
			GUICtrlSetState($x7txt, $gui_disable)
			GUICtrlSetState($y7txt, $gui_disable)
			GUICtrlSetState($x8txt, $gui_disable)
			GUICtrlSetState($y8txt, $gui_disable)
			GUICtrlSetState($x9txt, $gui_disable)
			GUICtrlSetState($y9txt, $gui_disable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 5
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_disable)
			GUICtrlSetState($btnt7, $gui_disable)
			GUICtrlSetState($btnt8, $gui_disable)
			GUICtrlSetState($btnt9, $gui_disable)
			GUICtrlSetState($btnt10, $gui_disable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_disable)
			GUICtrlSetState($y5txt, $gui_disable)
			GUICtrlSetState($x6txt, $gui_disable)
			GUICtrlSetState($y6txt, $gui_disable)
			GUICtrlSetState($x7txt, $gui_disable)
			GUICtrlSetState($y7txt, $gui_disable)
			GUICtrlSetState($x8txt, $gui_disable)
			GUICtrlSetState($y8txt, $gui_disable)
			GUICtrlSetState($x9txt, $gui_disable)
			GUICtrlSetState($y9txt, $gui_disable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 6
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_disable)
			GUICtrlSetState($btnt8, $gui_disable)
			GUICtrlSetState($btnt9, $gui_disable)
			GUICtrlSetState($btnt10, $gui_disable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_disable)
			GUICtrlSetState($y6txt, $gui_disable)
			GUICtrlSetState($x7txt, $gui_disable)
			GUICtrlSetState($y7txt, $gui_disable)
			GUICtrlSetState($x8txt, $gui_disable)
			GUICtrlSetState($y8txt, $gui_disable)
			GUICtrlSetState($x9txt, $gui_disable)
			GUICtrlSetState($y9txt, $gui_disable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 7
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_disable)
			GUICtrlSetState($btnt9, $gui_disable)
			GUICtrlSetState($btnt10, $gui_disable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_disable)
			GUICtrlSetState($y7txt, $gui_disable)
			GUICtrlSetState($x8txt, $gui_disable)
			GUICtrlSetState($y8txt, $gui_disable)
			GUICtrlSetState($x9txt, $gui_disable)
			GUICtrlSetState($y9txt, $gui_disable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 8
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_disable)
			GUICtrlSetState($btnt10, $gui_disable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_disable)
			GUICtrlSetState($y8txt, $gui_disable)
			GUICtrlSetState($x9txt, $gui_disable)
			GUICtrlSetState($y9txt, $gui_disable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 9
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_disable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_disable)
			GUICtrlSetState($y9txt, $gui_disable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 10
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_disable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_disable)
			GUICtrlSetState($y10txt, $gui_disable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 11
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_disable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_disable)
			GUICtrlSetState($y11txt, $gui_disable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 12
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_disable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_disable)
			GUICtrlSetState($y12txt, $gui_disable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 13
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_disable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_disable)
			GUICtrlSetState($y13txt, $gui_disable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 14
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_enable)
			GUICtrlSetState($btnt15, $gui_disable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_enable)
			GUICtrlSetState($y13txt, $gui_enable)
			GUICtrlSetState($x14txt, $gui_disable)
			GUICtrlSetState($y14txt, $gui_disable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 15
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_enable)
			GUICtrlSetState($btnt15, $gui_enable)
			GUICtrlSetState($btnt16, $gui_disable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_enable)
			GUICtrlSetState($y13txt, $gui_enable)
			GUICtrlSetState($x14txt, $gui_enable)
			GUICtrlSetState($y14txt, $gui_enable)
			GUICtrlSetState($x15txt, $gui_disable)
			GUICtrlSetState($y15txt, $gui_disable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 16
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_enable)
			GUICtrlSetState($btnt15, $gui_enable)
			GUICtrlSetState($btnt16, $gui_enable)
			GUICtrlSetState($btnt17, $gui_disable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_enable)
			GUICtrlSetState($y13txt, $gui_enable)
			GUICtrlSetState($x14txt, $gui_enable)
			GUICtrlSetState($y14txt, $gui_enable)
			GUICtrlSetState($x15txt, $gui_enable)
			GUICtrlSetState($y15txt, $gui_enable)
			GUICtrlSetState($x16txt, $gui_disable)
			GUICtrlSetState($y16txt, $gui_disable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 17
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_enable)
			GUICtrlSetState($btnt15, $gui_enable)
			GUICtrlSetState($btnt16, $gui_enable)
			GUICtrlSetState($btnt17, $gui_enable)
			GUICtrlSetState($btnt18, $gui_disable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_enable)
			GUICtrlSetState($y13txt, $gui_enable)
			GUICtrlSetState($x14txt, $gui_enable)
			GUICtrlSetState($y14txt, $gui_enable)
			GUICtrlSetState($x15txt, $gui_enable)
			GUICtrlSetState($y15txt, $gui_enable)
			GUICtrlSetState($x16txt, $gui_enable)
			GUICtrlSetState($y16txt, $gui_enable)
			GUICtrlSetState($x17txt, $gui_disable)
			GUICtrlSetState($y17txt, $gui_disable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 18
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_enable)
			GUICtrlSetState($btnt15, $gui_enable)
			GUICtrlSetState($btnt16, $gui_enable)
			GUICtrlSetState($btnt17, $gui_enable)
			GUICtrlSetState($btnt18, $gui_enable)
			GUICtrlSetState($btnt19, $gui_disable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_enable)
			GUICtrlSetState($y13txt, $gui_enable)
			GUICtrlSetState($x14txt, $gui_enable)
			GUICtrlSetState($y14txt, $gui_enable)
			GUICtrlSetState($x15txt, $gui_enable)
			GUICtrlSetState($y15txt, $gui_enable)
			GUICtrlSetState($x16txt, $gui_enable)
			GUICtrlSetState($y16txt, $gui_enable)
			GUICtrlSetState($x17txt, $gui_enable)
			GUICtrlSetState($y17txt, $gui_enable)
			GUICtrlSetState($x18txt, $gui_disable)
			GUICtrlSetState($y18txt, $gui_disable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 19
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_enable)
			GUICtrlSetState($btnt15, $gui_enable)
			GUICtrlSetState($btnt16, $gui_enable)
			GUICtrlSetState($btnt17, $gui_enable)
			GUICtrlSetState($btnt18, $gui_enable)
			GUICtrlSetState($btnt19, $gui_enable)
			GUICtrlSetState($btnt20, $gui_disable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_enable)
			GUICtrlSetState($y13txt, $gui_enable)
			GUICtrlSetState($x14txt, $gui_enable)
			GUICtrlSetState($y14txt, $gui_enable)
			GUICtrlSetState($x15txt, $gui_enable)
			GUICtrlSetState($y15txt, $gui_enable)
			GUICtrlSetState($x16txt, $gui_enable)
			GUICtrlSetState($y16txt, $gui_enable)
			GUICtrlSetState($x17txt, $gui_enable)
			GUICtrlSetState($y17txt, $gui_enable)
			GUICtrlSetState($x18txt, $gui_enable)
			GUICtrlSetState($y18txt, $gui_enable)
			GUICtrlSetState($x19txt, $gui_disable)
			GUICtrlSetState($y19txt, $gui_disable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 20
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_enable)
			GUICtrlSetState($btnt15, $gui_enable)
			GUICtrlSetState($btnt16, $gui_enable)
			GUICtrlSetState($btnt17, $gui_enable)
			GUICtrlSetState($btnt18, $gui_enable)
			GUICtrlSetState($btnt19, $gui_enable)
			GUICtrlSetState($btnt20, $gui_enable)
			GUICtrlSetState($btnt21, $gui_disable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_enable)
			GUICtrlSetState($y13txt, $gui_enable)
			GUICtrlSetState($x14txt, $gui_enable)
			GUICtrlSetState($y14txt, $gui_enable)
			GUICtrlSetState($x15txt, $gui_enable)
			GUICtrlSetState($y15txt, $gui_enable)
			GUICtrlSetState($x16txt, $gui_enable)
			GUICtrlSetState($y16txt, $gui_enable)
			GUICtrlSetState($x17txt, $gui_enable)
			GUICtrlSetState($y17txt, $gui_enable)
			GUICtrlSetState($x18txt, $gui_enable)
			GUICtrlSetState($y18txt, $gui_enable)
			GUICtrlSetState($x19txt, $gui_enable)
			GUICtrlSetState($y19txt, $gui_enable)
			GUICtrlSetState($x20txt, $gui_disable)
			GUICtrlSetState($y20txt, $gui_disable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 21
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_enable)
			GUICtrlSetState($btnt15, $gui_enable)
			GUICtrlSetState($btnt16, $gui_enable)
			GUICtrlSetState($btnt17, $gui_enable)
			GUICtrlSetState($btnt18, $gui_enable)
			GUICtrlSetState($btnt19, $gui_enable)
			GUICtrlSetState($btnt20, $gui_enable)
			GUICtrlSetState($btnt21, $gui_enable)
			GUICtrlSetState($btnt22, $gui_disable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_enable)
			GUICtrlSetState($y13txt, $gui_enable)
			GUICtrlSetState($x14txt, $gui_enable)
			GUICtrlSetState($y14txt, $gui_enable)
			GUICtrlSetState($x15txt, $gui_enable)
			GUICtrlSetState($y15txt, $gui_enable)
			GUICtrlSetState($x16txt, $gui_enable)
			GUICtrlSetState($y16txt, $gui_enable)
			GUICtrlSetState($x17txt, $gui_enable)
			GUICtrlSetState($y17txt, $gui_enable)
			GUICtrlSetState($x18txt, $gui_enable)
			GUICtrlSetState($y18txt, $gui_enable)
			GUICtrlSetState($x19txt, $gui_enable)
			GUICtrlSetState($y19txt, $gui_enable)
			GUICtrlSetState($x20txt, $gui_enable)
			GUICtrlSetState($y20txt, $gui_enable)
			GUICtrlSetState($x21txt, $gui_disable)
			GUICtrlSetState($y21txt, $gui_disable)
		Case GUICtrlRead($numbotscmb) == 22
			GUICtrlSetState($btnt2, $gui_enable)
			GUICtrlSetState($btnt3, $gui_enable)
			GUICtrlSetState($btnt4, $gui_enable)
			GUICtrlSetState($btnt5, $gui_enable)
			GUICtrlSetState($btnt6, $gui_enable)
			GUICtrlSetState($btnt7, $gui_enable)
			GUICtrlSetState($btnt8, $gui_enable)
			GUICtrlSetState($btnt9, $gui_enable)
			GUICtrlSetState($btnt10, $gui_enable)
			GUICtrlSetState($btnt11, $gui_enable)
			GUICtrlSetState($btnt12, $gui_enable)
			GUICtrlSetState($btnt13, $gui_enable)
			GUICtrlSetState($btnt14, $gui_enable)
			GUICtrlSetState($btnt15, $gui_enable)
			GUICtrlSetState($btnt16, $gui_enable)
			GUICtrlSetState($btnt17, $gui_enable)
			GUICtrlSetState($btnt18, $gui_enable)
			GUICtrlSetState($btnt19, $gui_enable)
			GUICtrlSetState($btnt20, $gui_enable)
			GUICtrlSetState($btnt21, $gui_enable)
			GUICtrlSetState($btnt22, $gui_enable)
			GUICtrlSetState($x1txt, $gui_enable)
			GUICtrlSetState($y1txt, $gui_enable)
			GUICtrlSetState($x2txt, $gui_enable)
			GUICtrlSetState($y2txt, $gui_enable)
			GUICtrlSetState($x3txt, $gui_enable)
			GUICtrlSetState($y3txt, $gui_enable)
			GUICtrlSetState($x4txt, $gui_enable)
			GUICtrlSetState($y4txt, $gui_enable)
			GUICtrlSetState($x5txt, $gui_enable)
			GUICtrlSetState($y5txt, $gui_enable)
			GUICtrlSetState($x6txt, $gui_enable)
			GUICtrlSetState($y6txt, $gui_enable)
			GUICtrlSetState($x7txt, $gui_enable)
			GUICtrlSetState($y7txt, $gui_enable)
			GUICtrlSetState($x8txt, $gui_enable)
			GUICtrlSetState($y8txt, $gui_enable)
			GUICtrlSetState($x9txt, $gui_enable)
			GUICtrlSetState($y9txt, $gui_enable)
			GUICtrlSetState($x10txt, $gui_enable)
			GUICtrlSetState($y10txt, $gui_enable)
			GUICtrlSetState($x11txt, $gui_enable)
			GUICtrlSetState($y11txt, $gui_enable)
			GUICtrlSetState($x12txt, $gui_enable)
			GUICtrlSetState($y12txt, $gui_enable)
			GUICtrlSetState($x13txt, $gui_enable)
			GUICtrlSetState($y13txt, $gui_enable)
			GUICtrlSetState($x14txt, $gui_enable)
			GUICtrlSetState($y14txt, $gui_enable)
			GUICtrlSetState($x15txt, $gui_enable)
			GUICtrlSetState($y15txt, $gui_enable)
			GUICtrlSetState($x16txt, $gui_enable)
			GUICtrlSetState($y16txt, $gui_enable)
			GUICtrlSetState($x17txt, $gui_enable)
			GUICtrlSetState($y17txt, $gui_enable)
			GUICtrlSetState($x18txt, $gui_enable)
			GUICtrlSetState($y18txt, $gui_enable)
			GUICtrlSetState($x19txt, $gui_enable)
			GUICtrlSetState($y19txt, $gui_enable)
			GUICtrlSetState($x20txt, $gui_enable)
			GUICtrlSetState($y20txt, $gui_enable)
			GUICtrlSetState($x21txt, $gui_enable)
			GUICtrlSetState($y21txt, $gui_enable)
	EndSelect
EndFunc

Func readsettings()
	buttonstateset("$chkNotifyEnd", $chknotifyend)
	buttonstateset("$chkNotifyRebuy", $chknotifyrebuy)
	buttonstateset("$chkNotifyBegin", $chknotifybegin)
	buttonstateset("$chkNotifyAddon", $chknotifyaddon)
	buttonstateset("$chkNotifyReg", $chknotifyreg)
	ControlCommand($maingui, "", $cmbdate, "SelectString", @MDAY)
	ControlCommand($maingui, "", $cmbh, "SelectString", @HOUR)
	ControlCommand($maingui, "", $cmbmonth, "SelectString", @MON)
	ControlSetText($maingui, "", $txtm, @MIN)
	buttonstateset("$chkAutoRebuy", $chkautorebuy)
	buttonstateset("$chkMinLobby", $chkminlobby)
	buttonstateset("$chkAddon", $chkaddon)
	buttonstateset("$chkAdvFish", $chkadvfish)
	buttonstateset("$chkAdvShark", $chkadvshark)
	WinSetTitle($maingui, "", "OH Hydra Hopper & Loader v" & $version)
	buttonstateset("$chkBodogAutoLogin", $chkbodogautologin)
	buttonstateset("$chk888AutoLogin", $chk888autologin)
	buttonstateset("$chkIPAutoLogin", $chkipautologin)
	ControlSetText($maingui, "", $clientbodogtxt, IniRead($inifile, "Settings", "$clientBodogTxt", ""))
	ControlSetText($maingui, "", $clientiptxt, IniRead($inifile, "Settings", "$clientIPTxt", ""))
	ControlSetText($maingui, "", $clienteeetxt, IniRead($inifile, "Settings", "$clientEEETxt", ""))
	ControlSetText($maingui, "", $txtlobbyposx, IniRead($inifile, "Settings", "$txtLobbyPosx", ""))
	ControlSetText($maingui, "", $txtlobbyposy, IniRead($inifile, "Settings", "$txtLobbyPosy", ""))
	ControlSetText($maingui, "", $txtfishhands1, IniRead($inifile, "Settings", "$txtFishHands1", ""))
	ControlSetText($maingui, "", $txtsharkhands1, IniRead($inifile, "Settings", "$txtSharkHands1", ""))
	ControlSetText($maingui, "", $txtfishvpipgr, IniRead($inifile, "Settings", "$txtFishVPIPGr", ""))
	ControlSetText($maingui, "", $txtsharkvpipgr, IniRead($inifile, "Settings", "$txtSharkVPIPGr", ""))
	ControlSetText($maingui, "", $txtfishvpipless, IniRead($inifile, "Settings", "$txtFishVPIPLess", ""))
	ControlSetText($maingui, "", $txtsharkvpipless, IniRead($inifile, "Settings", "$txtSharkVPIPLess", ""))
	ControlSetText($maingui, "", $txtfishpfrgr, IniRead($inifile, "Settings", "$txtFishPFRGr", ""))
	ControlSetText($maingui, "", $txtsharkpfrgr, IniRead($inifile, "Settings", "$txtSharkPFRGr", ""))
	ControlSetText($maingui, "", $txtfishpfrless, IniRead($inifile, "Settings", "$txtFishPFRLess", ""))
	ControlSetText($maingui, "", $txtsharkpfrless, IniRead($inifile, "Settings", "$txtSharkPFRLess", ""))
	ControlSetText($maingui, "", $txtfish3betgr, IniRead($inifile, "Settings", "$txtFish3BetGr", ""))
	ControlSetText($maingui, "", $txtshark3betgr, IniRead($inifile, "Settings", "$txtShark3BetGr", ""))
	ControlSetText($maingui, "", $txtfish3betless, IniRead($inifile, "Settings", "$txtFish3BetLess", ""))
	ControlSetText($maingui, "", $txtshark3betless, IniRead($inifile, "Settings", "$txtShark3BetLess", ""))
	ControlSetText($maingui, "", $txtfish4betgr, IniRead($inifile, "Settings", "$txtFish4BetGr", ""))
	ControlSetText($maingui, "", $txtshark4betgr, IniRead($inifile, "Settings", "$txtShark4BetGr", ""))
	ControlSetText($maingui, "", $txtfish4betless, IniRead($inifile, "Settings", "$txtFish4BetLess", ""))
	ControlSetText($maingui, "", $txtshark4betless, IniRead($inifile, "Settings", "$txtShark4BetLess", ""))
	ControlSetText($maingui, "", $txtplayername, IniRead($inifile, "Settings", "$txtPlayerName", ""))
	ControlSetText($maingui, "", $txtserver, IniRead($inifile, "Settings", "$txtServer", ""))
	ControlSetText($maingui, "", $txtfromadd, IniRead($inifile, "Settings", "$txtFromAdd", ""))
	ControlSetText($maingui, "", $txttoadd, IniRead($inifile, "Settings", "$txtToAdd", ""))
	ControlSetText($maingui, "", $txtport, IniRead($inifile, "Settings", "$txtPort", ""))
	ControlSetText($maingui, "", $txtusername, IniRead($inifile, "Settings", "$txtUsername", ""))
	ControlSetText($maingui, "", $txtpass, IniRead($inifile, "Settings", "$txtPass", ""))
	GUICtrlSetData($cmbemailprov, IniRead($inifile, "Settings", "$cmbEmailProv", "NL"))
	buttonstateset("$chkSSL", $chkssl)
	ControlSetText($maingui, "", $txtlobbyposx, IniRead($inifile, "Settings", "$txtLobbyPosx", ""))
	ControlSetText($maingui, "", $txtlobbyposy, IniRead($inifile, "Settings", "$txtLobbyPosy", ""))
	buttonstateset("$chkShallow", $chkshallow)
	buttonstateset("$chkPushorFold", $chkpushorfold)
	buttonstateset("$chkCam", $chkcam)
	buttonstateset("$chkMaxBuyin", $chkmaxbuyin)
	buttonstateset("$chkAutoTopUp", $chkautotopup)
	If GUICtrlRead($chkautotopup) == 1 Then
		GUICtrlSetState($chkautotopup, $gui_enable)
	Else
		GUICtrlSetState($chkautotopup, $gui_disable)
	EndIf
	ControlSetText($maingui, "", $txttopup, IniRead($inifile, "Settings", "$txtTopUp", "90"))
	ControlSetText($maingui, "", $txtminavgpot, IniRead($inifile, "Settings", "$txtMinAvgPot", "0"))
	ControlSetText($maingui, "", $txtmaxavgpot, IniRead($inifile, "Settings", "$txtMaxAvgPot", "300"))
	ControlSetText($maingui, "", $txtminplrflop, IniRead($inifile, "Settings", "$txtMinPlrFlop", "0"))
	ControlSetText($maingui, "", $txtmaxplrflop, IniRead($inifile, "Settings", "$txtMaxPlrFlop", "100"))
	ControlSetText($maingui, "", $txtminhands, IniRead($inifile, "Settings", "$txtMinHands", "0"))
	ControlSetText($maingui, "", $txtmaxhands, IniRead($inifile, "Settings", "$txtMaxHands", "200"))
	$ranges[0][0] = IniRead($inifile, "Settings", "$txtMinAvgPot", "0")
	$ranges[0][1] = IniRead($inifile, "Settings", "$txtMaxAvgPot", "300")
	$ranges[1][0] = IniRead($inifile, "Settings", "$txtMinPlrFlop", "0")
	$ranges[1][1] = IniRead($inifile, "Settings", "$txtMaxPlrFlop", "100")
	$ranges[2][0] = IniRead($inifile, "Settings", "$txtMinHands", "0")
	$ranges[2][1] = IniRead($inifile, "Settings", "$txtMaxHands", "200")
	GUICtrlSetData($ssdefinp, IniRead($inifile, "Settings", "SSDEF", "40"))
	GUICtrlSetData($ssavinp, IniRead($inifile, "Settings", "SSAV", "3"))
	If IniRead($inifile, "Settings", "SSENABLE", "0") = 1 Then
		GUICtrlSetState($ssenable, $gui_checked)
	Else
		GUICtrlSetState($ssenable, $gui_unchecked)
	EndIf
	GUICtrlSetData($cmbtimehopdelta, IniRead($inifile, "Settings", "$cmbtimeHopDelta", "10"))
	updatelistviewtoplaycash()
	ControlSetText($maingui, "", $txtsitting, IniRead($inifile, "Settings", "$txtSitting", "30"))
	GUICtrlSetData($cmblimit, IniRead($inifile, "Settings", "$cmbLimit", "NL"))
	GUICtrlSetData($cmbgame, IniRead($inifile, "Settings", "$cmbGame", "Hold'em"))
	GUICtrlSetData($cmbdb, IniRead($inifile, "Settings", "$cmbDB", "PT3"))
	GUICtrlSetData($cmbgametype, IniRead($inifile, "Settings", "$cmbGameType", "Hold'em"))
	GUICtrlSetData($numhopstxt, IniRead($inifile, "Settings", "$numHopsTxt", "60"))
	GUICtrlSetData($buyintxt, IniRead($inifile, "Settings", "$buyinTxt", "100"))
	GUICtrlSetData($stakescmb, IniRead($inifile, "Settings", "$stakesCmb", "$0.02/$0.04"))
	ControlCommand($maingui, "", $cmbminplayrs, "SelectString", IniRead($inifile, "Settings", "$cmbMinPlayrs", "5"))
	If IniRead($inifile, "Settings", "$radHopperCash", "1") = 1 Then
		GUICtrlSetState($radhoppercash, $gui_checked)
	Else
		GUICtrlSetState($radhoppercash, $gui_unchecked)
	EndIf
	If IniRead($inifile, "Settings", "$radHopperMTT", "0") = 1 Then
		GUICtrlSetState($radhoppermtt, $gui_checked)
	Else
		GUICtrlSetState($radhoppermtt, $gui_unchecked)
	EndIf
	If IniRead($inifile, "Settings", "$radHopperSng", "0") = 1 Then
		GUICtrlSetState($radhoppersng, $gui_checked)
	Else
		GUICtrlSetState($radhoppersng, $gui_unchecked)
	EndIf
	If IniRead($inifile, "Settings", "$chkSpeedPoker", "0") = 1 Then
		GUICtrlSetState($chkspeedpoker, $gui_checked)
	Else
		GUICtrlSetState($chkspeedpoker, $gui_unchecked)
	EndIf
	If IniRead($inifile, "Settings", "$chkMaxLogging", "0") = 1 Then
		GUICtrlSetState($chkmaxlogging, $gui_checked)
	Else
		GUICtrlSetState($chkmaxlogging, $gui_unchecked)
	EndIf
	GUICtrlSetData($timehoptxt, IniRead($inifile, "Settings", "$timeHopTxt", "60"))
	GUICtrlSetData($txtsecondsbetweenlaunch, IniRead($inifile, "Settings", "$txtSecondsBetweenLaunch", "30"))
	GUICtrlSetData($txtavoidmins, IniRead($inifile, "Settings", "$txtAvoidMins", "30"))
	GUICtrlSetData($txtscantop, IniRead($inifile, "Settings", "$txtScanTop", ""))
	GUICtrlSetData($txtmaxbuyin, IniRead($inifile, "Settings", "$txtMaxBuyin", "0.50"))
	buttonstateset("$chkCloseTables", $chkclosetables, "1")
	buttonstateset("$chkWaitingList", $chkwaitinglist)
	GUICtrlSetData($txtwlml, IniRead($inifile, "Settings", "$txtWLML", "3"))
	GUICtrlSetData($txtmaxwaitinglist, IniRead($inifile, "Settings", "$txtMaxWaitingList", "6"))
	GUICtrlSetData($timeinput, IniRead($inifile, "Settings", "$timeInput", "10"))
	ControlSetText($maingui, "", $bottxt, IniRead($inifile, "Settings", "$botTxt", ""))
	ControlSetText($maingui, "", $numsngopentxt, IniRead($inifile, "Settings", "$numSngOpenTxt", "5"))
	ControlSetText($maingui, "", $txtsecsdelay, IniRead($inifile, "Settings", "$txtSecsDelay", "90"))
	ControlSetText($maingui, "", $txttourneypercgreat, IniRead($inifile, "Settings", "$txtTourneyPercGreat", "0"))
	ControlSetText($maingui, "", $txttourneypercless, IniRead($inifile, "Settings", "$txtTourneyPercLess", "10"))
	ControlCommand($maingui, "", $numbotscmb, "SelectString", IniRead($inifile, "Settings", "$numBotsCmb", "2"))
	GUICtrlSetData($x0txt, IniRead($inifile, "Settings", "$x0Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y0txt, IniRead($inifile, "Settings", "$y0Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x1txt, IniRead($inifile, "Settings", "$x1Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y1txt, IniRead($inifile, "Settings", "$y1Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x2txt, IniRead($inifile, "Settings", "$x2Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y2txt, IniRead($inifile, "Settings", "$y2Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x3txt, IniRead($inifile, "Settings", "$x3Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y3txt, IniRead($inifile, "Settings", "$y3Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x4txt, IniRead($inifile, "Settings", "$x4Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y4txt, IniRead($inifile, "Settings", "$y4Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x5txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y5txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x6txt, IniRead($inifile, "Settings", "$x6Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y6txt, IniRead($inifile, "Settings", "$y6Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x7txt, IniRead($inifile, "Settings", "$x7Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y7txt, IniRead($inifile, "Settings", "$y7Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x8txt, IniRead($inifile, "Settings", "$x8Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y8txt, IniRead($inifile, "Settings", "$y8Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x9txt, IniRead($inifile, "Settings", "$x9Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y9txt, IniRead($inifile, "Settings", "$y9Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x10txt, IniRead($inifile, "Settings", "$x10Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y10txt, IniRead($inifile, "Settings", "$y10Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x11txt, IniRead($inifile, "Settings", "$x11Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y11txt, IniRead($inifile, "Settings", "$y11Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x12txt, IniRead($inifile, "Settings", "$x12Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y12txt, IniRead($inifile, "Settings", "$y12Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x13txt, IniRead($inifile, "Settings", "$x13Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y13txt, IniRead($inifile, "Settings", "$y13Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x14txt, IniRead($inifile, "Settings", "$x14Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y14txt, IniRead($inifile, "Settings", "$y14Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x15txt, IniRead($inifile, "Settings", "$x15Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y15txt, IniRead($inifile, "Settings", "$y15Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x16txt, IniRead($inifile, "Settings", "$x16Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y16txt, IniRead($inifile, "Settings", "$y16Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x17txt, IniRead($inifile, "Settings", "$x17Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y17txt, IniRead($inifile, "Settings", "$y17Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x18txt, IniRead($inifile, "Settings", "$x18Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y18txt, IniRead($inifile, "Settings", "$y18Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x19txt, IniRead($inifile, "Settings", "$x19Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y19txt, IniRead($inifile, "Settings", "$y19Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x20txt, IniRead($inifile, "Settings", "$x20Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y20txt, IniRead($inifile, "Settings", "$y20Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x21txt, IniRead($inifile, "Settings", "$x21Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y21txt, IniRead($inifile, "Settings", "$y21Txt" & GUICtrlRead($cmbsite), "0"))
	disabletables()
	ControlCommand($maingui, "", $cmbsite, "SelectString", IniRead($inifile, "Settings", "$cmbSite", "Full Tilt"))
	ControlCommand($maingui, "", $gamecmb, "SelectString", IniRead($inifile, "Settings", "$gameCmb", "Hold'em"))
	ControlCommand($maingui, "", $numplyrscmbsng, "SelectString", IniRead($inifile, "Settings", "$numPlyrsCmbSng", "9"))
	ControlCommand($maingui, "", $numplyrscmbcash, "SelectString", IniRead($inifile, "Settings", "$numPlyrsCmbCash", "9"))
	ControlCommand($maingui, "", $typecmb, "SelectString", IniRead($inifile, "Settings", "$typeCmb", "NL"))
	ControlCommand($maingui, "", $cmbgametype, "SelectString", IniRead($inifile, "Settings", "$cmbGameType", ""))
	ControlCommand($maingui, "", $buyincmb, "SelectString", IniRead($inifile, "Settings", "$buyinCmb", ""))
	buttonstateset("$chk888AutoLogin", $chk888autologin)
	ControlSetText($maingui, "", $clienteeetxt, IniRead($inifile, "Settings", "$clientEEETxt", ""))
	buttonstateset("$chkIPAutoLogin", $chkipautologin)
	ControlSetText($maingui, "", $clientiptxt, IniRead($inifile, "Settings", "$clientIPTxt", ""))
	buttonstateset("$chkCloseTables", $chkclosetables)
	buttonstateset("$chkShortStack", $chkshortstack)
	buttonstateset("$chkBeginner", $chkbeginner)
	buttonstateset("$chkBeginnerSng", $chkbeginnersng)
	Local $mainguipos = WinGetPos($maingui)
	$guix = IniRead($inifile, "Settings", "$guix", Int(@DesktopWidth - $mainguipos[2]) / 2)
	$guiy = IniRead($inifile, "Settings", "$guiy", Int(@DesktopHeight - $mainguipos[3]) / 2)
	updatelistview()
	If IniRead($inifile, "Settings", "AENABLE", "0") = 1 Then
		GUICtrlSetState($aenable, $gui_checked)
	Else
		GUICtrlSetState($aenable, $gui_unchecked)
	EndIf
	If IniRead($inifile, "Settings", "JENABLE", "0") = 1 Then
		GUICtrlSetState($jenable, $gui_checked)
	Else
		GUICtrlSetState($jenable, $gui_unchecked)
	EndIf
	GUICtrlSetData($jlimitinp, IniRead($inifile, "Settings", "$JLimitInp", "5"))
	GUICtrlSetData($alimitinp, IniRead($inifile, "Settings", "$ALimitInp", "3"))
	GUICtrlSetData($input_server, IniRead($inifile, "Settings", "Input_Server", "localhost"))
	GUICtrlSetData($input_port, IniRead($inifile, "Settings", "Input_Port", "5432"))
	GUICtrlSetData($input_db, IniRead($inifile, "Settings", "Input_DB", ""))
	GUICtrlSetData($input_uid, IniRead($inifile, "Settings", "Input_UID", ""))
	GUICtrlSetData($input_pwd, IniRead($inifile, "Settings", "Input_PWD", ""))
EndFunc

Func togglepause()
	$paused = NOT $paused
	If $paused Then
		fconsolewrite("Pausing")
		TrayItemSetText($pauseitem, "Resume")
		TrayItemSetState($pauseitem, $tray_unchecked)
		TraySetToolTip("Paused // Sng's : " & $tournamentsregistered & "/" & GUICtrlRead($numsngopentxt))
		ControlSetText($maingui, "", $numsngstxt, $tournamentsregistered & "/" & ControlGetText($maingui, "", $numsngopentxt))
		GUICtrlSetState($startbtn, $gui_hide)
		TraySetIcon(@ScriptDir & "\icons\pause.ico")
		GUISetIcon(@ScriptDir & "\icons\pause.ico")
	Else
		fconsolewrite("Unpausing")
		TrayItemSetText($pauseitem, "Pause")
		TrayItemSetState($pauseitem, $tray_unchecked)
		TraySetToolTip("Running // Sng's : " & $tournamentsregistered & "/" & GUICtrlRead($numsngopentxt))
		ControlSetText($maingui, "", $numsngstxt, $tournamentsregistered & "/" & ControlGetText($maingui, "", $numsngopentxt))
		GUICtrlSetState($startbtn, $gui_show)
		TraySetIcon(@ScriptDir & "\icons\Poker chips.ico")
		GUISetIcon(@ScriptDir & "\icons\Poker chips.ico")
	EndIf
	waitpause()
EndFunc

Func hidetray()
	$thide = NOT $thide
	If $thide Then
		TraySetState(2)
		fconsolewrite("Hiding tray icon")
	Else
		TraySetState(1)
		fconsolewrite("Restoring tray icon")
	EndIf
EndFunc

Func waitpause()
	While $paused
		Sleep(20)
	WEnd
EndFunc

Func leaveallaiotables()
	logit("FU177")
	fconsolewrite("Leave All Tables - No Cards")
	For $a = 0 To 21
		If winvisibleandexists($htable[$a]) Then
			If NOT botconnected($hoh[$a]) Then
				While WinExists($htable[$a])
					closetable($htable[$a], $a)
					closeanyareyousurewindows()
					Sleep(20)
				WEnd
			EndIf
			$htable[$a] = -10
		EndIf
	Next
	logit("EN184")
EndFunc

Func exitevent()
	logit("FU185")
	_singleton("")
	fconsolewrite("Exit Event")
	Local $tablist
	If GUICtrlRead($radhoppercash) Then
		$tablist = tablelist()
	ElseIf GUICtrlRead($radhoppersng) Then
		$tablist = tablelistsng()
	Else
		$tablist = tablelistmtt()
	EndIf
	If IsArray($tablist) Then
		ConsoleWrite("Tables still exist" & @LF)
		Do
			Sleep(20)
			If GUICtrlRead($radhoppercash) == $gui_checked Then
				checkdeadtablescash()
			Else
				checkdeadtables()
			EndIf
			If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" Then
				handlebegad()
				closelobbies()
			EndIf
			If BitAND(WinGetState("STT rematch"), 2) == 2 Then
				Local $remlist = WinList("STT rematch")
				For $y = 1 To $remlist[0][0]
					WinActivate($remlist[$y][1])
					ControlFocus("STT rematch", "", "[CLASS:Button; INSTANCE:2]")
					ControlClick("STT rematch", "", "[CLASS:Button; INSTANCE:2]")
					$tablesfinished += 1
				Next
			EndIf
			TrayItemSetOnEvent($hideitem, "Hide")
			TrayItemSetOnEvent($aboutitem, "AboutClick")
			TrayItemSetOnEvent($pauseitem, "TogglePause")
			ConsoleWrite("TableCount: " & tablecount() & @LF)
		Until tablecount() == 0 OR tablecount() == ""
	EndIf
	WinSetOnTop($lobbyname, "", 0)
	If GUICtrlRead($chk888autologin) == $gui_checked OR GUICtrlRead($chkipautologin) == $gui_checked OR GUICtrlRead($chkbodogautologin) == $gui_checked Then
		closelobby($lobbyname)
	EndIf
	fconsolewrite("Exitevent")
	savesettings()
	logit("EN193")
	Exit
	logit("EN194")
EndFunc

Func generateplusminusminutes()
	Local $maxplusminusminutes = 24 * 60
	For $a = 0 To 99
		$plusminusminutes[$a] = Round(Random(0, $maxplusminusminutes * 2) - $maxplusminusminutes, 0)
	Next
EndFunc

Func hide()
	$hiddenbool = NOT $hiddenbool
	If $hiddenbool Then
		fconsolewrite("Hiding GUI")
		TrayItemSetText($hideitem, "Show GUI")
		TrayItemSetState($hideitem, $tray_unchecked)
		GUISetState(@SW_HIDE, $maingui)
	Else
		TrayItemSetText($hideitem, "Hide GUI")
		TrayItemSetState($hideitem, $tray_unchecked)
		GUISetState(@SW_SHOW, $maingui)
	EndIf
EndFunc

Func hidenow()
	GUISetState(@SW_HIDE, $maingui)
	TrayItemSetText($hideitem, "Show GUI")
	TrayItemSetState($hideitem, $tray_unchecked)
EndFunc

Func restoreclick()
	TrayItemSetText($hideitem, "Hide GUI")
	TrayItemSetState($hideitem, $tray_unchecked)
	GUISetState(@SW_SHOW, $maingui)
EndFunc

Func chkbtnsupportcenter()
	If MsgBox(1, "Support Forum", "Please make sure your Windows Settings are correct by checking the included manual." & @CRLF & @CRLF & "If you still want to proceed to the Support Forum, click OK, else Click Cancel") == 2 Then
		Return
	Else
		ShellExecute("http://www.openholdemstoreforum.com/")
	EndIf
EndFunc

Func daystring($dow)
	While $dow < 1
		$dow += 7
	WEnd
	While $dow > 7
		$dow -= 7
	WEnd
	Local $searchfor
	$searchfor = ""
	Select
		Case $dow == 1
			$searchfor = "|Sun|"
		Case $dow == 2
			$searchfor = "|Mon|"
		Case $dow == 3
			$searchfor = "|Tues|"
		Case $dow == 4
			$searchfor = "|Wed|"
		Case $dow == 5
			$searchfor = "|Thurs|"
		Case $dow == 6
			$searchfor = "|Fri|"
		Case $dow == 7
			$searchfor = "|Sat|"
	EndSelect
	Return $searchfor
	logit("EN214")
EndFunc

Func btnstartschedulerclick()
	If NOT $bscheduleactive Then
		$bscheduleactive = True
		schedulestart()
	EndIf
EndFunc

Func btndeletescheduleclick()
	Local $delflag
	$delflag = 0
	Local $si = _guictrllistview_getselectedindices($listschedule, True)
	If $si[0] > 0 Then
		Local $selecteditem = _guictrllistview_getitemtextstring($listschedule, $si[1])
		If StringLen($selecteditem) > 0 Then
			Local $sitem = StringSplit($selecteditem, "|")
			If $sitem[0] >= 4 Then
				Local $dd = _arraysearch($wdays, $sitem[2])
				IniDelete($inifile, "schedule", $dd & $sitem[3])
				$delflag = 1
			Else
				MsgBox(0, "Selection", "Nothing Selected")
			EndIf
		EndIf
	Else
		MsgBox(0, "Selection", "Nothing Selected")
	EndIf
	updatelistview()
	Return $delflag
EndFunc

Func btnaddscheduleclick()
	Local $di = _arraysearch($wdays, GUICtrlRead($combo1))
	Local $newvalue = GUICtrlRead($combo3) & "|1|" & GUICtrlRead($timeinput)
	IniWrite($inifile, "schedule", $di & GUICtrlRead($combo2a) & ":" & GUICtrlRead($combo2b), $newvalue)
	updatelistview()
EndFunc

Func btnupdatescheduleclick()
	If btndeletescheduleclick() Then btnaddscheduleclick()
EndFunc

Func updatelistview()
	_guictrllistview_deleteallitems(GUICtrlGetHandle($listschedule))
	Local $rawschedule = IniReadSection($inifile, "schedule")
	_arraysort($rawschedule, 0, 1)
	If @error == 0 Then
		For $a = 1 To $rawschedule[0][0]
			_guictrllistview_additem($listschedule, "")
			_guictrllistview_addsubitem($listschedule, $a - 1, $wdays[Number(StringLeft($rawschedule[$a][0], 1))], 1)
			_guictrllistview_addsubitem($listschedule, $a - 1, StringRight($rawschedule[$a][0], 5), 2)
			Local $tvalue = StringSplit($rawschedule[$a][1], "|")
			_guictrllistview_addsubitem($listschedule, $a - 1, $tvalue[1], 3)
			If $tvalue[0] > 1 Then
				If $tvalue[2] = 1 Then _guictrllistview_setitemchecked($listschedule, $a - 1, 1)
			EndIf
			If $tvalue[0] > 2 Then
				If Number($tvalue[3]) <= 0 Then $tvalue[3] = GUICtrlRead($timeinput)
				_guictrllistview_addsubitem($listschedule, $a - 1, $tvalue[3], 4)
			Else
				_guictrllistview_addsubitem($listschedule, $a - 1, GUICtrlRead($timeinput), 4)
			EndIf
		Next
	EndIf
EndFunc

Func scheduledtorun($forcereset = False)
	Local $rv, $currdate, $rawschedule, $starttime, $endtime, $message
	$message = ""
	If (_datediff("s", $sendtimeblock, _nowcalc()) > 0) OR @MDAY <> $lastdayupdated OR $forcereset Then
		If @MDAY <> $lastdayupdated Then
			generateplusminusminutes()
			$lastdayupdated = @MDAY
		EndIf
		Local $indexplusminus = 0
		$currdate = _nowcalc()
		$currdate = StringLeft($currdate, StringInStr($currdate, " "))
		$rv = False
		$rawschedule = IniReadSection($inifile, "schedule")
		If @error == 0 Then
			For $a = 1 To $rawschedule[0][0]
				$starttime = StringRight($rawschedule[$a][0], StringLen($rawschedule[$a][0]) - 1)
				$starttime = $currdate & $starttime
				Local $tvalue
				$tvalue = StringSplit($rawschedule[$a][1], "|")
				If $tvalue[0] > 1 Then
					If $tvalue[2] = 0 Then ContinueLoop
				EndIf
				$endtime = _dateadd("n", $tvalue[1], $starttime)
				Local $fudge
				If $tvalue[0] > 2 Then
					$fudge = $tvalue[3]
				Else
					$fudge = 10
				EndIf
				Local $overnight
				$overnight = False
				If _datediff("s", $starttime, $endtime) < 0 Then
					If _datediff("s", $currdate & "12:00", _nowcalc()) > 0 Then
						$endtime = _dateadd("D", 1, $endtime)
					Else
						$starttime = _dateadd("D", -1, $starttime)
					EndIf
					$overnight = True
				EndIf
				If $fudge > 0 Then
					If StringInStr($starttime, " 00:00") == 0 AND StringInStr($starttime, " 0:00") == 0 Then
						$starttime = _dateadd("n", Mod($plusminusminutes[$indexplusminus], $fudge) + 1, $starttime)
					EndIf
					$indexplusminus += 1
					If StringInStr($endtime, " 23:59") == 0 AND StringInStr($endtime, " 24:00") == 0 Then
						$endtime = _dateadd("n", Mod($plusminusminutes[$indexplusminus], $fudge) + 1, $endtime)
					EndIf
					$indexplusminus += 1
				EndIf
				If (_datediff("s", $starttime, _nowcalc()) >= 0) AND (_datediff("n", $endtime, _nowcalc()) <= 0) Then
					Local $hour
					$hour = StringMid($starttime, StringInStr($starttime, " ") + 1)
					$hour = StringLeft($hour, StringInStr($hour, ":") - 1)
					Local $searchfor
					$searchfor = @WDAY
					If @HOUR < $hour AND $overnight Then
						$searchfor = @WDAY - 1
						If $searchfor = 0 Then $searchfor = 7
					EndIf
					If Number(StringLeft($rawschedule[$a][0], 1)) = $searchfor Then
						$sendtimeblock = $endtime
						$rv = True
						ExitLoop
					EndIf
				EndIf
			Next
		EndIf
		$bscheduledtorun = $rv
		If $bscheduledtorun Then
			$message = "STR: Start=" & $starttime & " End=" & $endtime
			If $bscheduleactive Then ControlSetText($maingui, "", $lblschstatus, "Scheduled to run from: " & $starttime & " to " & $endtime)
		Else
			If $bscheduleactive AND $tournamentsstarted < $tournamentsregistered Then
				$bscheduledtorun = True
				Return $bscheduledtorun
			Else
				$message = "STR: IDLE"
				If $bscheduleactive Then ControlSetText($maingui, "", $lblschstatus, "Scheduled Time not determined yet")
				$sendtimeblock = _nowcalc()
				If (GUICtrlRead($chk888autologin) == $gui_checked OR GUICtrlRead($chkipautologin) == $gui_checked OR GUICtrlRead($chkbodogautologin) == $gui_checked) AND $bscheduleactive AND WinExists($lobbyname) Then
					ConsoleWrite("STR: LobbyName: " & $lobbyname & @LF)
					closelobby($lobbyname)
				EndIf
			EndIf
		EndIf
	EndIf
	If $message <> "" AND $message <> $lastschedulermessage Then
		$lastschedulermessage = $message
		If $bscheduleactive Then fconsolewrite($message)
	EndIf
	If $bscheduledtorun Then
		TraySetIcon(@ScriptDir & "\icons\greenclock.ico")
	ElseIf NOT $bscheduledtorun AND $bscheduleactive Then
		TraySetIcon(@ScriptDir & "\icons\redclock.ico")
	EndIf
	Return $bscheduledtorun
EndFunc

Func _isclassictheme()
	_winapi_getcurrentthemename()
	Return @error > 0
EndFunc

Func _guigetcaptionheight($hgui)
	Local $htmpgui = 0, $aguipos[1], $atmpguipos[1]
	$htmpgui = GUICreate("", Default, Default, 0, 0, $ws_child, -1, $hgui)
	$aguipos = WinGetPos($hgui)
	$atmpguipos = WinGetPos($htmpgui)
	GUIDelete($htmpgui)
	Return ($atmpguipos[1] - $aguipos[1]) - 5
EndFunc

Func checkforupdates()
	Global $lb
	$lb = GUICtrlCreateLabel("Please Wait, Checking for Updates", 7, 467, 450, 30)
	GUICtrlSetFont(-1, 15, 800, 4)
	GUICtrlSetColor(-1, 10027008)
	Sleep(1000)
	GUICtrlDelete($lb)
	Sleep(500)
	$lp = GUICtrlCreateLabel("Checking Windows Theme....", 7, 467, 450, 30)
	GUICtrlSetFont(-1, 15, 800, 4)
	GUICtrlSetColor(-1, 10027008)
	Sleep(1000)
	If _isclassictheme() = False Then
		MsgBox(0, "Wrong windows theme selected", "Please change your windows theme to Classic and restart the hopper.")
		Exit
	Else
		$lp = GUICtrlCreateLabel("Windows Theme passed... Classic", 7, 467, 450, 30)
		GUICtrlSetFont(-1, 15, 800, 4)
		GUICtrlSetColor(-1, 10027008)
		Sleep(1000)
	EndIf
	$lp = GUICtrlCreateLabel("Checking Font Size....", 7, 467, 450, 30)
	GUICtrlSetFont(-1, 15, 800, 4)
	GUICtrlSetColor(-1, 10027008)
	Sleep(1000)
	Local $dpi = _getdpi()
	If $dpi[1] <> 96 Then
		MsgBox(0, "Font dpi is not set to Normal 96", "Please change font dpi to Normal 96")
		Exit
	Else
		$lp = GUICtrlCreateLabel("Font Size passed... 96 dpi", 7, 467, 450, 30)
	EndIf
	GUICtrlDelete($lp)
EndFunc

Func _getdpi()
	Local $a1[3]
	Local $hdc, $aret
	Local $idpi, $idpirat, $logpixelsy = 90, $hwnd = 0
	$hdc = DllCall("user32.dll", "long", "GetDC", "long", $hwnd)
	$aret = DllCall("gdi32.dll", "long", "GetDeviceCaps", "long", $hdc[0], "long", $logpixelsy)
	$hdc = DllCall("user32.dll", "long", "ReleaseDC", "long", $hwnd, "long", $hdc)
	$idpi = $aret[0]
	Select
		Case $idpi = 0
			$idpi = 96
			$idpirat = 94
		Case $idpi < 84
			$idpirat = $idpi / 105
		Case $idpi < 121
			$idpirat = $idpi / 96
		Case $idpi < 145
			$idpirat = $idpi / 95
		Case Else
			$idpirat = $idpi / 94
	EndSelect
	$a1[0] = 2
	$a1[1] = $idpi
	$a1[2] = $idpirat
	Return $a1
EndFunc

Func _downloadprogress($fileurl, $location)
	Local $filedownload = InetGet($fileurl, $location, 1, 1)
	ProgressOn("Downloading " & $version, "Update in progress")
	Do
		ProgressSet(Round(InetGetInfo($filedownload, 0) / 1048576, 2), Round(InetGetInfo($filedownload, 0) / 1048576, 2) & " percent")
		Sleep(20)
	Until InetGetInfo($filedownload, 2)
	ProgressSet(100, "Done", "Complete")
	Sleep(500)
	ProgressOff()
EndFunc

Global $startflag = False
Global $nmsg
GUISetState(@SW_SHOW, $maingui)
While 1
	Sleep(20)
	If $startflag Then
		GUICtrlSetState($startbtn, $gui_disable)
		If GUICtrlRead($radhoppercash) == $gui_checked Then
			startnow2cash()
		ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
			startnow2sng()
		Else
			startnow2mtt()
		EndIf
		$startflag = False
		GUICtrlSetState($startbtn, $gui_enable)
	EndIf
WEnd

Func startnow()
	$startflag = 1
EndFunc

Func schedulestart()
	startnow()
EndFunc

Func findbot()
	logit("FU332")
	$botpath = FileOpenDialog("openholdem.exe", "C:\", "Execute (*.exe)")
	GUICtrlSetData($bottxt, $botpath)
	logit("EN333")
EndFunc

Func aboutclick()
	logit("FU338")
	TrayItemSetState($aboutitem, $tray_checked)
	MsgBox(64, "About", "All In One OpenHoldem Hopper v" & $version & " coded by Webber, and Jmpkr.")
	logit("EN339")
EndFunc

Func tableresize()
	Local $list, $size1, $size2
	If GUICtrlRead($radhoppercash) == $gui_checked Then
		$list = tablelist()
	ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
		$list = tablelistsng()
	Else
		$list = tablelistmtt()
	EndIf
	If GUICtrlRead($cmbsite) == "888Poker" Then
		If @OSVersion == "WIN_10" Then
			ConsoleWrite("Windows 10" & @LF)
			$size1 = 580
			$size2 = 399
		ElseIf $theme == "Aero" Then
			ConsoleWrite("Windows Aero" & @LF)
			$size1 = 562
			$size2 = 360
		Else
			$size1 = 554
			$size2 = 360
		EndIf
		$size2 = 360
	ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
		$size1 = 514
		$size2 = 406
	ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		If $theme == "Aero" Then
			$size1 = 1000
			$size2 = 720
		ElseIf @OSVersion == "Win_10" Then
			$size1 = 1016
			$size2 = 759
		Else
			$size1 = 1008
			$size2 = 731
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		$size1 = 412
		$size2 = 305
	ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
		$size1 = 480
		If $theme == "Aero" Then
			$size2 = 323
		Else
			$size2 = 320
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		If GUICtrlRead($radhoppercash) == $gui_checked Then
			$list = bodogtablelist()
		ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
			$list = bodogtablelistsng()
		Else
			$list = bodogtablelistmtt()
		EndIf
		$size1 = 812
		$size2 = 648
	Else
		$size1 = 1024
		$size2 = 726
	EndIf
	If IsArray($list) Then
		For $a = 1 To $list[0][0]
			Local $tabpos = WinGetPos($list[$a][1])
			If IsArray($tabpos) AND NOT StringInStr($list[$a][0], "SciTE") AND NOT StringInStr(WinGetText($list[$a][1]), "#include") AND NOT StringInStr($list[$a][0], ".au3") AND NOT StringInStr($list[$a][0], ".ohf") AND NOT StringInStr($list[$a][0], ".oppl") Then
				If $tabpos[2] <> $size1 OR $tabpos[3] <> $size2 Then
					ConsoleWrite("Title: " & $list[$a][0] & @LF)
					ConsoleWrite("$tabpos: " & $tabpos[2] & ", " & $tabpos[3] & @LF)
					ConsoleWrite("$size: " & $size1 & ", " & $size2 & @LF)
					ConsoleWrite("Tableresize mousewinmove" & @LF)
					mousewinmove($list[$a][1], "", Default, Default, $size1, $size2, 3, 1)
				EndIf
			EndIf
		Next
	EndIf
EndFunc

Func botcount()
	Local $botlist = botwinlist($bottitle)
	Local $rv = 0
	If IsArray($botlist) Then
		For $a = 1 To $botlist[0][0]
			If NOT botconnected($botlist[$a][1]) Then
			Else
				$rv += 1
			EndIf
		Next
	EndIf
	If $rv <> $oldbotlist Then
		$oldbotlist = $rv
	EndIf
	Return $rv
EndFunc

Func hidebot($hwin)
	WinSetState($hwin, "", @SW_MINIMIZE)
EndFunc

Func emptytablehandle()
	logit("FU429")
	Local $rv
	$rv = -10
	logit("FO430")
	For $a = 0 To 21
		logit("IF431")
		If $htable[$a] == -10 OR NOT WinExists($htable[$a]) Then
			$rv = $a
			ExitLoop
		EndIf
		logit("EN432")
	Next
	logit("NE433")
	logit("EN434")
	Return $rv
EndFunc

Func numtables($ht)
	logit("FU441")
	Local $rv = 0
	logit("FO442")
	For $a = 0 To 14
		logit("IF443")
		If $ht[$a] <> -10 AND $ht[$a] <> 0 AND WinExists($ht[$a]) AND $ht[$a] <> "" AND iswindowvisible($ht[$a]) Then
			$rv = $rv + 1
		Else
			$ht[$a] = -10
		EndIf
		logit("EN444")
	Next
	logit("NE445")
	logit("EN446")
	Return $rv
EndFunc

Func tablecount()
	logit("FU447")
	Local $tablelist
	If GUICtrlRead($radhoppercash) == $gui_checked Then
		$tablelist = tablelist()
	ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
		$tablelist = tablelistsng()
	Else
		$tablelist = tablelistmtt()
	EndIf
	logit("EN448")
	Return $tablelist[0][0]
EndFunc

Func checkextrawindow()
	logit("FU648")
	Sleep(1000)
	Local $winlist
	Local $wintext
	$winlist = WinList()
	logit("IF649")
	If IsArray($winlist) Then
		logit("FO650")
		For $x = 1 To $winlist[0][0]
			$wintext = WinGetText($winlist[$x][0])
			logit("IF651")
			If StringInStr($wintext, "Fee") Then
				WinActivate($winlist[$x][0])
				_winapi_setforegroundwindow($winlist[$x][0])
				WinWaitActive($winlist[$x][0], "", 1)
				$winpos = WinGetPos($winlist[$x][0])
				Local $pos = WinGetCaretPos()
				Local $correctposx = $pos[0] - $winpos[0]
				Local $correctposy = $pos[1] - $winpos[1]
				Local $totalposx = $correctposx + $winpos[0]
				Local $totalposy = $correctposy + $winpos[1]
				logit("IF652")
				If IsArray($winpos) Then
					WinActivate($winlist[$x][0])
					MouseClick("left", $totalposx + 86, $totalposy + 242, 1, 0)
				EndIf
				logit("EN653")
				Return
			EndIf
			logit("EN654")
		Next
		logit("NE655")
	EndIf
	logit("EN656")
	logit("EN657")
EndFunc

Func handlecashier()
	logit("FU2298")
	Local $hnd
	logit("IF2299")
	Local $title = ""
	If GUICtrlRead($cmbsite) == "WillHill" Then
		$title = "William Hill"
	ElseIf GUICtrlRead($cmbsite) == "Titan" Then
		$title = "Titan"
	ElseIf GUICtrlRead($cmbsite) == "Ladbrokes" Then
		$title = "Ladbrokes"
	ElseIf GUICtrlRead($cmbsite) == "Betfred" Then
		$title = "Betfred"
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		$title = "Betfair"
	ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
		$title = "Sisal"
	ElseIf GUICtrlRead($cmbsite) == "Bet365" Then
		$title = "Bet365"
	ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
		$title = "Paddy"
	ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
		$title = "Netbet"
	ElseIf GUICtrlRead($cmbsite) == "BNG" Then
		$title = "Betngo"
	ElseIf GUICtrlRead($cmbsite) == "Everest" Then
		$title = "Everest"
	EndIf
	If $title <> "" Then
		If WinExists("[REGEXPTITLE:\ACashier.*" & $title & ".*\z]") Then
			$hnd = WinGetHandle("[REGEXPTITLE:\ACashier.*" & $title & ".*\z]")
			logit("IF2300")
			If iswindowvisible($hnd) Then
				fconsolewrite("Cashier window found... closing now...")
				WinClose($hnd)
			EndIf
			logit("EN2301")
		EndIf
	EndIf
	logit("EN2302")
	logit("EN2303")
EndFunc

Func getwinlist()
	Local $winlist
	If GUICtrlRead($radhoppercash) == $gui_checked Then
		$winlist = tablelist()
	ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
		$winlist = tablelistsng()
	Else
		$winlist = tablelistmtt()
	EndIf
	Return $winlist
EndFunc

Func handlesitoutwindow()
	Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
	Local $hndbuyin
	If IsArray($winlist) Then
		For $x = 1 To $winlist[0][0]
			$winpos = WinGetPos($winlist[$x][1])
			If IsArray($winpos) AND $winpos[2] == 402 AND iswindowvisible($winlist[$x][1]) Then
				WinActivate($winlist[$x][1])
				WinWaitActive($winlist[$x][1], "", 2)
				If GUICtrlRead($cmbsite) == "BNG" Then
					If IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 29, $winpos[1] + 111, $winlist[$x][1]) == 10066329) AND PixelGetColor($winpos[0] + 375, $winpos[1] + 106, $winlist[$x][1]) == 10066329 Then
						logit("IF980")
						If PixelGetColor($winpos[0] + 250, $winpos[1] + 126, $winlist[$x][1]) == 10066329 Then
							fconsolewrite("Sitout Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							Sleep(500)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
							Else
								MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
							EndIf
						EndIf
						logit("EN981")
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
					If IsArray($winpos) AND $winpos[2] == 402 Then
						If PixelGetColor($winpos[0] + 130, $winpos[1] + 220, $winlist[$x][1]) == 5270539 AND PixelGetColor($winpos[0] + 273, $winpos[1] + 222, $winlist[$x][1]) == 4810240 Then
							logit("IF980")
							If PixelGetColor($winpos[0] + 34, $winpos[1] + 6, $winlist[$x][1]) == 3158064 Then
								fconsolewrite("Sitout Window Found...closing")
								$hndbuyin = WinGetHandle($winlist[$x][1])
								WinActivate($hndbuyin)
								Sleep(500)
								If GUICtrlRead($radhoppercash) == $gui_checked Then
									MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
								Else
									MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
								EndIf
							EndIf
							logit("EN981")
						EndIf
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Ladbrokes" Then
					If IsArray($winpos) AND $winpos[2] == 402 Then
						If PixelGetColor($winpos[0] + 130, $winpos[1] + 220, $winlist[$x][1]) == 5270539 AND PixelGetColor($winpos[0] + 273, $winpos[1] + 222, $winlist[$x][1]) == 4810240 Then
							logit("IF980")
							If PixelGetColor($winpos[0] + 34, $winpos[1] + 6, $winlist[$x][1]) == 3158064 Then
								fconsolewrite("Sitout Window Found...closing")
								$hndbuyin = WinGetHandle($winlist[$x][1])
								WinActivate($hndbuyin)
								Sleep(500)
								If GUICtrlRead($radhoppercash) == $gui_checked Then
									MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
								Else
									MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
								EndIf
							EndIf
							logit("EN981")
						EndIf
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
					If IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 29, $winpos[1] + 111, $winlist[$x][1]) == 16777215) AND PixelGetColor($winpos[0] + 369, $winpos[1] + 108, $winlist[$x][1]) == 16777215 Then
						logit("IF980")
						If PixelGetColor($winpos[0] + 250, $winpos[1] + 126, $winlist[$x][1]) == 16777215 Then
							fconsolewrite("Sitout Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							Sleep(500)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
							Else
								MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
							EndIf
						EndIf
						logit("EN981")
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
					If IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 29, $winpos[1] + 111, $winlist[$x][1]) == 15597567) AND PixelGetColor($winpos[0] + 381, $winpos[1] + 105, $winlist[$x][1]) == 15597567 Then
						logit("IF980")
						If PixelGetColor($winpos[0] + 250, $winpos[1] + 126, $winlist[$x][1]) == 15597567 Then
							fconsolewrite("Sitout Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							Sleep(500)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
							Else
								MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
							EndIf
						EndIf
						logit("EN981")
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Everest" Then
					If IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 29, $winpos[1] + 111, $winlist[$x][1]) == 16777215) AND PixelGetColor($winpos[0] + 381, $winpos[1] + 105, $winlist[$x][1]) == 16777215 Then
						logit("IF980")
						If PixelGetColor($winpos[0] + 250, $winpos[1] + 126, $winlist[$x][1]) == 16777215 Then
							fconsolewrite("Sitout Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							Sleep(500)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
							Else
								MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
							EndIf
						EndIf
						logit("EN981")
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Betfred" Then
					If IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 29, $winpos[1] + 111, $winlist[$x][1]) == 16777215) AND PixelGetColor($winpos[0] + 369, $winpos[1] + 109, $winlist[$x][1]) == 16777215 Then
						logit("IF980")
						If PixelGetColor($winpos[0] + 250, $winpos[1] + 126, $winlist[$x][1]) == 16777215 Then
							fconsolewrite("Sitout Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							Sleep(500)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
							Else
								MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
							EndIf
						EndIf
						logit("EN981")
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
					If IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 19, $winpos[1] + 111, $winlist[$x][1]) == 16777215) AND PixelGetColor($winpos[0] + 287, $winpos[1] + 106, $winlist[$x][1]) == 16777215 Then
						logit("IF980")
						If PixelGetColor($winpos[0] + 250, $winpos[1] + 126, $winlist[$x][1]) == 16777215 Then
							fconsolewrite("Sitout Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							Sleep(500)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
							Else
								MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
							EndIf
						EndIf
						logit("EN981")
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
					If IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 18, $winpos[1] + 106, $winlist[$x][1]) == 16777215) AND PixelGetColor($winpos[0] + 324, $winpos[1] + 106, $winlist[$x][1]) == 16777215 Then
						logit("IF980")
						If PixelGetColor($winpos[0] + 271, $winpos[1] + 126, $winlist[$x][1]) == 16777215 Then
							fconsolewrite("Sitout Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							Sleep(500)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
							Else
								MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
							EndIf
						EndIf
						logit("EN981")
					EndIf
				ElseIf GUICtrlRead($cmbsite) == "Bet365" Then
					If IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 18, $winpos[1] + 36, $winlist[$x][1]) == 16777215) AND PixelGetColor($winpos[0] + 120, $winpos[1] + 56, $winlist[$x][1]) == 16777215 Then
						logit("IF980")
						If PixelGetColor($winpos[0] + 382, $winpos[1] + 43, $winlist[$x][1]) == 16777215 Then
							fconsolewrite("Sitout Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							Sleep(500)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								MouseClick("left", $winpos[0] + 242, $winpos[1] + 221, 1, 0)
							Else
								MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
							EndIf
						EndIf
						logit("EN981")
					EndIf
				Else
					If IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 17, $winpos[1] + 106, $winlist[$x][1]) == 0) Then
						If (PixelGetColor($winpos[0] + 250, $winpos[1] + 126, $winlist[$x][1]) == 0) Then
							fconsolewrite("Sitout Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							If GUICtrlRead($radhoppercash) == $gui_checked Then
								MouseClick("left", $winpos[0] + 242, $winpos[1] + 210, 1, 0)
							Else
								MouseClick("left", $winpos[0] + 160, $winpos[1] + 221, 1, 0)
							EndIf
						EndIf
					ElseIf IsArray($winpos) AND $winpos[2] == 402 AND (PixelGetColor($winpos[0] + 18, $winpos[1] + 128, $winlist[$x][1]) == 0) Then
						If (PixelGetColor($winpos[0] + 382, $winpos[1] + 136, $winlist[$x][1]) == 0) Then
							fconsolewrite("No more chips Window Found...closing")
							$hndbuyin = WinGetHandle($winlist[$x][1])
							WinActivate($hndbuyin)
							MouseClick("left", $winpos[0] + 355, $winpos[1] + 242, 1, 0)
						EndIf
					EndIf
				EndIf
			EndIf
		Next
	EndIf
EndFunc

Func closebeginnerwin()
	Local $title = ""
	If GUICtrlRead($cmbsite) == "WillHill" Then
		$title = "William Hill"
	ElseIf GUICtrlRead($cmbsite) == "Titan" Then
		$title = "Titan"
	ElseIf GUICtrlRead($cmbsite) == "Ladbrokes" Then
		$title = "Ladbrokes"
	ElseIf GUICtrlRead($cmbsite) == "Betfred" Then
		$title = "Betfred"
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		$title = "Betfair"
	ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
		$title = "Sisal"
	ElseIf GUICtrlRead($cmbsite) == "Bet365" Then
		$title = "Bet365"
	ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
		$title = "Paddy"
	ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
		$title = "Netbet"
	ElseIf GUICtrlRead($cmbsite) == "BNG" Then
		$title = "Betngo"
	ElseIf GUICtrlRead($cmbsite) == "Everest" Then
		$title = "Everest"
	EndIf
	If $title <> "" Then
		If WinExists("[REGEXPTITLE:\A" & $title & ".*\z]") Then
			Local $winlist = WinList("[REGEXPTITLE:\A" & $title & ".*\z]")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					Local $winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If $winpos[2] == 402 AND $winpos[3] == 265 Then
							If GUICtrlRead($cmbsite) == "Titan" Then
								If iswindowvisible($winlist[$x][1]) Then
									WinActivate($winlist[$x][1])
									If IsArray(PixelSearch($winpos[0] + 71, $winpos[1] + 103, $winpos[0] + 71, $winpos[1] + 103, 0, 2, 1, $winlist[$x][1])) Then
										If IsArray(PixelSearch($winpos[0] + 203, $winpos[1] + 243, $winpos[0] + 203, $winpos[1] + 243, 3355443, 2, 1, $winlist[$x][1])) Then
											ConsoleWrite("Beginner window found" & @LF)
											WinClose($winlist[$x][1])
											Return True
										EndIf
									EndIf
								EndIf
							EndIf
						EndIf
					EndIf
				Next
			EndIf
		EndIf
	EndIf
	Return False
EndFunc

Func checksitouttables()
	ConsoleWrite("Checking sitout tables" & @LF)
	Local $socolor1, $xcolor1, $xcount, $ischecked
	For $a = 0 To 21
		If $htable[$a] == -10 Then ContinueLoop
		logit("IF11941")
		If $lastcheckdeadtablemsg <> $lastcheckdeadtablemsg2 Then
			fconsolewrite($lastcheckdeadtablemsg)
			$lastcheckdeadtablemsg2 = $lastcheckdeadtablemsg
		EndIf
		logit("EN11951")
		Local $offset = WinGetPos($htable[$a])
		If NOT IsArray($offset) Then ContinueLoop
		Local $pixsearchsitout = False
		logit("IF11942")
		If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			If IsArray(PixelSearch(656 + $offset[0], 498 + $offset[1], 656 + $offset[0], 498 + $offset[1], 1710618, 5, 1, $htable[$a])) AND IsArray(PixelSearch(454 + $offset[0], 557 + $offset[1], 454 + $offset[0], 557 + $offset[1], 16777215, 5, 1, $htable[$a])) Then
				$pixsearchsitout = True
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			If IsArray(PixelSearch(338 + $offset[0], 399 + $offset[1], 338 + $offset[0], 399 + $offset[1], 16777215, 5, 1, $htable[$a])) Then
				$pixsearchsitout = True
			EndIf
			If IsArray(PixelSearch(251 + $offset[0], 320 + $offset[1], 251 + $offset[0], 320 + $offset[1], 16777215, 5, 1, $htable[$a])) AND IsArray(PixelSearch(324 + $offset[0], 332 + $offset[1], 324 + $offset[0], 332 + $offset[1], 0, 5, 1, $htable[$a])) Then
				$pixsearchsitout = True
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			If IsArray(PixelSearch(8 + $offset[0], 270 + $offset[1], 8 + $offset[0], 270 + $offset[1], 12303291, 5, 1, $htable[$a])) AND NOT IsArray(PixelSearch(491 + $offset[0], 555 + $offset[1], 491 + $offset[0], 555 + $offset[1], 0, 5, 1, $htable[$a])) Then
				$pixsearchsitout = True
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
			$ischecked = ControlCommand($htable[$a], "", "Sit me out", "IsChecked", "")
			If $ischecked == 1 Then
				$pixsearchsitout = True
			EndIf
		Else
			If IsArray(PixelSearch($xcolor1 + $offset[0], 355 + $offset[1], $xcolor1 + $offset[0], 355 + $offset[1], $socolor1, 5, 1, $htable[$a])) Then
				$pixsearchsitout = True
			EndIf
		EndIf
		logit("EN11952")
		If $pixsearchsitout AND NOT havecards($htable[$a]) Then
			$checkdeadsotableattempts[$a] += 1
			$sitoutdetected[$a] = True
			logit("IF801")
			$xcount = 0
			If $sitoutdetected[$a] = True Then
				logit("IF802")
				If $checkdeadsotableattempts[$a] > 1 Then
					ConsoleWrite("CDT SOAttempts1: " & $checkdeadsotableattempts[$a] & @LF)
					logit("IF803")
					If $sotimer[$a] == -10 Then
						$sotimer[$a] = _timer_init()
					ElseIf _timer_diff($sotimer[$a]) / 1000 > Number(GUICtrlRead($txtsitting)) Then
						$sitoutdetected[$a] = False
						$sotimer[$a] = _timer_init()
						fconsolewrite("Closing Sitting Out table: " & StringRegExpReplace(WinGetTitle($htable[$a]), "As .*\z", "As [OpenHoldemStore.com]"))
						logit("IF1347")
						logit("EN1348")
						While $xcount < 10 AND WinExists($htable[$a])
							closetable($htable[$a], $a)
							$xcount += 1
							Sleep(300)
							If NOT WinExists($htable[$a]) Then ExitLoop
						WEnd
						$checkdeadsotableattempts[$a] = 0
						$tlastaction[$a] = -10
						logit("IF1349")
						ContinueLoop
					Else
						ConsoleWrite("CDT Timer: " & _timer_diff($sotimer[$a]) / 1000 & @LF)
						$lastcheckdeadtablemsg = "Table looks like sitting out: " & StringRegExpReplace(WinGetTitle($htable[$a]), "As .*\z", "As [OpenHoldemStore.com]")
						If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" Then
							handlesitoutwindow()
						EndIf
					EndIf
				Else
					ConsoleWrite("CDT SOAttempts2: " & $checkdeadsotableattempts[$a] & @LF)
				EndIf
				logit("EN809")
			Else
				$checkdeadsotableattempts[$a] = 0
			EndIf
			logit("EN1351")
		Else
			$checkdeadsotableattempts[$a] = 0
		EndIf
	Next
EndFunc

Func checkrebuywindow()
	Local $list
	Local $pos
	$list = WinList("Choose your rebuy amount")
	If IsArray($list) Then
		For $x = 1 To $list[0][0]
			$pos = WinGetPos($list[$x][1])
			If IsArray($pos) AND iswindowvisible($list[$x][1]) Then
				WinActivate($list[$x][1])
				WinWaitActive($list[$x][1], "", 1)
				MouseClick("left", $pos[0] + 201, $pos[1] + 452, 1, 0)
				WinWaitClose($list[$x][1], "", 1)
				ExitLoop
			EndIf
		Next
	EndIf
EndFunc

Func checkxtradeadtableseee()
	Local $winlist = tablelist()
	Local $pixsearch, $pixsearch2, $deadtable, $xtracount
	If IsArray($winlist) Then
		For $a = 1 To $winlist[0][0]
			Local $offset = WinGetPos($winlist)
			If IsArray($offset) Then
				$pixsearch = PixelSearch(338 + $offset[0], 399 + $offset[1], 338 + $offset[0], 399 + $offset[1], 16777215, 0, 1, $winlist[$a][1])
				$pixsearch2 = PixelSearch(304 + $offset[0], 468 + $offset[1], 304 + $offset[0], 468 + $offset[1], 16777215, 0, 1, $winlist[$a][1])
				Local $pixsearch3 = PixelSearch(380 + $offset[0], 426 + $offset[1], 380 + $offset[0], 426 + $offset[1], 16777215, 0, 1, $winlist[$a][1])
				If NOT IsArray($pixsearch) AND NOT IsArray($pixsearch2) AND NOT IsArray($pixsearch3) Then
					ConsoleWrite("CXDT Table: " & WinGetTitle($winlist[$a][1]) & " --- is dead" & @LF)
					$deadtable = True
				Else
					ConsoleWrite("CXDTTable: " & WinGetTitle($winlist[$a][1]) & " --- is not dead" & @LF)
					$deadtable = False
				EndIf
			EndIf
			If $deadtable Then
				$checkxtradeadtableattempts[$a] += 1
				If $checkxtradeadtableattempts[$a] > 5 AND NOT havecards($winlist[$a][1]) Then
					fconsolewrite("Closing inactive table: " & WinGetTitle($winlist[$a][1]))
					While $xtracount < 10 AND WinExists($winlist[$a][1])
						If WinExists("Info") AND iswindowvisible("Info") Then
							Local $infopos = WinGetPos("Info")
							WinActivate("Info")
							WinWaitActive("Info", "", 1)
							MouseClick("left", $infopos[0] + 404, $infopos[1] + 200, 1, 0)
							$checkxtradeadtableattempts[$a] = 0
							Return
						EndIf
						WinClose($winlist[$a][1])
						Sleep(100)
						If NOT WinExists($winlist[$a][1]) Then ExitLoop
						$xtracount += 1
					WEnd
					$checkxtradeadtableattempts[$a] = 0
					ContinueLoop
				Else
					fconsolewrite("Table Looks Inactive: " & WinGetTitle($winlist[$a][1]))
					ContinueLoop
				EndIf
			EndIf
		Next
	EndIf
EndFunc

Func checkdeadtablescash()
	logit("FU1192")
	logit("IF776")
	Local $xpos, $ypos, $pixsearch, $pixsearch2, $text, $deadtable
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		bodogcheckdeadtablealertwin()
		handlemissedbbwindow()
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		handlerecoveringwindow()
		handleunavailablewindow()
	EndIf
	logit("FO1193")
	If _timer_diff($checkdeadtablestimer) > 15000 Then
		checksitouttables()
		If GUICtrlRead($cmbsite) == "888Poker" Then
			checkxtradeadtableseee()
		EndIf
		$checkdeadtablestimer = _timer_init()
		For $a = 0 To 21
			logit("IF1194")
			If $lastcheckdeadtablemsg <> $lastcheckdeadtablemsg2 Then
				fconsolewrite($lastcheckdeadtablemsg)
				$lastcheckdeadtablemsg2 = $lastcheckdeadtablemsg
			EndIf
			logit("EN1195")
			Local $offset
			$offset = WinGetPos($htable[$a])
			Local $forcecheck = False
			logit("IF1198")
			If IsArray($offset) Then
				logit("IF1199")
				If WinExists($htable[$a]) AND (parentwindowfrompoint(455 + $offset[0], 298 + $offset[1]) == $htable[$a] AND parentwindowfrompoint(455 + $offset[0], 298 + $offset[1]) == $htable[$a]) OR _timer_diff($lasttablecheck[$a]) > 30000 Then
					logit("IF1200")
					If $lasttablecheck[$a] == -10 OR _timer_diff($lasttablecheck[$a]) > 10000 Then
						$forcecheck = True
						$lasttablecheck[$a] = _timer_init()
					Else
						Return
					EndIf
					logit("IF1201")
					If $forcecheck Then
						WinActivate($htable[$a])
					EndIf
					logit("EN1202")
					logit("IF1203")
					If WinExists($htable[$a]) AND $htable[$a] <> "" AND $htable[$a] <> 0 Then
						logit("IF1204")
						If $tlastaction[$a] == -10 Then
							$tlastaction[$a] = _timer_init()
						ElseIf _timer_diff($tlastaction[$a]) > 1000 Then
							logit("IF1205")
							WinActivate($htable[$a])
							logit("EN1206")
							logit("IF1213")
							If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
								If GUICtrlRead($chkspeedpoker) == $gui_unchecked Then
									$pixsearch = PixelSearch(655 + $offset[0], 460 + $offset[1], 655 + $offset[0], 460 + $offset[1], 16645629, 10, 1, $htable[$a])
									$pixsearch2 = PixelSearch(655 + $offset[0], 460 + $offset[1], 655 + $offset[0], 460 + $offset[1], 16645629, 10, 1, $htable[$a])
									If NOT IsArray($pixsearch) AND NOT IsArray($pixsearch2) Then
										$deadtable = True
									Else
										$deadtable = False
									EndIf
								Else
									$pixsearch = PixelSearch(659 + $offset[0], 508 + $offset[1], 659 + $offset[0], 508 + $offset[1], 12303291, 10, 1, $htable[$a])
									$pixsearch2 = PixelSearch(659 + $offset[0], 508 + $offset[1], 659 + $offset[0], 508 + $offset[1], 12303291, 10, 1, $htable[$a])
									If NOT IsArray($pixsearch) AND NOT IsArray($pixsearch2) Then
										$deadtable = True
									Else
										$deadtable = False
									EndIf
								EndIf
							ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
								$pixsearch = PixelSearch(230 + $offset[0], 340 + $offset[1], 230 + $offset[0], 340 + $offset[1], 0, 0, 1, $htable[$a])
								$pixsearch2 = PixelSearch(256 + $offset[0], 370 + $offset[1], 256 + $offset[0], 370 + $offset[1], 16777215, 0, 1, $htable[$a])
								Local $pixsearch3 = PixelSearch(256 + $offset[0], 370 + $offset[1], 256 + $offset[0], 370 + $offset[1], 16777215, 0, 1, $htable[$a])
								If NOT IsArray($pixsearch) AND NOT IsArray($pixsearch2) AND NOT IsArray($pixsearch3) Then
									ConsoleWrite("Table: " & WinGetTitle($htable[$a]) & " --- is dead" & @LF)
									$deadtable = True
								Else
									ConsoleWrite("Table: " & WinGetTitle($htable[$a]) & " --- is not dead" & @LF)
									$deadtable = False
								EndIf
							ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
								$pixsearch = PixelSearch(8 + $offset[0], 249 + $offset[1], 8 + $offset[0], 249 + $offset[1], 12303291, 5, 1, $htable[$a])
								$pixsearch2 = PixelSearch(8 + $offset[0], 249 + $offset[1], 8 + $offset[0], 249 + $offset[1], 12303291, 5, 1, $htable[$a])
								If NOT IsArray($pixsearch) AND NOT IsArray($pixsearch2) Then
									$deadtable = True
								Else
									$deadtable = False
								EndIf
							ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
								If @OSVersion == "Win_10" Then
									$pixsearch = PixelSearch(20 + $offset[0], 609 + $offset[1], 20 + $offset[0], 609 + $offset[1], 8224125, 10, 1, $htable[$a])
									$pixsearch2 = PixelSearch(20 + $offset[0], 609 + $offset[1], 20 + $offset[0], 609 + $offset[1], 8224125, 10, 1, $htable[$a])
								Else
									$pixsearch = PixelSearch(22 + $offset[0], 595 + $offset[1], 22 + $offset[0], 595 + $offset[1], 8224125, 10, 1, $htable[$a])
									$pixsearch2 = PixelSearch(22 + $offset[0], 595 + $offset[1], 22 + $offset[0], 595 + $offset[1], 8224125, 10, 1, $htable[$a])
								EndIf
								If NOT IsArray($pixsearch) AND NOT IsArray($pixsearch2) Then
									$deadtable = True
								Else
									$deadtable = False
								EndIf
							ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
								$text = WinGetText($htable[$a], "")
								If StringInStr($text, "Please take a seat") Then
									$deadtable = True
								Else
									$deadtable = False
								EndIf
							Else
								$pixsearch = PixelSearch($offset[0] + $xpos, $offset[1] + $ypos, $offset[0] + $xpos, $offset[1] + $ypos, 16777215, 5, 1, $htable[$a])
								$pixsearch2 = PixelSearch($offset[0] + $xpos, $offset[1] + $ypos, $offset[0] + $xpos, $offset[1] + $ypos, 8618883, 0, 1, $htable[$a])
								If NOT IsArray($pixsearch) AND NOT IsArray($pixsearch2) Then
									$deadtable = True
								Else
									$deadtable = False
								EndIf
							EndIf
							logit("EN1214")
							logit("IF1215")
							If $deadtable Then
								$sitoutdetected[$a] = False
								$checkdeadtableattempts[$a] += 1
								$checkdeadsotableattempts[$a] = 0
								logit("IF1338")
								Local $xcount = 0
								If $checkdeadtableattempts[$a] > IniRead($inifile, "settings", "DeadTableAttempts", 5) AND NOT havecards($htable[$a]) Then
									fconsolewrite("Closing inactive table: " & WinGetTitle($htable[$a]))
									While $xcount < 10 AND WinExists($htable[$a])
										If WinExists("Info") AND iswindowvisible("Info") Then
											Local $infopos = WinGetPos("Info")
											WinActivate("Info")
											WinWaitActive("Info", "", 1)
											MouseClick("left", $infopos[0] + 404, $infopos[1] + 200, 1, 0)
											$checkdeadtableattempts[$a] = 0
											Return
										EndIf
										closetable($htable[$a], $a)
										Sleep(100)
										If NOT WinExists($htable[$a]) Then ExitLoop
										$xcount += 1
									WEnd
									$checkdeadtableattempts[$a] = 0
									$tlastaction[$a] = -10
									logit("IF1339")
									ContinueLoop
								Else
									fconsolewrite("Table Looks Inactive: " & WinGetTitle($htable[$a]))
									$tlastaction[$a] = _timer_init()
									logit("IF1340")
									ContinueLoop
								EndIf
							EndIf
							logit("EN1341")
							logit("EN1220")
							logit("IF1221")
						Else
							logit("IF1230")
							$checkdeadtableattempts[$a] = 0
							$tlastaction[$a] = -10
						EndIf
						logit("EN1231")
					EndIf
					logit("EN1232")
				EndIf
				logit("EN1233")
				logit("IF1234")
			EndIf
			logit("EN1235")
		Next
	EndIf
	logit("EN1240")
	logit("EN1241")
EndFunc

Func closepartyreplaywindows()
	If WinExists("Replay", "Do you want to play again") Then
		fconsolewrite("Replay Window found")
		Local $cwhnd = WinGetHandle("Replay", "Do you want to play again")
		WinClose($cwhnd)
	EndIf
EndFunc

Func checkdeadtables()
	Local $xpos1
	Local $xpos2
	Local $ypos1
	Local $ypos2
	Local $cdtcolor
	Local $point1
	Local $point2
	If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan" Then
		handlebegad()
		handlebngcongrats()
		bnghandlelosttables()
		handlesitoutwindow()
		$xpos1 = 44
		$xpos2 = 44
		$ypos1 = 312
		$ypos2 = 312
		$cdtcolor = 16777215
		$point1 = 44
		$point2 = 312
	ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
		eeehandlelosttables()
		If @OSVersion == "WIN_10" Then
			$xpos1 = 239
			$xpos2 = 313
			$ypos1 = 378
			$ypos2 = 385
			$cdtcolor = 16777215
			$point1 = 239
			$point2 = 378
		Else
			$xpos1 = 230
			$xpos2 = 305
			$ypos1 = 370
			$ypos2 = 376
			$cdtcolor = 16777215
			$point1 = 230
			$point2 = 376
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "FullTilt" Then
		tourneyfinishedwin()
		$xpos1 = 15
		$xpos2 = 15
		$ypos1 = 291
		$ypos2 = 291
		$cdtcolor = 16777215
		$point1 = 15
		$point2 = 291
	ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		bodoghandletourneyfinishedwin()
		$xpos1 = 669
		$xpos2 = 669
		$ypos1 = 495
		$ypos2 = 495
		$cdtcolor = 10329501
		$point1 = 669
		$point2 = 495
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		tourneyfinishedwin()
		$xpos1 = 16
		$xpos2 = 16
		$ypos1 = 249
		$ypos2 = 249
		$cdtcolor = 10066329
		$point1 = 16
		$point2 = 249
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		tourneyfinishedwin()
		bwinclosebreakwindows()
		$xpos1 = 284
		$xpos2 = 284
		$ypos1 = 284
		$ypos2 = 284
		$cdtcolor = 16777215
		$point1 = 284
		$point2 = 284
	ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		acrhandlelosttables()
		If @OSVersion == "WIN_10" Then
			$xpos1 = 30
			$xpos2 = 30
			$ypos1 = 592
			$ypos2 = 592
			$point1 = 30
			$point2 = 592
		Else
			$xpos1 = 26
			$xpos2 = 26
			$ypos1 = 569
			$ypos2 = 569
			$point1 = 26
			$point2 = 569
		EndIf
		$cdtcolor = 8289918
	Else
		$xpos1 = 347
		$xpos2 = 421
		$ypos1 = 289
		$ypos2 = 312
		$cdtcolor = 16777215
		$point1 = 592
		$point2 = 266
	EndIf
	Local $deadtable = False
	Local $list
	If GUICtrlRead($radhoppermtt) == $gui_checked Then
		$list = tablelistmtt()
	Else
		$list = tablelistsng()
	EndIf
	If _timer_diff($checkdeadtablestimer) > 20000 Then
		$checkdeadtablestimer = _timer_init()
		For $a = 0 To $list[0][0] - 1
			If $lastcheckdeadtablemsg <> $lastcheckdeadtablemsg2 Then
				fconsolewrite($lastcheckdeadtablemsg)
				$lastcheckdeadtablemsg2 = $lastcheckdeadtablemsg
			EndIf
			Local $offset
			$offset = WinGetPos($htable[$a])
			Local $classlist = WinGetClassList($htable[$a])
			Local $titlepoint
			Local $forcecheck = False
			If WinExists($htable[$a]) AND IsArray($offset) Then
				Local $windowfrompoint = windowfrompoint($point1 + $offset[0], $point2 + $offset[1])
				$titlepoint = WinGetTitle($windowfrompoint)
			EndIf
			If IsArray($offset) Then
				If NOT StringInStr(WinGetTitle($htable[$a]), "ohf") AND $titlepoint <> "TourActionsWidgetWindow" AND NOT StringInStr($htable[$a], "oppl") AND NOT StringInStr($classlist, "AfxFrameOrView80s") AND NOT StringInStr(WinGetTitle($htable[$a]), "[REGEXPCLASS:\AOpenHoldem\z]") AND NOT StringInStr($htable[$a], "SciTE") AND NOT StringInStr(WinGetTitle($htable[$a]), "dll") AND NOT StringInStr(WinGetTitle($htable[$a]), "OpenHoldem") AND NOT StringInStr(WinGetTitle($htable[$a]), "openholdem") AND NOT StringInStr($list[$a][0], "Openholdem") Then
					If WinExists($htable[$a]) OR _timer_diff($lasttablecheck[$a]) > 10000 Then
						$lasttablecheck[$a] = _timer_init()
						$forcecheck = True
						If WinExists($htable[$a]) AND $htable[$a] <> "" AND $htable[$a] <> 0 Then
							If $tlastaction[$a] == -10 Then
								$tlastaction[$a] = _timer_init()
							Else
								If $forcecheck Then
									WinSetOnTop($htable[$a], "", 1)
									WinActivate($htable[$a])
								EndIf
								If NOT WinActive($htable[$a]) Then
									WinActivate($htable[$a])
									WinWaitActive($htable[$a], "", 3)
								EndIf
								Local $cdtarray
								If GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
									ConsoleWrite("Party Dead Table Check: " & WinGetTitle($htable[$a]) & @LF)
									closepartyreplaywindows()
									Local $text = ControlGetText(WinGetTitle($htable[$a]), "", "[ID:9999]")
									Local $text2 = ControlGetText(WinGetTitle($htable[$a]), "", "[ID:6689]")
									ConsoleWrite("Text = " & $text & @LF)
									ConsoleWrite("Text2 = " & $text2 & @LF)
									If StringInStr($text, "Please take a seat") OR StringInStr($text2, "The tournament is now finished") Then
										$deadtable = True
									Else
										$deadtable = False
									EndIf
								Else
									Local $cdtarray2
									If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
										$cdtarray = PixelSearch($offset[0] + $xpos1, $offset[1] + $ypos1, $offset[0] + $xpos2, $offset[1] + $ypos2, $cdtcolor, 10, 1, $htable[$a])
									Else
										$cdtarray = PixelSearch($offset[0] + $xpos1, $offset[1] + $ypos1, $offset[0] + $xpos2, $offset[1] + $ypos2, $cdtcolor, 10, 1, $htable[$a])
									EndIf
									If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
										If IsArray($cdtarray) OR IsArray($cdtarray2) Then
											$deadtable = False
										Else
											$deadtable = True
										EndIf
									Else
										If GUICtrlRead($cmbsite) == "888Poker" Then
											If NOT IsArray($cdtarray) AND (PixelGetColor($offset[0] + 290, $offset[1] + 390, $htable[$a]) <> 0) Then
												$deadtable = True
											Else
												$deadtable = False
											EndIf
										Else
											If NOT IsArray($cdtarray) AND NOT IsArray($cdtarray2) Then
												$deadtable = True
											Else
												$deadtable = False
											EndIf
										EndIf
									EndIf
								EndIf
								If $deadtable = True Then
									$checkdeadtableattempts[$a] += 1
									If $checkdeadtableattempts[$a] >= IniRead($inifile, "settings", "DeadTableAttempts", 2) Then
										fconsolewrite($titlepoint & " is inactive")
										fconsolewrite("Closing inactive table: " & WinGetTitle($htable[$a]))
										closetable($htable[$a], $a)
										$checkdeadtableattempts[$a] = 0
										$tlastaction[$a] = -10
										If $forcecheck Then WinSetOnTop($htable[$a], "", 0)
										ContinueLoop
									Else
										fconsolewrite("CDT: " & WinGetTitle($htable[$a]) & " looks inactive, count: " & $checkdeadtableattempts[$a])
										fconsolewrite($lastcheckdeadtablemsg)
										$tlastaction[$a] = _timer_init()
										If $forcecheck Then WinSetOnTop($htable[$a], "", 0)
										ContinueLoop
									EndIf
								Else
									ConsoleWrite("deadtable false" & @LF)
									$checkdeadtableattempts[$a] = 0
								EndIf
								If $forcecheck Then WinSetOnTop($htable[$a], "", 0)
								$checkdeadtableattempts[$a] = 0
								$tlastaction[$a] = -10
							EndIf
						Else
							If $forcecheck Then WinSetOnTop($htable[$a], "", 0)
							$checkdeadtableattempts[$a] = 0
							$tlastaction[$a] = -10
						EndIf
					EndIf
				EndIf
			EndIf
			If $forcecheck Then WinSetOnTop($htable[$a], "", 0)
		Next
	EndIf
EndFunc

Func getlobbyhnd()
	Local $wloblist, $lobbpos
	Local $hlobby = -10
	If GUICtrlRead($cmbsite) == "BNG" Then
		$wloblist = WinList("[REGEXPTITLE:\ABetnGo.*\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		$wloblist = WinList("[REGEXPTITLE:\AWilliam Hill Poker\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl_list") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Ladbrokes" Then
		$wloblist = WinList("[REGEXPTITLE:\ALadbrokes Poker\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		$wloblist = WinList("[REGEXPTITLE:\ABetfair.*\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Everest" Then
		$wloblist = WinList("[REGEXPTITLE:\AEverestPoker.*\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
		$wloblist = WinList("[REGEXPTITLE:\APaddy Power Poker\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
		$wloblist = WinList("[REGEXPTITLE:\ANetbet Poker\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Betfred" Then
		$wloblist = WinList("[REGEXPTITLE:\ABetfred Poker\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Bet365" Then
		$wloblist = WinList("[REGEXPTITLE:\Abet365\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If WinGetState($wloblist[$t][1]) == 23 Then
					ConsoleWrite("Restoring state of lobby" & @LF)
					WinActivate($wloblist[$t][1])
					WinSetState($wloblist[$t][1], "", @SW_SHOW)
				EndIf
				$lobbpos = WinGetPos($wloblist[$t][1])
				If IsArray($lobbpos) Then
					If $lobbpos[2] == 1024 AND $lobbpos[3] == 726 Then
						$hlobby = $wloblist[$t][1]
						ExitLoop
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
		$wloblist = WinList("[REGEXPTITLE:\ASisal Poker\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "Titan" Then
		$wloblist = WinList("[REGEXPTITLE:\ATitan.*\z]")
		If IsArray($wloblist) AND $wloblist[0][0] > 0 Then
			For $t = 1 To $wloblist[0][0]
				If StringInStr(WinGetText($wloblist[$t][1]), "new_table_listctrl") OR StringInStr(WinGetText($wloblist[$t][1]), "new_tour_listctrl") Then
					If WinGetState($wloblist[$t][1]) == 23 Then
						ConsoleWrite("Restoring state of lobby" & @LF)
						WinActivate($wloblist[$t][1])
						WinSetState($wloblist[$t][1], "", @SW_SHOW)
					EndIf
					$lobbpos = WinGetPos($wloblist[$t][1])
					If IsArray($lobbpos) Then
						If $lobbpos[2] > 800 AND $lobbpos[3] > 600 Then
							$hlobby = $wloblist[$t][1]
							ExitLoop
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	EndIf
	Return $hlobby
EndFunc

Func checkdeadhandletables($hta)
	Local $list
	If GUICtrlRead($radhoppercash) == $gui_checked Then
		$list = tablelist()
	ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
		$list = tablelistsng()
	Else
		$list = tablelistmtt()
	EndIf
	If IsArray($list) Then
		For $x = 0 To $list[0][0] - 1
			If (($hta[$x] == "" OR $hta[$x] == 0 OR $hta[$x] == -10) AND WinExists($hta[$x])) OR (NOT sittingattable($list[$x][1] AND WinExists($hta[$x]))) Then
				If (($hta[$x] == "" OR $hta[$x] == 0 OR $hta[$x] == -10) AND WinExists($hta[$x])) Then
					fconsolewrite("CDHT: No handle for table: " & $list[$x][0] & "... closing")
					If NOT WinActive($list[$x][1]) Then
						WinActivate($list[$x][1])
						WinWaitActive($list[$x][1], "", 2)
					EndIf
					Local $xcount = 0
					If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
						While $xcount < 10 AND WinExists($list[$x][1])
							closetable($list[$x][1], $x)
							$xcount += 1
							Sleep(300)
							If NOT WinExists($list[$x][1]) Then ExitLoop
						WEnd
					Else
						WinClose($list[$x][1])
					EndIf
				Else
					fconsolewrite("CDHT: Not sitting at table: " & $list[$x][0] & " handle: " & $hta[$x] & ".... Checking if dead tables exist")
					If GUICtrlRead($radhoppercash) == $gui_checked Then
						checkdeadtablescash()
					Else
						checkdeadtables()
					EndIf
					Sleep(1000)
				EndIf
			EndIf
		Next
	EndIf
EndFunc

Func closehelpwin()
	logit("FU2161")
	logit("IF2162")
	Local $title = ""
	If GUICtrlRead($cmbsite) == "WillHill" Then
		$title = "William Hill"
	ElseIf GUICtrlRead($cmbsite) == "Titan" Then
		$title = "Titan"
	ElseIf GUICtrlRead($cmbsite) == "Ladbrokes" Then
		$title = "Ladbrokes"
	ElseIf GUICtrlRead($cmbsite) == "Betfred" Then
		$title = "Betfred"
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		$title = "Betfair"
	ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
		$title = "Sisal"
	ElseIf GUICtrlRead($cmbsite) == "Bet365" Then
		$title = "Bet365"
	ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
		$title = "Paddy"
	ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
		$title = "Netbet"
	ElseIf GUICtrlRead($cmbsite) == "BNG" Then
		$title = "Betngo"
	ElseIf GUICtrlRead($cmbsite) == "Everest" Then
		$title = "Everest"
	EndIf
	If $title <> "" Then
		Local $winlist = WinList("[REGEXPTITLE:\AHelp" & $title & ".*\z]")
	EndIf
	logit("EN2163")
	logit("IF2164")
	If IsArray($winlist) Then
		logit("FO2165")
		For $x = 1 To $winlist[0][0]
			logit("IF2166")
			If iswindowvisible($winlist[$x][1]) Then
				WinClose($winlist[$x][1])
			EndIf
			logit("EN2167")
		Next
		logit("NE2168")
	EndIf
	logit("EN2169")
	logit("EN2170")
EndFunc

Func botconnected($hwnd)
	Local $rv = 0
	Local $hdltoolbar = ControlGetHandle($hwnd, "", "[CLASS:ToolbarWindow32; INSTANCE:2]")
	Local $icount = _guictrltoolbar_buttoncount($hdltoolbar)
	For $i = 0 To $icount - 1 Step 1
		If $i == 5 Then
			ExitLoop
		Else
			ContinueLoop
		EndIf
	Next
	If WinExists($hwnd) Then
		If _guictrltoolbar_getbuttonstate($hdltoolbar, 32819) == 4 Then
			$rv = True
		Else
			$rv = False
		EndIf
	EndIf
	Return $rv
EndFunc

Func allbotsconnected()
	Local $rv = True
	For $a = 0 To 22
		If $htable[$a] <> -10 AND winvisibleandexists($htable[$a]) Then
			If NOT botconnected($hoh[$a]) Then
				$rv = False
				ExitLoop
			EndIf
		EndIf
	Next
	Return $rv
EndFunc

Func nbotsconnected()
	Local $rv
	$rv = 0
	For $a = 0 To 22
		If WinExists($hoh[$a]) Then
			$rv += botconnected($hoh[$a])
		EndIf
	Next
	Return $rv
EndFunc

Func arrayget($signature, $variable, $dim1 = 0, $dim2 = -1)
	logit("FU1241")
	logit("IF1242")
	If IsArray($variable) Then
		logit("IF1243")
		If UBound($variable, 1) > $dim1 Then
			logit("IF1244")
			If ($dim2 == -1 OR UBound($variable, 2) > $dim2) Then
				logit("IF1245")
				If $dim2 == -1 Then
					Return $variable[$dim1]
				Else
					Return $variable[$dim1][$dim2]
				EndIf
				logit("EN1246")
			Else
				fconsolewrite("[" & $signature & "] Array 2 out of bounds:" & UBound($variable, 2) & "<" & $dim2)
			EndIf
			logit("EN1247")
		Else
			fconsolewrite("[" & $signature & "]Array 1 out of bounds:" & UBound($variable, 1) & "<" & $dim1)
		EndIf
		logit("EN1248")
	Else
		fconsolewrite("[" & $signature & "]Variable isn't an array")
	EndIf
	logit("EN1249")
	Return False
	logit("EN1250")
EndFunc

Func pausescript()
	logit("FU1652")
	logit("WH1653")
	While 1
		Sleep(20)
	WEnd
	logit("WE1654")
	logit("EN1655")
EndFunc

Func fconsolewrite($s0, $s1 = "", $s2 = "", $s3 = "", $s4 = "", $s5 = "", $s6 = "", $s7 = "", $s8 = "", $s9 = "", $s10 = "")
	Local $s
	$s = $s0
	$temp = $s1
	If $temp <> "" Then $s &= "," & $temp
	$temp = $s2
	If $temp <> "" Then $s &= "," & $temp
	$temp = $s3
	If $temp <> "" Then $s &= "," & $temp
	$temp = $s4
	If $temp <> "" Then $s &= "," & $temp
	$temp = $s5
	If $temp <> "" Then $s &= "," & $temp
	$temp = $s6
	If $temp <> "" Then $s &= "," & $temp
	$temp = $s7
	If $temp <> "" Then $s &= "," & $temp
	$temp = $s8
	If $temp <> "" Then $s &= "," & $temp
	$temp = $s9
	If $temp <> "" Then $s &= "," & $temp
	$temp = $s10
	If $temp <> "" Then $s &= "," & $temp
	ConsoleWrite($s & @CRLF)
	GUICtrlSetData($sessionlog, @HOUR & ":" & @MIN & ":" & @SEC & " : " & $s & @CRLF & GUICtrlRead($sessionlog))
	If $log > 0 Then
		If $crneeded Then
			FileWriteLine($hlogfile, "")
			$crneeded = False
		EndIf
		FileWriteLine($hlogfile, @YEAR & "-" & @MON & "-" & @MDAY & " " & @HOUR & ":" & @MIN & ":" & @SEC & " : " & $s)
	EndIf
EndFunc

Func bodogcheckmisseddeadtables()
	logit("FU1670")
	bodoghandletourneyfinishedwin()
	Local $deadlist
	If GUICtrlRead($radhoppercash) == $gui_checked Then
		$deadlist = tablelist()
	ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
		$deadlist = tablelistsng()
	Else
		$deadlist = tablelistmtt()
	EndIf
	logit("FO1671")
	Local $xcount = 0
	For $a = 1 To $deadlist[0][0]
		logit("IF1672")
		Local $offset = WinGetPos($deadlist[$a][1])
		Local $forcecheck = False
		logit("IF1674")
		If IsArray($offset) Then
			logit("IF1677")
			If WinExists($deadlist[$a][1]) AND (WinGetTitle($deadlist[$a][1]) <> "[REGEXPTITLE:.*www.holdemmanager.com.*]") AND windowfrompoint(22 + $offset[0], 548 + $offset[1]) == $deadlist[$a][1] Then
				logit("IF1678")
				logit("EN1680")
				logit("IF1681")
				If WinExists($deadlist[$a][1]) AND $deadlist[$a][1] <> "" AND $deadlist[$a][1] <> 0 Then
					logit("IF488")
					If $forcecheck Then
						WinActivate($htable[$a])
					EndIf
					logit("EN490")
					logit("IF491")
					Local $pixsearch = PixelSearch(646 + $offset[0], 494 + $offset[1], 646 + $offset[0], 494 + $offset[1], 15066597, 0, 1, $deadlist[$a][1])
					logit("IF1685")
					If NOT IsArray($pixsearch) Then
						handletourneystartwin()
						If $checkmisseddeadtableattempts[$a - 1] >= 2 Then
							WinActivate($deadlist[$a][1])
							$pixsearch = PixelSearch(646 + $offset[0], 494 + $offset[1], 646 + $offset[0], 494 + $offset[1], 15066597, 0, 1, $deadlist[$a][1])
							If IsArray($pixsearch) Then
								$checkmisseddeadtableattempts[$a - 1] = 0
								ContinueLoop
							EndIf
						EndIf
						$checkmisseddeadtableattempts[$a - 1] += 1
						fconsolewrite("Dead Attempts = " & $checkmisseddeadtableattempts[$a])
						logit("IF492")
						If $checkmisseddeadtableattempts[$a - 1] > IniRead($inifile, "settings", "DeadTableAttempts", 5) Then
							Local $newactive = -10
							fconsolewrite("Closing inactive table: " & WinGetTitle($deadlist[$a][1]))
							Local $search = _arraysearch($htable, $deadlist[$a][1])
							If $search <> -1 Then
								$newactive = $search
							EndIf
							While $xcount < 10 AND WinExists($deadlist[$a][1])
								closetable($deadlist[$a][1], $a)
								$xcount += 1
								Sleep(300)
								If NOT WinExists($deadlist[$a][1]) Then ExitLoop
							WEnd
							If $newactive <> -10 Then
								WinClose($hoh[$newactive])
								$hoh[$newactive] = -10
							EndIf
							$checkmisseddeadtableattempts[$a - 1] = 0
							logit("IF493")
							If $forcecheck Then WinSetOnTop($deadlist[$a][1], "", 0)
							ContinueLoop
						Else
							logit("IF494")
							If $forcecheck Then WinSetOnTop($deadlist[$a][1], "", 0)
							ContinueLoop
						EndIf
						logit("EN495")
					EndIf
				EndIf
				logit("EN1696")
			EndIf
			logit("EN1697")
		EndIf
		logit("EN1698")
		logit("IF1699")
		If $forcecheck Then WinSetOnTop($deadlist[$a][1], "", 0)
	Next
	logit("NE1700")
	logit("EN1701")
EndFunc

Func checkplayer($players, $seated = "")
	If GUICtrlRead($radhoppercash) == $gui_checked Then
		If GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" Then
			If GUICtrlRead($chkspeedpoker) == $gui_checked Then
				Return True
			EndIf
		EndIf
		Local $minplayers = GUICtrlRead($cmbminplayrs)
		If $seated == "" Then
			$seated = $players
			$players = StringStripWS(StringMid($players, StringInStr($players, "/") + 1), 3)
			$seated = StringStripWS(StringLeft($seated, StringInStr($seated, "/") - 1), 3)
		Else
			$players = StringStripWS(StringMid($players, StringInStr($players, "/") + 1), 3)
		EndIf
		If $seated == "Full" Then
			$seated = $players
		EndIf
		fconsolewrite("CP: read:" & $seated & " / " & $players & " - will join if " & $seated & " is greater than or equal to " & $minplayers)
		logit("IF2097")
		logit("IF2098")
		If Number($seated) >= Number($minplayers) Then
			Return True
		Else
			fconsolewrite("CP: Did not join because " & $seated & " is not greater or equal to " & $minplayers)
			Return False
		EndIf
		logit("EN2099")
	Else
		logit("FU1763")
		ConsoleWrite("CP Begin" & @LF)
		Local $seated1 = $players
		If GUICtrlRead($cmbsite) == "BetOnline" Then
			$players = StringStripWS(StringMid($players, StringInStr($players, "of") + 2), 3)
			$seated1 = StringStripWS(StringLeft($seated1, StringInStr($seated1, "of") - 1), 3)
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			$players = StringStripWS(StringMid($players, StringInStr($players, "/") + 1), 3)
			$seated1 = StringStripWS(StringLeft($seated1, StringInStr($seated1, "/") - 1), 3)
		ElseIf GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "5Dimes" OR GUICtrlRead($cmbsite) == "TruePoker" Then
			$players = StringStripWS(StringMid($players, StringInStr($players, "/") + 1), 3)
			$seated1 = StringStripWS(StringLeft($seated1, StringInStr($seated1, "/") - 1), 3)
		Else
			$players = StringStripWS(StringMid($players, StringInStr($players, "/") + 1), 3)
			$seated1 = StringStripWS(StringLeft($seated1, StringInStr($seated1, "/") - 1), 3)
		EndIf
		If $seated1 == "" OR $players == "" Then
			ConsoleWrite("CP: Seated/Players scraping empty" & @LF)
			Return False
		EndIf
		If $seated1 == $players Then
			ConsoleWrite("CP: Full Table" & @LF)
			Return False
		EndIf
		Return True
	EndIf
EndFunc

Func checkfalseclosewindow()
	Local $winlist
	Local $winpos
	If WinExists("Member Message", "OK") Then
		$winlist = WinList("Member Message", "OK")
		For $x = 1 To $winlist[0][0]
			$winpos = WinGetPos($winlist[$x][1])
			If IsArray($winpos) Then
				If PixelGetColor($winpos[0] + 27, $winpos[1] + 95, $winlist[$x][1]) == 16777215 Then
					If $winpos[2] == 334 AND $winpos[3] == 218 Then
						fconsolewrite("False close window found...")
						WinActivate($winlist[$x][1])
						WinWaitActive($winlist[$x][1], "", 1)
						MouseClick("left", $winpos[0] + 235, $winpos[1] + 193, 1, 0)
						Return True
					EndIf
				EndIf
			EndIf
		Next
	EndIf
	Return False
EndFunc

Func closetable($hwin, $a = -1)
	Local $endtitle
	For $b = 0 To 21
		If NOT WinExists($htable[$b]) Then
			$htable[$b] = -10
			ConsoleWrite("CT: Table " & $b & " reset to -10" & @LF)
		EndIf
	Next
	If WinExists($hwin) AND $hwin <> 0 AND $hwin <> "" AND $hwin <> -10 Then
		Local $tablename
		$tablename = WinGetTitle($hwin)
		If GUICtrlRead($cmbsite) == "WillHill" Then
			If GUICtrlRead($radhoppercash) == $gui_checked Then
				$endtitle = StringStripWS(StringLeft($tablename, StringInStr($tablename, "-") - 2), 3)
				$endtitle = StringStripWS(StringMid($endtitle, StringInStr($endtitle, ":") + 2), 3)
				$endtitle = StringRegExpReplace($endtitle, "\s", "")
			ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
				$endtitle = StringMid($tablename, StringInStr($tablename, "-", 0, -1) + 2)
				If StringInStr($endtitle, "Ante") Then
					$endtitle = StringLeft($endtitle, StringInStr($endtitle, "Ante") - 2)
				EndIf
			Else
				$endtitle = $hwin
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
			If GUICtrlRead($radhoppercash) == $gui_checked Then
				$endtitle = StringMid($tablename, StringInStr($tablename, "(") + 1)
				$endtitle = StringReplace($endtitle, ")", "")
			ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
				$endtitle = StringMid($tablename, StringInStr($tablename, "(") + 1)
				$endtitle = StringReplace($endtitle, ")", "")
			Else
				$endtitle = $hwin
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
			If GUICtrlRead($radhoppercash) == $gui_checked Then
				$endtitle = StringLeft($tablename, StringInStr($tablename, "(") - 2)
				$endtitle = StringRegExpReplace($endtitle, "\s", "")
			ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
				$endtitle = StringLeft($tablename, StringInStr($tablename, " ") - 1)
				$endtitle = StringMid($endtitle, StringInStr($endtitle, "#") + 1)
			Else
				$endtitle = $hwin
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
			If GUICtrlRead($radhoppercash) == $gui_checked Then
				$endtitle = StringLeft($tablename, StringInStr($tablename, "-") - 2)
				$endtitle = StringRegExpReplace($endtitle, "\s", "")
			ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
				$endtitle = StringLeft($tablename, StringInStr($tablename, ")") - 1)
				$endtitle = StringMid($endtitle, StringInStr($endtitle, "(") + 1)
			Else
				$endtitle = $hwin
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
			If GUICtrlRead($radhoppercash) == $gui_checked Then
				Local $titletemp = StringSplit($tablename, " ")
				$endtitle = $titletemp[1]
				$endtitle = StringRegExpReplace($endtitle, "\s", "")
			ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
				$endtitle = StringMid($tablename, StringInStr($tablename, "#") + 1)
				$endtitle = StringLeft($endtitle, StringInStr($endtitle, " ") - 1)
			Else
				$endtitle = $hwin
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
			$endtitle = StringMid($tablename, StringInStr($tablename, "(") + 1)
			$endtitle = StringLeft($endtitle, StringInStr($endtitle, ")") - 1)
		ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
			If GUICtrlRead($radhoppercash) == $gui_checked Then
				$endtitle = $hwin
			ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
				$endtitle = $tablename
			Else
				$endtitle = $tablename
			EndIf
		EndIf
		Local $getchipstitle = "[REGEXPTITLE:\AREGISTER\z]"
		logit("IF1940")
		If WinExists($getchipstitle) Then
			WinClose($getchipstitle)
		EndIf
		logit("EN1941")
		logit("WH1942")
		Local $count1 = 0
		While WinExists($hwin) AND $count1 < 2
			fconsolewrite("CT: Close Table " & StringRegExpReplace($tablename, "As .*\z", "As [OpenHoldemStore.com]"))
			Sleep(20)
			If WinExists($hwin) Then
				WinClose($hwin)
				WinWaitClose($hwin, "", 1)
				If checkfalseclosewindow() Then
					Return
				EndIf
			EndIf
			If GUICtrlRead($cmbsite) == "WillHill" Then
				If GUICtrlRead($radhoppercash) == $gui_checked Then
					closeanyareyousurewindows()
				Else
					bnghandlelosttables()
					handlebngcongrats()
				EndIf
			EndIf
			If GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "Betcoin" Then
				If GUICtrlRead($radhoppercash) == $gui_checked Then
					closeanyareyousurewindows()
				Else
					acrhandlelosttables()
				EndIf
			EndIf
			If GUICtrlRead($cmbsite) == "888Poker" Then
				If GUICtrlRead($radhoppercash) == $gui_checked Then
					closeanyareyousurewindows()
				Else
					eeehandlelosttables()
				EndIf
			EndIf
			logit("EN1950")
			WinWaitClose($hwin, "", 1)
			If $a <> -1 AND $htable[$a] <> -10 Then
				ConsoleWrite("CT2: Table " & $a & " reset to -10" & @LF)
				$htable[$a] = -10
			EndIf
			$count1 += 1
		WEnd
		If NOT WinExists($hwin) Then
			fconsolewrite($tablename & " is closed")
			$tablesfinished += 1
		EndIf
		If NOT WinExists($hwin) Then
			fconsolewrite("CT: Subscript title: " & $endtitle)
			Local $arraysearch = _arraysearch($htable, $endtitle, 0, (UBound($htable) - 1), 0, 1)
			logit("IF519")
			Local $usbtext
			If GUICtrlRead($radhoppercash) == $gui_checked Then
				ConsoleWrite("Trying to delete from playing list..." & @LF)
				ConsoleWrite("$endTitle: *" & $endtitle & "*" & @LF)
				$usbtext = _guictrllistview_findintext($statuslist, $endtitle)
				ConsoleWrite("$usbText: *" & $usbtext & "*" & @LF)
				If $usbtext <> -1 Then
					_guictrllistview_deleteitem(GUICtrlGetHandle($statuslist), $usbtext)
				EndIf
			Else
				$usbtext = _guictrllistview_findintext($tourneystatuslist, $endtitle)
				If $usbtext <> -1 Then
					_guictrllistview_deleteitem($tourneystatuslist, $usbtext)
				EndIf
			EndIf
			If _arraysearch($htable, $endtitle, 0, (UBound($endtitle) - 1), 0, 1) <> -1 Then
				logit("NE521")
				fconsolewrite("CT: Clearing from array: " & $htable[$arraysearch])
				$htable[$arraysearch] = -10
				WinClose($hoh[$arraysearch])
				$hoh[$arraysearch] = -10
			EndIf
			If $a <> -1 Then
				ConsoleWrite("CT3: Table " & $a & " reset to -10" & @LF)
				$htable[$a] = -10
			EndIf
		EndIf
		If WinExists($hwin) Then
			fconsolewrite("Could not close " & WinGetTitle($hwin))
		EndIf
		logit("WE1951")
	EndIf
	logit("EN1952")
	Return NOT WinExists($hwin)
	logit("EN1953")
EndFunc

Func botwinlist($regexp)
	Local $winlist
	$winlist = WinList($regexp)
	Local $rv[1][2]
	Local $count
	$count = 0
	$rv[0][0] = $count
	For $a = 1 To $winlist[0][0]
		Local $hmenu = _guictrlmenu_getmenu($winlist[$a][1])
		If $hmenu <> 0 Then
			$count += 1
			ReDim $rv[$count + 2][2]
			$rv[$count][0] = $winlist[$a][0]
			$rv[$count][1] = $winlist[$a][1]
			$rv[0][0] = $count
		EndIf
	Next
	Return $rv
EndFunc

Func iswindowvisible($handle)
	If BitAND(WinGetState($handle), 2) == 2 Then
		Return True
	Else
		Return False
	EndIf
EndFunc

Func winwaitiswindowvisibleandexists($handle, $timer = 0)
	Local $temptimer
	Do
		Sleep(1000)
		$temptimer += 1
	Until (BitAND(WinGetState($handle), 2) AND WinExists($handle)) OR $temptimer >= $timer
EndFunc

Func winvisibleandexists($handle)
	logit("FU1993")
	Return winreallyexists($handle) AND iswindowvisible($handle)
	logit("EN1994")
EndFunc

Func winreallyexists($handle)
	logit("FU1995")
	Return WinExists($handle) AND $handle <> "" AND $handle <> -10 AND $handle <> 0
	logit("EN1996")
EndFunc

Func windowdump()
	logit("FU1997")
	Local $winlist = WinList()
	fconsolewrite("Window Dump:")
	logit("IF1998")
	If $winlist[0][0] > 0 Then
		logit("FO1999")
		For $x = 1 To $winlist[0][0]
			logit("IF2000")
			If NOT StringInStr($ignorewindows, "," & $winlist[$x][0] & ",") > 0 AND winvisibleandexists($winlist[$x][1]) Then
				$winpos = WinGetPos($winlist[$x][1])
				logit("IF2001")
				If IsArray($winpos) Then
					Local $tempstring = "> Title:[" & $winlist[$x][0] & "]" & " state:" & WinGetState($winlist[$x][1]) & " parent:[" & WinGetTitle(parentwindow($winlist[$x][1])) & "]" & " pos:" & $winpos[0] & "," & $winpos[1] & " dims:" & $winpos[2] & "x" & $winpos[3]
					fconsolewrite($tempstring)
				EndIf
				logit("EN2002")
			EndIf
			logit("EN2003")
		Next
		logit("NE2004")
	EndIf
	logit("EN2005")
	logit("EN2006")
EndFunc

Func parentwindow($wfp)
	logit("FU2007")
	Local $rv
	Do
		$rv = $wfp
		$wfp = _winapi_getparent($rv)
		Sleep(100)
	Until $wfp = 0
	Return $rv
	logit("EN2008")
EndFunc

Func parentwindowfrompoint($x, $y)
	logit("FU2009")
	Return parentwindow(windowfrompoint($x, $y))
	logit("EN2010")
EndFunc

Func getwininfo()
	Local $mousepos = MouseGetPos()
	Local $title = ""
	If IsArray($mousepos) Then
		Local $newhnd = windowfrompoint($mousepos[0], $mousepos[1])
		$winpos = WinGetPos($newhnd)
		$title = WinGetTitle($newhnd)
		fconsolewrite("Window Title: " & $title)
		fconsolewrite("Window Text: " & WinGetText($newhnd))
		fconsolewrite("Window Class List: " & WinGetClassList($newhnd))
		fconsolewrite("Window Size: " & $winpos[2] & ", " & $winpos[3])
		fconsolewrite("Window State: " & WinGetState($newhnd))
		_screencapture_capturewnd(@ScriptDir & "\WindowScreenShot.jpg", $newhnd)
	EndIf
EndFunc

Func windowfrompoint($x, $y)
	logit("FU2011")
	Local $user32
	$user32 = DllOpen("USER32.DLL")
	Local $result = DllCall($user32, "hwnd", "WindowFromPoint", "int", $x, "int", $y)
	DllClose($user32)
	Return $result[0]
	logit("EN2012")
EndFunc

Func tablemove($pointer)
	logit("FU2061")
	Local $x = IniRead($inifile, "settings", "$x" & ($pointer) & "Txt" & GUICtrlRead($cmbsite), 0)
	Local $y = IniRead($inifile, "settings", "$y" & ($pointer) & "Txt" & GUICtrlRead($cmbsite), 0)
	WinMove($htable[$pointer], "", $x, $y, Default, Default, 1)
	fconsolewrite("+Moved table to " & $x & "," & $y)
	logit("EN2062")
EndFunc

Func botmove($pointer)
	logit("FU2061")
	Local $x = IniRead($inifile, "settings", "$botx" & ($pointer) & "Txt", 0)
	Local $y = IniRead($inifile, "settings", "$boty" & ($pointer) & "Txt", 0)
	WinMove($hoh[$pointer], "", $x, $y, Default, Default, 1)
	fconsolewrite("+Moved bot to " & $x & "," & $y)
	logit("EN2062")
EndFunc

Func array2string($arr)
	logit("FU2105")
	Local $str = ""
	logit("FO2106")
	For $i = 1 To $arr[0]
		logit("IF2107")
		If $i = 1 Then
			$str = "'" & $arr[$i] & "'"
		Else
			$str = $str & "," & "'" & $arr[$i] & "'"
		EndIf
		logit("EN2108")
	Next
	logit("NE2109")
	Return $str
	logit("EN2110")
EndFunc

Func confimap()
	fconsolewrite("ConfimAP: Start")
	Local $htemp = WinGetHandle("[REGEXPTITLE:\AConfirm No Auto Play\z]")
	If $htemp <> "" Then
		Local $counttn = 0
		While WinExists("[REGEXPTITLE:\AConfirm No Auto Play\z]") AND $counttn < 20
			fconsolewrite("CAP: Handling 'Confirm No Auto Play' window")
			ControlFocus($htemp, "", "[CLASS:Button; INSTANCE:2]")
			ControlClick($htemp, "", "[CLASS:Button; INSTANCE:2]", "left", 1)
			$counttn += 1
			Sleep(20)
			If NOT WinExists("[REGEXPTITLE:\AConfirm No Auto Play\z]") Then ExitLoop
		WEnd
	EndIf
EndFunc

Func cancel1()
	Local $1hwnd = WinGetHandle($himage1)
	GUIDelete($1hwnd)
EndFunc

Func cancel2()
	Local $1hwnd = WinGetHandle($himage2)
	GUIDelete($1hwnd)
EndFunc

Func cancel3()
	Local $1hwnd = WinGetHandle($himage3)
	GUIDelete($1hwnd)
EndFunc

Func cancel4()
	Local $1hwnd = WinGetHandle($himage4)
	GUIDelete($1hwnd)
EndFunc

Func cancel5()
	Local $1hwnd = WinGetHandle($himage5)
	GUIDelete($1hwnd)
EndFunc

Func cancel6()
	Local $1hwnd = WinGetHandle($himage6)
	GUIDelete($1hwnd)
EndFunc

Func cancel7()
	Local $1hwnd = WinGetHandle($himage7)
	GUIDelete($1hwnd)
EndFunc

Func cancel8()
	Local $1hwnd = WinGetHandle($himage8)
	GUIDelete($1hwnd)
EndFunc

Func cancel9()
	Local $1hwnd = WinGetHandle($himage9)
	GUIDelete($1hwnd)
EndFunc

Func cancel10()
	Local $1hwnd = WinGetHandle($himage10)
	GUIDelete($1hwnd)
EndFunc

Func cancel11()
	Local $1hwnd = WinGetHandle($himage11)
	GUIDelete($1hwnd)
EndFunc

Func cancel12()
	Local $1hwnd = WinGetHandle($himage12)
	GUIDelete($1hwnd)
EndFunc

Func cancel13()
	Local $1hwnd = WinGetHandle($himage13)
	GUIDelete($1hwnd)
EndFunc

Func cancel14()
	Local $1hwnd = WinGetHandle($himage14)
	GUIDelete($1hwnd)
EndFunc

Func cancel15()
	Local $1hwnd = WinGetHandle($himage15)
	GUIDelete($1hwnd)
EndFunc

Func cancel16()
	Local $1hwnd = WinGetHandle($himage16)
	GUIDelete($1hwnd)
EndFunc

Func cancel17()
	Local $1hwnd = WinGetHandle($himage17)
	GUIDelete($1hwnd)
EndFunc

Func cancel18()
	Local $1hwnd = WinGetHandle($himage18)
	GUIDelete($1hwnd)
EndFunc

Func cancel19()
	Local $1hwnd = WinGetHandle($himage19)
	GUIDelete($1hwnd)
EndFunc

Func cancel20()
	Local $1hwnd = WinGetHandle($himage20)
	GUIDelete($1hwnd)
EndFunc

Func cancel21()
	Local $1hwnd = WinGetHandle($himage21)
	GUIDelete($1hwnd)
EndFunc

Func cancel22()
	Local $1hwnd = WinGetHandle($himage22)
	GUIDelete($1hwnd)
EndFunc

Func pos1()
	Local $btnsave1
	Local $btncancel
	$himage1 = GUICreate("Table #1", $simtableposx, $simtableposy, GUICtrlRead($x0txt), GUICtrlRead($y0txt), $ws_border)
	GUISetBkColor(0, $himage1)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave1 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 1", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave1 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 1", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave1 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 1", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave1, "SavePos1")
	GUICtrlSetOnEvent($btncancel, "Cancel1")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos1()
	Local $winpos1 = WinGetPos($himage1)
	Local $1hwnd = WinGetHandle($himage1)
	GUIDelete($1hwnd)
	GUICtrlSetData($x0txt, $winpos1[0])
	GUICtrlSetData($y0txt, $winpos1[1])
EndFunc

Func pos2()
	Local $btnsave2
	Local $btncancel
	$himage2 = GUICreate("Table #2", $simtableposx, $simtableposy, GUICtrlRead($x1txt), GUICtrlRead($y1txt), $ws_border)
	GUISetBkColor(0, $himage2)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave2 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 2", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave2 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 2", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave2 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 2", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave2, "SavePos2")
	GUICtrlSetOnEvent($btncancel, "Cancel2")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos2()
	Local $winpos2 = WinGetPos($himage2)
	Local $1hwnd = WinGetHandle($himage2)
	GUIDelete($1hwnd)
	GUICtrlSetData($x1txt, $winpos2[0])
	GUICtrlSetData($y1txt, $winpos2[1])
EndFunc

Func pos3()
	Local $btnsave3
	Local $btncancel
	$himage3 = GUICreate("Table #3", $simtableposx, $simtableposy, GUICtrlRead($x2txt), GUICtrlRead($y2txt), $ws_border)
	GUISetBkColor(0, $himage3)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave3 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 3", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave3 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 3", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave3 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 3", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave3, "SavePos3")
	GUICtrlSetOnEvent($btncancel, "Cancel3")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos3()
	Local $winpos3 = WinGetPos($himage3)
	Local $1hwnd = WinGetHandle($himage3)
	GUIDelete($1hwnd)
	GUICtrlSetData($x2txt, $winpos3[0])
	GUICtrlSetData($y2txt, $winpos3[1])
EndFunc

Func pos4()
	Local $btnsave4
	Local $btncancel
	$himage4 = GUICreate("Table #4", $simtableposx, $simtableposy, GUICtrlRead($x3txt), GUICtrlRead($y3txt), $ws_border)
	GUISetBkColor(0, $himage4)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave4 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 4", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave4 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 4", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave4 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 4", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave4, "SavePos4")
	GUICtrlSetOnEvent($btncancel, "Cancel4")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos4()
	Local $winpos4 = WinGetPos($himage4)
	Local $1hwnd = WinGetHandle($himage4)
	GUIDelete($1hwnd)
	GUICtrlSetData($x3txt, $winpos4[0])
	GUICtrlSetData($y3txt, $winpos4[1])
EndFunc

Func pos5()
	Local $btnsave5
	Local $btncancel
	$himage5 = GUICreate("Table #5", $simtableposx, $simtableposy, GUICtrlRead($x4txt), GUICtrlRead($y4txt), $ws_border)
	GUISetBkColor(0, $himage5)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave5 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 5", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave5 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 5", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave5 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 5", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave5, "SavePos5")
	GUICtrlSetOnEvent($btncancel, "Cancel5")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos5()
	Local $winpos5 = WinGetPos($himage5)
	Local $1hwnd = WinGetHandle($himage5)
	GUIDelete($1hwnd)
	GUICtrlSetData($x4txt, $winpos5[0])
	GUICtrlSetData($y4txt, $winpos5[1])
EndFunc

Func pos6()
	Local $btnsave6
	Local $btncancel
	$himage6 = GUICreate("Table #6", $simtableposx, $simtableposy, GUICtrlRead($x5txt), GUICtrlRead($y5txt), $ws_border)
	GUISetBkColor(0, $himage6)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave6 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 6", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave6 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 6", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave6 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 6", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave6, "SavePos6")
	GUICtrlSetOnEvent($btncancel, "Cancel6")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos6()
	Local $winpos6 = WinGetPos($himage6)
	Local $1hwnd = WinGetHandle($himage6)
	GUIDelete($1hwnd)
	GUICtrlSetData($x5txt, $winpos6[0])
	GUICtrlSetData($y5txt, $winpos6[1])
EndFunc

Func pos7()
	Local $btnsave7
	Local $btncancel
	$himage7 = GUICreate("Table #7", $simtableposx, $simtableposy, GUICtrlRead($x6txt), GUICtrlRead($y6txt), $ws_border)
	GUISetBkColor(0, $himage7)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave7 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 7", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave7 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 7", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave7 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 7", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave7, "SavePos7")
	GUICtrlSetOnEvent($btncancel, "Cancel7")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos7()
	Local $winpos7 = WinGetPos($himage7)
	Local $1hwnd = WinGetHandle($himage7)
	GUIDelete($1hwnd)
	GUICtrlSetData($x6txt, $winpos7[0])
	GUICtrlSetData($y6txt, $winpos7[1])
EndFunc

Func pos8()
	Local $btnsave8
	Local $btncancel
	$himage8 = GUICreate("Table #8", $simtableposx, $simtableposy, GUICtrlRead($x7txt), GUICtrlRead($y7txt), $ws_border)
	GUISetBkColor(0, $himage8)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave8 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 8", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave8 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 8", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave8 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 8", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave8, "SavePos8")
	GUICtrlSetOnEvent($btncancel, "Cancel8")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos8()
	Local $winpos8 = WinGetPos($himage8)
	Local $1hwnd = WinGetHandle($himage8)
	GUIDelete($1hwnd)
	GUICtrlSetData($x7txt, $winpos8[0])
	GUICtrlSetData($y7txt, $winpos8[1])
EndFunc

Func pos9()
	Local $btnsave9
	Local $btncancel
	$himage9 = GUICreate("Table #9", $simtableposx, $simtableposy, GUICtrlRead($x8txt), GUICtrlRead($y8txt), $ws_border)
	GUISetBkColor(0, $himage9)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave9 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 9", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave9 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 9", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave9 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 9", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave9, "SavePos9")
	GUICtrlSetOnEvent($btncancel, "Cancel9")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos9()
	Local $winpos9 = WinGetPos($himage9)
	Local $1hwnd = WinGetHandle($himage9)
	GUIDelete($1hwnd)
	GUICtrlSetData($x8txt, $winpos9[0])
	GUICtrlSetData($y8txt, $winpos9[1])
EndFunc

Func pos10()
	Local $btnsave10
	Local $btncancel
	$himage10 = GUICreate("Table #10", $simtableposx, $simtableposy, GUICtrlRead($x9txt), GUICtrlRead($y9txt), $ws_border)
	GUISetBkColor(0, $himage10)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave10 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 10", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave10 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 10", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave10 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 10", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave10, "SavePos10")
	GUICtrlSetOnEvent($btncancel, "Cancel10")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos10()
	Local $winpos10 = WinGetPos($himage10)
	Local $1hwnd = WinGetHandle($himage10)
	GUIDelete($1hwnd)
	GUICtrlSetData($x9txt, $winpos10[0])
	GUICtrlSetData($y9txt, $winpos10[1])
EndFunc

Func pos11()
	Local $btnsave11
	Local $btncancel
	$himage11 = GUICreate("Table #11", $simtableposx, $simtableposy, GUICtrlRead($x10txt), GUICtrlRead($y10txt), $ws_border)
	GUISetBkColor(0, $himage11)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave11 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 11", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave11 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 11", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave11 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 11", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave11, "SavePos11")
	GUICtrlSetOnEvent($btncancel, "Cancel11")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos11()
	Local $winpos11 = WinGetPos($himage11)
	Local $1hwnd = WinGetHandle($himage11)
	GUIDelete($1hwnd)
	GUICtrlSetData($x10txt, $winpos11[0])
	GUICtrlSetData($y10txt, $winpos11[1])
EndFunc

Func pos12()
	Local $btnsave12
	Local $btncancel
	$himage12 = GUICreate("Table #12", $simtableposx, $simtableposy, GUICtrlRead($x11txt), GUICtrlRead($y11txt), $ws_border)
	GUISetBkColor(0, $himage12)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave12 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 12", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave12 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 12", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave12 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 12", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave12, "SavePos12")
	GUICtrlSetOnEvent($btncancel, "Cancel12")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos12()
	Local $winpos12 = WinGetPos($himage12)
	Local $1hwnd = WinGetHandle($himage12)
	GUIDelete($1hwnd)
	GUICtrlSetData($x11txt, $winpos12[0])
	GUICtrlSetData($y11txt, $winpos12[1])
EndFunc

Func pos13()
	Local $btnsave13
	Local $btncancel
	$himage13 = GUICreate("Table #13", $simtableposx, $simtableposy, GUICtrlRead($x12txt), GUICtrlRead($y12txt), $ws_border)
	GUISetBkColor(0, $himage13)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave13 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 13", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave13 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 13", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave13 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 13", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave13, "SavePos13")
	GUICtrlSetOnEvent($btncancel, "Cancel13")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos13()
	Local $winpos13 = WinGetPos($himage13)
	Local $1hwnd = WinGetHandle($himage13)
	GUIDelete($1hwnd)
	GUICtrlSetData($x12txt, $winpos13[0])
	GUICtrlSetData($y12txt, $winpos13[1])
EndFunc

Func pos14()
	Local $btnsave14
	Local $btncancel
	$himage14 = GUICreate("Table #14", $simtableposx, $simtableposy, GUICtrlRead($x13txt), GUICtrlRead($y13txt), $ws_border)
	GUISetBkColor(0, $himage14)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave14 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 14", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave14 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 14", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave14 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 14", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave14, "SavePos14")
	GUICtrlSetOnEvent($btncancel, "Cancel14")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos14()
	Local $winpos14 = WinGetPos($himage14)
	Local $1hwnd = WinGetHandle($himage14)
	GUIDelete($1hwnd)
	GUICtrlSetData($x13txt, $winpos14[0])
	GUICtrlSetData($y13txt, $winpos14[1])
EndFunc

Func pos15()
	Local $btnsave15
	Local $btncancel
	$himage15 = GUICreate("Table #15", $simtableposx, $simtableposy, GUICtrlRead($x14txt), GUICtrlRead($y14txt), $ws_border)
	GUISetBkColor(0, $himage15)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave15 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 15", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave15 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 15", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave15 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 15", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave15, "SavePos15")
	GUICtrlSetOnEvent($btncancel, "Cancel14")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos15()
	Local $winpos15 = WinGetPos($himage15)
	Local $1hwnd = WinGetHandle($himage15)
	GUIDelete($1hwnd)
	GUICtrlSetData($x14txt, $winpos15[0])
	GUICtrlSetData($y14txt, $winpos15[1])
EndFunc

Func pos16()
	Local $btnsave16
	Local $btncancel
	$himage16 = GUICreate("Table #16", $simtableposx, $simtableposy, GUICtrlRead($x15txt), GUICtrlRead($y15txt), $ws_border)
	GUISetBkColor(0, $himage16)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave16 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 16", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave16 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 16", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave16 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 16", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave16, "SavePos16")
	GUICtrlSetOnEvent($btncancel, "Cancel16")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos16()
	Local $winpos16 = WinGetPos($himage16)
	Local $1hwnd = WinGetHandle($himage16)
	GUIDelete($1hwnd)
	GUICtrlSetData($x15txt, $winpos16[0])
	GUICtrlSetData($y15txt, $winpos16[1])
EndFunc

Func pos17()
	Local $btnsave17
	Local $btncancel
	$himage17 = GUICreate("Table #17", $simtableposx, $simtableposy, GUICtrlRead($x16txt), GUICtrlRead($y16txt), $ws_border)
	GUISetBkColor(0, $himage17)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave17 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 17", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave17 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 17", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave17 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 17", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave17, "SavePos17")
	GUICtrlSetOnEvent($btncancel, "Cancel17")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos17()
	Local $winpos17 = WinGetPos($himage17)
	Local $1hwnd = WinGetHandle($himage17)
	GUIDelete($1hwnd)
	GUICtrlSetData($x16txt, $winpos17[0])
	GUICtrlSetData($y16txt, $winpos17[1])
EndFunc

Func pos18()
	Local $btnsave18
	Local $btncancel
	$himage18 = GUICreate("Table #18", $simtableposx, $simtableposy, GUICtrlRead($x17txt), GUICtrlRead($y17txt), $ws_border)
	GUISetBkColor(0, $himage18)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave18 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 18", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave18 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 18", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave18 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 18", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave18, "SavePos18")
	GUICtrlSetOnEvent($btncancel, "Cancel18")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos18()
	Local $winpos18 = WinGetPos($himage18)
	Local $1hwnd = WinGetHandle($himage18)
	GUIDelete($1hwnd)
	GUICtrlSetData($x17txt, $winpos18[0])
	GUICtrlSetData($y17txt, $winpos18[1])
EndFunc

Func pos19()
	Local $btnsave19
	Local $btncancel
	$himage19 = GUICreate("Table #19", $simtableposx, $simtableposy, GUICtrlRead($x18txt), GUICtrlRead($y18txt), $ws_border)
	GUISetBkColor(0, $himage19)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave19 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 19", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave19 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 19", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave19 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 19", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave19, "SavePos19")
	GUICtrlSetOnEvent($btncancel, "Cancel19")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos19()
	Local $winpos19 = WinGetPos($himage19)
	Local $1hwnd = WinGetHandle($himage19)
	GUIDelete($1hwnd)
	GUICtrlSetData($x18txt, $winpos19[0])
	GUICtrlSetData($y18txt, $winpos19[1])
EndFunc

Func pos20()
	Local $btnsave20
	Local $btncancel
	$himage20 = GUICreate("Table #20", $simtableposx, $simtableposy, GUICtrlRead($x19txt), GUICtrlRead($y19txt), $ws_border)
	GUISetBkColor(0, $himage20)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave20 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 20", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave20 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 20", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave20 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 20", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave20, "SavePos20")
	GUICtrlSetOnEvent($btncancel, "Cancel20")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos20()
	Local $winpos20 = WinGetPos($himage20)
	Local $1hwnd = WinGetHandle($himage20)
	GUIDelete($1hwnd)
	GUICtrlSetData($x19txt, $winpos20[0])
	GUICtrlSetData($y19txt, $winpos20[1])
EndFunc

Func pos21()
	Local $btnsave21
	Local $btncancel
	$himage21 = GUICreate("Table #21", $simtableposx, $simtableposy, GUICtrlRead($x20txt), GUICtrlRead($y20txt), $ws_border)
	GUISetBkColor(0, $himage21)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave21 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 21", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave21 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 21", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave21 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 21", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave21, "SavePos21")
	GUICtrlSetOnEvent($btncancel, "Cancel21")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos21()
	Local $winpos21 = WinGetPos($himage21)
	Local $1hwnd = WinGetHandle($himage21)
	GUIDelete($1hwnd)
	GUICtrlSetData($x20txt, $winpos21[0])
	GUICtrlSetData($y20txt, $winpos21[1])
EndFunc

Func pos22()
	Local $btnsave22
	Local $btncancel
	$himage22 = GUICreate("Table #22", $simtableposx, $simtableposy, GUICtrlRead($x21txt), GUICtrlRead($y21txt), $ws_border)
	GUISetBkColor(0, $himage22)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
		GUICtrlCreateLabel("IPoker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
		GUICtrlCreateLabel("Ongame", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" Then
		GUICtrlCreateLabel("Party", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Unibet" Then
		GUICtrlCreateLabel("Unibet", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) = "FullTilt" Then
		GUICtrlCreateLabel("FullTilt Poker", 75, 50, 300, 40)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("ACR Poker", 280, 100, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" OR GUICtrlRead($cmbsite) == "Betfair" Then
		$btnsave22 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 22", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" OR GUICtrlRead($cmbsite) == "Bwin" OR GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Unibet" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "888Poker" OR GUICtrlRead($cmbsite) == "Walker" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$btnsave22 = GUICtrlCreateButton("Save Position", 60, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Cancel", 195, 175, 125, 30)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 22", 150, 125, 150, 40)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	Else
		$btnsave22 = GUICtrlCreateButton("Click To Save Position", 410, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		$btncancel = GUICtrlCreateButton("Click To Cancel", 170, 260, 200, 50)
		GUICtrlSetFont(-1, 11, 800)
		GUICtrlCreateLabel("Table 22", 350, 180, 300, 80)
		GUICtrlSetFont(-1, 26, 800)
		GUICtrlSetColor(-1, 16777215)
	EndIf
	GUICtrlSetOnEvent($btnsave22, "SavePos22")
	GUICtrlSetOnEvent($btncancel, "Cancel22")
	GUISetState(@SW_SHOW)
EndFunc

Func savepos22()
	Local $winpos22 = WinGetPos($himage22)
	Local $1hwnd = WinGetHandle($himage22)
	GUIDelete($1hwnd)
	GUICtrlSetData($x21txt, $winpos22[0])
	GUICtrlSetData($y21txt, $winpos22[1])
EndFunc

Func wm_notify($lparam)
	logit("FU2283")
	Local $tnmitemactivate
	Local $hwndfrom
	Local $index
	Local $code
	$tnmitemactivate = DllStructCreate($tagnmitemactivate, $lparam)
	$hwndfrom = DllStructGetData($tnmitemactivate, "hWndFrom")
	$index = DllStructGetData($tnmitemactivate, "Index")
	$code = DllStructGetData($tnmitemactivate, "Code")
	Switch $hwndfrom
		Case $hlisttoplaysng
			Switch $code
				Case $lvn_itemchanging
					$state2 = _guictrllistview_getitemchecked($hlisttoplaysng, $index)
				Case $lvn_itemchanged
					logit("IF2284")
					If $state2 <> _guictrllistview_getitemchecked($hlisttoplaysng, $index) Then
						ConsoleWrite("Item" & ($index + 1) & " - " & (NOT $state2) & @CR)
						listtoplaysng($index)
					EndIf
					logit("EN2285")
			EndSwitch
		Case $hlistschedule
			Switch $code
				Case $lvn_itemchanging
					$state = _guictrllistview_getitemchecked($hlistschedule, $index)
				Case $lvn_itemchanged
					logit("IF2286")
					If $state <> _guictrllistview_getitemchecked($hlistschedule, $index) Then
						ConsoleWrite("Item" & ($index + 1) & " - " & (NOT $state) & @CR)
						listschedule($index)
					EndIf
					logit("EN2287")
			EndSwitch
	EndSwitch
	Return $gui_rundefmsg
	logit("EN2288")
EndFunc

Func listschedule($ix)
	logit("FU2289")
	Local $selecteditem = _guictrllistview_getitemtextstring($listschedule, $ix)
	logit("IF2290")
	If StringLen($selecteditem) > 0 Then
		Local $sitem = StringSplit($selecteditem, "|")
		logit("IF2291")
		If $sitem[0] >= 4 Then
			Local $dd = _arraysearch($wdays, $sitem[2])
			Local $newvalue = IniRead($inifile, "schedule", $dd & $sitem[3], "60|0|10")
			logit("IF2292")
			If NOT StringInStr($newvalue, "|") Then $newvalue = $newvalue & "|0|" & GUICtrlRead($timeinput)
			logit("IF2293")
			If _guictrllistview_getitemchecked($listschedule, $ix) = 1 Then
				$newvalue = StringReplace($newvalue, "|0|", "|1|")
				IniWrite($inifile, "schedule", $dd & $sitem[3], $newvalue)
			Else
				$newvalue = StringReplace($newvalue, "|1|", "|0|")
				IniWrite($inifile, "schedule", $dd & $sitem[3], $newvalue)
			EndIf
			logit("EN2294")
		EndIf
		logit("EN2295")
	EndIf
	logit("EN2296")
	logit("EN2297")
EndFunc

Func handlebegad()
	logit("FU2258")
	Local $winlist = WinList("[REGEXPCLASS:\APTIODEVICE\z]")
	logit("IF2259")
	If IsArray($winlist) Then
		logit("FO2260")
		For $x = 1 To $winlist[0][0]
			$winpos = WinGetPos($winlist[$x][1])
			logit("IF2261")
			If IsArray($winpos) Then
				logit("IF2262")
				If $winpos[2] == 614 AND iswindowvisible($winlist[$x][1]) Then
					logit("IF2263")
					fconsolewrite("Found Beginner/Server Ad 614... closing now")
					WinClose($winlist[$x][1])
					WinWaitClose($winlist[$x][1], "", 1)
					logit("IF2264")
					If WinExists($winlist[$x][1]) Then
						WinActivate($winlist[$x][1])
						MouseClick("left", $winpos[0] + 564, $winpos[1] + 369, 1, 0)
					EndIf
					logit("EN2265")
					Sleep(400)
					logit("IF2266")
					If WinExists($winlist[$x][1]) Then
						WinActivate($winlist[$x][1])
						MouseClick("left", $winpos[0] + 567, $winpos[1] + 331, 1, 0)
					EndIf
					logit("EN2267")
					ConsoleWrite("HBA2" & @LF)
					ConsoleWrite("HBA3" & @LF)
					Return True
					logit("EN2268")
				ElseIf $winpos[2] == 509 AND iswindowvisible($winlist[$x][1]) Then
					logit("IF2269")
					fconsolewrite("Found Beginner/Server Ad 509... closing now")
					WinClose($winlist[$x][1])
					WinWaitClose($winlist[$x][1], "", 1)
					logit("IF2270")
					If WinExists($winlist[$x][1]) Then
						WinActivate($winlist[$x][1])
						MouseClick("left", $winpos[0] + 457, $winpos[1] + 375, 1, 0)
					EndIf
					logit("EN2271")
					Return True
					logit("EN2272")
				ElseIf $winpos[2] == 477 AND iswindowvisible($winlist[$x][1]) Then
					logit("IF2273")
					Sleep(500)
					logit("IF2274")
					fconsolewrite("Maintenance window found 477... closing")
					WinClose($winlist[$x][1])
					WinWaitClose($winlist[$x][1], "", 1)
					logit("IF2276")
					If WinExists($winlist[$x][1]) Then
						WinActivate($winlist[$x][1])
						ConsoleWrite("Window still exists..  Using alternate method" & @LF)
						MouseClick("left", $winpos[0] + 240, $winpos[1] + 447, 1, 0)
					EndIf
					logit("EN2277")
					Return True
					logit("EN2279")
					logit("EN2280")
				ElseIf $winpos[2] == 622 AND iswindowvisible($winlist[$x][1]) Then
					logit("IF2273")
					Sleep(500)
					logit("IF2274")
					fconsolewrite("Maintenance window found 622... closing")
					WinClose($winlist[$x][1])
					WinWaitClose($winlist[$x][1], "", 1)
					logit("IF2276")
					If WinExists($winlist[$x][1]) Then
						WinActivate($winlist[$x][1])
						ConsoleWrite("Window still exists..  Using alternate method" & @LF)
						MouseClick("left", $winpos[0] + 566, $winpos[1] + 345, 1, 0)
					EndIf
					logit("EN2277")
					Return True
					logit("EN2280")
				ElseIf $winpos[2] == 467 AND iswindowvisible($winlist[$x][1]) Then
					Sleep(500)
					fconsolewrite("Congrats bonus window found 467... closing")
					WinClose($winlist[$x][1])
					WinWaitClose($winlist[$x][1], "", 1)
					If WinExists($winlist[$x][1]) Then
						ConsoleWrite("Window still exists..  Using alternate method" & @LF)
						If WinExists($winlist[$x][1]) Then
							WinActivate($winlist[$x][1])
							MouseClick("left", $winpos[0] + 243, $winpos[1] + 446, 1, 0)
						EndIf
					EndIf
					Return True
				ElseIf $winpos[2] == 630 AND iswindowvisible($winlist[$x][1]) Then
					logit("IF2281")
					Sleep(500)
					fconsolewrite("Maintenance window found 630... closing")
					WinClose($winlist[$x][1])
					WinWaitClose($winlist[$x][1], "", 1)
					logit("IF2282")
					If WinExists($winlist[$x][1]) Then
						ConsoleWrite("Window still exists..  Using alternate method" & @LF)
						WinActivate($winlist[$x][1])
						MouseClick("left", $winpos[0] + 240, $winpos[1] + 447, 1, 0)
						WinWaitClose($winlist[$x][1], "", 1)
						logit("IF2283")
						If WinExists($winlist[$x][1]) Then
							WinActivate($winlist[$x][1])
							MouseClick("left", $winpos[0] + 581, $winpos[1] + 388, 1, 0)
						EndIf
						logit("EN2284")
					EndIf
					logit("EN2285")
					Return True
					logit("EN2286")
				EndIf
				logit("EN2293")
			EndIf
			logit("EN2294")
		Next
		logit("NE2295")
	EndIf
	logit("EN2296")
	logit("EN2297")
EndFunc

Func mousewinmove($title, $text, $x, $y, $width = Default, $height = Default, $speed = Default, $method = 0)
	logit("FU1040")
	WinMove($title, $text, $x, $y, $width, $height, $speed)
	logit("IF1041")
	If $method == 1 Then
		logit("IF1042")
		If IsArray($winpos) Then
			ConsoleWrite("MouseMove " & $title & "'" & $text & "'" & $x & "'" & $y & "'" & $width & "'" & $height & "'" & $speed & "'" & $method & "'" & $winpos[0] & "'" & $winpos[1] & @CRLF)
			MouseMove($x + 100, $y + 10, 0)
			MouseDown("left")
			MouseMove(100 + $x + 3, 10 + $y + 3, $speed)
			Sleep(100)
			MouseMove($x + 100, $y + 10, $speed)
			Sleep(250)
			MouseUp("left")
		EndIf
		logit("EN1043")
	EndIf
	logit("EN1044")
	logit("EN1045")
EndFunc

Func runtime()
	Local $winruntime = "Microsoft Visual C++ Runtime Library"
	If WinExists($winruntime) Then
		WinActivate($winruntime)
		Sleep(500)
		Local $runpos = WinGetPos($winruntime)
		If IsArray($runpos) Then
			If $runpos[2] = 75 AND $runpos[3] = 23 AND iswindowvisible($winruntime) Then
				ControlClick($winruntime, "", "[CLASS:Button; INSTANCE:1]", "left", 1)
				Sleep(1000)
				Return True
			EndIf
		EndIf
	EndIf
	Return False
EndFunc

Func jackpotwinhandle()
	Local $winlist = WinList()
	If IsArray($winlist) Then
		For $x = 1 To $winlist[0][0]
			$winpos = WinGetPos($winlist[$x][1])
			If IsArray($winpos) Then
				If $winpos[2] == 250 AND $winpos[3] == 176 AND iswindowvisible($winlist[$x][1]) Then
					fconsolewrite("Jackpot Window found... closing now.")
					WinClose($winlist[$x][1])
				EndIf
			EndIf
		Next
	EndIf
EndFunc

Func handleeeeconnfailedwin()
	Local $hnd
	If WinExists("Connection failed") Then
		$hnd = WinGetHandle("Connection failed")
		WinClose($hnd)
	EndIf
	If WinExists("Internet connection error!") Then
		$hnd = WinGetHandle("Internet connection error!")
		WinActivate($hnd)
		Local $winpos = WinGetPos($hnd)
		If IsArray($winpos) Then
			MouseClick("left", $winpos[0] + 168, $winpos[1] + 162, 1, 0)
			WinWaitClose($hnd, "", 3)
			Sleep(2000)
			handleeeeloginwin()
		EndIf
	EndIf
EndFunc

Func handleeeeloginwin()
	If WinExists("Login") Then
		Local $winlist = WinList("Login")
		If IsArray($winlist) Then
			For $x = 1 To $winlist[0][0]
				Local $winpos = WinGetPos($winlist[$x][1])
				If IsArray($winpos) Then
					If $winpos[2] == 456 AND $winpos[3] == 325 Then
						WinActivate($winlist[$x][1])
						MouseClick("left", $winpos[0] + 269, $winpos[1] + 296, 1, 0)
						WinWaitClose($winlist[$x][1], "", 3)
						ExitLoop
					EndIf
				EndIf
			Next
		EndIf
	EndIf
EndFunc

Func checklobbyopen()
	If GUICtrlRead($cmbsite) == "888Poker" Then
		If WinExists("poker") AND iswindowvisible("poker") Then
			Local $winlist = WinList("poker")
			If IsArray($winlist) Then
				For $x = 1 To $winlist[0][0]
					Local $winpos = WinGetPos($winlist[$x][1])
					If IsArray($winpos) Then
						If $winpos[2] == 366 OR $winpos[3] == 155 Then
							fconsolewrite("Poker Lobby crashed... attempting to restore now" & @LF)
							For $a = 0 To 21
								If $hoh[$a] <> -10 Then
									$hoh[$a] = -10
								EndIf
								If $hactive[$a] <> -10 Then
									$hactive[$a] = -10
								EndIf
							Next
							WinActivate($winlist[$x][1])
							WinWaitActive($winlist[$x][1])
							MouseClick("left", $winpos[0] + 294, $winpos[1] + 130, 1, 0)
							Sleep(5000)
							eeeautostartlobby()
							Return True
						EndIf
					EndIf
				Next
			EndIf
		ElseIf NOT WinExists($hlobby) Then
			For $a = 0 To 21
				If $hoh[$a] <> -10 Then
					$hoh[$a] = -10
				EndIf
				If $hactive[$a] <> -10 Then
					$hactive[$a] = -10
				EndIf
			Next
			eeeautostartlobby()
			Return True
		EndIf
	EndIf
	Return False
EndFunc

Func eeeautostartlobby()
	Local $cl
	If @OSArch == "X64" Then
		$cl = "C:\Program Files (x86)\PacificPoker\bin\888poker.exe"
	Else
		$cl = "C:\Program Files\PacificPoker\bin\888poker.exe"
	EndIf
	Local $exe = StringMid($cl, StringInStr($cl, "\", 0, -1) + 1)
	Local $dir = StringLeft($cl, StringInStr($cl, "\", 0, -1))
	ShellExecute($exe, "", $dir)
	WinWait("Login", "", 30)
	If WinExists("Login") AND iswindowvisible("Login") Then
		WinActivate("Login")
		WinWaitActive("Login")
		Local $winpos = WinGetPos("Login")
		If IsArray($winpos) Then
			MouseClick("left", $winpos[0] + 264, $winpos[1] + 297, 1, 0)
		EndIf
	EndIf
	Sleep(5000)
EndFunc

Func myerrorfunc()
	ConsoleWrite("err.number is: " & @TAB & $omyerror.number & @CRLF & "err.windescription:" & @TAB & $omyerror.windescription & @CRLF & "err.description is: " & @TAB & $omyerror.description & @CRLF & "err.source is: " & @TAB & $omyerror.source & @CRLF & "err.helpfile is: " & @TAB & $omyerror.helpfile & @CRLF & "err.helpcontext is: " & @TAB & $omyerror.helpcontext & @CRLF & "err.lastdllerror is: " & @TAB & $omyerror.lastdllerror & @CRLF & "err.scriptline is: " & @TAB & $omyerror.scriptline & @CRLF & "err.retcode is: " & @TAB & $omyerror.retcode & @CRLF & @CRLF)
	Local $hexnumber = Hex($omyerror.number, 8)
	$omyret[0] = $hexnumber
	$omyret[1] = StringStripWS($omyerror.description, 3)
	ConsoleWrite("### COM Error !  Number: " & $hexnumber & "   ScriptLine: " & $omyerror.scriptline & "   Description:" & $omyret[1] & @LF)
	SetError(1)
	Return
EndFunc

Func setdata()
	If GUICtrlRead($chkadvshark) == $gui_checked Then
		GUICtrlSetState($txtshark3betgr, $gui_enable)
		GUICtrlSetState($txtshark3betless, $gui_enable)
		GUICtrlSetState($txtshark4betgr, $gui_enable)
		GUICtrlSetState($txtshark4betless, $gui_enable)
	Else
		ControlSetText($txtshark3betgr, "", $ssdefinp, "")
		ControlSetText($txtshark3betless, "", $ssdefinp, "")
		ControlSetText($txtshark4betgr, "", $ssdefinp, "")
		ControlSetText($txtshark4betless, "", $ssdefinp, "")
		GUICtrlSetState($txtshark3betgr, $gui_disable)
		GUICtrlSetState($txtshark3betless, $gui_disable)
		GUICtrlSetState($txtshark4betgr, $gui_disable)
		GUICtrlSetState($txtshark4betless, $gui_disable)
	EndIf
	If GUICtrlRead($chkadvfish) == $gui_checked Then
		GUICtrlSetState($txtfish3betgr, $gui_enable)
		GUICtrlSetState($txtfish3betless, $gui_enable)
		GUICtrlSetState($txtfish4betgr, $gui_enable)
		GUICtrlSetState($txtfish4betless, $gui_enable)
	Else
		ControlSetText($txtfish3betgr, "", $ssdefinp, "")
		ControlSetText($txtfish3betless, "", $ssdefinp, "")
		ControlSetText($txtfish4betgr, "", $ssdefinp, "")
		ControlSetText($txtfish4betless, "", $ssdefinp, "")
		GUICtrlSetState($txtfish3betgr, $gui_disable)
		GUICtrlSetState($txtfish3betless, $gui_disable)
		GUICtrlSetState($txtfish4betgr, $gui_disable)
		GUICtrlSetState($txtfish4betless, $gui_disable)
	EndIf
	If GUICtrlRead($chkwaitinglist) == $gui_checked Then
		GUICtrlSetState($txtwlml, $gui_enable)
		GUICtrlSetState($txtmaxwaitinglist, $gui_enable)
	Else
		ControlSetText($maingui, "", $txtwlml, "")
		ControlSetText($maingui, "", $txtmaxwaitinglist, "")
		GUICtrlSetState($txtwlml, $gui_disable)
		GUICtrlSetState($txtmaxwaitinglist, $gui_disable)
	EndIf
	GUICtrlSetData($x0txt, "")
	GUICtrlSetData($x0txt, IniRead($inifile, "Settings", "$x0Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y0txt, "")
	GUICtrlSetData($y0txt, IniRead($inifile, "Settings", "$y0Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x1txt, "")
	GUICtrlSetData($x1txt, IniRead($inifile, "Settings", "$x1Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y1txt, "")
	GUICtrlSetData($y1txt, IniRead($inifile, "Settings", "$y1Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x2txt, "")
	GUICtrlSetData($x2txt, IniRead($inifile, "Settings", "$x2Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y2txt, "")
	GUICtrlSetData($y2txt, IniRead($inifile, "Settings", "$y2Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x3txt, "")
	GUICtrlSetData($x3txt, IniRead($inifile, "Settings", "$x3Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y3txt, "")
	GUICtrlSetData($y3txt, IniRead($inifile, "Settings", "$y3Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x4txt, "")
	GUICtrlSetData($x4txt, IniRead($inifile, "Settings", "$x4Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y4txt, "")
	GUICtrlSetData($y4txt, IniRead($inifile, "Settings", "$y4Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x5txt, "")
	GUICtrlSetData($x5txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y5txt, "")
	GUICtrlSetData($y5txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x6txt, "")
	GUICtrlSetData($x6txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y6txt, "")
	GUICtrlSetData($y6txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x7txt, "")
	GUICtrlSetData($x7txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y7txt, "")
	GUICtrlSetData($y7txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x8txt, "")
	GUICtrlSetData($x8txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y8txt, "")
	GUICtrlSetData($y8txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x9txt, "")
	GUICtrlSetData($x9txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y9txt, "")
	GUICtrlSetData($y9txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x10txt, "")
	GUICtrlSetData($x10txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y10txt, "")
	GUICtrlSetData($y10txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x11txt, "")
	GUICtrlSetData($x11txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y11txt, "")
	GUICtrlSetData($y11txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x12txt, "")
	GUICtrlSetData($x12txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y12txt, "")
	GUICtrlSetData($y12txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x13txt, "")
	GUICtrlSetData($x13txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y13txt, "")
	GUICtrlSetData($y13txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x14txt, "")
	GUICtrlSetData($x14txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y14txt, "")
	GUICtrlSetData($y14txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x15txt, "")
	GUICtrlSetData($x15txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y15txt, "")
	GUICtrlSetData($y15txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x16txt, "")
	GUICtrlSetData($x16txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y16txt, "")
	GUICtrlSetData($y16txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x17txt, "")
	GUICtrlSetData($x17txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y17txt, "")
	GUICtrlSetData($y17txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x18txt, "")
	GUICtrlSetData($x18txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y18txt, "")
	GUICtrlSetData($y18txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x19txt, "")
	GUICtrlSetData($x19txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y19txt, "")
	GUICtrlSetData($y19txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x20txt, "")
	GUICtrlSetData($x20txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y20txt, "")
	GUICtrlSetData($y20txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($x21txt, "")
	GUICtrlSetData($x21txt, IniRead($inifile, "Settings", "$x5Txt" & GUICtrlRead($cmbsite), "0"))
	GUICtrlSetData($y21txt, "")
	GUICtrlSetData($y21txt, IniRead($inifile, "Settings", "$y5Txt" & GUICtrlRead($cmbsite), "0"))
	If GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Netbet" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" Then
		GUICtrlSetState($chkdblrebuy, $gui_enable)
		GUICtrlSetData($cmbdate, "00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31")
		GUICtrlSetData($cmbmonth, "00|01|02|03|04|05|06|07|08|09|10|11|12")
		GUICtrlSetData($stakescmb, "")
		GUICtrlSetData($stakescmb, "$0.01/$0.02|$0.02/$0.04|$0.02/$0.05|$0.05/$0.10|$0.10/$0.20|$0.10/$0.25|$0.25/$0.50|$0.50/$1|$1/$2|$2/$4|$3/$6|$5/$10|$10/$20|$20/$40|$30/$60|$50/$100|$100/$200|$200/$400|$300/$600|1/2|2/4|5/10", "$0.01/$0.02")
		GUICtrlSetState($chkshallow, $gui_enable)
		GUICtrlSetState($chkpushorfold, $gui_disable)
		GUICtrlSetState($chkbeginner, $gui_enable)
		GUICtrlSetState($chkbeginnersng, $gui_enable)
		GUICtrlSetState($chkcam, $gui_disable)
		GUICtrlSetState($chkwaitinglist, $gui_enable)
		GUICtrlSetState($advgroup, $gui_enable)
		GUICtrlSetState($lblmax, $gui_enable)
		GUICtrlSetState($txtwlml, $gui_enable)
		GUICtrlSetState($labelmax, $gui_enable)
		GUICtrlSetState($txtmaxwaitinglist, $gui_enable)
		GUICtrlSetState($buyintxt, $gui_enable)
		GUICtrlSetState($buyinlbl, $gui_enable)
		GUICtrlSetState($buyinlbl2, $gui_enable)
		GUICtrlSetState($chkbodogautologin, $gui_disable)
		GUICtrlSetState($chkbodogautologin, $gui_unchecked)
		GUICtrlSetState($chkspeedpoker, $gui_enable)
		GUICtrlSetState($clientbodogtxt, $gui_disable)
		GUICtrlSetState($clientbodogbot, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_unchecked)
		GUICtrlSetState($clienteeetxt, $gui_disable)
		GUICtrlSetState($clienteeebot, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_enable)
		GUICtrlSetState($clientiptxt, $gui_enable)
		GUICtrlSetState($clientipbot, $gui_enable)
		GUICtrlSetState($chkautotopup, $gui_disable)
		GUICtrlSetState($txttopup, $gui_disable)
		GUICtrlSetState($lbltopmins, $gui_disable)
		GUICtrlSetData($cmblimit, "")
		GUICtrlSetData($cmblimit, "NL|PL|FL", "NL")
		GUICtrlSetData($cmbgametype, "")
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Knockout|Jackpot|Speed|Qualifier|Double Or Nothing|Turbo Double|SuperTurbo|SuperTurbo Double|Double Stack|Step 1|Step 2|Step 3|Step 4|Step 5|Step 6|On Tap", "Normal")
		GUICtrlSetData($numplyrscmbsng, "")
		GUICtrlSetData($numplyrscmbsng, "2|4|5|6|9|10|12|15|18|24|30|50|180", "9")
		GUICtrlSetData($numplyrscmbcash, "")
		GUICtrlSetData($numplyrscmbcash, "9|6|2", "9")
		GUICtrlSetData($buyincmb, "")
		GUICtrlSetData($buyincmb, "PTS25+0|PTS10+0|Freeroll|$0.10|$0.20|$0.50|$1|$1.10|$1.50|$2|$2.10|$2.15|$2.20|$3|$5|$5.25|$5.50|$10|$10.50|$10.75|$11|$20|$30|$40|$50|$60|$75|$100|$200|$300|$500|$0+$0", "$0.10")
		GUICtrlSetState($chkshortstack, $gui_enable)
		If GUICtrlRead($cmbsite) == "Bet365" Then GUICtrlSetState($chkdanish, $gui_enable)
		GUICtrlSetState($ssenable, $gui_enable)
	ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Blackchip" OR GUICtrlRead($cmbsite) == "Betcoin" Then
		GUICtrlSetState($chkdblrebuy, $gui_disable)
		GUICtrlSetData($cmbdate, "00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31")
		GUICtrlSetData($cmbmonth, "00|01|02|03|04|05|06|07|08|09|10|11|12")
		GUICtrlSetData($stakescmb, "")
		GUICtrlSetData($stakescmb, "$0.01/$0.02|$0.02/$0.04|$0.02/$0.05|$0.05/$0.10|$0.10/$0.20|$0.10/$0.25|$0.25/$0.50|$0.50/$1|$1/$2|$2/$4|$3/$6|$5/$10|$10/$20|$15/$30|$25/$50|$30/$60|$50/$100|$100/$200", "$0.01/$0.02")
		GUICtrlSetState($chkshallow, $gui_disable)
		GUICtrlSetState($chkpushorfold, $gui_disable)
		GUICtrlSetState($chkbeginner, $gui_disable)
		GUICtrlSetState($chkbeginnersng, $gui_disable)
		GUICtrlSetState($chkcam, $gui_disable)
		GUICtrlSetState($chkwaitinglist, $gui_enable)
		GUICtrlSetState($advgroup, $gui_enable)
		GUICtrlSetState($lblmax, $gui_enable)
		GUICtrlSetState($txtwlml, $gui_enable)
		GUICtrlSetState($labelmax, $gui_enable)
		GUICtrlSetState($txtmaxwaitinglist, $gui_enable)
		GUICtrlSetState($buyintxt, $gui_disable)
		GUICtrlSetState($buyinlbl, $gui_disable)
		GUICtrlSetState($buyinlbl2, $gui_disable)
		GUICtrlSetState($chkbodogautologin, $gui_disable)
		GUICtrlSetState($chkbodogautologin, $gui_unchecked)
		GUICtrlSetState($chkspeedpoker, $gui_disable)
		GUICtrlSetState($clientbodogtxt, $gui_disable)
		GUICtrlSetState($clientbodogbot, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_unchecked)
		GUICtrlSetState($clienteeetxt, $gui_disable)
		GUICtrlSetState($clienteeebot, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_unchecked)
		GUICtrlSetState($clientiptxt, $gui_disable)
		GUICtrlSetState($clientipbot, $gui_disable)
		GUICtrlSetState($chkautotopup, $gui_disable)
		GUICtrlSetState($txttopup, $gui_disable)
		GUICtrlSetState($lbltopmins, $gui_disable)
		GUICtrlSetData($cmblimit, "")
		GUICtrlSetData($cmblimit, "NL|PL|Fixed", "NL")
		GUICtrlSetData($cmbgametype, "")
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Hyper Turbo|Knockout|Final Table|Double or Nothing|Satellite|On Demand", "Normal")
		GUICtrlSetData($numplyrscmbsng, "")
		GUICtrlSetData($numplyrscmbsng, "6|9|10", "9")
		GUICtrlSetData($numplyrscmbcash, "")
		GUICtrlSetData($numplyrscmbcash, "9|6|2", "9")
		GUICtrlSetData($buyincmb, "")
		GUICtrlSetData($buyincmb, "$0+$0|$1.50|$1.50+$0.11|$1.50+$0.12|$1.50+$0.15|$2+$0.17|$2.20+$0.16|$2.40+$0.10|$3|$3+$0.20|$3+$0.25|$3+$0.30|$5|$5+$0.30|$5+$0.35|$5+$0.45|$5+$0.50|$5.50+$0.25|$6+$0.18|$10|$10+$0.55|$10+$0.50|$10+$0.70|$10+$0.90|$10+$1|$11+$0.75|$12+$0.25|$15|$15+$0.80|$15+$1.40|$20|$20+$1.40|$30|$30+$2.10|$50|$50+$3.50|$80+$5.60|$100|$100+$7", "$1.50")
		GUICtrlSetState($chkshortstack, $gui_disable)
		GUICtrlSetState($ssenable, $gui_enable)
	ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
		GUICtrlSetState($chkdblrebuy, $gui_disable)
		GUICtrlSetData($cmbdate, "00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31")
		GUICtrlSetData($cmbmonth, "00|01|02|03|04|05|06|07|08|09|10|11|12")
		GUICtrlSetData($stakescmb, "")
		GUICtrlSetData($stakescmb, "0.01/0.02|0.02/0.04|0.02/0.05|0.03/0.06|0.05/0.10|0.10/0.20|0.12/0.25|0.15/0.30|0.25/0.50|0.50/$1|$1/$2|$2/$4|$3/$6|$5/$10|$10/$20|$15/$30|$25/$50|$30/$60|$50/$100|$100/$200|$200/$400|$300/$600", "0.01/0.02")
		GUICtrlSetState($chkshallow, $gui_disable)
		GUICtrlSetState($chkpushorfold, $gui_enable)
		GUICtrlSetState($chkbeginner, $gui_disable)
		GUICtrlSetState($chkbeginnersng, $gui_disable)
		GUICtrlSetState($chkcam, $gui_enable)
		GUICtrlSetState($chkwaitinglist, $gui_enable)
		GUICtrlSetState($advgroup, $gui_enable)
		GUICtrlSetState($lblmax, $gui_enable)
		GUICtrlSetState($txtwlml, $gui_enable)
		GUICtrlSetState($labelmax, $gui_enable)
		GUICtrlSetState($txtmaxwaitinglist, $gui_enable)
		GUICtrlSetState($buyintxt, $gui_enable)
		GUICtrlSetState($buyinlbl, $gui_enable)
		GUICtrlSetState($buyinlbl2, $gui_enable)
		GUICtrlSetState($chkbodogautologin, $gui_disable)
		GUICtrlSetState($chkbodogautologin, $gui_unchecked)
		GUICtrlSetState($chkspeedpoker, $gui_enable)
		GUICtrlSetState($clientbodogtxt, $gui_disable)
		GUICtrlSetState($clientbodogbot, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_enable)
		GUICtrlSetState($clienteeetxt, $gui_enable)
		GUICtrlSetState($clienteeebot, $gui_enable)
		GUICtrlSetState($chkipautologin, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_unchecked)
		GUICtrlSetState($clientiptxt, $gui_disable)
		GUICtrlSetState($clientipbot, $gui_disable)
		GUICtrlSetState($chkautotopup, $gui_enable)
		GUICtrlSetState($txttopup, $gui_disable)
		GUICtrlSetState($lbltopmins, $gui_disable)
		GUICtrlSetData($cmblimit, "")
		GUICtrlSetData($cmblimit, "NL|PL|Fixed", "NL")
		GUICtrlSetData($cmbgametype, "")
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Super Turbo|DoN Super Turbo|Knockout|Nitro|Double or Nothing|Double or Nothing Turbo|Triple Up|Triple Up Turbo|All-In", "Normal")
		GUICtrlSetData($numplyrscmbsng, "")
		GUICtrlSetData($numplyrscmbsng, "2|3|6|8|9|10|18|20|36|40|60", "9")
		GUICtrlSetData($numplyrscmbcash, "")
		GUICtrlSetData($numplyrscmbcash, "9|6|2", "9")
		GUICtrlSetData($buyincmb, "")
		GUICtrlSetData($buyincmb, "Free|1¢|2¢|10¢|11¢|35¢|40¢|50¢|55¢|60¢|72¢|$1|$1.09|$1.10|$1.15|$1.20|$1.60|$2.10|$2.30|$2.50|$2.70|$2.75|$2.80|$2.90|$3|$3.20|$3.30|$3.50|$5.25|$5.30|$5.35|$5.40|$5.50|$6|$6.40|$8.80", "11¢")
		GUICtrlSetData($buyincmb, "$10.50|$10.60|$10.70|$10.80|$11|$12.50|$15|$16.50|$21|$21.25|$21.50|$22|$26|$31.50|$32|$33|$42|$52|$52.50|$53|$53.50|$55|$70|$75|$100|$103|$104|$105|$200|$208|$210|$300|$400|$500|$700|$1,000|$2,000|12", "11¢")
		GUICtrlSetState($chkshortstack, $gui_disable)
		GUICtrlSetState($ssenable, $gui_enable)
	ElseIf GUICtrlRead($cmbsite) == "BetOnline" Then
		GUICtrlSetData($cmbdate, "01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31")
		GUICtrlSetData($cmbmonth, "01|02|03|04|05|06|07|08|09|10|11|12")
		GUICtrlSetState($chkdblrebuy, $gui_disable)
		GUICtrlSetData($stakescmb, "")
		GUICtrlSetData($stakescmb, "$0.02/$0.04|$0.02/$0.05|$0.05/$0.10|$0.10/$0.20|$0.25/$0.50|$0.50/$1|$1/$2|$2/$3|$2/$4|$3/$6|$4/$8|$5/$10|$6/$12|$8/$16|$10/$20|$15/$30|$20/$40|$25/$50|$30/$60|$100/$200|$200/$400|$300/$600", "$0.02/$0.04")
		GUICtrlSetState($chkshallow, $gui_disable)
		GUICtrlSetState($chkpushorfold, $gui_disable)
		GUICtrlSetState($chkcam, $gui_disable)
		GUICtrlSetState($chkbeginner, $gui_disable)
		GUICtrlSetState($chkbeginnersng, $gui_disable)
		GUICtrlSetState($chkwaitinglist, $gui_enable)
		GUICtrlSetState($advgroup, $gui_enable)
		GUICtrlSetState($lblmax, $gui_enable)
		GUICtrlSetState($txtwlml, $gui_enable)
		GUICtrlSetState($labelmax, $gui_enable)
		GUICtrlSetState($txtmaxwaitinglist, $gui_enable)
		GUICtrlSetState($buyintxt, $gui_enable)
		GUICtrlSetState($buyinlbl, $gui_enable)
		GUICtrlSetState($buyinlbl2, $gui_enable)
		GUICtrlSetState($chkbodogautologin, $gui_disable)
		GUICtrlSetState($chkbodogautologin, $gui_unchecked)
		GUICtrlSetState($chkspeedpoker, $gui_disable)
		GUICtrlSetState($chkspeedpoker, $gui_unchecked)
		GUICtrlSetState($clientbodogtxt, $gui_disable)
		GUICtrlSetState($clientbodogbot, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_unchecked)
		GUICtrlSetState($clienteeetxt, $gui_disable)
		GUICtrlSetState($clienteeebot, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_unchecked)
		GUICtrlSetState($clientiptxt, $gui_disable)
		GUICtrlSetState($clientipbot, $gui_disable)
		GUICtrlSetState($chkautotopup, $gui_disable)
		GUICtrlSetState($txttopup, $gui_disable)
		GUICtrlSetState($lbltopmins, $gui_disable)
		GUICtrlSetData($cmblimit, "")
		GUICtrlSetData($cmblimit, "NL|PL|FL", "NL")
		GUICtrlSetData($cmbgametype, "")
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Super|Express|Turbo 1-Up|Step|All-in|Qualifier|No Fee|Satellite|1-Up", "Normal")
		GUICtrlSetData($numplyrscmbsng, "")
		GUICtrlSetData($numplyrscmbsng, "2|6|10", "10")
		GUICtrlSetData($buyincmb, "")
		GUICtrlSetData($buyincmb, "$0.05|$0.10+$0.01|$0.19+$0.01|$0.22|$0.25+$0.02|$0.44|$0.50+$0.05|$0.70|$0.88|$1+$0.01|$1+$0.05|$1+$0.10|$1.10|$1.11+$0.10|$1.50+$0.15|$1.65|$1.76|$2+$0.20|$2.20|$2.98+$0.29|$3+$0.15|$3+$0.30|$3|$3.30|$4+$0.40|$4.40|$5+$0.25|$5+$0.50|$5.50|$5.50+$0.55|$7+$0.35|$7+$0.70|$8.80", "$1+$0.10")
		GUICtrlSetData($buyincmb, "$10+$0.50|$10+$1|$12+$0.60|$12+$1.20|$15+$0.75|$15+$1.50|$16.50+$1.65|$20+$1|$20+$2|$25+$1.25|$25+$2|$33+$3", "$1+$0.10")
		GUICtrlSetState($chkshortstack, $gui_disable)
		GUICtrlSetState($ssenable, $gui_enable)
	ElseIf GUICtrlRead($cmbsite) == "Party" OR GUICtrlRead($cmbsite) == "Bwin" Then
		GUICtrlSetData($cmbdate, "01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31")
		GUICtrlSetData($cmbmonth, "01|02|03|04|05|06|07|08|09|10|11|12")
		GUICtrlSetState($chkdblrebuy, $gui_disable)
		GUICtrlSetData($stakescmb, "")
		GUICtrlSetData($stakescmb, "$0.01/$0.02")
		GUICtrlSetData($stakescmb, "$0.02/$0.04|$0.05/$0.10|$0.10/$0.25|$0.15/$0.30|$0.25/$0.50|$0.50/$1|$1/$2|$2/$4|$3/$6|$5/$10|$10/$20|$15/$30|$20/$40|$30/$60", "$0.01/$0.02")
		GUICtrlSetState($chkshallow, $gui_disable)
		GUICtrlSetState($chkpushorfold, $gui_disable)
		GUICtrlSetState($chkcam, $gui_disable)
		GUICtrlSetState($chkbeginner, $gui_disable)
		GUICtrlSetState($chkbeginnersng, $gui_disable)
		GUICtrlSetState($chkwaitinglist, $gui_enable)
		GUICtrlSetState($advgroup, $gui_enable)
		GUICtrlSetState($lblmax, $gui_enable)
		GUICtrlSetState($txtwlml, $gui_enable)
		GUICtrlSetState($labelmax, $gui_enable)
		GUICtrlSetState($txtmaxwaitinglist, $gui_enable)
		GUICtrlSetState($buyintxt, $gui_enable)
		GUICtrlSetState($buyinlbl, $gui_enable)
		GUICtrlSetState($buyinlbl2, $gui_enable)
		GUICtrlSetState($chkbodogautologin, $gui_disable)
		GUICtrlSetState($chkbodogautologin, $gui_unchecked)
		GUICtrlSetState($chkspeedpoker, $gui_disable)
		GUICtrlSetState($chkspeedpoker, $gui_unchecked)
		GUICtrlSetState($clientbodogtxt, $gui_disable)
		GUICtrlSetState($clientbodogbot, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_unchecked)
		GUICtrlSetState($clienteeetxt, $gui_disable)
		GUICtrlSetState($clienteeebot, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_unchecked)
		GUICtrlSetState($clientiptxt, $gui_disable)
		GUICtrlSetState($clientipbot, $gui_disable)
		GUICtrlSetState($chkautotopup, $gui_disable)
		GUICtrlSetState($txttopup, $gui_disable)
		GUICtrlSetState($lbltopmins, $gui_disable)
		GUICtrlSetData($cmblimit, "")
		GUICtrlSetData($cmblimit, "NL|PL|FL", "NL")
		GUICtrlSetData($cmbgametype, "")
		GUICtrlSetData($cmbgametype, "Standard|Turbo|Hyper Turbo|Coinflip|Satellite|Double or Nothing|Double or Nothing Turbo", "Standard")
		GUICtrlSetData($numplyrscmbsng, "")
		GUICtrlSetData($numplyrscmbsng, "2|6|9|10|18|36", "10")
		GUICtrlSetData($buyincmb, "")
		GUICtrlSetData($buyincmb, "$0.11|$0.22|$0.55|$1.10|$2.20|$5.50|$11|$22|$55|$109|$215|$530|$1,050", "$1.10")
		GUICtrlSetState($chkshortstack, $gui_disable)
		GUICtrlSetState($ssenable, $gui_enable)
	ElseIf GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlSetData($cmbdate, "01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31")
		GUICtrlSetData($cmbmonth, "01|02|03|04|05|06|07|08|09|10|11|12")
		GUICtrlSetState($chkdblrebuy, $gui_disable)
		GUICtrlSetData($stakescmb, "")
		GUICtrlSetData($stakescmb, "$0.02/$0.04")
		GUICtrlSetData($stakescmb, "$0.05/$0.10|$0.10/$0.25|$0.15/$0.30|$0.25/$0.50|$0.50/$1|$1/$2|$2/$4|$3/$6|$5/$10|$10/$20|$15/$30", "$0.02/$0.04")
		GUICtrlSetState($chkshallow, $gui_disable)
		GUICtrlSetState($chkpushorfold, $gui_disable)
		GUICtrlSetState($chkcam, $gui_disable)
		GUICtrlSetState($chkbeginner, $gui_disable)
		GUICtrlSetState($chkbeginnersng, $gui_disable)
		GUICtrlSetState($chkwaitinglist, $gui_enable)
		GUICtrlSetState($advgroup, $gui_enable)
		GUICtrlSetState($lblmax, $gui_enable)
		GUICtrlSetState($txtwlml, $gui_enable)
		GUICtrlSetState($labelmax, $gui_enable)
		GUICtrlSetState($txtmaxwaitinglist, $gui_enable)
		GUICtrlSetState($buyintxt, $gui_enable)
		GUICtrlSetState($buyinlbl, $gui_enable)
		GUICtrlSetState($buyinlbl2, $gui_enable)
		GUICtrlSetState($chkbodogautologin, $gui_disable)
		GUICtrlSetState($chkbodogautologin, $gui_unchecked)
		GUICtrlSetState($chkspeedpoker, $gui_disable)
		GUICtrlSetState($chkspeedpoker, $gui_unchecked)
		GUICtrlSetState($clientbodogtxt, $gui_disable)
		GUICtrlSetState($clientbodogbot, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_unchecked)
		GUICtrlSetState($clienteeetxt, $gui_disable)
		GUICtrlSetState($clienteeebot, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_unchecked)
		GUICtrlSetState($clientiptxt, $gui_disable)
		GUICtrlSetState($clientipbot, $gui_disable)
		GUICtrlSetState($chkautotopup, $gui_disable)
		GUICtrlSetState($txttopup, $gui_disable)
		GUICtrlSetState($lbltopmins, $gui_disable)
		GUICtrlSetData($cmblimit, "")
		GUICtrlSetData($cmblimit, "NLHE|PLHE|FLHE", "NLHE")
		GUICtrlSetData($cmbgametype, "")
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Super Turbo|Double Up|Turbo Double Up|Bounty|Allin or Fold", "Normal")
		GUICtrlSetData($numplyrscmbsng, "")
		GUICtrlSetData($numplyrscmbsng, "2|4|6|9|10|12|18|27|45|90|180", "10")
		GUICtrlSetData($buyincmb, "")
		GUICtrlSetData($buyincmb, "Restricted|$0.11|$0.60|$1.06|$1.08|$1.10|$1.20|$1.50|$1.89|$2.12|$2.16|$2.20|$3.15|$3.24|$3.30|$3.50|$5.30|$5.35|$5.40|$5.50|$5.60|$6.30", "$1.06")
		GUICtrlSetData($buyincmb, "$7|$10.19|$10.50|$10.80|$11|$11.20|$12.60|$15||$18.90|$20.90|$21.40|$21.60|$22|$25.20|$30|$33|$36.50|$52|$54|$55|$60|$73.30|$80|$82|$82.50|$103.70|$108|$119|$194|$250|$1000|$2000", "$1.06")
		GUICtrlSetState($chkshortstack, $gui_disable)
		GUICtrlSetState($ssenable, $gui_enable)
	Else
		GUICtrlSetState($chkdblrebuy, $gui_disable)
		GUICtrlSetData($cmbdate, "00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31")
		GUICtrlSetData($cmbmonth, "00|01|02|03|04|05|06|07|08|09|10|11|12")
		GUICtrlSetData($stakescmb, "")
		GUICtrlSetData($stakescmb, "$0.02/$0.04|$0.02/$0.05|$0.05/$0.10|$0.10/$0.20|$0.10/$0.25|$0.25/$0.50|$0.50/$1|$1/$2|$2/$3|$2/$4|$3/$6|$4/$8|$5/$10|$6/$12|$8/$16|$10/$20|$15/$30|$20/$40|$25/$50|$30/$60|$100/$200|$200/$400|$300/$600", "$0.02/$0.04")
		GUICtrlSetState($chkshallow, $gui_disable)
		GUICtrlSetState($chkpushorfold, $gui_disable)
		GUICtrlSetState($chkbeginner, $gui_disable)
		GUICtrlSetState($chkbeginnersng, $gui_disable)
		GUICtrlSetState($chkcam, $gui_disable)
		GUICtrlSetState($chkwaitinglist, $gui_disable)
		GUICtrlSetState($advgroup, $gui_disable)
		GUICtrlSetState($lblmax, $gui_disable)
		GUICtrlSetState($txtwlml, $gui_disable)
		GUICtrlSetState($labelmax, $gui_disable)
		GUICtrlSetState($txtmaxwaitinglist, $gui_disable)
		GUICtrlSetState($buyintxt, $gui_disable)
		GUICtrlSetState($buyinlbl, $gui_disable)
		GUICtrlSetState($buyinlbl2, $gui_disable)
		GUICtrlSetState($chkspeedpoker, $gui_enable)
		GUICtrlSetState($chkbodogautologin, $gui_disable)
		GUICtrlSetState($chkbodogautologin, $gui_unchecked)
		GUICtrlSetState($clientbodogtxt, $gui_disable)
		GUICtrlSetState($clientbodogbot, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_disable)
		GUICtrlSetState($chk888autologin, $gui_unchecked)
		GUICtrlSetState($clienteeetxt, $gui_disable)
		GUICtrlSetState($clienteeebot, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_disable)
		GUICtrlSetState($chkipautologin, $gui_unchecked)
		GUICtrlSetState($clientiptxt, $gui_disable)
		GUICtrlSetState($clientipbot, $gui_disable)
		GUICtrlSetState($chkautotopup, $gui_enable)
		GUICtrlSetState($txttopup, $gui_enable)
		GUICtrlSetState($lbltopmins, $gui_enable)
		GUICtrlSetData($cmblimit, "")
		GUICtrlSetData($cmblimit, "NL|PL|Fixed", "NL")
		GUICtrlSetData($cmbgametype, "")
		GUICtrlSetData($cmbgametype, "Normal|Turbo|Super Turbo|Hyper Turbo|Double-Up Turbo|Triple-Up Turbo|Double-Up|Triple-Up|Satellite|Beginner|Qualifier|Semifinal", "Normal")
		GUICtrlSetData($numplyrscmbsng, "")
		GUICtrlSetData($numplyrscmbsng, "2|6|9|12|18|27|45", "9")
		GUICtrlSetData($numplyrscmbcash, "")
		GUICtrlSetData($numplyrscmbcash, "9|6|2", "9")
		GUICtrlSetData($buyincmb, "")
		GUICtrlSetData($buyincmb, "Play500|Play750|Play2000|Play2500|Play5000|Ticket|$1+$0.05|$1+$0.10|$2+$0.20|$2.50+$0.25|$3+$0.30|$3.67+$0.33|$4+$0.40|$5+$0.25|$5+$0.50|$7+$0.70|$8+$0.80|$10+$0.50|$10+$1|$11+$1", "$1+$0.10")
		GUICtrlSetData($buyincmb, "$15+$1.50|$16+$1.50|$20+$1|$25+$1.25|$25+$2.50|$32+$3|$35+$3|$35+$3.50|$40+$4|$50+$2.50|$50+$5|$55+$5|$60+$6|$64+$6|$70+$6|$72+$3.60|$72+$7", "$1+$0.10")
		GUICtrlSetData($buyincmb, "$100+$5|$120+$10|$130+$5|$150+$13|$200+$15|150Pts|500Pts|1500Pts", "$1+$0.10")
		GUICtrlSetState($chkshortstack, $gui_disable)
		GUICtrlSetState($ssenable, $gui_disable)
	EndIf
	ControlCommand($maingui, "", $gamecmb, "SelectString", IniRead($inifile, "Settings", "$gameCmb", ""))
	ControlCommand($maingui, "", $typecmb, "SelectString", IniRead($inifile, "Settings", "$typeCmb", ""))
EndFunc

Func takeseatparty($hnd)
	For $x = 0 To 10
		Local $id = "[ID:200" & $x & "]"
		Local $isvisible = ControlCommand($hnd, "", $id, "IsVisible", "")
		If $isvisible == 1 Then
			ConsoleWrite("Seat: " & $x & " is open" & @LF)
			ConsoleWrite("Taking seat now..." & @LF)
			WinActivate($hnd)
			WinWaitActive($hnd, "", 2)
			ControlClick($hnd, "", $id, "left", 1)
			Sleep(1000)
			ExitLoop
		EndIf
	Next
	checkgetchipsparty()
	For $x = 0 To 10
		Local $text = ControlGetText($hnd, "", "[ID:9999]")
		If StringInStr($text, "to be dealt in") Then ExitLoop
		Sleep(1000)
	Next
	If $x < 10 Then
		ControlClick($hnd, "", "Auto-post blind", "left", 1)
	EndIf
EndFunc

Func testemail()
	Local $mousepos = MouseGetPos()
	Local $winhnd = windowfrompoint($mousepos[0], $mousepos[1])
	_screencapture_capturewnd(@ScriptDir & "\SampleScreenShot.jpg", $winhnd)
	Local $attachfiles = @ScriptDir & "\SampleScreenShot.jpg"
	Local $rc = _inetsmtpmailcom(GUICtrlRead($txtserver), "Me", GUICtrlRead($txtfromadd), GUICtrlRead($txttoadd), "Hydra Notification", "", $attachfiles, "", "", "Normal", GUICtrlRead($txtusername), GUICtrlRead($txtpass), GUICtrlRead($txtport), GUICtrlRead($chkssl))
	If @error Then
		MsgBox(0, "Error sending message", "Error code:" & @error & "  Description:" & $rc)
	Else
		MsgBox(0, "Sending message", "Please check your email within the next 10 minutes to make sure your received it")
	EndIf
EndFunc

Func emailnotification($pic, $notification)
	Local $attachfiles = $pic
	Local $rc = _inetsmtpmailcom(GUICtrlRead($txtserver), "Me", GUICtrlRead($txtfromadd), GUICtrlRead($txttoadd), "OpenHoldem Hydra " & $notification & " Notification", "", $attachfiles, "", "", "Normal", GUICtrlRead($txtusername), GUICtrlRead($txtpass), GUICtrlRead($txtport), GUICtrlRead($chkssl))
	If @error Then
		fconsolewrite("Error sending message, Error code: " & @error & "  Description:" & $rc)
	Else
		fconsolewrite("Sending Email Notification For New " & $notification & "... Please check your email within the next 10 minutes to make sure your received it")
	EndIf
EndFunc

Func betonlinehandletourneystartwin()
	If WinExists("", "Click OK to take your seat at the table") Then
		fconsolewrite("Tournament Started Window Found... closing now")
		Local $starthnd = WinGetHandle("", "Click OK to take your seat at the table")
		Local $startpos = WinGetPos($starthnd)
		If IsArray($startpos) Then
			MouseClick("left", $startpos[0] + 142, $startpos[1] + 101, 1, 0)
		EndIf
	EndIf
EndFunc

Func testsstats()
	ConsoleWrite("Testing " & GUICtrlRead($txtplayername) & " stats" & @LF)
	Local $vpip, $hands, $pfr, $3bet, $f3bet, $4bet, $cbet, $fcbet
	Local $server = GUICtrlRead($input_server)
	Local $database = GUICtrlRead($input_db)
	Local $authmode = 1
	Local $username = GUICtrlRead($input_uid)
	Local $password = GUICtrlRead($input_pwd)
	Local $driver = $input_dr
	ConsoleWrite("Server: " & $server & @LF)
	ConsoleWrite("$Database: " & $database & @LF)
	ConsoleWrite("$AuthMode: " & $authmode & @LF)
	ConsoleWrite("$Username: " & $username & @LF)
	ConsoleWrite("$Password: " & $password & @LF)
	ConsoleWrite("$Driver: " & $driver & @LF)
	$conn = _sqlconnect($server, $database, 1, $username, $password, $driver)
	$hands = _hands(GUICtrlRead($txtplayername))
	If $hands == "" OR $hands == -1 Then
		$hands = 0
	EndIf
	$vpip = _vpip(GUICtrlRead($txtplayername))
	If $vpip == "" OR $vpip == -1 Then
		$vpip = 0
	EndIf
	$pfr = _pfr(GUICtrlRead($txtplayername))
	If $pfr == "" OR $pfr == -1 Then
		$pfr = 0
	EndIf
	$3bet = _3bet(GUICtrlRead($txtplayername))
	If $3bet == "" OR $3bet == -1 Then
		$3bet = 0
	EndIf
	$f3bet = _foldto3bet(GUICtrlRead($txtplayername))
	If $f3bet == "" OR $f3bet == -1 Then
		$f3bet = 0
	EndIf
	$4bet = _4bet(GUICtrlRead($txtplayername))
	If $4bet == "" OR $4bet == -1 Then
		$4bet = 0
	EndIf
	$cbet = _cbet(GUICtrlRead($txtplayername))
	If $cbet == "" OR $cbet == -1 Then
		$cbet = 0
	EndIf
	$fcbet = _foldtocbet(GUICtrlRead($txtplayername))
	If $fcbet == "" OR $fcbet == -1 Then
		$fcbet = 0
	EndIf
	_sqldisconnect($conn)
	ControlSetText($maingui, "", $lblvpip1, "")
	ControlSetText($maingui, "", $lblvpip1, $vpip)
	ControlSetText($maingui, "", $lblhands1, "")
	ControlSetText($maingui, "", $lblhands1, $hands)
	ControlSetText($maingui, "", $lblpfr1, "")
	ControlSetText($maingui, "", $lblpfr1, $pfr)
	ControlSetText($maingui, "", $lbl3bet1, "")
	ControlSetText($maingui, "", $lbl3bet1, $3bet)
	ControlSetText($maingui, "", $lblf3bet1, "")
	ControlSetText($maingui, "", $lblf3bet1, $f3bet)
	ControlSetText($maingui, "", $lbl4bet1, "")
	ControlSetText($maingui, "", $lbl4bet1, $4bet)
	ControlSetText($maingui, "", $lblcbet1, "")
	ControlSetText($maingui, "", $lblcbet1, $cbet)
	ControlSetText($maingui, "", $lblfcbet1, "")
	ControlSetText($maingui, "", $lblfcbet1, $fcbet)
EndFunc

Func _vpip($s_user)
	Local $s_pos = ""
	ConsoleWrite("VPIP" & @LF)
	Local $hands = _hands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return 0
	EndIf
	$s_user = _getplayerid($s_user)
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		ConsoleWrite("Checking tourney stats" & @LF)
		If GUICtrlRead($cmbdb) == "PT3" Then
			ConsoleWrite("Checking PT3 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(case when flg_vpip = 't' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "' and flg_vpip = 't'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			ConsoleWrite("Checking PT4 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(case when flg_vpip = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "' and flg_vpip = 't'" & $s_pos)
		Else
			ConsoleWrite("Checking HM2 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(vpiphands) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_vpip = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "' and flg_vpip = 't'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_vpip = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "' and flg_vpip = 't'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(vpiphands) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	If IsObj($test) Then
		Local $data = _process($test)
		ConsoleWrite("VPIP: " & $data & @LF)
		If $data == "" Then
			Return 0
		EndIf
	Else
		Return -1
	EndIf
	If Round(($data / $hands) * 100, 2) <= 0 Then
		Return 0
	Else
		Return Round(($data / $hands) * 100, 2)
	EndIf
EndFunc

Func _pfr($s_user)
	Local $s_pos = ""
	ConsoleWrite("PFR" & @LF)
	Local $hands = _hands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return 0
	EndIf
	$s_user = _getplayerid($s_user)
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when cnt_p_raise > 0 then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when cnt_p_raise > 0 then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(pfrhands) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when cnt_p_raise > 0 then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when cnt_p_raise > 0 then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(pfrhands) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	If IsObj($test) Then
		Local $data = _process($test)
		ConsoleWrite("PFR: " & $data & @LF)
		If $data == "" Then
			Return 0
		EndIf
	Else
		Return -1
	EndIf
	If Round(($data / $hands) * 100, 2) <= 0 Then
		Return 0
	Else
		Return Round(($data / $hands) * 100, 2)
	EndIf
EndFunc

Func _cbet($s_user)
	Local $s_pos = ""
	ConsoleWrite("CBET" & @LF)
	Local $hands = _hands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return 0
	EndIf
	$s_user = _getplayerid($s_user)
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet_opp = 't' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet_opp = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(flopcontinuationbetpossible) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet_opp = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet_opp = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(flopcontinuationbetpossible) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	Local $data = _process($test)
	If $data == "" Then Return 0
	Local $opp = $data
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet = 't' then 1 else 0 end) from  public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(flopcontinuationbetmade) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(flopcontinuationbetmade) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	$data = _process($test)
	If $data == "" Then Return 0
	Local $4bet = $data
	If Round(($4bet / $opp) * 100, 2) <= 0 Then
		Return 0
	Else
		Return Round(($4bet / $opp) * 100, 2)
	EndIf
EndFunc

Func _4bet($s_user)
	Local $s_pos = ""
	ConsoleWrite("4BET" & @LF)
	Local $hands = _hands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return 0
	EndIf
	$s_user = _getplayerid($s_user)
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet_opp = 't' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet_opp = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(facedthreebetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet_opp = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet_opp = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(facedthreebetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	Local $data = _process($test)
	If $data == "" Then Return 0
	Local $opp = $data
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet = 't' then 1 else 0 end) from  public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(raisedthreebetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(raisedthreebetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	$data = _process($test)
	If $data == "" Then Return 0
	Local $4bet = $data
	If Round(($4bet / $opp) * 100, 2) <= 0 Then
		Return 0
	Else
		Return Round(($4bet / $opp) * 100, 2)
	EndIf
EndFunc

Func _3bet($s_user)
	Local $s_pos = ""
	ConsoleWrite("3BET" & @LF)
	Local $hands = _hands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return 0
	EndIf
	$s_user = _getplayerid($s_user)
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet_opp = 't' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet_opp = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(couldthreebet) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet_opp = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet_opp = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(couldthreebet) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	Local $data = _process($test)
	ConsoleWrite("3BetOpp: " & $data & @LF)
	If $data == "" Then Return 0
	Local $opp = $data
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet = 't' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(didthreebet) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(didthreebet) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	$data = _process($test)
	ConsoleWrite("3Bet: " & $data & @LF)
	If $data == "" Then Return 0
	Local $3bet = $data
	If Round(($3bet / $opp) * 100, 2) <= 0 Then
		Return 0
	Else
		Return Round(($3bet / $opp) * 100, 2)
	EndIf
EndFunc

Func _foldto3bet($s_user)
	Local $s_pos = ""
	ConsoleWrite("F3BET" & @LF)
	Local $hands = _hands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return 0
	EndIf
	$s_user = _getplayerid($s_user)
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet_def_opp = 't' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet_def_opp = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(facedthreebetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet_def_opp = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & -1)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_3bet_def_opp = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & -1)
		Else
			$test = _sqlquery($conn, "Select sum(facedthreebetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	Local $data = _process($test)
	If $data == "" Then Return 0
	Local $opp = $data
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "p" & "_3bet_action = 'F' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "p" & "_3bet_action = 'F' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(foldedtothreebetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "p" & "_3bet_action = 'F' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "p" & "_3bet_action = 'F' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(foldedtothreebetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	$data = _process($test)
	If $data == "" Then Return 0
	Local $3bet = $data
	If Round(($3bet / $opp) * 100, 2) <= 0 Then
		Return 0
	Else
		Return Round(($3bet / $opp) * 100, 2)
	EndIf
EndFunc

Func _foldto4bet($s_user)
	Local $s_pos = ""
	ConsoleWrite("F4BET" & @LF)
	Local $hands = _hands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return 0
	EndIf
	$s_user = _getplayerid($s_user)
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet_def_opp = 't' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet_def_opp = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(facedfourbetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet_def_opp = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "p" & "_4bet_def_opp = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(facedfourbetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	Local $data = _process($test)
	If $data == "" Then Return 0
	Local $opp = $data
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "p" & "_4bet_action = 'F' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "p" & "_4bet_action = 'F' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(foldedtofourbetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "p" & "_4bet_action = 'F' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "p" & "_4bet_action = 'F' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(foldedtofourbetpreflop) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	$data = _process($test)
	If $data == "" Then Return 0
	Local $4bet = $data
	If Round(($4bet / $opp) * 100, 2) <= 0 Then
		Return 0
	Else
		Return Round(($4bet / $opp) * 100, 2)
	EndIf
EndFunc

Func _foldtocbet($s_user)
	Local $s_pos = ""
	ConsoleWrite("FCBET" & @LF)
	Local $hands = _hands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return 0
	EndIf
	$s_user = _getplayerid($s_user)
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet_def_opp = 't' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet_def_opp = 't' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(facingflopcontinuationbet) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet_def_opp = 't' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when flg_" & "f" & "_cbet_def_opp = 't' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(facingflopcontinuationbet) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	Local $data = _process($test)
	If $data == "" Then Return 0
	Local $opp = $data
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "f" & "_cbet_action = 'F' then 1 else 0 end) from public.tourney_holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "f" & "_cbet_action = 'F' then 1 else 0 end) from public.tourney_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(foldedtoflopcontinuationbet) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	Else
		If GUICtrlRead($cmbdb) == "PT3" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "f" & "_cbet_action = 'F' then 1 else 0 end) from public.holdem_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			$test = _sqlquery($conn, "Select sum(case when enum_" & "f" & "_cbet_action = 'F' then 1 else 0 end) from public.cash_hand_player_statistics where id_player = '" & $s_user & "'" & $s_pos)
		Else
			$test = _sqlquery($conn, "Select sum(foldedtoflopcontinuationbet) from public.compiledplayerresults where player_id = '" & $s_user & "'" & $s_pos)
		EndIf
	EndIf
	$data = _process($test)
	If $data == "" Then Return 0
	Local $cbet = $data
	If Round(($cbet / $opp) * 100, 2) <= 0 Then
		Return 0
	Else
		Return Round(($cbet / $opp) * 100, 2)
	EndIf
EndFunc

Func _hands($s_user)
	ConsoleWrite("Checking # of hands for player " & $s_user & @LF)
	$s_user = _getplayerid($s_user)
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		ConsoleWrite("Checking tourney stats" & @LF)
		If GUICtrlRead($cmbdb) == "PT3" Then
			ConsoleWrite("Checking PT3 stats Hands" & @LF)
			$test = _sqlquery($conn, "Select sum(cnt_hands) from public.tourney_holdem_cache where id_player = '" & $s_user & "'")
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			ConsoleWrite("Checking PT4 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(cnt_hands) from public.tourney_cache where id_player = '" & $s_user & "'")
		Else
			ConsoleWrite("Checking HM2 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(totalhands) from public.compiledplayerresults where player_id = '" & $s_user & "'")
		EndIf
	Else
		ConsoleWrite("Checking cash stats" & @LF)
		If GUICtrlRead($cmbdb) == "PT3" Then
			ConsoleWrite("Checking PT3 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(cnt_hands) from public.holdem_cache where id_player = '" & $s_user & "'")
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			ConsoleWrite("Checking PT4 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(cnt_hands) from public.cash_cache where id_player = '" & $s_user & "'")
		Else
			ConsoleWrite("Checking HM2 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(totalhands) from public.compiledplayerresults where player_id = '" & $s_user & "'")
		EndIf
	EndIf
	If IsObj($test) Then
		Local $data = _process($test)
		ConsoleWrite("HANDS: " & $data & @LF)
		If $data == "" Then
			Return -1
		Else
			Return $data
		EndIf
	Else
		Return -1
	EndIf
EndFunc

Func _newhands($s_user)
	ConsoleWrite("Checking # of hands for player " & $s_user & @LF)
	$s_user = _getplayerid($s_user)
	If $s_user == "" Then
		Return -1
	Else
		ConsoleWrite("S_USER: *" & $s_user & "*" & @LF)
	EndIf
	If GUICtrlRead($radhoppersng) == $gui_checked OR GUICtrlRead($radhoppermtt) == $gui_checked Then
		ConsoleWrite("Checking tourney stats" & @LF)
		If GUICtrlRead($cmbdb) == "PT3" Then
			ConsoleWrite("Checking PT3 stats Hands" & @LF)
			$test = _sqlquery($conn, "Select sum(cnt_hands) from public.tourney_holdem_cache where id_player = '" & $s_user & "'")
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			ConsoleWrite("Checking PT4 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(cnt_hands) from public.tourney_cache where id_player = '" & $s_user & "'")
		Else
			ConsoleWrite("Checking HM2 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(totalhands) from public.compiledplayerresults where player_id = '" & $s_user & "'")
		EndIf
	Else
		ConsoleWrite("Checking cash stats" & @LF)
		If GUICtrlRead($cmbdb) == "PT3" Then
			ConsoleWrite("Checking PT3 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(cnt_hands) from public.holdem_cache where id_player = '" & $s_user & "'")
		ElseIf GUICtrlRead($cmbdb) == "PT4" Then
			ConsoleWrite("Checking PT4 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(cnt_hands) from public.cash_cache where id_player = '" & $s_user & "'")
		Else
			ConsoleWrite("Checking HM2 stats" & @LF)
			$test = _sqlquery($conn, "Select sum(totalhands) from public.compiledplayerresults where player_id = '" & $s_user & "'")
		EndIf
	EndIf
	If IsObj($test) Then
		Local $data = _process($test)
		ConsoleWrite("Hands: " & $data & @LF)
		If $data == "" Then
			Return -1
		Else
			Return $data
		EndIf
	Else
		Return -1
	EndIf
EndFunc

Func _getplayerid($s_user)
	ConsoleWrite("Checking Player Id for player " & $s_user & @LF)
	If GUICtrlRead($cmbdb) == "PT3" OR GUICtrlRead($cmbdb) == "PT4" Then
		ConsoleWrite("Checking PT3/PT4 stats" & @LF)
		$test = _sqlquery($conn, "Select id_player from public.player where player_name = '" & $s_user & "'")
	Else
		ConsoleWrite("Checking HM2 stats" & @LF)
		$test = _sqlquery($conn, "Select player_id from public.players where playername = '" & $s_user & "'")
	EndIf
	If IsObj($test) Then
		Local $data = _process($test)
		ConsoleWrite("PlayerID: " & $data & @LF)
		If $data == "" Then
			Return -1
		Else
			Return $data
		EndIf
	Else
		Return -1
	EndIf
EndFunc

Func _process($s_process)
	Local $data = ""
	If $s_process.eof Then
		$data = "No Data"
	Else
		Do
			For $i = 0 To $s_process.fields.count - 1
				$data = $data & $s_process.fields($i).value & @LF
			Next
			$test.movenext
			Sleep(20)
		Until $test.eof
	EndIf
	If $data == "No Data" Then
		Return ""
	Else
		Return $data
	EndIf
EndFunc

Func _sqlquery($oconn, $squery)
	If IsObj($oconn) Then Return $oconn.execute($squery)
	Return SetError(1, 0, 0)
EndFunc

Func _sqldisconnect($oconn)
	If NOT IsObj($oconn) Then Return SetError(1, 0, 0)
	$oconn.close
	Return 1
EndFunc

Func _fishtest($s_user)
	ConsoleWrite("Test Sharks" & @LF)
	If GUICtrlRead($txtfishvpipgr) == "" Then ControlSetText($maingui, "", $txtfishvpipgr, "0")
	If GUICtrlRead($txtfishvpipless) == "" Then ControlSetText($maingui, "", $txtfishvpipless, "0")
	If GUICtrlRead($txtfishpfrgr) == "" Then ControlSetText($maingui, "", $txtfishpfrgr, "0")
	If GUICtrlRead($txtfishpfrless) == "" Then ControlSetText($maingui, "", $txtfishpfrless, "0")
	If GUICtrlRead($chkadvfish) == $gui_checked Then
		If GUICtrlRead($txtfish3betgr) == "" Then ControlSetText($maingui, "", $txtfish3betgr, "0")
		If GUICtrlRead($txtfish3betless) == "" Then ControlSetText($maingui, "", $txtfish3betless, "0")
		If GUICtrlRead($txtfish4betgr) == "" Then ControlSetText($maingui, "", $txtfish4betgr, "0")
		If GUICtrlRead($txtfish4betless) == "" Then ControlSetText($maingui, "", $txtfish4betless, "0")
	EndIf
	Local $vpip
	Local $pfr
	Local $3bet
	Local $4bet
	Local $server = GUICtrlRead($input_server)
	Local $database = GUICtrlRead($input_db)
	Local $authmode = 1
	Local $username = GUICtrlRead($input_uid)
	Local $password = GUICtrlRead($input_pwd)
	Local $driver = $input_dr
	ConsoleWrite("Server: " & $server & @LF)
	ConsoleWrite("$Database: " & $database & @LF)
	ConsoleWrite("$AuthMode: " & $authmode & @LF)
	ConsoleWrite("$Username: " & $username & @LF)
	ConsoleWrite("$Password: " & $password & @LF)
	ConsoleWrite("$Driver: " & $driver & @LF)
	Local $conn = _sqlconnect($server, $database, 1, $username, $password, $driver)
	Local $hands = _newhands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return False
	Else
		ConsoleWrite("FISHTEST: HANDS: *" & $hands & "*" & @LF)
	EndIf
	If GUICtrlRead($txtfishhands1) == "" Then ControlSetText($maingui, "", $txtfishhands1, "0")
	If Number($hands, 3) < Number(GUICtrlRead($txtfishhands1), 3) Then Return False
	$vpip = _vpip(GUICtrlRead($s_user))
	ConsoleWrite("VPIP: " & $vpip & @LF)
	If $vpip == "" OR $vpip == -1 Then
		$vpip = 0
		ConsoleWrite("FISHTEST1: VPIP: *" & $vpip & "*" & @LF)
	Else
		ConsoleWrite("FISHTEST2: VPIP: *" & $vpip & "*" & @LF)
	EndIf
	If Number($vpip, 3) < Number(GUICtrlRead($txtfishvpipgr), 3) OR Number($vpip, 3) > Number(GUICtrlRead($txtfishvpipless), 3) Then
		Return False
	EndIf
	$pfr = _pfr(GUICtrlRead($s_user))
	If $pfr == "" OR $pfr == -1 Then
		$pfr = 0
		ConsoleWrite("FISHTEST1: PFR: *" & $pfr & "*" & @LF)
	Else
		ConsoleWrite("FISHTEST2: PFR: *" & $pfr & "*" & @LF)
	EndIf
	If Number($pfr, 3) < Number(GUICtrlRead($txtfishpfrgr), 3) OR Number($pfr, 3) > Number(GUICtrlRead($txtfishpfrless), 3) Then
		Return False
	EndIf
	ConsoleWrite("PFR: " & $pfr & @LF)
	If GUICtrlRead($chkadvfish) == $gui_checked Then
		$3bet = _3bet(GUICtrlRead($s_user))
		If $3bet == "" OR $3bet == -1 Then
			$3bet = 0
		EndIf
		ConsoleWrite("3Bet: " & $3bet & @LF)
		If Number($3bet, 3) < Number(GUICtrlRead($txtfish3betgr), 3) OR Number($3bet, 3) > Number(GUICtrlRead($txtfish3betless), 3) Then
			Return False
		EndIf
		$4bet = _4bet(GUICtrlRead($s_user))
		If $4bet == "" OR $4bet == -1 Then
			$4bet = 0
		EndIf
		ConsoleWrite("4Bet: " & $4bet & @LF)
		If Number($4bet, 3) < Number(GUICtrlRead($txtfish4betgr), 3) OR Number($4bet, 3) > Number(GUICtrlRead($txtfish4betless), 3) Then
			Return False
		EndIf
	EndIf
	_sqldisconnect($conn)
	Return True
EndFunc

Func _sharktest($s_user)
	ConsoleWrite("Test Sharks" & @LF)
	If GUICtrlRead($txtsharkvpipgr) == "" Then ControlSetText($maingui, "", $txtsharkvpipgr, "0")
	If GUICtrlRead($txtsharkvpipless) == "" Then ControlSetText($maingui, "", $txtsharkvpipless, "0")
	If GUICtrlRead($txtsharkpfrgr) == "" Then ControlSetText($maingui, "", $txtsharkpfrgr, "0")
	If GUICtrlRead($txtsharkpfrless) == "" Then ControlSetText($maingui, "", $txtsharkpfrless, "0")
	If GUICtrlRead($chkadvshark) == $gui_checked Then
		If GUICtrlRead($txtshark3betgr) == "" Then ControlSetText($maingui, "", $txtshark3betgr, "0")
		If GUICtrlRead($txtshark3betless) == "" Then ControlSetText($maingui, "", $txtshark3betless, "0")
		If GUICtrlRead($txtshark4betgr) == "" Then ControlSetText($maingui, "", $txtshark4betgr, "0")
		If GUICtrlRead($txtshark4betless) == "" Then ControlSetText($maingui, "", $txtshark4betless, "0")
	EndIf
	Local $vpip
	Local $pfr
	Local $3bet
	Local $4bet
	Local $server = GUICtrlRead($input_server)
	Local $database = GUICtrlRead($input_db)
	Local $authmode = 1
	Local $username = GUICtrlRead($input_uid)
	Local $password = GUICtrlRead($input_pwd)
	Local $driver = $input_dr
	ConsoleWrite("Server: " & $server & @LF)
	ConsoleWrite("$Database: " & $database & @LF)
	ConsoleWrite("$AuthMode: " & $authmode & @LF)
	ConsoleWrite("$Username: " & $username & @LF)
	ConsoleWrite("$Password: " & $password & @LF)
	ConsoleWrite("$Driver: " & $driver & @LF)
	Local $conn = _sqlconnect($server, $database, 1, $username, $password, $driver)
	Local $hands = _hands($s_user)
	If $hands == "" OR $hands == -1 Then
		fconsolewrite("No hands found in the database for " & $s_user)
		Return False
	Else
		ConsoleWrite("SHARKTEST: HANDS: *" & $hands & "*" & @LF)
	EndIf
	If GUICtrlRead($txtsharkhands1) == "" Then ControlSetText($maingui, "", $txtsharkhands1, "0")
	If Number($hands, 3) < Number(GUICtrlRead($txtsharkhands1), 3) Then Return False
	$vpip = _vpip(GUICtrlRead($s_user))
	ConsoleWrite("VPIP: " & $vpip & @LF)
	If $vpip == "" OR $vpip == -1 Then
		$vpip = 0
		ConsoleWrite("SHARKTEST1: VPIP: *" & $vpip & "*" & @LF)
	Else
		ConsoleWrite("SHARKTEST2: VPIP: *" & $vpip & "*" & @LF)
	EndIf
	If Number($vpip, 3) < Number(GUICtrlRead($txtsharkvpipgr), 3) OR Number($vpip, 3) > Number(GUICtrlRead($txtsharkvpipless), 3) Then
		Return False
	EndIf
	$pfr = _pfr(GUICtrlRead($s_user))
	If $pfr == "" OR $pfr == -1 Then
		$pfr = 0
		ConsoleWrite("SHARKTEST1: PFR: *" & $pfr & "*" & @LF)
	Else
		ConsoleWrite("SHARKTEST2: PFR: *" & $pfr & "*" & @LF)
	EndIf
	If Number($pfr, 3) < Number(GUICtrlRead($txtsharkpfrgr), 3) OR Number($pfr, 3) > Number(GUICtrlRead($txtsharkpfrless), 3) Then
		Return False
	EndIf
	ConsoleWrite("PFR: " & $pfr & @LF)
	If GUICtrlRead($chkadvshark) == $gui_checked Then
		$3bet = _3bet(GUICtrlRead($s_user))
		If $3bet == "" OR $3bet == -1 Then
			$3bet = 0
		EndIf
		ConsoleWrite("3Bet: " & $3bet & @LF)
		If Number($3bet, 3) < Number(GUICtrlRead($txtshark3betgr), 3) OR Number($3bet, 3) > Number(GUICtrlRead($txtshark3betless), 3) Then
			Return False
		EndIf
		$4bet = _4bet(GUICtrlRead($s_user))
		If $4bet == "" OR $4bet == -1 Then
			$4bet = 0
		EndIf
		ConsoleWrite("4Bet: " & $4bet & @LF)
		If Number($4bet, 3) < Number(GUICtrlRead($txtshark4betgr), 3) OR Number($4bet, 3) > Number(GUICtrlRead($txtshark4betless), 3) Then
			Return False
		EndIf
	EndIf
	_sqldisconnect($conn)
	Return True
EndFunc

Func getdefaultstats()
	ControlSetText($maingui, "", $txtsharkhands1, "50")
	ControlSetText($maingui, "", $txtfishhands1, "50")
	ControlSetText($maingui, "", $txtsharkvpipgr, "0")
	ControlSetText($maingui, "", $txtsharkvpipless, "20")
	ControlSetText($maingui, "", $txtfishvpipgr, "35")
	ControlSetText($maingui, "", $txtfishvpipless, "100")
	ControlSetText($maingui, "", $txtsharkpfrgr, "0")
	ControlSetText($maingui, "", $txtsharkpfrless, "16")
	ControlSetText($maingui, "", $txtfishpfrgr, "0")
	ControlSetText($maingui, "", $txtfishpfrless, "100")
	ControlSetText($maingui, "", $txtshark3betgr, "0")
	ControlSetText($maingui, "", $txtshark3betless, "6")
	ControlSetText($maingui, "", $txtfish3betgr, "0")
	ControlSetText($maingui, "", $txtfish3betless, "100")
	ControlSetText($maingui, "", $txtshark4betgr, "0")
	ControlSetText($maingui, "", $txtshark4betless, "4")
	ControlSetText($maingui, "", $txtfish4betgr, "0")
	ControlSetText($maingui, "", $txtfish4betless, "100")
EndFunc

Func autologin()
	Local $winpos, $split, $htemp, $cl, $count5
	If GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		$cl = GUICtrlRead($clientbodogtxt)
		Local $l = StringInStr($cl, "\", 0, -1)
		Local $exedir = StringLeft($cl, $l - 1)
		Local $exe = StringMid($cl, StringInStr($cl, "\", 2, -1) + 1)
		If NOT WinExists($lobbyname) Then
			ShellExecute($exe, "", $exedir)
		EndIf
		WinWait("Welcome to Bodog.com", "", 3)
		While NOT WinExists($lobbyname) AND $count5 < 10
			Sleep(1000)
		WEnd
		If WinExists($lobbyname) Then
			Sleep(2500)
			Local $lobbyhnd = WinGetHandle($lobbyname)
			Local $lobbpos = WinGetPos($lobbyhnd)
			If IsArray($lobbpos) Then
				WinActivate($lobbyhnd)
				MouseClick("left", $lobbpos[0] + 113, $lobbpos[1] + 266, 1, 0)
				Sleep(5000)
				If GUICtrlRead($radhoppercash) == $gui_checked Then
					If GUICtrlRead($chkspeedpoker) == $gui_checked Then
						MouseClick("left", $lobbpos[0] + 297, $lobbpos[1] + 62, 1, 0)
					Else
						MouseClick("left", $lobbpos[0] + 297, $lobbpos[1] + 98, 1, 0)
					EndIf
				ElseIf GUICtrlRead($radhoppersng) == $gui_checked Then
					MouseClick("left", $lobbpos[0] + 297, $lobbpos[1] + 133, 1, 0)
				Else
					MouseClick("left", $lobbpos[0] + 297, $lobbpos[1] + 169, 1, 0)
				EndIf
			EndIf
		Else
			ConsoleWrite("Lobby does not exist" & @LF)
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
		$cl = GUICtrlRead($clienteeetxt)
		Run($cl, StringLeft($cl, StringInStr($cl, "\", 0, -1, StringLen($cl))))
		ConsoleWrite("Opening Lobby" & @LF)
		winwaitvisible("Login", 20)
		If WinExists("Login") AND iswindowvisible("Login") Then
			WinActivate("Login")
			WinWaitActive("Login", "", 2)
			$winpos = WinGetPos("Login")
			If IsArray($winpos) Then
				MouseClick("left", $winpos[0] + 80, $winpos[1] + 363, 1, 0)
				Sleep(400)
				WinWait("888poker News", "", 10)
				If WinExists("888poker News") Then
					WinClose("888poker News")
					WinWaitClose("888poker News", "", 2)
				EndIf
			EndIf
		EndIf
		winwaitvisible("Lobby", 10)
		If WinExists("Lobby") Then
			ConsoleWrite("Lobby is up" & @LF)
			If iswindowvisible("Lobby") Then
				ConsoleWrite("Lobby is visible" & @LF)
				Sleep(1000)
				Local $alpos = WinGetPos("Lobby")
				If IsArray($alpos) Then
					MouseClick("left", $alpos[0] + 62, $alpos[1] + 205, 1, 0)
					Sleep(1000)
				EndIf
				Return
			EndIf
		Else
			ConsoleWrite("Lobby does not exist" & @LF)
		EndIf
	ElseIf GUICtrlRead($cmbsite) == "WillHill" OR GUICtrlRead($cmbsite) == "Ladbrokes" OR GUICtrlRead($cmbsite) == "Bet365" OR GUICtrlRead($cmbsite) == "Betfair" OR GUICtrlRead($cmbsite) == "Paddy" OR GUICtrlRead($cmbsite) == "BNG" OR GUICtrlRead($cmbsite) == "Everest" OR GUICtrlRead($cmbsite) == "Betfred" OR GUICtrlRead($cmbsite) == "Titan" OR GUICtrlRead($cmbsite) == "Sisal" OR GUICtrlRead($cmbsite) == "Netbet" Then
		If GUICtrlRead($cmbsite) == "BNG" Then
			$lobbyname = "[REGEXPTITLE:\ABetnGo.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "WillHill" Then
			$lobbyname = "[REGEXPTITLE:\AWilliam Hill Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "Ladbrokes" Then
			$lobbyname = "[REGEXPTITLE:\ALadbrokes Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
			$lobbyname = "[REGEXPTITLE:\ABetfair.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Everest" Then
			$lobbyname = "[REGEXPTITLE:\AEverestPoker.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Paddy" Then
			$lobbyname = "[REGEXPTITLE:\APaddy Power.*\z]"
		ElseIf GUICtrlRead($cmbsite) == "Betfred" Then
			$lobbyname = "[REGEXPTITLE:\ABetfred Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "Sisal" Then
			$lobbyname = "[REGEXPTITLE:\ASisal Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "Netbet" Then
			$lobbyname = "[REGEXPTITLE:\ANetbet Poker\z]"
		ElseIf GUICtrlRead($cmbsite) == "Bet365" Then
			$lobbyname = "[REGEXPTITLE:\Abet365\z]"
		Else
			$lobbyname = "[REGEXPTITLE:\ATitan Poker\z]"
		EndIf
		Local $lobbhnd = getlobbyhnd()
		If WinExists($lobbhnd) AND iswindowvisible($lobbhnd) Then
			ConsoleWrite("exists" & @LF)
			Return
		EndIf
		Local $temphnd
		$cl = GUICtrlRead($clientiptxt)
		Run($cl, StringLeft($cl, StringInStr($cl, "\", 0, -1, StringLen($cl))))
		Sleep(1000)
		If GUICtrlRead($cmbsite) == "Bet365" Then
			WinWait("bet365 login", "", 20)
			If WinExists("bet365 login") Then
				Sleep(1000)
				If iswindowvisible("bet365 login") Then
					Sleep(500)
					ConsoleWrite("Login window found... Logging in" & @LF)
					$htemp = WinGetHandle("bet365 login")
					$winpos = WinGetPos($htemp)
					WinActivate($htemp)
					WinWaitActive($htemp, "", 2)
					SendKeepActive($htemp)
					MouseClick("left", $winpos[0] + 149, $winpos[1] + 73, 1, 0)
					Sleep(500)
					ConsoleWrite("Logging in with username: " & IniRead($inifile, "Settings", "$txt365Name", "") & @LF)
					$split = StringSplit(IniRead($inifile, "Settings", "$txt365Name", ""), "")
					For $a = 1 To $split[0]
						Send($split[$a])
						Sleep(5)
					Next
					Sleep(500)
					WinActivate($htemp)
					WinWaitActive($htemp, "", 2)
					SendKeepActive($htemp)
					MouseClick("left", $winpos[0] + 149, $winpos[1] + 101, 1, 0)
					Sleep(500)
					ConsoleWrite("Logging in with password: " & IniRead($inifile, "Settings", "$txt365Pass", "") & @LF)
					$split = StringSplit(IniRead($inifile, "Settings", "$txt365Pass", ""), "")
					For $a = 1 To $split[0]
						Send($split[$a])
						Sleep(5)
					Next
					Sleep(1500)
					MouseClick("left", $winpos[0] + 252, $winpos[1] + 127, 1, 0)
				EndIf
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Everest" Then
			WinWait("[REGEXPTITLE:\AEverestPoker.*login\z]", "", 20)
			If WinExists("[REGEXPTITLE:\AEverestPoker.*login\z]") Then
				Sleep(1000)
				Sleep(2500)
				ConsoleWrite("Login window found... Logging in" & @LF)
				$htemp = WinGetHandle("[REGEXPTITLE:\AEverestPoker.*login\z]")
				$winpos = WinGetPos($htemp)
				WinActivate($htemp)
				WinWaitActive($htemp, "", 2)
				MouseClick("left", $winpos[0] + 247, $winpos[1] + 593, 1, 0)
				Sleep(500)
			EndIf
		ElseIf GUICtrlRead($cmbsite) == "Betfair" Then
			ConsoleWrite("Waiting for login window" & @LF)
			WinWait("[REGEXPTITLE:\A.*login.*\z]", "", 20)
			If WinExists("[REGEXPTITLE:\A.*login.*\z]") Then
				winwaitvisible("[REGEXPTITLE:\A.*login.*\z]", 5)
				Sleep(1000)
				If iswindowvisible("[REGEXPTITLE:\A.*login.*\z]") Then
					Sleep(2500)
					ConsoleWrite("Login window found... Logging in" & @LF)
					Sleep(5000)
					$htemp = WinGetHandle("[REGEXPTITLE:\A.*login.*\z]")
					$winpos = WinGetPos($htemp)
					WinActivate($htemp)
					WinWaitActive($htemp, "", 2)
					SendKeepActive($htemp)
					MouseClick("left", $winpos[0] + 134, $winpos[1] + 109, 1, 0)
					Sleep(500)
					ConsoleWrite("Logging in with username: " & IniRead($inifile, "Settings", "$txtBetfairName", "") & @LF)
					$split = StringSplit(IniRead($inifile, "Settings", "$txtBetfairName", ""), "")
					For $a = 1 To $split[0]
						Send($split[$a])
						Sleep(5)
					Next
					Sleep(500)
					WinActivate($htemp)
					WinWaitActive($htemp, "", 2)
					SendKeepActive($htemp)
					MouseClick("left", $winpos[0] + 134, $winpos[1] + 150, 1, 0)
					Sleep(500)
					ConsoleWrite("Logging in with password: " & IniRead($inifile, "Settings", "$txtBetfairPass", "") & @LF)
					$split = StringSplit(IniRead($inifile, "Settings", "$txtBetfairPass", ""), "")
					For $a = 1 To $split[0]
						Send($split[$a])
						Sleep(5)
					Next
					Sleep(1500)
					MouseClick("left", $winpos[0] + 265, $winpos[1] + 201, 1, 0)
				EndIf
			EndIf
		EndIf
		Local $vis = False
		For $y = 0 To 30
			Local $list = WinList($lobbyname)
			If IsArray($list) Then
				For $x = 1 To $list[0][0]
					$winpos = WinGetPos($list[$x][1])
					If IsArray($winpos) AND $winpos[2] > 0 Then
						If iswindowvisible($list[$x][1]) AND ($winpos[2] == 1008 OR $winpos[2] == 1006) Then
							$temphnd = $list[$x][1]
							$vis = True
							ExitLoop
						EndIf
					EndIf
				Next
				If $vis == True Then ExitLoop
			EndIf
			Sleep(1000)
			If (IsArray($winpos) AND ($winpos[2] == 1008 OR $winpos[2] == 1006) AND iswindowvisible($temphnd)) Then ExitLoop
		Next
		If WinExists($lobbyname) Then
			ConsoleWrite("Lobby Exists" & @LF)
			Sleep(15000)
		Else
			ConsoleWrite("Lobby does not exist" & @LF)
		EndIf
		closesuwindows()
		closescwindow()
		Sleep(2000)
	EndIf
EndFunc

Func movelobby($hnd)
	If GUICtrlRead($txtlobbyposx) == "" OR GUICtrlRead($txtlobbyposy) == "" Then
		Return
	Else
		WinMove($hnd, "", GUICtrlRead($txtlobbyposx), GUICtrlRead($txtlobbyposy), Default, Default, 1)
	EndIf
EndFunc

Func lobbypos()
	Global $lobbyimage
	If GUICtrlRead($cmbsite) == "Carbon" Then
		$lobbyimage = GUICreate("Lobby", 1008, 730, GUICtrlRead($txtlobbyposx), GUICtrlRead($txtlobbyposy), $ws_border)
	ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		$lobbyimage = GUICreate("Lobby", 1024, 730, GUICtrlRead($txtlobbyposx), GUICtrlRead($txtlobbyposy), $ws_border)
	ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
		$lobbyimage = GUICreate("Lobby", 1006, 739, GUICtrlRead($txtlobbyposx), GUICtrlRead($txtlobbyposy), $ws_border)
	ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		$lobbyimage = GUICreate("Lobby", 1006, 725, GUICtrlRead($txtlobbyposx), GUICtrlRead($txtlobbyposy), $ws_border)
	Else
		$lobbyimage = GUICreate("Lobby", 797, 574, GUICtrlRead($txtlobbyposx), GUICtrlRead($txtlobbyposy), $ws_border)
	EndIf
	GUISetBkColor(0, $lobbyimage)
	If GUICtrlRead($cmbsite) == "Carbon" Then
		GUICtrlCreateLabel("Merge Poker", 400, 200, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	ElseIf GUICtrlRead($cmbsite) == "Bodog/Bovada" OR GUICtrlRead($cmbsite) == "Ignition" Then
		GUICtrlCreateLabel("Bodog Poker", 400, 200, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "888Poker" Then
		GUICtrlCreateLabel("888 Poker", 400, 200, 300, 120)
		GUICtrlSetColor(-1, 10289152)
	ElseIf GUICtrlRead($cmbsite) == "ACR" OR GUICtrlRead($cmbsite) == "Betcoin" OR GUICtrlRead($cmbsite) == "Blackchip" Then
		GUICtrlCreateLabel("ACR Poker", 400, 200, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	Else
		GUICtrlCreateLabel("Party Poker", 300, 150, 300, 120)
		GUICtrlSetColor(-1, 16694546)
	EndIf
	GUICtrlSetFont(-1, 32, 800)
	Global $btncancellobby, $btnsavelobby
	$btnsavelobby = GUICtrlCreateButton("Click To Save Position", 180, 500, 200, 50)
	GUICtrlSetFont(-1, 11, 800)
	$btncancellobby = GUICtrlCreateButton("Click To Cancel", 620, 500, 200, 50)
	GUICtrlSetFont(-1, 11, 800)
	GUICtrlSetOnEvent($btnsavelobby, "SavePosLobby")
	GUICtrlSetOnEvent($btncancellobby, "CancelLobby")
	GUISetState(@SW_SHOW)
EndFunc

Func saveposlobby()
	Local $winpos = WinGetPos($lobbyimage)
	Local $1hwnd = WinGetHandle($lobbyimage)
	GUIDelete($1hwnd)
	GUICtrlSetData($txtlobbyposx, $winpos[0])
	GUICtrlSetData($txtlobbyposy, $winpos[1])
EndFunc

Func cancellobby()
	Local $1hwnd = WinGetHandle($lobbyimage)
	GUIDelete($1hwnd)
EndFunc

Func logit($logid)
	If $logall <> 0 Then
		FileWrite($hlogfile, " >> " & $logid)
	EndIf
EndFunc

Func closeallbots()
	Local $botslist = WinList("[REGEXPCLASS:\A" & GUICtrlRead($txtclassname) & "\z]")
	If IsArray($botslist) Then
		For $x = 1 To $botslist[0][0]
			WinClose($botslist[$x][1])
			WinWaitClose($botslist[$x][1])
		Next
	EndIf
EndFunc

Func ohcheckbotstotables()
	Local $botslist = WinList("[REGEXPCLASS:\A" & GUICtrlRead($txtclassname) & "\z]")
	Local $tablelist = tablelist()
	If $botslist[0][0] < $tablelist[0][0] AND GUICtrlRead($numbotscmb) > $botslist[0][0] Then
		ConsoleWrite("OHCBTT: Class: " & "[REGEXPCLASS:\A" & GUICtrlRead($txtclassname) & "\z]" & @LF)
		ConsoleWrite("OHCBTT: Bots: " & $botslist[0][0] & @LF)
		ConsoleWrite("OHCBTT: Tables: " & $tablelist[0][0] & @LF)
		ConsoleWrite("OHCBTT: GUICtrlRead($numBotsCmb): " & GUICtrlRead($numbotscmb) & @LF)
		launchbot()
	EndIf
EndFunc

Func launchbot()
	Local $dir = GUICtrlRead($bottxt)
	$dir = StringLeft($dir, StringInStr($dir, "\", 0, -1))
	Local $botprocess = Run(GUICtrlRead($bottxt), $dir)
	ProcessWait($botprocess)
EndFunc

Func _reducememory()
	Local $ai_getcurrentprocessid = DllCall("kernel32.dll", "int", "GetCurrentProcessId")
	Local $ai_handle = DllCall("kernel32.dll", "int", "OpenProcess", "int", 2035711, "int", False, "int", $ai_getcurrentprocessid[0])
	Local $ai_return = DllCall("psapi.dll", "int", "EmptyWorkingSet", "long", $ai_handle[0])
	DllCall("kernel32.dll", "int", "CloseHandle", "int", $ai_handle[0])
	Return $ai_return[0]
EndFunc

Func exitcode()
	ConsoleWrite("Exit Code: " & @exitCode & @LF)
	ConsoleWrite("Mode: " & @exitMethod & @LF)
EndFunc

Func filelic($output1, $output2, $filename)
	Return 1
EndFunc

Func checkexpiration($output1, $output2, $filename)
	Return 1
EndFunc

Func checktrialexpiration()
	Return 1
EndFunc

Func addinifile()
	IniWrite($scrapeini, "CharsEEE", "XXXXX#X____#X____#XXXXX#X____#X____#X____#X____#_____#_____##", "F")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#XXXXX#X____#X___X#_XXX_#_____#_____##", "e")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#X___X#X___X#_XXXX#____X#___X_#_XX__#_____#_____##", "9")
	IniWrite($scrapeini, "CharsEEE", "XXXXX#X____#X____#XXXX_#____X#____X#X___X#_XXX_#_____#_____##", "5")
	IniWrite($scrapeini, "CharsEEE", "_X_#XX_#_X_#_X_#_X_#_X_#_X_#XXX#___#___##", "1")
	IniWrite($scrapeini, "CharsEEE", "X_X#XX_#X__#X__#X__#X__#___#___##", "r")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#____X#__XX_#____X#____X#X___X#_XXX_#_____#_____##", "3")
	IniWrite($scrapeini, "CharsEEE", "XXXXX#____X#___X_#___X_#__X__#__X__#_X___#_X___#_____#_____##", "7")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#____X#___X_#__X__#_X___#X____#XXXXX#_____#_____##", "2")
	IniWrite($scrapeini, "CharsEEE", "XXXXX#XX___#XX___#XXXXX#XX___#XX___#XX___#XX___#_____#_____##", "F")
	IniWrite($scrapeini, "CharsEEE", "_XXXX_#XX__XX#XXXXXX#XX____#XX____#_XXXXX#______#______##", "e")
	IniWrite($scrapeini, "CharsEEE", "_XXXX_#XX__XX#XX__XX#XX__XX#_XXXXX#____XX#____XX#_XXXX_#______#______##", "9")
	IniWrite($scrapeini, "CharsEEE", "XXXXXX#____XX#___XX_#___XX_#___XX_#__XX__#__XX__#__XX__#______#______##", "7")
	IniWrite($scrapeini, "CharsEEE", "_XXXX_#XX__XX#____XX#__XXX_#____XX#____XX#XX__XX#_XXXX_#______#______##", "3")
	IniWrite($scrapeini, "CharsEEE", "_XXXX_#XX__XX#XX__XX#_XXXX_#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "8")
	IniWrite($scrapeini, "CharsEEE", "XX_X#XXXX#XX__#XX__#XX__#XX__#____#____##", "r")
	IniWrite($scrapeini, "CharsEEE", "_XXXX_#XX____#XX____#XXXXX_#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "6")
	IniWrite($scrapeini, "CharsEEE", "_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "0")
	IniWrite($scrapeini, "CharsEEE", "____X_#___XX_#__XXX_#_X_XX_#X__XX_#XXXXXX#___XX_#___XX_#______#______##", "4")
	IniWrite($scrapeini, "CharsEEE", "_XXXXX#_XX___#_XX___#_XXXX_#____XX#____XX#XX__XX#_XXXX_#______#______##", "5")
	IniWrite($scrapeini, "CharsEEE", "_XX_#XXX_#_XX_#_XX_#_XX_#_XX_#_XX_#XXXX#____#____##", "1")
	IniWrite($scrapeini, "CharsEEE", "__X__#__X__#_XXXX#X_X__#X_X__#_XXX_#__X_X#__X_X#XXXX_#__X__#__X__##", "$")
	IniWrite($scrapeini, "CharsEEE", "___X_#__XX_#_X_X_#X__X_#XXXXX#___X_#___X_#___X_#_____#_____##", "4")
	IniWrite($scrapeini, "CharsEEE", "__XX_#_X___#X____#XXXX_#X___X#X___X#X___X#_XXX_#_____#_____##", "6")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#X___X#X___X#X___X#X___X#X___X#_XXX_#_____#_____##", "0")
	IniWrite($scrapeini, "CharsEEE", "___X__#___X__#_XXXX_#XX_X_X#XX_X__#_XXXX_#__X_XX#X_X_XX#_XXXX_#__X___#__X___##", "$")
	IniWrite($scrapeini, "CharsEEE", "_XXXX_#XX__XX#____XX#___XX_#__XX__#_XX___#XX____#XXXXXX#______#______##", "2")
	IniWrite($scrapeini, "CharsEEE", "__X__#__X__#_XXXX#X_X__#X_X__#X_X__#X_X__#_XXXX#__X__#__X__##", "c")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#X___X#_XXX_#X___X#X___X#X___X#_XXX_#_____#_____##", "8")
	IniWrite($scrapeini, "CharsEEE", "______#_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "0")
	IniWrite($scrapeini, "CharsEEE", "_______#_XXXX__#XX__XX_#XX__XX_#XX__XX_#XX__XX_#XX__XX_#XX__XX_#_XXXX__#_______#_______##", "0")
	IniWrite($scrapeini, "CharsEEE", "____X#____X#___X_#___X_#__X__#__X__#__X__#_X___#_X___#X____#X____##", "/")
	IniWrite($scrapeini, "CharsEEE", "___X_#___X_#_XXXX#XX_X_#XX_X_#XX_X_#XX_X_#_XXXX#___X_#___X_##", "c")
	IniWrite($scrapeini, "CharsEEE", "_XXXXX#XX____#XX____#XXXXX_#_XXXXX#____XX#____XX#XXXXX_#______#______##", "S")
	IniWrite($scrapeini, "CharsEEE", "XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XXXXX_#XX____#XX____##", "p")
	IniWrite($scrapeini, "CharsEEE", "XX___XX#XX___XX#XX___XX#XXXXXXX#XX___XX#XX___XX#XX___XX#XX___XX#_______#_______##", "H")
	IniWrite($scrapeini, "CharsEEE", "XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#______#______##", "n")
	IniWrite($scrapeini, "CharsEEE", "____XX#____XX#____XX#_XXXXX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#______#______##", "d")
	IniWrite($scrapeini, "CharsEEE", "XXXXXX#__XX__#__XX__#__XX__#__XX__#__XX__#__XX__#__XX__#______#______##", "T")
	IniWrite($scrapeini, "CharsEEE", "XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#______#______##", "u")
	IniWrite($scrapeini, "CharsEEE", "XX____#XX____#XX____#XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XXXXX_#______#______##", "b")
	IniWrite($scrapeini, "CharsEEE", "XX__#XX__#XXXX#XX__#XX__#XX__#XX__#_XXX#____#____##", "t")
	IniWrite($scrapeini, "CharsEEE", "_XXXX_#____XX#_XXXXX#XX__XX#XX__XX#_XXXXX#______#______##", "a")
	IniWrite($scrapeini, "CharsEEE", "_XXXX#XX___#XXXX_#_XXXX#___XX#XXXX_#_____#_____##", "s")
	IniWrite($scrapeini, "CharsEEE", "XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#_XXXXX_#_______#_______##", "U")
	IniWrite($scrapeini, "CharsEEE", "XXXX#____#____#____#____#____##", "-")
	IniWrite($scrapeini, "CharsEEE", "__XXX__#__XXX__#_XX_XX_#_XX_XX_#_XX_XX_#XXXXXXX#XX___XX#XX___XX#_______#_______##", "A")
	IniWrite($scrapeini, "CharsEEE", "_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "o")
	IniWrite($scrapeini, "CharsEEE", "XXXXX__#XX__XX_#XX___XX#XX___XX#XX___XX#XX___XX#XX__XX_#XXXXX__#_______#_______##", "D")
	IniWrite($scrapeini, "CharsEEE", "XX#XX#XX#XX#XX#XX#XX#XX#XX#__#__##", "l")
	IniWrite($scrapeini, "CharsEEE", "XX___X#XXX__X#XXXX_X#X_XXXX#X__XXX#X___XX#X____X#X____X#______#______##", "N")
	IniWrite($scrapeini, "CharsEEE", "XX____#XX____#XX____#XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#______#______##", "h")
	IniWrite($scrapeini, "CharsEEE", "XX_____XX#XXX___XXX#XXXX_XXXX#X_XXXX_XX#X__XX__XX#X______XX#X______XX#X______XX#_________#_________##", "M")
	IniWrite($scrapeini, "CharsEEE", "XX#XX#__#__##", ".")
	IniWrite($scrapeini, "CharsEEE", "XX#__#XX#XX#XX#XX#XX#XX#__#__##", "i")
	IniWrite($scrapeini, "CharsEEE", "_XXXXX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#____XX#_XXXX_##", "g")
	IniWrite($scrapeini, "CharsEEE", "XXXXX_#XX__XX#XX__XX#XX__XX#XXXXX_#XX____#XX____#XX____#______#______##", "P")
	IniWrite($scrapeini, "CharsEEE", "XX___#XX___#XX___#XX___#XX___#XX___#XX___#XXXXX#_____#_____##", "L")
	IniWrite($scrapeini, "CharsEEE", "_XXXXX_#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#_XXXXX_#_______#_______##", "O")
	IniWrite($scrapeini, "CharsEEE", "XXXX#_XX_#_XX_#_XX_#_XX_#_XX_#_XX_#XXXX#____#____##", "I")
	IniWrite($scrapeini, "CharsEEE", "_XXXXX_#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___X_#_XXXXX_#_______#_______##", "O")
	IniWrite($scrapeini, "CharsEEE", "X____X#X____X#X____X#XXXXXX#X____X#X____X#X____X#X____X#______#______##", "H")
	IniWrite($scrapeini, "CharsEEE", "XXXX_#X___X#X___X#X___X#X___X#X___X#_____#_____##", "n")
	IniWrite($scrapeini, "CharsEEE", "__X#_X_#_X_#X__#X__#X__#X__#X__#_X_#_X_#__X##", "(")
	IniWrite($scrapeini, "CharsEEE", "XXXX__#X___X_#X___X_#X___X_#XXXX__#X__X__#X___X_#X____X#______#______##", "R")
	IniWrite($scrapeini, "CharsEEE", "X___X#X___X#_X_X_#_X_X_#__X__#__X__#_X___#_X___##", "y")
	IniWrite($scrapeini, "CharsEEE", "X#X#X#X#X#X#X#X#X#_#_##", "l")
	IniWrite($scrapeini, "CharsEEE", "_XXX#___X#___X#___X#___X#___X#___X#XXX_#____#____##", "J")
	IniWrite($scrapeini, "CharsEEE", "_XXX#X___#X___#X___#X___#_XXX#____#____##", "c")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#X___X#X___X#X___X#_XXX_#_____#_____##", "o")
	IniWrite($scrapeini, "CharsEEE", "X__#_X_#_X_#__X#__X#__X#__X#__X#_X_#_X_#X__##", ")")
	IniWrite($scrapeini, "CharsEEE", "__XX__#__XX__#_X__X_#_X__X_#_X__X_#XXXXXX#X____X#X____X#______#______##", "A")
	IniWrite($scrapeini, "CharsEEE", "_XXXX#X___X#X___X#X___X#X___X#_XXXX#____X#_XXX_##", "g")
	IniWrite($scrapeini, "CharsEEE", "_XXX#X___#XX__#__XX#___X#XXX_#____#____##", "s")
	IniWrite($scrapeini, "CharsEEE", "__X#__X#__X#_X_#_X_#_X_#_X_#_X_#X__#X__#X__##", "/")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#____X#_XXXX#X___X#X___X#_XXXX#_____#_____##", "a")
	IniWrite($scrapeini, "CharsEEE", "X_________#X_________#X_________#X__X_XXXX_#X_X__X___X#XX___X___X#X_X__X___X#X__X_X___X#X___XXXXX_#_____X____#_____X____##", "kp")
	IniWrite($scrapeini, "CharsEEE", "X__#X__#XXX#X__#X__#X__#X__#_XX#___#___##", "t")
	IniWrite($scrapeini, "CharsEEE", "XXXX__#X___X_#X____X#X____X#X____X#X____X#X___X_#XXXX__#______#______##", "D")
	IniWrite($scrapeini, "CharsEEE", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#XXXX_#_____#_____##", "b")
	IniWrite($scrapeini, "CharsEEE", "X_X#XX_#X__#X__#X__#X__#X__#X__##", "r")
	IniWrite($scrapeini, "CharsEEE", "XX___X#XX___X#X_X__X#X_X__X#X__X_X#X__X_X#X___XX#X___XX#______#______##", "N")
	IniWrite($scrapeini, "CharsEEE", "XX___XX#XX___XX#X_X_X_X#X_X_X_X#X__X__X#X__X__X#X_____X#X_____X#_______#_______##", "M")
	IniWrite($scrapeini, "CharsEEE", "X___X#X___X#X___X#X___X#X___X#_XXXX#_____#_____##", "u")
	IniWrite($scrapeini, "CharsEEE", "X___#X___#X___#X___#X___#X___#X___#XXXX#____#____##", "L")
	IniWrite($scrapeini, "CharsEEE", "_XX___X___#X__X__X___#X__X_X____#_XX__X____#____X__XX_#____X_X__X#___X__X__X#___X___XX_#__________#__________##", "%")
	IniWrite($scrapeini, "CharsEEE", "XXX_XX_#X__X__X#X__X__X#X__X__X#X__X__X#X__X__X#_______#_______##", "m")
	IniWrite($scrapeini, "CharsEEE", "__XXXX#_X____#X_____#X_____#X__XXX#X____X#_X___X#__XXXX#______#______##", "G")
	IniWrite($scrapeini, "CharsEEE", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#X___X#_____#_____##", "h")
	IniWrite($scrapeini, "CharsEEE", "X___X#X__X_#X_X__#XX___#XX___#X_X__#X__X_#X___X#_____#_____##", "K")
	IniWrite($scrapeini, "CharsEEE", "XXXX_#X___X#X___X#X___X#XXXX_#X____#X____#X____#_____#_____##", "P")
	IniWrite($scrapeini, "CharsEEE", "____X#____X#____X#_XXXX#X___X#X___X#X___X#X___X#_XXXX#_____#_____##", "d")
	IniWrite($scrapeini, "CharsEEE", "XXXXX#__X__#__X__#__X__#__X__#__X__#__X__#__X__#_____#_____##", "T")
	IniWrite($scrapeini, "CharsEEE", "_X#_X#_X#X_##", ",")
	IniWrite($scrapeini, "CharsEEE", "X___X#_X_X_#__X__#__X__#_X_X_#X___X#_____#_____##", "x")
	IniWrite($scrapeini, "CharsEEE", "X___X#X___X#_X_X_#_X_X_#__X__#__X__#_____#_____##", "v")
	IniWrite($scrapeini, "CharsEEE", "X#_#X#X#X#X#X#X#_#_##", "i")
	IniWrite($scrapeini, "CharsEEE", "XXXX#___X#__X_#_X__#X___#XXXX#____#____##", "z")
	IniWrite($scrapeini, "CharsEEE", "XXXX_#X___X#X___X#XXXX_#X___X#X___X#X___X#XXXX_#_____#_____##", "B")
	IniWrite($scrapeini, "CharsEEE", "XXXXX_#__X___#__X___#__X___#__X___#__X___#__X___#__X__X#______#______##", "T.")
	IniWrite($scrapeini, "CharsEEE", "X#_#_##", ".")
	IniWrite($scrapeini, "CharsEEE", "_XXXX#X____#X____#_XXX_#____X#____X#____X#XXXX_#_____#_____##", "S")
	IniWrite($scrapeini, "CharsEEE", "XXXXX___#__X_____#__X__X_X#__X__XX_#__X__X__#__X__X__#__X__X__#__X__X__#________#________##", "Tr")
	IniWrite($scrapeini, "CharsEEE", "XXXXX__#____X__#___X___#___X___#__X____#__X____#_X____X#_X____X#______X#_____X_##", "7,")
	IniWrite($scrapeini, "CharsEEE", "XXXXX_____#__X_______#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X___XXXX#__________#__________##", "Tu")
	IniWrite($scrapeini, "CharsEEE", "XXX#_X_#_X_#_X_#_X_#_X_#_X_#XXX#___#___##", "I")
	IniWrite($scrapeini, "CharsEEE", "XXX#___#___#___#___#___##", "-")
	IniWrite($scrapeini, "CharsEEE", "__XXXX#_X____#X_____#X_____#X_____#X_____#_X____#__XXXX#______#______##", "C")
	IniWrite($scrapeini, "CharsEEE", "XXXX_#X___X#X___X#X___X#X___X#XXXX_#X____#X____##", "p")
	IniWrite($scrapeini, "CharsEEE", "_XX#X__#X__#XXX#X__#X__#X__#X__#X__#___#___##", "f")
	IniWrite($scrapeini, "CharsEEE", "X___X_____#X___X_____#X___X_XXX_#_X_X_X___X#_X_X_XXXXX#_X_X_X____#__X__X___X#__X___XXX_#__________#__________##", "Ve")
	IniWrite($scrapeini, "CharsEEE", "X___X#X___X#X___X#_X_X_#_X_X_#_X_X_#__X__#__X__#_____#_____##", "V")
	IniWrite($scrapeini, "CharsEEE", "XXXXX#X____#X____#XXXX_#X____#X____#X____#XXXXX#_____#_____##", "E")
	IniWrite($scrapeini, "CharsEEE", "XXXXX_____#X_________#X_____XXX_#XXXXX____X#X_____XXXX#X____X___X#X____X___X#X_____XXXX#__________#__________##", "Fa")
	IniWrite($scrapeini, "CharsEEE", "X___X_____#X___X_____#_X_X__XXX_#_X_X_____X#__X___XXXX#__X__X___X#__X__X___X#__X___XXXX#__________#__________##", "Ya")
	IniWrite($scrapeini, "CharsEEE", "X___X___X#X___X___X#X___X___X#_X_X_X_X_#_X_X_X_X_#_X_X_X_X_#__X___X__#__X___X__#_________#_________##", "W")
	IniWrite($scrapeini, "CharsEEE", "X#X#_#_##", ".")
	IniWrite($scrapeini, "CharsEEE", "X_________#X_________#X_________#X__X__XXX_#X_X__X___X#XX___XXXXX#X_X__X____#X__X_X___X#X___X_XXX_#__________#__________##", "ke")
	IniWrite($scrapeini, "CharsEEE", "X_________#X_________#X_________#X__X__XXX_#X_X______X#XX____XXXX#X_X__X___X#X__X_X___X#X___X_XXXX#__________#__________##", "ka")
	IniWrite($scrapeini, "CharsEEE", "X___X_____#X___X_____#X___X_XXX_#_X_X_X___X#_X_X_X___X#_X_X_X___X#__X__X___X#__X___XXX_#__________#__________##", "Vo")
	IniWrite($scrapeini, "CharsEEE", "X_____#X____X#X_____#X__X_X#X_X__X#XX___X#X_X__X#X__X_X#X___XX#______#______##", "ki")
	IniWrite($scrapeini, "CharsEEE", "_X#__#XX#_X#_X#_X#_X#_X#_X#X_##", "j")
	IniWrite($scrapeini, "CharsEEE", "X____#X____#X____#X__X_#X_X__#XX___#X_X__#X__X_#X___X#_____#_____##", "k")
	IniWrite($scrapeini, "CharsEEE", "X_________#X_________#X_________#X__X_X___X#X_X__X___X#XX___X___X#X_X__X___X#X__X_X___X#X___X_XXXX#__________#__________##", "ku")
	IniWrite($scrapeini, "CharsEEE", "XXXXX_____#__X_______#__X___XXX_#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X___XXX_#__________#__________##", "To")
	IniWrite($scrapeini, "CharsEEE", "__XXXX#_X____#X_____#X_____#X_____#X_____#_X____#__XXXX##", "C")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#X___X#X___X#X___X#_XXX_##", "o")
	IniWrite($scrapeini, "CharsEEE", "X#_#X#X#X#X#X#X##", "i")
	IniWrite($scrapeini, "CharsEEE", "XXX_XX_#X__X__X#X__X__X#X__X__X#X__X__X#X__X__X##", "m")
	IniWrite($scrapeini, "CharsEEE", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#XXXX_##", "b")
	IniWrite($scrapeini, "CharsEEE", "X_X#XX_#X__#X__#X__#X__##", "r")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#____X#_XXXX#X___X#X___X#_XXXX##", "a")
	IniWrite($scrapeini, "CharsEEE", "_X_#XX_#_X_#_X_#_X_#_X_#_X_#XXX##", "1")
	IniWrite($scrapeini, "CharsEEE", "__X__#__X__#_XXXX#X_X__#X_X__#X_X__#X_X__#_XXXX##", "c")
	IniWrite($scrapeini, "CharsEEE", "__X#__X#__X#_X_#_X_#_X_#_X_#_X_#X__##", "/")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#____X#___X_#__X__#_X___#X____#XXXXX##", "2")
	IniWrite($scrapeini, "CharsEEE", "XXXXX#X____#X____#XXXXX#X____#X____#X____#X____##", "F")
	IniWrite($scrapeini, "CharsEEE", "X___X#X___X#X___X#X___X#X___X#_XXXX##", "u")
	IniWrite($scrapeini, "CharsEEE", "X#X#X#X#X#X#X#X#X##", "l")
	IniWrite($scrapeini, "CharsEEE", "_XXX_#X___X#X___X#X___X#_XXXX#____X#___X_#_XX__##", "9")
	IniWrite($scrapeini, "CharsEEE", "XX___X#XX___X#X_X__X#X_X__X#X__X_X#X__X_X#X___XX#X___XX##", "N")
	IniWrite($scrapeini, "CharsEEE", "X___#X___#X___#X___#X___#X___#X___#XXXX##", "L")
	IniWrite($scrapeini, "CharsEEE", "_XX___X___#X__X__X___#X__X_X____#_XX__X____#____X__XX_#____X_X__X#___X__X__X#___X___XX_##", "%")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXXX#X____#X____#X____#X____#_____#_____##", "F")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#XXXXX#X____#X___X#_XXX_#_____#_____##", "e")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#_XXXX#____X#___X_#_XX__#_____#_____##", "9")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXX_#____X#____X#X___X#_XXX_#_____#_____##", "5")
	IniWrite($scrapeini, "CharsBodog", "_X_#XX_#_X_#_X_#_X_#_X_#_X_#XXX#___#___##", "1")
	IniWrite($scrapeini, "CharsBodog", "X_X#XX_#X__#X__#X__#X__#___#___##", "r")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#____X#__XX_#____X#____X#X___X#_XXX_#_____#_____##", "3")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#____X#___X_#___X_#__X__#__X__#_X___#_X___#_____#_____##", "7")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#____X#___X_#__X__#_X___#X____#XXXXX#_____#_____##", "2")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#XX___#XX___#XXXXX#XX___#XX___#XX___#XX___#_____#_____##", "F")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX__XX#XXXXXX#XX____#XX____#_XXXXX#______#______##", "e")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX__XX#XX__XX#XX__XX#_XXXXX#____XX#____XX#_XXXX_#______#______##", "9")
	IniWrite($scrapeini, "CharsBodog", "XXXXXX#____XX#___XX_#___XX_#___XX_#__XX__#__XX__#__XX__#______#______##", "7")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX__XX#____XX#__XXX_#____XX#____XX#XX__XX#_XXXX_#______#______##", "3")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX__XX#XX__XX#_XXXX_#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "8")
	IniWrite($scrapeini, "CharsBodog", "XX_X#XXXX#XX__#XX__#XX__#XX__#____#____##", "r")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX____#XX____#XXXXX_#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "6")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "0")
	IniWrite($scrapeini, "CharsBodog", "____X_#___XX_#__XXX_#_X_XX_#X__XX_#XXXXXX#___XX_#___XX_#______#______##", "4")
	IniWrite($scrapeini, "CharsBodog", "_XXXXX#_XX___#_XX___#_XXXX_#____XX#____XX#XX__XX#_XXXX_#______#______##", "5")
	IniWrite($scrapeini, "CharsBodog", "_XX_#XXX_#_XX_#_XX_#_XX_#_XX_#_XX_#XXXX#____#____##", "1")
	IniWrite($scrapeini, "CharsBodog", "__X__#__X__#_XXXX#X_X__#X_X__#_XXX_#__X_X#__X_X#XXXX_#__X__#__X__##", "$")
	IniWrite($scrapeini, "CharsBodog", "___X_#__XX_#_X_X_#X__X_#XXXXX#___X_#___X_#___X_#_____#_____##", "4")
	IniWrite($scrapeini, "CharsBodog", "__XX_#_X___#X____#XXXX_#X___X#X___X#X___X#_XXX_#_____#_____##", "6")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#X___X#X___X#X___X#_XXX_#_____#_____##", "0")
	IniWrite($scrapeini, "CharsBodog", "___X__#___X__#_XXXX_#XX_X_X#XX_X__#_XXXX_#__X_XX#X_X_XX#_XXXX_#__X___#__X___##", "$")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX__XX#____XX#___XX_#__XX__#_XX___#XX____#XXXXXX#______#______##", "2")
	IniWrite($scrapeini, "CharsBodog", "__X__#__X__#_XXXX#X_X__#X_X__#X_X__#X_X__#_XXXX#__X__#__X__##", "c")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#_XXX_#X___X#X___X#X___X#_XXX_#_____#_____##", "8")
	IniWrite($scrapeini, "CharsBodog", "______#_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "0")
	IniWrite($scrapeini, "CharsBodog", "_______#_XXXX__#XX__XX_#XX__XX_#XX__XX_#XX__XX_#XX__XX_#XX__XX_#_XXXX__#_______#_______##", "0")
	IniWrite($scrapeini, "CharsBodog", "____X#____X#___X_#___X_#__X__#__X__#__X__#_X___#_X___#X____#X____##", "/")
	IniWrite($scrapeini, "CharsBodog", "___X_#___X_#_XXXX#XX_X_#XX_X_#XX_X_#XX_X_#_XXXX#___X_#___X_##", "c")
	IniWrite($scrapeini, "CharsBodog", "_XXXXX#XX____#XX____#XXXXX_#_XXXXX#____XX#____XX#XXXXX_#______#______##", "S")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XXXXX_#XX____#XX____##", "p")
	IniWrite($scrapeini, "CharsBodog", "XX___XX#XX___XX#XX___XX#XXXXXXX#XX___XX#XX___XX#XX___XX#XX___XX#_______#_______##", "H")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#______#______##", "n")
	IniWrite($scrapeini, "CharsBodog", "____XX#____XX#____XX#_XXXXX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#______#______##", "d")
	IniWrite($scrapeini, "CharsBodog", "XXXXXX#__XX__#__XX__#__XX__#__XX__#__XX__#__XX__#__XX__#______#______##", "T")
	IniWrite($scrapeini, "CharsBodog", "XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#______#______##", "u")
	IniWrite($scrapeini, "CharsBodog", "XX____#XX____#XX____#XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XXXXX_#______#______##", "b")
	IniWrite($scrapeini, "CharsBodog", "XX__#XX__#XXXX#XX__#XX__#XX__#XX__#_XXX#____#____##", "t")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#____XX#_XXXXX#XX__XX#XX__XX#_XXXXX#______#______##", "a")
	IniWrite($scrapeini, "CharsBodog", "_XXXX#XX___#XXXX_#_XXXX#___XX#XXXX_#_____#_____##", "s")
	IniWrite($scrapeini, "CharsBodog", "XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#_XXXXX_#_______#_______##", "U")
	IniWrite($scrapeini, "CharsBodog", "XXXX#____#____#____#____#____##", "-")
	IniWrite($scrapeini, "CharsBodog", "__XXX__#__XXX__#_XX_XX_#_XX_XX_#_XX_XX_#XXXXXXX#XX___XX#XX___XX#_______#_______##", "A")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "o")
	IniWrite($scrapeini, "CharsBodog", "XXXXX__#XX__XX_#XX___XX#XX___XX#XX___XX#XX___XX#XX__XX_#XXXXX__#_______#_______##", "D")
	IniWrite($scrapeini, "CharsBodog", "XX#XX#XX#XX#XX#XX#XX#XX#XX#__#__##", "l")
	IniWrite($scrapeini, "CharsBodog", "XX___X#XXX__X#XXXX_X#X_XXXX#X__XXX#X___XX#X____X#X____X#______#______##", "N")
	IniWrite($scrapeini, "CharsBodog", "XX____#XX____#XX____#XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#______#______##", "h")
	IniWrite($scrapeini, "CharsBodog", "XX_____XX#XXX___XXX#XXXX_XXXX#X_XXXX_XX#X__XX__XX#X______XX#X______XX#X______XX#_________#_________##", "M")
	IniWrite($scrapeini, "CharsBodog", "XX#XX#__#__##", ".")
	IniWrite($scrapeini, "CharsBodog", "XX#__#XX#XX#XX#XX#XX#XX#__#__##", "i")
	IniWrite($scrapeini, "CharsBodog", "_XXXXX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#____XX#_XXXX_##", "g")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_#XX__XX#XX__XX#XX__XX#XXXXX_#XX____#XX____#XX____#______#______##", "P")
	IniWrite($scrapeini, "CharsBodog", "XX___#XX___#XX___#XX___#XX___#XX___#XX___#XXXXX#_____#_____##", "L")
	IniWrite($scrapeini, "CharsBodog", "_XXXXX_#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#_XXXXX_#_______#_______##", "O")
	IniWrite($scrapeini, "CharsBodog", "XXXX#_XX_#_XX_#_XX_#_XX_#_XX_#_XX_#XXXX#____#____##", "I")
	IniWrite($scrapeini, "CharsBodog", "_XXXXX_#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___X_#_XXXXX_#_______#_______##", "O")
	IniWrite($scrapeini, "CharsBodog", "X____X#X____X#X____X#XXXXXX#X____X#X____X#X____X#X____X#______#______##", "H")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#X___X#X___X#X___X#_____#_____##", "n")
	IniWrite($scrapeini, "CharsBodog", "__X#_X_#_X_#X__#X__#X__#X__#X__#_X_#_X_#__X##", "(")
	IniWrite($scrapeini, "CharsBodog", "XXXX__#X___X_#X___X_#X___X_#XXXX__#X__X__#X___X_#X____X#______#______##", "R")
	IniWrite($scrapeini, "CharsBodog", "X___X#X___X#_X_X_#_X_X_#__X__#__X__#_X___#_X___##", "y")
	IniWrite($scrapeini, "CharsBodog", "X#X#X#X#X#X#X#X#X#_#_##", "l")
	IniWrite($scrapeini, "CharsBodog", "_XXX#___X#___X#___X#___X#___X#___X#XXX_#____#____##", "J")
	IniWrite($scrapeini, "CharsBodog", "_XXX#X___#X___#X___#X___#_XXX#____#____##", "c")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#X___X#_XXX_#_____#_____##", "o")
	IniWrite($scrapeini, "CharsBodog", "X__#_X_#_X_#__X#__X#__X#__X#__X#_X_#_X_#X__##", ")")
	IniWrite($scrapeini, "CharsBodog", "__XX__#__XX__#_X__X_#_X__X_#_X__X_#XXXXXX#X____X#X____X#______#______##", "A")
	IniWrite($scrapeini, "CharsBodog", "_XXXX#X___X#X___X#X___X#X___X#_XXXX#____X#_XXX_##", "g")
	IniWrite($scrapeini, "CharsBodog", "_XXX#X___#XX__#__XX#___X#XXX_#____#____##", "s")
	IniWrite($scrapeini, "CharsBodog", "__X#__X#__X#_X_#_X_#_X_#_X_#_X_#X__#X__#X__##", "/")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#____X#_XXXX#X___X#X___X#_XXXX#_____#_____##", "a")
	IniWrite($scrapeini, "CharsBodog", "X_________#X_________#X_________#X__X_XXXX_#X_X__X___X#XX___X___X#X_X__X___X#X__X_X___X#X___XXXXX_#_____X____#_____X____##", "kp")
	IniWrite($scrapeini, "CharsBodog", "X__#X__#XXX#X__#X__#X__#X__#_XX#___#___##", "t")
	IniWrite($scrapeini, "CharsBodog", "XXXX__#X___X_#X____X#X____X#X____X#X____X#X___X_#XXXX__#______#______##", "D")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#XXXX_#_____#_____##", "b")
	IniWrite($scrapeini, "CharsBodog", "X_X#XX_#X__#X__#X__#X__#X__#X__##", "r")
	IniWrite($scrapeini, "CharsBodog", "XX___X#XX___X#X_X__X#X_X__X#X__X_X#X__X_X#X___XX#X___XX#______#______##", "N")
	IniWrite($scrapeini, "CharsBodog", "XX___XX#XX___XX#X_X_X_X#X_X_X_X#X__X__X#X__X__X#X_____X#X_____X#_______#_______##", "M")
	IniWrite($scrapeini, "CharsBodog", "X___X#X___X#X___X#X___X#X___X#_XXXX#_____#_____##", "u")
	IniWrite($scrapeini, "CharsBodog", "X___#X___#X___#X___#X___#X___#X___#XXXX#____#____##", "L")
	IniWrite($scrapeini, "CharsBodog", "_XX___X___#X__X__X___#X__X_X____#_XX__X____#____X__XX_#____X_X__X#___X__X__X#___X___XX_#__________#__________##", "%")
	IniWrite($scrapeini, "CharsBodog", "XXX_XX_#X__X__X#X__X__X#X__X__X#X__X__X#X__X__X#_______#_______##", "m")
	IniWrite($scrapeini, "CharsBodog", "__XXXX#_X____#X_____#X_____#X__XXX#X____X#_X___X#__XXXX#______#______##", "G")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#X___X#_____#_____##", "h")
	IniWrite($scrapeini, "CharsBodog", "X___X#X__X_#X_X__#XX___#XX___#X_X__#X__X_#X___X#_____#_____##", "K")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#X___X#XXXX_#X____#X____#X____#_____#_____##", "P")
	IniWrite($scrapeini, "CharsBodog", "____X#____X#____X#_XXXX#X___X#X___X#X___X#X___X#_XXXX#_____#_____##", "d")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#__X__#__X__#__X__#__X__#__X__#__X__#__X__#_____#_____##", "T")
	IniWrite($scrapeini, "CharsBodog", "_X#_X#_X#X_##", ",")
	IniWrite($scrapeini, "CharsBodog", "X___X#_X_X_#__X__#__X__#_X_X_#X___X#_____#_____##", "x")
	IniWrite($scrapeini, "CharsBodog", "X___X#X___X#_X_X_#_X_X_#__X__#__X__#_____#_____##", "v")
	IniWrite($scrapeini, "CharsBodog", "X#_#X#X#X#X#X#X#_#_##", "i")
	IniWrite($scrapeini, "CharsBodog", "XXXX#___X#__X_#_X__#X___#XXXX#____#____##", "z")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#XXXX_#X___X#X___X#X___X#XXXX_#_____#_____##", "B")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_#__X___#__X___#__X___#__X___#__X___#__X___#__X__X#______#______##", "T.")
	IniWrite($scrapeini, "CharsBodog", "X#_#_##", ".")
	IniWrite($scrapeini, "CharsBodog", "_XXXX#X____#X____#_XXX_#____X#____X#____X#XXXX_#_____#_____##", "S")
	IniWrite($scrapeini, "CharsBodog", "XXXXX___#__X_____#__X__X_X#__X__XX_#__X__X__#__X__X__#__X__X__#__X__X__#________#________##", "Tr")
	IniWrite($scrapeini, "CharsBodog", "XXXXX__#____X__#___X___#___X___#__X____#__X____#_X____X#_X____X#______X#_____X_##", "7,")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_____#__X_______#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X___XXXX#__________#__________##", "Tu")
	IniWrite($scrapeini, "CharsBodog", "XXX#_X_#_X_#_X_#_X_#_X_#_X_#XXX#___#___##", "I")
	IniWrite($scrapeini, "CharsBodog", "XXX#___#___#___#___#___##", "-")
	IniWrite($scrapeini, "CharsBodog", "__XXXX#_X____#X_____#X_____#X_____#X_____#_X____#__XXXX#______#______##", "C")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#X___X#X___X#XXXX_#X____#X____##", "p")
	IniWrite($scrapeini, "CharsBodog", "_XX#X__#X__#XXX#X__#X__#X__#X__#X__#___#___##", "f")
	IniWrite($scrapeini, "CharsBodog", "X___X_____#X___X_____#X___X_XXX_#_X_X_X___X#_X_X_XXXXX#_X_X_X____#__X__X___X#__X___XXX_#__________#__________##", "Ve")
	IniWrite($scrapeini, "CharsBodog", "X___X#X___X#X___X#_X_X_#_X_X_#_X_X_#__X__#__X__#_____#_____##", "V")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXX_#X____#X____#X____#XXXXX#_____#_____##", "E")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_____#X_________#X_____XXX_#XXXXX____X#X_____XXXX#X____X___X#X____X___X#X_____XXXX#__________#__________##", "Fa")
	IniWrite($scrapeini, "CharsBodog", "X___X_____#X___X_____#_X_X__XXX_#_X_X_____X#__X___XXXX#__X__X___X#__X__X___X#__X___XXXX#__________#__________##", "Ya")
	IniWrite($scrapeini, "CharsBodog", "X___X___X#X___X___X#X___X___X#_X_X_X_X_#_X_X_X_X_#_X_X_X_X_#__X___X__#__X___X__#_________#_________##", "W")
	IniWrite($scrapeini, "CharsBodog", "X#X#_#_##", ".")
	IniWrite($scrapeini, "CharsBodog", "X_________#X_________#X_________#X__X__XXX_#X_X__X___X#XX___XXXXX#X_X__X____#X__X_X___X#X___X_XXX_#__________#__________##", "ke")
	IniWrite($scrapeini, "CharsBodog", "X_________#X_________#X_________#X__X__XXX_#X_X______X#XX____XXXX#X_X__X___X#X__X_X___X#X___X_XXXX#__________#__________##", "ka")
	IniWrite($scrapeini, "CharsBodog", "X___X_____#X___X_____#X___X_XXX_#_X_X_X___X#_X_X_X___X#_X_X_X___X#__X__X___X#__X___XXX_#__________#__________##", "Vo")
	IniWrite($scrapeini, "CharsBodog", "X_____#X____X#X_____#X__X_X#X_X__X#XX___X#X_X__X#X__X_X#X___XX#______#______##", "ki")
	IniWrite($scrapeini, "CharsBodog", "_X#__#XX#_X#_X#_X#_X#_X#_X#X_##", "j")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#X__X_#X_X__#XX___#X_X__#X__X_#X___X#_____#_____##", "k")
	IniWrite($scrapeini, "CharsBodog", "X_________#X_________#X_________#X__X_X___X#X_X__X___X#XX___X___X#X_X__X___X#X__X_X___X#X___X_XXXX#__________#__________##", "ku")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_____#__X_______#__X___XXX_#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X___XXX_#__________#__________##", "To")
	IniWrite($scrapeini, "CharsBodog", "__XXXX#_X____#X_____#X_____#X_____#X_____#_X____#__XXXX##", "C")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#X___X#_XXX_##", "o")
	IniWrite($scrapeini, "CharsBodog", "X#_#X#X#X#X#X#X##", "i")
	IniWrite($scrapeini, "CharsBodog", "XXX_XX_#X__X__X#X__X__X#X__X__X#X__X__X#X__X__X##", "m")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#XXXX_##", "b")
	IniWrite($scrapeini, "CharsBodog", "X_X#XX_#X__#X__#X__#X__##", "r")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#____X#_XXXX#X___X#X___X#_XXXX##", "a")
	IniWrite($scrapeini, "CharsBodog", "_X_#XX_#_X_#_X_#_X_#_X_#_X_#XXX##", "1")
	IniWrite($scrapeini, "CharsBodog", "__X__#__X__#_XXXX#X_X__#X_X__#X_X__#X_X__#_XXXX##", "c")
	IniWrite($scrapeini, "CharsBodog", "__X#__X#__X#_X_#_X_#_X_#_X_#_X_#X__##", "/")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#____X#___X_#__X__#_X___#X____#XXXXX##", "2")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXXX#X____#X____#X____#X____##", "F")
	IniWrite($scrapeini, "CharsBodog", "X___X#X___X#X___X#X___X#X___X#_XXXX##", "u")
	IniWrite($scrapeini, "CharsBodog", "X#X#X#X#X#X#X#X#X##", "l")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#_XXXX#____X#___X_#_XX__##", "9")
	IniWrite($scrapeini, "CharsBodog", "XX___X#XX___X#X_X__X#X_X__X#X__X_X#X__X_X#X___XX#X___XX##", "N")
	IniWrite($scrapeini, "CharsBodog", "X___#X___#X___#X___#X___#X___#X___#XXXX##", "L")
	IniWrite($scrapeini, "CharsBodog", "_XX___X___#X__X__X___#X__X_X____#_XX__X____#____X__XX_#____X_X__X#___X__X__X#___X___XX_##", "%")
	IniWrite($scrapeini, "CharsBodog", "XXX_XX_#X__X__X#X__X__X#X__X__X#X__X__X#X__X__X#_______#_______##", "m")
	IniWrite($scrapeini, "CharsBodog", "__XXXX#_X____#X_____#X_____#X__XXX#X____X#_X___X#__XXXX#______#______##", "G")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#X___X#_____#_____##", "h")
	IniWrite($scrapeini, "CharsBodog", "X___X#X__X_#X_X__#XX___#XX___#X_X__#X__X_#X___X#_____#_____##", "K")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#X___X#XXXX_#X____#X____#X____#_____#_____##", "P")
	IniWrite($scrapeini, "CharsBodog", "____X#____X#____X#_XXXX#X___X#X___X#X___X#X___X#_XXXX#_____#_____##", "d")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#__X__#__X__#__X__#__X__#__X__#__X__#__X__#_____#_____##", "T")
	IniWrite($scrapeini, "CharsBodog", "_X#_X#_X#X_##", ",")
	IniWrite($scrapeini, "CharsBodog", "X___X#_X_X_#__X__#__X__#_X_X_#X___X#_____#_____##", "x")
	IniWrite($scrapeini, "CharsBodog", "X___X#X___X#_X_X_#_X_X_#__X__#__X__#_____#_____##", "v")
	IniWrite($scrapeini, "CharsBodog", "X#_#X#X#X#X#X#X#_#_##", "i")
	IniWrite($scrapeini, "CharsBodog", "XXXX#___X#__X_#_X__#X___#XXXX#____#____##", "z")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#XXXX_#X___X#X___X#X___X#XXXX_#_____#_____##", "B")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_#__X___#__X___#__X___#__X___#__X___#__X___#__X__X#______#______##", "T.")
	IniWrite($scrapeini, "CharsBodog", "X#_#_##", ".")
	IniWrite($scrapeini, "CharsBodog", "_XXXX#X____#X____#_XXX_#____X#____X#____X#XXXX_#_____#_____##", "S")
	IniWrite($scrapeini, "CharsBodog", "XXXXX___#__X_____#__X__X_X#__X__XX_#__X__X__#__X__X__#__X__X__#__X__X__#________#________##", "Tr")
	IniWrite($scrapeini, "CharsBodog", "XXXXX__#____X__#___X___#___X___#__X____#__X____#_X____X#_X____X#______X#_____X_##", "7,")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_____#__X_______#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X___XXXX#__________#__________##", "Tu")
	IniWrite($scrapeini, "CharsBodog", "XXX#_X_#_X_#_X_#_X_#_X_#_X_#XXX#___#___##", "I")
	IniWrite($scrapeini, "CharsBodog", "XXX#___#___#___#___#___##", "-")
	IniWrite($scrapeini, "CharsBodog", "__XXXX#_X____#X_____#X_____#X_____#X_____#_X____#__XXXX#______#______##", "C")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#X___X#X___X#XXXX_#X____#X____##", "p")
	IniWrite($scrapeini, "CharsBodog", "_XX#X__#X__#XXX#X__#X__#X__#X__#X__#___#___##", "f")
	IniWrite($scrapeini, "CharsBodog", "X___X_____#X___X_____#X___X_XXX_#_X_X_X___X#_X_X_XXXXX#_X_X_X____#__X__X___X#__X___XXX_#__________#__________##", "Ve")
	IniWrite($scrapeini, "CharsBodog", "X___X#X___X#X___X#_X_X_#_X_X_#_X_X_#__X__#__X__#_____#_____##", "V")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXX_#X____#X____#X____#XXXXX#_____#_____##", "E")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_____#X_________#X_____XXX_#XXXXX____X#X_____XXXX#X____X___X#X____X___X#X_____XXXX#__________#__________##", "Fa")
	IniWrite($scrapeini, "CharsBodog", "X___X_____#X___X_____#_X_X__XXX_#_X_X_____X#__X___XXXX#__X__X___X#__X__X___X#__X___XXXX#__________#__________##", "Ya")
	IniWrite($scrapeini, "CharsBodog", "X___X___X#X___X___X#X___X___X#_X_X_X_X_#_X_X_X_X_#_X_X_X_X_#__X___X__#__X___X__#_________#_________##", "W")
	IniWrite($scrapeini, "CharsBodog", "X#X#_#_##", ".")
	IniWrite($scrapeini, "CharsBodog", "X_________#X_________#X_________#X__X__XXX_#X_X__X___X#XX___XXXXX#X_X__X____#X__X_X___X#X___X_XXX_#__________#__________##", "ke")
	IniWrite($scrapeini, "CharsBodog", "X_________#X_________#X_________#X__X__XXX_#X_X______X#XX____XXXX#X_X__X___X#X__X_X___X#X___X_XXXX#__________#__________##", "ka")
	IniWrite($scrapeini, "CharsBodog", "X___X_____#X___X_____#X___X_XXX_#_X_X_X___X#_X_X_X___X#_X_X_X___X#__X__X___X#__X___XXX_#__________#__________##", "Vo")
	IniWrite($scrapeini, "CharsBodog", "X_____#X____X#X_____#X__X_X#X_X__X#XX___X#X_X__X#X__X_X#X___XX#______#______##", "ki")
	IniWrite($scrapeini, "CharsBodog", "_X#__#XX#_X#_X#_X#_X#_X#_X#X_##", "j")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#X__X_#X_X__#XX___#X_X__#X__X_#X___X#_____#_____##", "k")
	IniWrite($scrapeini, "CharsBodog", "X_________#X_________#X_________#X__X_X___X#X_X__X___X#XX___X___X#X_X__X___X#X__X_X___X#X___X_XXXX#__________#__________##", "ku")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_____#__X_______#__X___XXX_#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X___XXX_#__________#__________##", "To")
	IniWrite($scrapeini, "CharsBodog", "__XXXX#_X____#X_____#X_____#X_____#X_____#_X____#__XXXX##", "C")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#X___X#_XXX_##", "o")
	IniWrite($scrapeini, "CharsBodog", "X#_#X#X#X#X#X#X##", "i")
	IniWrite($scrapeini, "CharsBodog", "XXX_XX_#X__X__X#X__X__X#X__X__X#X__X__X#X__X__X##", "m")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#XXXX_##", "b")
	IniWrite($scrapeini, "CharsBodog", "X_X#XX_#X__#X__#X__#X__##", "r")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#____X#_XXXX#X___X#X___X#_XXXX##", "a")
	IniWrite($scrapeini, "CharsBodog", "_X_#XX_#_X_#_X_#_X_#_X_#_X_#XXX##", "1")
	IniWrite($scrapeini, "CharsBodog", "__X__#__X__#_XXXX#X_X__#X_X__#X_X__#X_X__#_XXXX##", "c")
	IniWrite($scrapeini, "CharsBodog", "__X#__X#__X#_X_#_X_#_X_#_X_#_X_#X__##", "/")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#____X#___X_#__X__#_X___#X____#XXXXX##", "2")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXXX#X____#X____#X____#X____##", "F")
	IniWrite($scrapeini, "CharsBodog", "X___X#X___X#X___X#X___X#X___X#_XXXX##", "u")
	IniWrite($scrapeini, "CharsBodog", "X#X#X#X#X#X#X#X#X##", "l")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#_XXXX#____X#___X_#_XX__##", "9")
	IniWrite($scrapeini, "CharsBodog", "XX___X#XX___X#X_X__X#X_X__X#X__X_X#X__X_X#X___XX#X___XX##", "N")
	IniWrite($scrapeini, "CharsBodog", "X___#X___#X___#X___#X___#X___#X___#XXXX##", "L")
	IniWrite($scrapeini, "CharsBodog", "_XX___X___#X__X__X___#X__X_X____#_XX__X____#____X__XX_#____X_X__X#___X__X__X#___X___XX_##", "%")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#X___X#X___X#X___X#_XXX_#_____#_____#_____#_____##", "0")
	IniWrite($scrapeini, "CharsBodog", "____X#____X#___X_#___X_#__X__#__X__#_X___#_X___#X____#X____#_____#_____#_____##", "/")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#_XXXX#____X#___X_#_XX__#_____#_____#_____#_____##", "9")
	IniWrite($scrapeini, "CharsBodog", "XXXXXXX#___X___#___X___#___X___#___X___#___X___#___X___#___X___#_______#_______#_______#_______##", "T")
	IniWrite($scrapeini, "CharsBodog", "X#_#_#X#X#X#X#X#X#_#_#_#_##", "i")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X____#X____#X___X#_XXX_#_____#_____#_____#_____##", "c")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#X___X#X__X_#X_X__#XXX__#X__X_#X___X#_____#_____#_____#_____##", "k")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#XXXXX#X____#X___X#_XXX_#_____#_____#_____#_____##", "e")
	IniWrite($scrapeini, "CharsBodog", "_X__#_X__#XXXX#_X__#_X__#_X__#_X__#__XX#____#____#____#____##", "t")
	IniWrite($scrapeini, "CharsBodog", "XX___X#XX___X#X_X__X#X_X__X#X__X_X#X__X_X#X___XX#X___XX#______#______#______#______##", "N")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#X____#X____#X____#X____#XXXXX#_____#_____#_____#_____##", "L")
	IniWrite($scrapeini, "CharsBodog", "__XX_#_X___#X____#XXXX_#X___X#X___X#X___X#_XXX_#_____#_____#_____#_____##", "6")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#____X#___X_#__X__#_X___#X____#XXXXX#_____#_____#_____#_____##", "2")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#____X#___X_#___X_#__X__#__X__#_X___#_X___#_____#_____#_____#_____##", "7")
	IniWrite($scrapeini, "CharsBodog", "__X__#__X__#_XXXX#X_X__#X_X__#_XXX_#__X_X#__X_X#XXXX_#__X__#__X__#_____#_____##", "$")
	IniWrite($scrapeini, "CharsBodog", "__X__#XXX__#__X__#__X__#__X__#__X__#__X__#XXXXX#_____#_____#_____#_____##", "1")
	IniWrite($scrapeini, "CharsBodog", "___X___#___X___#___X___#XXXXXXX#___X___#___X___#___X___#_______#_______#_______#_______##", "+")
	IniWrite($scrapeini, "CharsBodog", "X#X#_#_#_#_##", ".")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#X___X#X___X#X___X#_XXX_#_____#_____#_____##", "0")
	IniWrite($scrapeini, "CharsBodog", "____X#____X#___X_#___X_#__X__#__X__#_X___#_X___#X____#X____#_____#_____##", "/")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#_XXXX#____X#___X_#_XX__#_____#_____#_____##", "9")
	IniWrite($scrapeini, "CharsBodog", "XXXXXXX#___X___#___X___#___X___#___X___#___X___#___X___#___X___#_______#_______#_______##", "T")
	IniWrite($scrapeini, "CharsBodog", "X#_#_#X#X#X#X#X#X#_#_#_##", "i")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X____#X____#X___X#_XXX_#_____#_____#_____##", "c")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#X___X#X__X_#X_X__#XXX__#X__X_#X___X#_____#_____#_____##", "k")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#XXXXX#X____#X___X#_XXX_#_____#_____#_____##", "e")
	IniWrite($scrapeini, "CharsBodog", "_X__#_X__#XXXX#_X__#_X__#_X__#_X__#__XX#____#____#____##", "t")
	IniWrite($scrapeini, "CharsBodog", "XX___X#XX___X#X_X__X#X_X__X#X__X_X#X__X_X#X___XX#X___XX#______#______#______##", "N")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#X____#X____#X____#X____#XXXXX#_____#_____#_____##", "L")
	IniWrite($scrapeini, "CharsBodog", "__XX_#_X___#X____#XXXX_#X___X#X___X#X___X#_XXX_#_____#_____#_____##", "6")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#____X#___X_#__X__#_X___#X____#XXXXX#_____#_____#_____##", "2")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#____X#___X_#___X_#__X__#__X__#_X___#_X___#_____#_____#_____##", "7")
	IniWrite($scrapeini, "CharsBodog", "__X__#__X__#_XXXX#X_X__#X_X__#_XXX_#__X_X#__X_X#XXXX_#__X__#__X__#_____##", "$")
	IniWrite($scrapeini, "CharsBodog", "__X__#XXX__#__X__#__X__#__X__#__X__#__X__#XXXXX#_____#_____#_____##", "1")
	IniWrite($scrapeini, "CharsBodog", "___X___#___X___#___X___#XXXXXXX#___X___#___X___#___X___#_______#_______#_______##", "+")
	IniWrite($scrapeini, "CharsBodog", "X#X#_#_#_##", ".")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#____X#__XX_#____X#____X#X___X#_XXX_#_____#_____#_____##", "3")
	IniWrite($scrapeini, "CharsBodog", "_XXXX#X___X#X___X#X___X#X___X#_XXXX#____X#_XXX_#_____##", "g")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#X___X#_____#_____#_____##", "h")
	IniWrite($scrapeini, "CharsBodog", "X#X#X#X#X#X#X#X#X#_#_#_##", "l")
	IniWrite($scrapeini, "CharsBodog", "X___X#_X_X_#_X_X_#_X_X_#__X__#__X__#__X__#_X___#_____##", "y")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXX_#____X#____X#X___X#_XXX_#_____#_____#_____##", "5")
	IniWrite($scrapeini, "CharsBodog", "X____X#X___X_#X__X__#X_X___#XXX___#X__X__#X___X_#X____X#______#______#______##", "K")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#X___X#XXXX_#X____#X____#X____#_____#_____#_____##", "P")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#X____X#X_____#_XX___#___XX_#_____X#X____X#_XXXX_#______#______#______##", "S")
	IniWrite($scrapeini, "CharsBodog", "__XXX__#_X___X_#X_____X#X_____X#X_____X#X_____X#_X___X_#__XXX__#____X__#_____XX#_______##", "Q")
	IniWrite($scrapeini, "CharsBodog", "X___X#X___X#X___X#X___X#X___X#_XXXX#_____#_____#_____##", "u")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#____X#_XXXX#X___X#X___X#_XXXX#_____#_____#_____##", "a")
	IniWrite($scrapeini, "CharsBodog", "__XX#_X__#_X__#XXXX#_X__#_X__#_X__#_X__#_X__#____#____#____##", "f")
	IniWrite($scrapeini, "CharsBodog", "X_XX#XX__#X___#X___#X___#X___#____#____#____##", "r")
	IniWrite($scrapeini, "CharsBodog", "___XXXXXXX____#______X_______#______X___XXX_#______X______X#XXX___X___XXXX#______X__X___X#______X__X___X#______X___XXXX#______________#______________#______________##", "-Ta")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#XXXX_#_____#_____#_____##", "b")
	IniWrite($scrapeini, "CharsBodog", "_XX____#X__X___#X__X___#_XX__X_#X__X_X_#X___X__#X___XX_#_XXX__X#_______#_______#_______##", "&")
	IniWrite($scrapeini, "CharsBodog", "__XXXX_#_X____X#X______#X______#X___XXX#X_____X#_X____X#__XXXX_#_______#_______#_______##", "G")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#X___X#X___X#_XXX_#_____#_____#_____##", "o")
	IniWrite($scrapeini, "CharsBodog", "__X__#XXX__#__X__#__X__#__X__#__X__#__X__#XXXXX#_____#_____##", "1")
	IniWrite($scrapeini, "CharsBodog", "____X#____X#___X_#___X_#__X__#__X__#_X___#_X___#X____#X____#_____##", "/")
	IniWrite($scrapeini, "CharsBodog", "___X___#___X___#___X___#XXXXXXX#___X___#___X___#___X___#_______#_______##", "+")
	IniWrite($scrapeini, "CharsBodog", "____X_#___XX_#__X_X_#_X__X_#X___X_#XXXXXX#____X_#____X_#______#______##", "4")
	IniWrite($scrapeini, "CharsBodog", "X#X#X#_#_#_#_#_#_#_#_##", "'")
	IniWrite($scrapeini, "CharsBodog", "XXXX_XXX_#X___X___X#X___X___X#X___X___X#X___X___X#X___X___X#_________#_________##", "m")
	IniWrite($scrapeini, "CharsBodog", "XXXXXXX_____#___X________#___X___X___X#___X___X___X#___X___X___X#___X___X___X#___X___X___X#___X____XXXX#____________#____________##", "Tu")
	IniWrite($scrapeini, "CharsBodog", "X_XX#XX__#X___#X___#X___#X___#____#____##", "r")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#X____#X____#X____#X____#XXXXX#_____#_____##", "L")
	IniWrite($scrapeini, "CharsBodog", "XXXXXXX____#___X_______#___X___X_XX#___X___XX__#___X___X___#___X___X___#___X___X___#___X___X___#___________#___________##", "Tr")
	IniWrite($scrapeini, "CharsBodog", "X#_#_#X#X#X#X#X#X#_#_##", "i")
	IniWrite($scrapeini, "CharsBodog", "X____X#X____X#X____X#X____X#X____X#X____X#X____X#_XXXX_#______#______##", "U")
	IniWrite($scrapeini, "CharsBodog", "XXXXX__#X____X_#X_____X#X_____X#X_____X#X_____X#X____X_#XXXXX__#_______#_______##", "D")
	IniWrite($scrapeini, "CharsBodog", "X___X#_X_X_#_X_X_#_X_X_#__X__#__X__#__X__#_X___##", "y")
	IniWrite($scrapeini, "CharsBodog", "__XXXX_#_X____X#X______#X______#X______#X______#_X____X#__XXXX_#_______#_______##", "C")
	IniWrite($scrapeini, "CharsBodog", "XXXX__#X___X_#X___X_#XXXXX_#X____X#X____X#X____X#XXXXX_#______#______##", "B")
	IniWrite($scrapeini, "CharsBodog", "__XXX__#_X___X_#X_____X#X_____X#X_____X#X_____X#_X___X_#__XXX__#_______#_______##", "O")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXXX#X____#X____#X____#XXXXX#_____#_____##", "E")
	IniWrite($scrapeini, "CharsBodog", "_X__#_X__#XXXX#_X__#_X__#_X__#_X__#__XX#____#____##", "t")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#X____X#X_____#_XX___#___XX_#_____X#X____X#_XXXX_#______#______##", "S")
	IniWrite($scrapeini, "CharsBodog", "X____X#X___X_#X__X__#X_X___#XXX___#X__X__#X___X_#X____X#______#______##", "K")
	IniWrite($scrapeini, "CharsBodog", "__XX#_X__#_X__#XXXX#_X__#_X__#_X__#_X__#_X__#____#____##", "f")
	IniWrite($scrapeini, "CharsBodog", "__XXX__#_X___X_#X_____X#X_____X#X_____X#X_____X#_X___X_#__XXX__#____X__#_____XX##", "Q")
	IniWrite($scrapeini, "CharsBodog", "_____X__#_____X__#X_XXXXXX#XX___X__#X____X__#X____X__#X____X__#X_____XX#________#________##", "rt")
	IniWrite($scrapeini, "CharsBodog", "______XX#_____X__#_____X__#X_XXXXXX#XX___X__#X____X__#X____X__#X____X__#X____X__#________#________##", "rf")
	IniWrite($scrapeini, "CharsBodog", "___XXXXXXX____#______X_______#______X___XXX_#______X______X#XXX___X___XXXX#______X__X___X#______X__X___X#______X___XXXX#______________#______________##", "-Ta")
	IniWrite($scrapeini, "CharsBodog", "_XX____#X__X___#X__X___#_XX__X_#X__X_X_#X___X__#X___XX_#_XXX__X#_______#_______##", "&")
	IniWrite($scrapeini, "CharsBodog", "__XXXX_#_X____X#X______#X______#X___XXX#X_____X#_X____X#__XXXX_#_______#_______##", "G")
	IniWrite($scrapeini, "CharsBodog", "__XX__#__XX__#_X__X_#_X__X_#_X__X_#XXXXXX#X____X#X____X#______#______#______##", "A")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#X___X#X___X#X___X#_____#_____#_____##", "n")
	IniWrite($scrapeini, "CharsBodog", "XXXX__#X___X_#X___X_#XXXXX_#X____X#X____X#X____X#XXXXX_#______#______#______##", "B")
	IniWrite($scrapeini, "CharsBodog", "XXXXX__#X____X_#X_____X#X_____X#X_____X#X_____X#X____X_#XXXXX__#_______#_______#_______##", "D")
	IniWrite($scrapeini, "CharsBodog", "__XXX__#_X___X_#X_____X#X_____X#X_____X#X_____X#_X___X_#__XXX__#_______#_______#_______##", "O")
	IniWrite($scrapeini, "CharsBodog", "XXXXXXX_____#___X________#___X____XXX_#___X___X___X#___X___X___X#___X___X___X#___X___X___X#___X____XXX_#____________#____________#____________##", "To")
	IniWrite($scrapeini, "CharsBodog", "XXXX_XXX_#X___X___X#X___X___X#X___X___X#X___X___X#X___X___X#_________#_________#_________##", "m")
	IniWrite($scrapeini, "CharsBodog", "_____X__#_____X__#X_XXXXXX#XX___X__#X____X__#X____X__#X____X__#X_____XX#________#________#________##", "rt")
	IniWrite($scrapeini, "CharsBodog", "______XX#_____X__#_____X__#X_XXXXXX#XX___X__#X____X__#X____X__#X____X__#X____X__#________#________#________##", "rf")
	IniWrite($scrapeini, "CharsBodog", "X____X#X____X#X____X#XXXXXX#X____X#X____X#X____X#X____X#______#______#______##", "H")
	IniWrite($scrapeini, "CharsBodog", "XXXX_#X___X#X___X#X___X#X___X#XXXX_#X____#X____#_____##", "p")
	IniWrite($scrapeini, "CharsBodog", "XXXXXXX_____#___X________#___X___X___X#___X___X___X#___X___X___X#___X___X___X#___X___X___X#___X____XXXX#____________#____________#____________##", "Tu")
	IniWrite($scrapeini, "CharsBodog", "__X#_X_#_X_#X__#X__#X__#X__#X__#_X_#_X_#__X#___##", "(")
	IniWrite($scrapeini, "CharsBodog", "__XXXX_#_X____X#X______#X______#X______#X______#_X____X#__XXXX_#_______#_______#_______##", "C")
	IniWrite($scrapeini, "CharsBodog", "_XXX#X___#XX__#__XX#___X#XXX_#____#____#____##", "s")
	IniWrite($scrapeini, "CharsBodog", "X__#_X_#_X_#__X#__X#__X#__X#__X#_X_#_X_#X__#___##", ")")
	IniWrite($scrapeini, "CharsBodog", "_XXX_#X___X#X___X#_XXX_#X___X#X___X#X___X#_XXX_#_____#_____#_____##", "8")
	IniWrite($scrapeini, "CharsBodog", "____X#____X#____X#_XXXX#X___X#X___X#X___X#X___X#_XXXX#_____#_____#_____##", "d")
	IniWrite($scrapeini, "CharsBodog", "X#X#X#_#_#_#_#_#_#_#_#_##", "'")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXX_#X____#X____#X____#X____#_____#_____#_____##", "F")
	IniWrite($scrapeini, "CharsBodog", "X___X#_X_X_#__X__#__X__#_X_X_#X___X#_____#_____#_____##", "x")
	IniWrite($scrapeini, "CharsBodog", "____X_#___XX_#__X_X_#_X__X_#X___X_#XXXXXX#____X_#____X_#______#______#______##", "4")
	IniWrite($scrapeini, "CharsBodog", "X___X___X#X___X___X#_X_X_X_X_#_X_X_X_X_#_X_X_X_X_#_X_X_X_X_#__X___X__#__X___X__#_________#_________#_________##", "W")
	IniWrite($scrapeini, "CharsBodog", "___X__#___X__#_XXXX_#XX_X_X#XX_X__#_XXXX_#__X_XX#X_X_XX#_XXXX_#__X___#__X___#______##", "$")
	IniWrite($scrapeini, "CharsBodog", "_XX_#XXX_#_XX_#_XX_#_XX_#_XX_#_XX_#XXXX#____#____#____##", "1")
	IniWrite($scrapeini, "CharsBodog", "XX#XX#XX#X_#__##", ",")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______#______##", "0")
	IniWrite($scrapeini, "CharsBodog", "_XXXXX_#XX____X#XX_____#XX_____#XX__XXX#XX___XX#XX___XX#_XXXXXX#_______#_______#_______##", "G")
	IniWrite($scrapeini, "CharsBodog", "XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#______#______#______##", "u")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#____XX#_XXXXX#XX__XX#XX__XX#_XXXXX#______#______#______##", "a")
	IniWrite($scrapeini, "CharsBodog", "XX_XX#XXXXX#XX___#XX___#XX___#XX___#_____#_____#_____##", "r")
	IniWrite($scrapeini, "CharsBodog", "XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#______#______#______##", "n")
	IniWrite($scrapeini, "CharsBodog", "_XX__#_XX__#XXXXX#_XX__#_XX__#_XX__#_XX__#__XXX#_____#_____#_____##", "t")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX__XX#XXXXXX#XX____#XX___X#_XXXX_#______#______#______##", "e")
	IniWrite($scrapeini, "CharsBodog", "____XX#____XX#____XX#_XXXXX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#______#______#______##", "d")
	IniWrite($scrapeini, "CharsBodog", "__XX#_XX_#_XX_#XX__#XX__#XX__#XX__#XX__#_XX_#_XX_#__XX#____##", "(")
	IniWrite($scrapeini, "CharsBodog", "_XXXX_#XX___X#XX____#XXXXX_#_XXXXX#____XX#X___XX#_XXXX_#______#______#______##", "S")
	IniWrite($scrapeini, "CharsBodog", "XXXX#____#____#____#____#____#____##", "-")
	IniWrite($scrapeini, "CharsBodog", "XX_____X#XXX___XX#XXXX_XXX#X_XXX_XX#X__X__XX#X_____XX#X_____XX#X_____XX#________#________#________##", "M")
	IniWrite($scrapeini, "CharsBodog", "XX#__#XX#XX#XX#XX#XX#XX#__#__#__##", "i")
	IniWrite($scrapeini, "CharsBodog", "XX#XX#__#__#__##", ".")
	IniWrite($scrapeini, "CharsBodog", "XX___XX#XX___XX#X_X_X_X#X_X_X_X#X__X__X#X__X__X#X_____X#X_____X#_______#_______#_______##", "M")
	IniWrite($scrapeini, "CharsBodog", "X#X#_#_#X#X#_#_#_##", ":")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXXX#X____#X____#X____#XXXXX#_____#_____#_____##", "E")
	IniWrite($scrapeini, "CharsBodog", "_XX___X___#X__X__X___#X__X_X____#_XX__X____#____X__XX_#____X_X__X#___X__X__X#___X___XX_#__________#__________#__________##", "%")
	IniWrite($scrapeini, "CharsBodog", "_XXXX#X___X#X___X#X___X#X___X#_XXXX#____X#____X#_____##", "q")
	IniWrite($scrapeini, "CharsBodog", "_X___X__#_X___X__#XXXXXXXX#_X___X__#_X___X__#_X___X__#_X___X__#__XX__XX#________#________#________##", "tt")
	IniWrite($scrapeini, "CharsBodog", "X__X__X#X__X__X#X_X_X_X#X_X_X_X#_X___X_#_X___X_#_______#_______#_______##", "w")
	IniWrite($scrapeini, "CharsBodog", "__XX__XX#_X___X__#_X___X__#XXXXXXXX#_X___X__#_X___X__#_X___X__#_X___X__#_X___X__#________#________#________##", "ff")
	IniWrite($scrapeini, "CharsBodog", "X____#X____#X____#X___X#X__X_#X_X__#XXX__#X__X_#X___X#_____#_____##", "k")
	IniWrite($scrapeini, "CharsBodog", "_XXXX#X___X#X___X#X___X#X___X#_XXXX#____X#____X##", "q")
	IniWrite($scrapeini, "CharsBodog", "_X___X__#_X___X__#XXXXXXXX#_X___X__#_X___X__#_X___X__#_X___X__#__XX__XX#________#________##", "tt")
	IniWrite($scrapeini, "CharsBodog", "X__X__X#X__X__X#X_X_X_X#X_X_X_X#_X___X_#_X___X_#_______#_______##", "w")
	IniWrite($scrapeini, "CharsBodog", "__XX__XX#_X___X__#_X___X__#XXXXXXXX#_X___X__#_X___X__#_X___X__#_X___X__#_X___X__#________#________##", "ff")
	IniWrite($scrapeini, "CharsBodog", "XXXXX#X____#X____#XXXX_#X____#X____#X____#X____#_____#_____##", "F")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX#X____#X____#XXXXX#X____#X____#X____#X____#_____#_____##", "F")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#XXXXX#X____#X___X#_XXX_#_____#_____##", "e")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#X___X#X___X#_XXXX#____X#___X_#_XX__#_____#_____##", "9")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX#X____#X____#XXXX_#____X#____X#X___X#_XXX_#_____#_____##", "5")
	IniWrite($scrapeini, "CharsIPoker", "_X_#XX_#_X_#_X_#_X_#_X_#_X_#XXX#___#___##", "1")
	IniWrite($scrapeini, "CharsIPoker", "X_X#XX_#X__#X__#X__#X__#___#___##", "r")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#____X#__XX_#____X#____X#X___X#_XXX_#_____#_____##", "3")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX#____X#___X_#___X_#__X__#__X__#_X___#_X___#_____#_____##", "7")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#____X#___X_#__X__#_X___#X____#XXXXX#_____#_____##", "2")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX#XX___#XX___#XXXXX#XX___#XX___#XX___#XX___#_____#_____##", "F")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX_#XX__XX#XXXXXX#XX____#XX____#_XXXXX#______#______##", "e")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX_#XX__XX#XX__XX#XX__XX#_XXXXX#____XX#____XX#_XXXX_#______#______##", "9")
	IniWrite($scrapeini, "CharsIPoker", "XXXXXX#____XX#___XX_#___XX_#___XX_#__XX__#__XX__#__XX__#______#______##", "7")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX_#XX__XX#____XX#__XXX_#____XX#____XX#XX__XX#_XXXX_#______#______##", "3")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX_#XX__XX#XX__XX#_XXXX_#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "8")
	IniWrite($scrapeini, "CharsIPoker", "XX_X#XXXX#XX__#XX__#XX__#XX__#____#____##", "r")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX_#XX____#XX____#XXXXX_#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "6")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "0")
	IniWrite($scrapeini, "CharsIPoker", "____X_#___XX_#__XXX_#_X_XX_#X__XX_#XXXXXX#___XX_#___XX_#______#______##", "4")
	IniWrite($scrapeini, "CharsIPoker", "_XXXXX#_XX___#_XX___#_XXXX_#____XX#____XX#XX__XX#_XXXX_#______#______##", "5")
	IniWrite($scrapeini, "CharsIPoker", "_XX_#XXX_#_XX_#_XX_#_XX_#_XX_#_XX_#XXXX#____#____##", "1")
	IniWrite($scrapeini, "CharsIPoker", "__X__#__X__#_XXXX#X_X__#X_X__#_XXX_#__X_X#__X_X#XXXX_#__X__#__X__##", "$")
	IniWrite($scrapeini, "CharsIPoker", "___X_#__XX_#_X_X_#X__X_#XXXXX#___X_#___X_#___X_#_____#_____##", "4")
	IniWrite($scrapeini, "CharsIPoker", "__XX_#_X___#X____#XXXX_#X___X#X___X#X___X#_XXX_#_____#_____##", "6")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#X___X#X___X#X___X#X___X#X___X#_XXX_#_____#_____##", "0")
	IniWrite($scrapeini, "CharsIPoker", "___X__#___X__#_XXXX_#XX_X_X#XX_X__#_XXXX_#__X_XX#X_X_XX#_XXXX_#__X___#__X___##", "$")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX_#XX__XX#____XX#___XX_#__XX__#_XX___#XX____#XXXXXX#______#______##", "2")
	IniWrite($scrapeini, "CharsIPoker", "__X__#__X__#_XXXX#X_X__#X_X__#X_X__#X_X__#_XXXX#__X__#__X__##", "c")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#X___X#_XXX_#X___X#X___X#X___X#_XXX_#_____#_____##", "8")
	IniWrite($scrapeini, "CharsIPoker", "______#_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "0")
	IniWrite($scrapeini, "CharsIPoker", "_______#_XXXX__#XX__XX_#XX__XX_#XX__XX_#XX__XX_#XX__XX_#XX__XX_#_XXXX__#_______#_______##", "0")
	IniWrite($scrapeini, "CharsIPoker", "____X#____X#___X_#___X_#__X__#__X__#__X__#_X___#_X___#X____#X____##", "/")
	IniWrite($scrapeini, "CharsIPoker", "___X_#___X_#_XXXX#XX_X_#XX_X_#XX_X_#XX_X_#_XXXX#___X_#___X_##", "c")
	IniWrite($scrapeini, "CharsIPoker", "_XXXXX#XX____#XX____#XXXXX_#_XXXXX#____XX#____XX#XXXXX_#______#______##", "S")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XXXXX_#XX____#XX____##", "p")
	IniWrite($scrapeini, "CharsIPoker", "XX___XX#XX___XX#XX___XX#XXXXXXX#XX___XX#XX___XX#XX___XX#XX___XX#_______#_______##", "H")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#______#______##", "n")
	IniWrite($scrapeini, "CharsIPoker", "____XX#____XX#____XX#_XXXXX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#______#______##", "d")
	IniWrite($scrapeini, "CharsIPoker", "XXXXXX#__XX__#__XX__#__XX__#__XX__#__XX__#__XX__#__XX__#______#______##", "T")
	IniWrite($scrapeini, "CharsIPoker", "XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#______#______##", "u")
	IniWrite($scrapeini, "CharsIPoker", "XX____#XX____#XX____#XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XXXXX_#______#______##", "b")
	IniWrite($scrapeini, "CharsIPoker", "XX__#XX__#XXXX#XX__#XX__#XX__#XX__#_XXX#____#____##", "t")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX_#____XX#_XXXXX#XX__XX#XX__XX#_XXXXX#______#______##", "a")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX#XX___#XXXX_#_XXXX#___XX#XXXX_#_____#_____##", "s")
	IniWrite($scrapeini, "CharsIPoker", "XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#_XXXXX_#_______#_______##", "U")
	IniWrite($scrapeini, "CharsIPoker", "XXXX#____#____#____#____#____##", "-")
	IniWrite($scrapeini, "CharsIPoker", "__XXX__#__XXX__#_XX_XX_#_XX_XX_#_XX_XX_#XXXXXXX#XX___XX#XX___XX#_______#_______##", "A")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX_#XX__XX#XX__XX#XX__XX#XX__XX#_XXXX_#______#______##", "o")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX__#XX__XX_#XX___XX#XX___XX#XX___XX#XX___XX#XX__XX_#XXXXX__#_______#_______##", "D")
	IniWrite($scrapeini, "CharsIPoker", "XX#XX#XX#XX#XX#XX#XX#XX#XX#__#__##", "l")
	IniWrite($scrapeini, "CharsIPoker", "XX___X#XXX__X#XXXX_X#X_XXXX#X__XXX#X___XX#X____X#X____X#______#______##", "N")
	IniWrite($scrapeini, "CharsIPoker", "XX____#XX____#XX____#XXXXX_#XX__XX#XX__XX#XX__XX#XX__XX#XX__XX#______#______##", "h")
	IniWrite($scrapeini, "CharsIPoker", "XX_____XX#XXX___XXX#XXXX_XXXX#X_XXXX_XX#X__XX__XX#X______XX#X______XX#X______XX#_________#_________##", "M")
	IniWrite($scrapeini, "CharsIPoker", "XX#XX#__#__##", ".")
	IniWrite($scrapeini, "CharsIPoker", "XX#__#XX#XX#XX#XX#XX#XX#__#__##", "i")
	IniWrite($scrapeini, "CharsIPoker", "_XXXXX#XX__XX#XX__XX#XX__XX#XX__XX#_XXXXX#____XX#_XXXX_##", "g")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX_#XX__XX#XX__XX#XX__XX#XXXXX_#XX____#XX____#XX____#______#______##", "P")
	IniWrite($scrapeini, "CharsIPoker", "XX___#XX___#XX___#XX___#XX___#XX___#XX___#XXXXX#_____#_____##", "L")
	IniWrite($scrapeini, "CharsIPoker", "_XXXXX_#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#_XXXXX_#_______#_______##", "O")
	IniWrite($scrapeini, "CharsIPoker", "XXXX#_XX_#_XX_#_XX_#_XX_#_XX_#_XX_#XXXX#____#____##", "I")
	IniWrite($scrapeini, "CharsIPoker", "_XXXXX_#XX___XX#XX___XX#XX___XX#XX___XX#XX___XX#XX___X_#_XXXXX_#_______#_______##", "O")
	IniWrite($scrapeini, "CharsIPoker", "X____X#X____X#X____X#XXXXXX#X____X#X____X#X____X#X____X#______#______##", "H")
	IniWrite($scrapeini, "CharsIPoker", "XXXX_#X___X#X___X#X___X#X___X#X___X#_____#_____##", "n")
	IniWrite($scrapeini, "CharsIPoker", "__X#_X_#_X_#X__#X__#X__#X__#X__#_X_#_X_#__X##", "(")
	IniWrite($scrapeini, "CharsIPoker", "XXXX__#X___X_#X___X_#X___X_#XXXX__#X__X__#X___X_#X____X#______#______##", "R")
	IniWrite($scrapeini, "CharsIPoker", "X___X#X___X#_X_X_#_X_X_#__X__#__X__#_X___#_X___##", "y")
	IniWrite($scrapeini, "CharsIPoker", "X#X#X#X#X#X#X#X#X#_#_##", "l")
	IniWrite($scrapeini, "CharsIPoker", "_XXX#___X#___X#___X#___X#___X#___X#XXX_#____#____##", "J")
	IniWrite($scrapeini, "CharsIPoker", "_XXX#X___#X___#X___#X___#_XXX#____#____##", "c")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#X___X#X___X#X___X#_XXX_#_____#_____##", "o")
	IniWrite($scrapeini, "CharsIPoker", "X__#_X_#_X_#__X#__X#__X#__X#__X#_X_#_X_#X__##", ")")
	IniWrite($scrapeini, "CharsIPoker", "__XX__#__XX__#_X__X_#_X__X_#_X__X_#XXXXXX#X____X#X____X#______#______##", "A")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX#X___X#X___X#X___X#X___X#_XXXX#____X#_XXX_##", "g")
	IniWrite($scrapeini, "CharsIPoker", "_XXX#X___#XX__#__XX#___X#XXX_#____#____##", "s")
	IniWrite($scrapeini, "CharsIPoker", "__X#__X#__X#_X_#_X_#_X_#_X_#_X_#X__#X__#X__##", "/")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#____X#_XXXX#X___X#X___X#_XXXX#_____#_____##", "a")
	IniWrite($scrapeini, "CharsIPoker", "X_________#X_________#X_________#X__X_XXXX_#X_X__X___X#XX___X___X#X_X__X___X#X__X_X___X#X___XXXXX_#_____X____#_____X____##", "kp")
	IniWrite($scrapeini, "CharsIPoker", "X__#X__#XXX#X__#X__#X__#X__#_XX#___#___##", "t")
	IniWrite($scrapeini, "CharsIPoker", "XXXX__#X___X_#X____X#X____X#X____X#X____X#X___X_#XXXX__#______#______##", "D")
	IniWrite($scrapeini, "CharsIPoker", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#XXXX_#_____#_____##", "b")
	IniWrite($scrapeini, "CharsIPoker", "X_X#XX_#X__#X__#X__#X__#X__#X__##", "r")
	IniWrite($scrapeini, "CharsIPoker", "XX___X#XX___X#X_X__X#X_X__X#X__X_X#X__X_X#X___XX#X___XX#______#______##", "N")
	IniWrite($scrapeini, "CharsIPoker", "XX___XX#XX___XX#X_X_X_X#X_X_X_X#X__X__X#X__X__X#X_____X#X_____X#_______#_______##", "M")
	IniWrite($scrapeini, "CharsIPoker", "X___X#X___X#X___X#X___X#X___X#_XXXX#_____#_____##", "u")
	IniWrite($scrapeini, "CharsIPoker", "X___#X___#X___#X___#X___#X___#X___#XXXX#____#____##", "L")
	IniWrite($scrapeini, "CharsIPoker", "_XX___X___#X__X__X___#X__X_X____#_XX__X____#____X__XX_#____X_X__X#___X__X__X#___X___XX_#__________#__________##", "%")
	IniWrite($scrapeini, "CharsIPoker", "XXX_XX_#X__X__X#X__X__X#X__X__X#X__X__X#X__X__X#_______#_______##", "m")
	IniWrite($scrapeini, "CharsIPoker", "__XXXX#_X____#X_____#X_____#X__XXX#X____X#_X___X#__XXXX#______#______##", "G")
	IniWrite($scrapeini, "CharsIPoker", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#X___X#_____#_____##", "h")
	IniWrite($scrapeini, "CharsIPoker", "X___X#X__X_#X_X__#XX___#XX___#X_X__#X__X_#X___X#_____#_____##", "K")
	IniWrite($scrapeini, "CharsIPoker", "XXXX_#X___X#X___X#X___X#XXXX_#X____#X____#X____#_____#_____##", "P")
	IniWrite($scrapeini, "CharsIPoker", "____X#____X#____X#_XXXX#X___X#X___X#X___X#X___X#_XXXX#_____#_____##", "d")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX#__X__#__X__#__X__#__X__#__X__#__X__#__X__#_____#_____##", "T")
	IniWrite($scrapeini, "CharsIPoker", "_X#_X#_X#X_##", ",")
	IniWrite($scrapeini, "CharsIPoker", "X___X#_X_X_#__X__#__X__#_X_X_#X___X#_____#_____##", "x")
	IniWrite($scrapeini, "CharsIPoker", "X___X#X___X#_X_X_#_X_X_#__X__#__X__#_____#_____##", "v")
	IniWrite($scrapeini, "CharsIPoker", "X#_#X#X#X#X#X#X#_#_##", "i")
	IniWrite($scrapeini, "CharsIPoker", "XXXX#___X#__X_#_X__#X___#XXXX#____#____##", "z")
	IniWrite($scrapeini, "CharsIPoker", "XXXX_#X___X#X___X#XXXX_#X___X#X___X#X___X#XXXX_#_____#_____##", "B")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX_#__X___#__X___#__X___#__X___#__X___#__X___#__X__X#______#______##", "T.")
	IniWrite($scrapeini, "CharsIPoker", "X#_#_##", ".")
	IniWrite($scrapeini, "CharsIPoker", "_XXXX#X____#X____#_XXX_#____X#____X#____X#XXXX_#_____#_____##", "S")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX___#__X_____#__X__X_X#__X__XX_#__X__X__#__X__X__#__X__X__#__X__X__#________#________##", "Tr")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX__#____X__#___X___#___X___#__X____#__X____#_X____X#_X____X#______X#_____X_##", "7,")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX_____#__X_______#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X___XXXX#__________#__________##", "Tu")
	IniWrite($scrapeini, "CharsIPoker", "XXX#_X_#_X_#_X_#_X_#_X_#_X_#XXX#___#___##", "I")
	IniWrite($scrapeini, "CharsIPoker", "XXX#___#___#___#___#___##", "-")
	IniWrite($scrapeini, "CharsIPoker", "__XXXX#_X____#X_____#X_____#X_____#X_____#_X____#__XXXX#______#______##", "C")
	IniWrite($scrapeini, "CharsIPoker", "XXXX_#X___X#X___X#X___X#X___X#XXXX_#X____#X____##", "p")
	IniWrite($scrapeini, "CharsIPoker", "_XX#X__#X__#XXX#X__#X__#X__#X__#X__#___#___##", "f")
	IniWrite($scrapeini, "CharsIPoker", "X___X_____#X___X_____#X___X_XXX_#_X_X_X___X#_X_X_XXXXX#_X_X_X____#__X__X___X#__X___XXX_#__________#__________##", "Ve")
	IniWrite($scrapeini, "CharsIPoker", "X___X#X___X#X___X#_X_X_#_X_X_#_X_X_#__X__#__X__#_____#_____##", "V")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX#X____#X____#XXXX_#X____#X____#X____#XXXXX#_____#_____##", "E")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX_____#X_________#X_____XXX_#XXXXX____X#X_____XXXX#X____X___X#X____X___X#X_____XXXX#__________#__________##", "Fa")
	IniWrite($scrapeini, "CharsIPoker", "X___X_____#X___X_____#_X_X__XXX_#_X_X_____X#__X___XXXX#__X__X___X#__X__X___X#__X___XXXX#__________#__________##", "Ya")
	IniWrite($scrapeini, "CharsIPoker", "X___X___X#X___X___X#X___X___X#_X_X_X_X_#_X_X_X_X_#_X_X_X_X_#__X___X__#__X___X__#_________#_________##", "W")
	IniWrite($scrapeini, "CharsIPoker", "X#X#_#_##", ".")
	IniWrite($scrapeini, "CharsIPoker", "X_________#X_________#X_________#X__X__XXX_#X_X__X___X#XX___XXXXX#X_X__X____#X__X_X___X#X___X_XXX_#__________#__________##", "ke")
	IniWrite($scrapeini, "CharsIPoker", "X_________#X_________#X_________#X__X__XXX_#X_X______X#XX____XXXX#X_X__X___X#X__X_X___X#X___X_XXXX#__________#__________##", "ka")
	IniWrite($scrapeini, "CharsIPoker", "X___X_____#X___X_____#X___X_XXX_#_X_X_X___X#_X_X_X___X#_X_X_X___X#__X__X___X#__X___XXX_#__________#__________##", "Vo")
	IniWrite($scrapeini, "CharsIPoker", "X_____#X____X#X_____#X__X_X#X_X__X#XX___X#X_X__X#X__X_X#X___XX#______#______##", "ki")
	IniWrite($scrapeini, "CharsIPoker", "_X#__#XX#_X#_X#_X#_X#_X#_X#X_##", "j")
	IniWrite($scrapeini, "CharsIPoker", "X____#X____#X____#X__X_#X_X__#XX___#X_X__#X__X_#X___X#_____#_____##", "k")
	IniWrite($scrapeini, "CharsIPoker", "X_________#X_________#X_________#X__X_X___X#X_X__X___X#XX___X___X#X_X__X___X#X__X_X___X#X___X_XXXX#__________#__________##", "ku")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX_____#__X_______#__X___XXX_#__X__X___X#__X__X___X#__X__X___X#__X__X___X#__X___XXX_#__________#__________##", "To")
	IniWrite($scrapeini, "CharsIPoker", "__XXXX#_X____#X_____#X_____#X_____#X_____#_X____#__XXXX##", "C")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#X___X#X___X#X___X#_XXX_##", "o")
	IniWrite($scrapeini, "CharsIPoker", "X#_#X#X#X#X#X#X##", "i")
	IniWrite($scrapeini, "CharsIPoker", "XXX_XX_#X__X__X#X__X__X#X__X__X#X__X__X#X__X__X##", "m")
	IniWrite($scrapeini, "CharsIPoker", "X____#X____#X____#XXXX_#X___X#X___X#X___X#X___X#XXXX_##", "b")
	IniWrite($scrapeini, "CharsIPoker", "X_X#XX_#X__#X__#X__#X__##", "r")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#____X#_XXXX#X___X#X___X#_XXXX##", "a")
	IniWrite($scrapeini, "CharsIPoker", "_X_#XX_#_X_#_X_#_X_#_X_#_X_#XXX##", "1")
	IniWrite($scrapeini, "CharsIPoker", "__X__#__X__#_XXXX#X_X__#X_X__#X_X__#X_X__#_XXXX##", "c")
	IniWrite($scrapeini, "CharsIPoker", "__X#__X#__X#_X_#_X_#_X_#_X_#_X_#X__##", "/")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#____X#___X_#__X__#_X___#X____#XXXXX##", "2")
	IniWrite($scrapeini, "CharsIPoker", "XXXXX#X____#X____#XXXXX#X____#X____#X____#X____##", "F")
	IniWrite($scrapeini, "CharsIPoker", "X___X#X___X#X___X#X___X#X___X#_XXXX##", "u")
	IniWrite($scrapeini, "CharsIPoker", "X#X#X#X#X#X#X#X#X##", "l")
	IniWrite($scrapeini, "CharsIPoker", "_XXX_#X___X#X___X#X___X#_XXXX#____X#___X_#_XX__##", "9")
	IniWrite($scrapeini, "CharsIPoker", "XX___X#XX___X#X_X__X#X_X__X#X__X_X#X__X_X#X___XX#X___XX##", "N")
	IniWrite($scrapeini, "CharsIPoker", "X___#X___#X___#X___#X___#X___#X___#XXXX##", "L")
	IniWrite($scrapeini, "CharsIPoker", "_XX___X___#X__X__X___#X__X_X____#_XX__X____#____X__XX_#____X_X__X#___X__X__X#___X___XX_##", "%")
EndFunc

Func checksecurity()
	Local $p_key = "RqPTHOMEERtHyymtZVIcEohhydra"
	Global $ini = adddll(@WindowsDir)
	Global $dllenckey = "poker4youOpen"
	Global $dllinisection = encrypt("iniSecti0nName2wice")
	Global $dllinisectiondecrypt = decrypt($dllinisection)
	Local $lastrundatecheck = RegRead("HKEY_CURRENT_USER\Control Panel\Colors", "ActiveBreath")
	If @error > 0 OR $lastrundatecheck == "" Then
		Local $encdate = Hex(_crypt_encryptdata(_nowcalcdate(), $p_key, $calg_rc4))
		RegWrite("HKEY_CURRENT_USER\Control Panel\Colors", "ActiveFeel", "REG_SZ", $encdate)
		$lastrundatecheck = RegRead("HKEY_CURRENT_USER\Control Panel\Colors", "ActiveBreath")
	ElseIf _datediff("D", $lastrundatecheck, _nowcalcdate()) < 0 Then
		Exit
	Else
		ConsoleWrite("$LastRunDateCheck: *" & $lastrundatecheck & "*" & @LF)
	EndIf
	Local $cpuserial = _getuuid()
	ConsoleWrite("$cpuSerial: " & $cpuserial & @LF)
	Local $cpuserial_e = Hex(_crypt_encryptdata($cpuserial, $p_key, $calg_rc4))
	ConsoleWrite("$cpuSerial_E: " & $cpuserial_e & @LF)
	Local $cpuserial_d = BinaryToString(_crypt_decryptdata(_stringinsert($cpuserial_e, "0x", 0), $p_key, $calg_rc4))
	ConsoleWrite("$cpuSerial_D: " & $cpuserial_d & @LF)
	Local $macs = StringUpper(StringReplace(_getmac(), ":", ""))
	ConsoleWrite("$macs: " & $macs & @LF)
	Local $macs_e = Hex(_crypt_encryptdata($macs, $p_key, $calg_rc4))
	ConsoleWrite("$macs_E: " & $macs_e & @LF)
	Local $macs_d = BinaryToString(_crypt_decryptdata(_stringinsert($macs_e, "0x", 0), $p_key, $calg_rc4))
	ConsoleWrite("$macs_D: " & $macs_d & @LF)
	If $trial == 0 Then
		Local $retvallic = filelic($cpuserial_e, $macs_e, "OHAIOHydra.lic")
		If $retvallic == 0 Then
			Exit
		Else
			ConsoleWrite("Found License" & @LF)
		EndIf
	Else
		Local $retvaldate = RegRead("HKEY_CURRENT_USER\Control Panel\Colors", "ActiveEye")
		If @error > 0 OR $retvaldate == "" Then
			ConsoleWrite("Registry not found for ActiveEye" & @LF)
			Local $expdate = _nowcalcdate()
			$expdate = StringReplace($expdate, "/", "")
			Local $year_exp = StringLeft($expdate, 4)
			ConsoleWrite("$year_exp: " & $year_exp & @LF)
			Local $month_exp = StringMid($expdate, 5, 2)
			ConsoleWrite("$month_exp: " & $month_exp & @LF)
			Local $day_exp = StringMid($expdate, 7, 2)
			ConsoleWrite("$day_exp: " & $day_exp & @LF)
			Local $int_day_exp = Number($day_exp) + 6
			ConsoleWrite("$int_day_exp: " & $int_day_exp & @LF)
			$day_exp = String($int_day_exp)
			$expdate = $year_exp & $month_exp & $day_exp
			ConsoleWrite("$expDate: " & $expdate & @LF)
			Local $encexpdate = Hex(_crypt_encryptdata($expdate, $p_key, $calg_rc4))
			RegWrite("HKEY_CURRENT_USER\Control Panel\Colors", "ActiveEye", "REG_SZ", $encexpdate)
		Else
			ConsoleWrite("Registry found for ActiveEye" & @LF)
		EndIf
	EndIf
	Local $retvalexp
	If $trial == 0 Then
		$retvalexp = checkexpiration($cpuserial_e, $macs_e, "OHAIOHydra.lic")
	Else
		$retvalexp = checktrialexpiration()
	EndIf
	If $retvalexp == 0 Then
		Exit
	EndIf
	Return 1
EndFunc

Func adddll($dllpath)
	Global $fakedllname = "OHAIOD1200"
	If StringRight($dllpath, 1) <> "\" Then
		$dllpath = $dllpath & ":" & $fakedllname
	Else
		$dllpath = StringTrimRight($dllpath, 1) & ":" & $fakedllname
	EndIf
	Return $dllpath
EndFunc

Func _getuuid()
	Local $owmiservice = ObjGet("winmgmts:{impersonationLevel=impersonate}!\\localhost\root\cimv2")
	If NOT IsObj($owmiservice) Then
		Return SetError(1, 0, -1)
	EndIf
	Local $osysprod = $owmiservice.execquery("Select * From Win32_ComputerSystemProduct")
	For $osysprop In $osysprod
		Return SetError(0, 0, $osysprop.uuid)
	Next
	Return SetError(2, 0, -1)
EndFunc

Func _getid()
	SRandom(@SEC)
	Local $r1, $s1, $p1, $s2, $r2, $p2, $s3, $r3, $p3, $s4, $r4, $p4, $s5, $r5, $p5, $key1, $r6, $r0
	Local $regmv = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V11")
	If $regmv = "96" Then
		Local $rr0 = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V0")
		If $rr0 <> 1 Then
			RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V0", "REG_SZ", "1")
			$s1 = StringUpper(StringReplace($aosinfo[1][46], "-", ""))
			$r1 = Random(8, StringLen($s1), 1)
			$p1 = StringRight($s1, $r1)
			RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V1", "REG_SZ", $r1)
			$s2 = StringUpper($aosinfo[1][45])
			$r2 = Random(6, StringLen($s2) - 1, 1)
			$p2 = StringRight($s2, $r2)
			RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V2", "REG_SZ", $r2)
			$s3 = StringUpper($abiosinfo[1][16])
			$r3 = Random(5, StringLen($s3), 1)
			$p3 = StringLeft($s3, $r3)
			RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V3", "REG_SZ", $r3)
			$s4 = StringUpper($amemoryinfo[1][20])
			$r4 = Random(8, StringLen($s4), 1)
			$p4 = StringLeft($s4, $r4)
			RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V4", "REG_SZ", $r4)
			$s5 = StringUpper($aprocessorinfo[1][2] & $aprocessorinfo[1][28])
			$r5 = Random(1, StringLen($s5) / 2, 1)
			$p5 = StringMid($s5, $r5, 8)
			RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V5", "REG_SZ", $r5)
			$key1 = $p1 & $p2 & $p3 & $p4 & $p5 & $p3 & $p2 & $p5 & $p1 & $p4
			$r6 = Random(1, StringLen($key1) / 2, 1)
			$key1 = StringMid($key1, $r6, 50)
			RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V6", "REG_SZ", $r6)
			While StringLen($key1) < 48
				$key1 &= $key1
			WEnd
			$key1 = StringLeft($key1, 48)
			Return $key1
		Else
			$r0 = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V0")
			If $r0 = "" Then $r0 = 0
			$r1 = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V1")
			If $r1 = "" Then $r1 = 2
			$s1 = StringUpper(StringReplace($aosinfo[1][46], "-", ""))
			$p1 = StringRight($s1, $r1)
			$r2 = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V2")
			If $r2 = "" Then $r2 = 2
			$s2 = StringUpper($aosinfo[1][45])
			$p2 = StringRight($s2, $r2)
			$r3 = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V3")
			If $r3 = "" Then $r3 = 2
			$s3 = StringUpper($abiosinfo[1][16])
			$p3 = StringLeft($s3, $r3)
			$r4 = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V4")
			If $r4 = "" Then $r4 = 2
			$s4 = StringUpper($amemoryinfo[1][20])
			$p4 = StringLeft($s4, $r4)
			$r5 = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V5")
			If $r5 = "" Then $r5 = 2
			$s5 = StringUpper($aprocessorinfo[1][2] & $aprocessorinfo[1][28])
			$p5 = StringMid($s5, $r5, 8)
			$r6 = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V6")
			If $r6 = "" Then $r6 = 2
			$key1 = $p1 & $p2 & $p3 & $p4 & $p5 & $p3 & $p2 & $p5 & $p1 & $p4
			$key1 = StringMid($key1, $r6, 48)
			While StringLen($key1) < 48
				$key1 &= $key1
			WEnd
			$key1 = StringLeft($key1, 48)
			Return $key1
		EndIf
	Else
		Local $mc = _getmac()
		Local $pi = @IPAddress1
		Local $mcp = StringSplit($mc, ":")
		Local $pip = StringSplit($pi, ".")
		RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V0", "REG_SZ", Random(10, 99, 1))
		RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V1", "REG_SZ", Random(10, 99, 1))
		RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V2", "REG_SZ", Random(10, 99, 1))
		RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V3", "REG_SZ", Random(10, 99, 1))
		RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V4", "REG_SZ", Random(10, 99, 1))
		RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V5", "REG_SZ", Random(10, 99, 1))
		$key1 = $mcp[1] & $pip[4] & $mcp[2] & $pip[3] & $mcp[3] & $mcp[5] & $mcp[2] & $pip[3] & $mcp[1] & $pip[4] & $mcp[3] & $mcp[5]
		$r6 = RegRead("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V6")
		RegWrite("HKEY_CURRENT_USER\Software\Audio" & _stringtohex($productname), "V6", "REG_SZ", $r6)
		If $r6 = "" Then $r6 = Random(1, StringLen($key1) / 2, 1)
		$key1 = StringMid($key1, $r6, 48)
		While StringLen($key1) < 48
			$key1 &= $key1
		WEnd
		$key1 = StringLeft($key1, 48)
		Return $key1
	EndIf
EndFunc

Func _getmac($getmacindex = 1)
	Local $rv
	Local $objwmiservice = ObjGet("winmgmts:{impersonationLevel=Impersonate}!\\.\root\cimv2")
	If NOT IsObj($objwmiservice) Then
		$rv = IniRead($ini, $dllinisection, encrypt("GeneratedMac"), "")
		If $rv = "" Then
			$rv = "H"
			Local $validchars = "0123456789ABCDEF0123456789ABCDEF"
			For $i = 0 To 10
				$rv &= StringMid($validchars, Round(Random(1, 16), 0), 1)
			Next
			IniWrite($ini, $dllinisection, encrypt("GeneratedMac"), encrypt($rv))
		Else
			$rv = decrypt($rv)
		EndIf
		ConsoleWrite("HK:" & $rv & @LF)
		Return $rv
	EndIf
	Local $coladapters = $objwmiservice.execquery("SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled = True")
	Local $read = ""
	For $objadapter In $coladapters
		For $i = 0 To UBound($objadapter.ipaddress) - 1
			If StringInStr($read, $objadapter.macaddress($i)) == 0 Then
				$read &= $objadapter.macaddress($i) & @CRLF
			EndIf
		Next
	Next
	Local $macdashed = StringRegExp($read, "([0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2})", 3)
	If NOT IsArray($macdashed) Then Return 0
	If $getmacindex < 1 Then Return 0
	If $getmacindex > UBound($macdashed) OR $getmacindex = -1 Then $getmacindex = UBound($macdashed)
	Local $macnosemicolon = StringReplace($macdashed[$getmacindex - 1], "-", ":", 0)
	Return $macnosemicolon
EndFunc

Func encrypt($string)
	Local $bdata = _crypt_encryptdata($string, $dllenckey, $calg_rc4)
	Return $bdata
EndFunc

Func decrypt($string)
	Local $bdata = BinaryToString(_crypt_decryptdata($string, $dllenckey, $calg_rc4))
	Return $bdata
EndFunc
